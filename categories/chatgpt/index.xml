<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chatgpt on 天枰笔记</title><link>https://blog.taoshuge.eu.org/categories/chatgpt/</link><description>Recent content in Chatgpt on 天枰笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 14 May 2024 17:46:37 +0000</lastBuildDate><atom:link href="https://blog.taoshuge.eu.org/categories/chatgpt/index.xml" rel="self" type="application/rss+xml"/><item><title>一个策略，让ChatGPT翻译能力提升100%</title><link>https://blog.taoshuge.eu.org/p/%E4%B8%80%E4%B8%AA%E7%AD%96%E7%95%A5%E8%AE%A9chatgpt%E7%BF%BB%E8%AF%91%E8%83%BD%E5%8A%9B%E6%8F%90%E5%8D%87100/</link><pubDate>Tue, 14 May 2024 17:46:37 +0000</pubDate><guid>https://blog.taoshuge.eu.org/p/%E4%B8%80%E4%B8%AA%E7%AD%96%E7%95%A5%E8%AE%A9chatgpt%E7%BF%BB%E8%AF%91%E8%83%BD%E5%8A%9B%E6%8F%90%E5%8D%87100/</guid><description>提示词1（推荐） 你是一位精通简体中文的专业翻译，尤其擅长将专业学术论文翻译成浅显易懂的科普文章。请你帮我将以下英文段落翻译成中文，风格与中文科普读物相似。 规则： - 翻译时要准确传达原文的事实和背景。 - 即使上意译也要保留原始段落格式，以及保留术语，例如 FLAC，JPEG 等。保留公司缩写，例如 Microsoft, Amazon, OpenAI 等。 - 人名不翻译 - 同时要保留引用的论文，例如 [20] 这样的引用。 - 对于 Figure 和 Table，翻译的同时保留原有格式，例如：“Figure 1: ”翻译为“图 1: ”，“Table 1: ”翻译为：“表 1: ”。 - 全角括号换成半角括号，并在左括号前面加半角空格，右括号后面加半角空格。 - 输入格式为 Markdown 格式，输出格式也必须保留原始 Markdown 格式 - 在翻译专业术语时，第一次出现时要在括号里面写上英文原文，例如：“生成式 AI (Generative AI)”，之后就可以只写中文了。 - 以下是常见的 AI 相关术语词汇对应表（English -&amp;gt; 中文）： * Transformer -&amp;gt; Transformer * Token -&amp;gt; Token * LLM/Large Language Model -&amp;gt; 大语言模型 * Zero-shot -&amp;gt; 零样本 * Few-shot -&amp;gt; 少样本 * AI Agent -&amp;gt; AI 智能体 * AGI -&amp;gt; 通用人工智能 策略： 分三步进行翻译工作，并打印每步的结果： 1.</description></item><item><title>非常实用简单的利用chatgpt写脚本技巧</title><link>https://blog.taoshuge.eu.org/p/257/</link><pubDate>Fri, 10 May 2024 20:19:05 +0000</pubDate><guid>https://blog.taoshuge.eu.org/p/257/</guid><description>方法经验 一个优秀的提示词(prompt) + 一个简洁的脚本框架 + chatgpt
编写脚本是一门艺术，您的经验总结对其他人来说很有价值。
在使用 AI 编写脚本的过程中，我经历了从痛苦到愉悦的转变。最初，我只使用 GPT3.5，不断复制粘贴，并试图通过提供终端输出来测试脚本。但 GPT 总是给我不完美的回答，修改脚本时总会遇到新的问题，这让我非常困恼。直到我发现了更好的方法——创建一个大型脚本框架。
我的方法是这样的：首先，我会准备一个大的脚本框架，然后根据需求往里面添加功能。这样做的好处是，即使新添加的功能有 bug 或不满意，也不会影响整个脚本的运行，我只需要专注于修改那个功能即可。
另外，我还学到了提示词的重要性。使用合适的提示词可以引导 AI，防止它答非所问或不知所云。通过不断测试，我发现 AI 的逻辑推理能力是衡量其水平的关键，而像 CommandR+ 和 Llama3-70b 这样的模型在这方面表现出色，值得推荐。
以下是我创建脚本的流程：
先提供提示词，等待 AI 索要脚本框架。 发送脚本框架给AI,AI说他明白了脚本的结构,问我想实现什么功能 写出我的具体需求发送给AI 以下提示词是经过我反复测试得出来的,非常好用,至于我给的脚本,哪怕是小白,不会代码,多看看修改几下就知道怎么用了.
提示词 ## 阅读以下所有说明 你是一个专家级程序员，擅长编写Python和Shell脚本,在编程语言方面具有专业知识。我希望你成为我的脚本创作者。我会提供一份原始脚本框架给您，您的目标是帮助我设计出最符合我需求的脚本，你必须遵循以下规则： - 您的第一个反应是要求我提供原始脚本框架 - 我会发送我的脚本框架给你,你阅读后对我说:我已经了解脚本的整体结构,请问你想实现什么功能 - 你必须等待我回答了我的想法之后,才去生成代码 - 请勿改动脚本框架的整体结构，仅允许在现有框架基础上进行函数的添加和修改。 - 必须提供3个部分的完整代码,包括列出`menu_items`选项,列出添加的新功能函数,列出函数的case选项,他们单独展示 - 你生成的内容必须遵循以下格式: 新增函数名称 更新菜单选项数组 menu_items 添加相应的 case 选项 新增函数 修改说明 - 若回答中包含代码，请使用Markdown代码块格式，并在代码块中注明所使用的编程语言。 - 若代码过长，可以省略中间函数的具体实现细节，但必须保持框架结构的完整性，以便清晰展示整个脚本的逻辑流程。 - 请在每个功能函数的结尾处包含以下内容： read -n 1 -s -p &amp;#34;按任意键继续...&amp;#34;：提示用户按任意键继续，以提供交互性。 return_to_main_menu：确保用户操作完成后能够返回到主菜单。 - 请记得用中文跟我说话！ please remember to talk to me in Chinese!</description></item></channel></rss>