<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>建站 on Lufei's blog</title><link>https://blog.99bilibili.eu.org/categories/%E5%BB%BA%E7%AB%99/</link><description>Recent content in 建站 on Lufei's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 28 Mar 2024 15:40:56 +0000</lastBuildDate><atom:link href="https://blog.99bilibili.eu.org/categories/%E5%BB%BA%E7%AB%99/index.xml" rel="self" type="application/rss+xml"/><item><title>robots规则以及阻止垃圾爬虫</title><link>https://blog.99bilibili.eu.org/p/215/</link><pubDate>Thu, 28 Mar 2024 15:40:56 +0000</pubDate><guid>https://blog.99bilibili.eu.org/p/215/</guid><description>User-agent: * Crawl-delay: 10 Disallow: /wp-admin/ Disallow: /go/ Disallow: /wp-content/plugins/ Disallow: /?s=* Disallow: /author/ Disallow: /astra-advanced-hook/ Disallow: /theme Disallow: /demo/* Disallow: /*/page/* Disallow: /*blackhole Disallow: /?blackhole Allow: /wp-admin/admin-ajax.php User-agent: YandexBot Disallow: / User-agent: DotBot Disallow: / User-agent: AhrefsBot Disallow: / User-agent: Googlebot Disallow: / User-agent: BLEXBot Disallow: / User-agent: YaK Disallow: / User-agent: PetalBot Disallow: / User-agent: MJ12bot Disallow: / Sitemap: https://www.xxx.com/sitemap.xml</description></item><item><title>利用免费GitHub私人仓库：定时备份网站数据</title><link>https://blog.99bilibili.eu.org/p/%E5%88%A9%E7%94%A8%E5%85%8D%E8%B4%B9github%E7%A7%81%E4%BA%BA%E4%BB%93%E5%BA%93%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD%E7%BD%91%E7%AB%99%E6%95%B0%E6%8D%AE/</link><pubDate>Tue, 05 Sep 2023 14:32:24 +0000</pubDate><guid>https://blog.99bilibili.eu.org/p/%E5%88%A9%E7%94%A8%E5%85%8D%E8%B4%B9github%E7%A7%81%E4%BA%BA%E4%BB%93%E5%BA%93%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD%E7%BD%91%E7%AB%99%E6%95%B0%E6%8D%AE/</guid><description>随着GitHub被微软收购后，私人仓库已经变得免费，为我们提供了一个无限的创造空间。现在，我们可以尽情发挥其潜力，将其用于定时备份网站和服务器重要数据，确保数据安全与可靠性。
教程 首先你肯定需要一个Github账号，没有的可以去注册一个，地址：https://github.com。有了账号就继续看。
1、配置Git SSH密钥 由于本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以必须要让github仓库认证你SSH key，在操作之前，需要先在服务器上生成SSH key。
设置github 用户名和邮箱
git config --global user.name &amp;#34;name&amp;#34; git config --global user.email &amp;#34;xxxx@qq.com&amp;#34; 我们先去根目录下使用命令：
cd ~ ssh-keygen -t rsa 这里会要你命名密钥名称(建议使用默认名称)，然后连续按几次Enter，这时候会在/root/.ssh文件夹生成2个ssh密钥，然后我们查看公钥id_rsa.pub。
cat ~/.ssh/id_rsa.pub 查看后，再复制下公钥 打开Github官网，进入https://github.com/settings/ssh/new， Title随意，然后Key填入刚刚复制的公钥，最后点击Add SSH Key添加即可。 2、建立私人仓库 我们需要先访问https://github.com/new，新建一个仓库用来存放备份文件，名称自己随意，记得下面一定要勾选Private，也就是私人仓库。
3、配置本地仓库 进入需要备份的文件夹，比如/www/wwwroot/lala，也就是把该文件夹设定为本地仓库，使用命令：
#进入需要备份的文件夹 cd /www/wwwroot/lala #初始化你的github仓库 git init #关联到远程github仓库 git remote add origin git@github.com:Blichus/back_website.git 如果已经备份过了,拉取github仓库代码到服务器 (关联远程github仓库后)
git pull origin master 4、初次备份 #进入备份的文件夹 cd /www/wwwroot/lala #把目录下所有文件更改状况提交到暂存区，包括增，删，改。 git add -A #提交更改的说明，说明随意了，这里为backsite git commit -m &amp;#34;backsite&amp;#34; #开始推送到Github git push -u origin master 推送的时候可能会警告提示:</description></item><item><title>1Panel 是新一代的 Linux 服务器运维管理面板</title><link>https://blog.99bilibili.eu.org/p/1panel-%E6%98%AF%E6%96%B0%E4%B8%80%E4%BB%A3%E7%9A%84-linux-%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E9%9D%A2%E6%9D%BF/</link><pubDate>Mon, 14 Aug 2023 04:27:00 +0000</pubDate><guid>https://blog.99bilibili.eu.org/p/1panel-%E6%98%AF%E6%96%B0%E4%B8%80%E4%BB%A3%E7%9A%84-linux-%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E9%9D%A2%E6%9D%BF/</guid><description>在线安装 1 环境要求 安装前请确保您的系统符合安装条件：
操作系统：支持主流 Linux 发行版本（基于 Debian / RedHat，包括国产操作系统）； 服务器架构：x86_64、aarch64、armv7l、ppc64le、s390x； 内存要求：建议可用内存在 1GB 以上； 浏览器要求：请使用 Chrome、FireFox、IE10+、Edge等现代浏览器； 可访问互联网。 2 安装部署 GitHub release 链接: https://github.com/1Panel-dev/1Panel/releases
更多信息请查阅在线文档：https://1panel.cn/docs/
RedHat / CentOS
curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;amp;&amp;amp; sh quick_start.sh ubuntu
curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;amp;&amp;amp; sudo bash quick_start.sh debian
curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;amp;&amp;amp; bash quick_start.sh 安装成功后，控制台会打印面板访问信息，可通过浏览器访问 1Panel：
http://目标服务器 IP 地址:目标端口/安全入口
如果使用的是云服务器，请至安全组开放目标端口。 ssh 登录 1Panel 服务器后，执行 1pctl user-info 命令可获取安全入口（entrance） 安装成功后，可使用 1pctl 命令行工具来维护 1Panel</description></item><item><title>利用Github Page和Github Action部署你的Hugo博客</title><link>https://blog.99bilibili.eu.org/p/%E5%88%A9%E7%94%A8github-page%E5%92%8Cgithub-action%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84hugo%E5%8D%9A%E5%AE%A2/</link><pubDate>Thu, 03 Aug 2023 15:05:36 +0000</pubDate><guid>https://blog.99bilibili.eu.org/p/%E5%88%A9%E7%94%A8github-page%E5%92%8Cgithub-action%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84hugo%E5%8D%9A%E5%AE%A2/</guid><description>🍕利用Github Page和Github Action部署你的Hugo博客 🍔注册GitHub 打开https://github.com/,(打不开的可能需要魔法,或者换个时间点打开,具体怎么操作就不细说了,懂得都懂😶),注册一个GitHub账号,如果不会注册那你还来看这篇文章干嘛.
🧀创建Github仓库 为了使用GitHub Action自动部署,加上便于管理,所以创建两个仓库,虽然一个也行.
1.我们先创建一个名字为blog的仓库用于存放hugo生成的文件,打开右上角的+号,然后选择New repository以新建仓库
2.跟着图片里的步骤操作,先给仓库取个名字,叫做blog(小白最好将仓库名字跟我起一样的),然后勾选public,接着勾选Add a REAMME file,最后点击Create repository完成创建.
3.接下来我们按照刚才那样依葫芦画瓢,再创建一个名为blog-file的仓库
🍦获取SSH Key密钥 ssh密钥可以是我们推送文件到仓库时不需要每次都输入密码,大大的提高我们的效率.所以我们首先需要在我们的电脑生成ssh密钥
1.在git bash执行以下指令,配置邮箱和用户名
git config --global user.email &amp;#34;you@example.com&amp;#34; #you@example.com替换为你的邮箱并回车 git config --global user.name &amp;#34;Your Name&amp;#34; #Your Name替换为你的名字并回车 Copy
2.生成shh key,在git bash中 输入以下命令
ssh-keygen -t rsa Copy
一路回车就行
默认会生成在如下目录
C:\Users\用户名\.ssh Copy
用记事本打开生成目录下id_rsa.pub,其中的内容即为公钥,id_rsa即为私钥.这两个待会要用到.
3.将将公钥配置到GitHub账户中,先打开设置,即Settings
进入SSH and GPG key配置项里,点击SSH keys下的New SHH key进行添加
4.然后随便在Title项里随便起一个名字,在Key里填入刚才得到的id_rsa.pub里的内容,然后点击Add SSH key就添加好了.
5.接下来我们需要往刚才创建的名为blog-file的仓库里添加id_rsa密钥,点击Settings,然后找到Secrets and variables,点击Actions,然后点击New repository secret，在Name里填入ACTIONS_DEPLOY_KEY，在Value里填入id_rsa密钥即可。
🍚部署hugo博客 1.接下来我们在我们的博客根目录下创建一个名为.github的文件夹,然后在文件夹里新建一个新的文件夹,名字为workflows,接着进入workflows文件夹里新建一个名为deploy.xml的文件,再在deploy.xml里填入如下内容,最终目录为~\blog\.github\workflows\deploy.xml,将deploy.xml中的external_repository项里的lin-snow改为你GitHub注册时的名字即可
name: GitHub Page on: push: branches: - main # main 更新触发 jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: submodules: true # clone submodules fetch-depth: 0 # 克隆所有历史信息 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: &amp;#34;0.</description></item><item><title>可能是最快的独角数卡发卡网搭建教程</title><link>https://blog.99bilibili.eu.org/p/%E5%8F%AF%E8%83%BD%E6%98%AF%E6%9C%80%E5%BF%AB%E7%9A%84%E7%8B%AC%E8%A7%92%E6%95%B0%E5%8D%A1%E5%8F%91%E5%8D%A1%E7%BD%91%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</link><pubDate>Sun, 30 Jul 2023 15:06:40 +0000</pubDate><guid>https://blog.99bilibili.eu.org/p/%E5%8F%AF%E8%83%BD%E6%98%AF%E6%9C%80%E5%BF%AB%E7%9A%84%E7%8B%AC%E8%A7%92%E6%95%B0%E5%8D%A1%E5%8F%91%E5%8D%A1%E7%BD%91%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</guid><description>独角数卡是一款卡密销售系统,他依赖 mysql 和 redis ，按部就班的装是没问题的，因为作者提供的文档还挺强大，佩服! 这里主要怎么五分钟无痛的安装好它，
主要参考了一位大佬的docker镜像 https://blog.dov.moe/posts/49102/
啰嗦两句，这个镜像比官方推荐那个镜像要好，官方那个docker是半吊子的，还需要装mysql和redis
相关地址 GitHub 官方仓库：https://github.com/assimon/dujiaoka
Docker 镜像地址：https://hub.docker.com/r/stilleshan/dujiaoka （同时支持 X86 和 ARM 架构）来自：Stille 大佬
常见问题集锦：https://github.com/assimon/dujiaoka/wiki/problems
1. 首先安装docker curl -fsSL https://get.docker.com | sh curl -L &amp;#34;https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)&amp;#34; -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose 2. 安装部署独角数卡 1. 创建安装目录 sudo -i mkdir -p /root/data/docker_data/shop cd /root/data/docker_data/shop mkdir storage uploads chmod -R 777 storage uploads # 创建数据目录用于挂载 touch env.conf chmod -R 777 env.conf 这边我们直接用 docker 的方式安装。
vim docker-compose.yml 英文输入法下，按 i</description></item><item><title>最新Linux一键重装脚本，迄今为止功能最全，最好用的脚本</title><link>https://blog.99bilibili.eu.org/p/%E6%9C%80%E6%96%B0linux%E4%B8%80%E9%94%AE%E9%87%8D%E8%A3%85%E8%84%9A%E6%9C%AC%E8%BF%84%E4%BB%8A%E4%B8%BA%E6%AD%A2%E5%8A%9F%E8%83%BD%E6%9C%80%E5%85%A8%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84%E8%84%9A%E6%9C%AC/</link><pubDate>Sun, 30 Jul 2023 14:23:45 +0000</pubDate><guid>https://blog.99bilibili.eu.org/p/%E6%9C%80%E6%96%B0linux%E4%B8%80%E9%94%AE%E9%87%8D%E8%A3%85%E8%84%9A%E6%9C%AC%E8%BF%84%E4%BB%8A%E4%B8%BA%E6%AD%A2%E5%8A%9F%E8%83%BD%E6%9C%80%E5%85%A8%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84%E8%84%9A%E6%9C%AC/</guid><description>&lt;p>整理记录最新Linux一键重装支持Debian 12，迄今为止功能最全，最好用的脚本&lt;/p></description></item><item><title>vercel部署hugo记录配置</title><link>https://blog.99bilibili.eu.org/p/vercel%E9%83%A8%E7%BD%B2hugo%E8%AE%B0%E5%BD%95%E9%85%8D%E7%BD%AE/</link><pubDate>Sat, 29 Jul 2023 16:19:18 +0000</pubDate><guid>https://blog.99bilibili.eu.org/p/vercel%E9%83%A8%E7%BD%B2hugo%E8%AE%B0%E5%BD%95%E9%85%8D%E7%BD%AE/</guid><description>构建和开发设置 在新项目中使用框架时，系统会自动检测到该框架。因此，会自动配置多个项目设置，以达到最佳效果。你可以在下面覆盖它们。
环境变量 为了在构建和运行时为您的部署提供环境变量，您可以在这里为您选择的环境输入环境变量。
指定hugo版本</description></item><item><title>Hugo使用Shortcode插入bilibili、Youtube视频</title><link>https://blog.99bilibili.eu.org/p/hugo%E4%BD%BF%E7%94%A8shortcode%E6%8F%92%E5%85%A5bilibiliyoutube%E8%A7%86%E9%A2%91/</link><pubDate>Sat, 29 Jul 2023 15:18:42 +0000</pubDate><guid>https://blog.99bilibili.eu.org/p/hugo%E4%BD%BF%E7%94%A8shortcode%E6%8F%92%E5%85%A5bilibiliyoutube%E8%A7%86%E9%A2%91/</guid><description>前言 使用个人博客也有一年多的时间，这一年多的时候踩了很多坑，也学到了很多知识。 这里分享一个系列教程：从零开始搭建个人博客，把我的经验分享在这里。
Shortcodes是什么 shortcode 可以理解为HTML模版，可以很方便的支持markdown里面写一行规定格式的代码，能用shortcode里面的模版替换成对应的HTML文件，然后就把这段HTML代码添加到编译之后的HTML文件中。
Hugo shortcode
//注：去掉@，我这里是为了防止自动编译
{@{&amp;lt; name parameter1 parameter2 &amp;gt;}}
然后在你的主题的layouts/shortcodes 会自动找 名字为 name.html的文件，就把参数的值替换到html中，得到一个最终的html信息。
shortcode可以很方便的做复用，可以让你在每个markdown文件里面添加很少的内容，通常是一行代码，就能生成一个通用的HTML片段。
使用Shortcode，我们就能很方便的通过一行简单的代码来插入B站或者Youtube视频。
插入视频 我们就教大家怎么在Hugo中嵌入Bilibili视频和Youtube视频，这样当别人访问你的个人博客网站的时候，可以直接点击播放你插入的视频，还可以自动跳转到你的自媒体平台播放视频，来给你的自媒体平台引流。
1. 嵌入Bilibili视频 在hugo网站目录你使用的主题目录下themes/{your theme name}/layouts/shortcodes中创建bilibili.html文件。
&amp;lt;!DOCTYPE HTML&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;!-- style 样式 是为了让网页上的视频框按比例显示而非固定的大小 --&amp;gt; &amp;lt;style type=&amp;#34;text/css&amp;#34;&amp;gt; .aspect-ratio { position: relative; width: 100%; height: 0; padding-bottom: 75%; } .aspect-ratio iframe { position: absolute; width: 100%; height: 100%; left: 0; top: 0; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;#34;aspect-ratio&amp;#34;&amp;gt; &amp;lt;iframe src=&amp;#34;https://player.bilibili.com/player.html?bvid={{.Get 0 }}&amp;amp;page={{ if .</description></item><item><title>hugo部署twikoo评论</title><link>https://blog.99bilibili.eu.org/p/hugo%E9%83%A8%E7%BD%B2twikoo%E8%AF%84%E8%AE%BA/</link><pubDate>Fri, 28 Jul 2023 17:26:55 +0000</pubDate><guid>https://blog.99bilibili.eu.org/p/hugo%E9%83%A8%E7%BD%B2twikoo%E8%AF%84%E8%AE%BA/</guid><description>1.申请 envId 请看 twikoo 官方文档，我选的是 vercel 部署方式，视频教程：Twikoo Vercel 部署教程
2.添加代码 Hugo 的 PaperMod 主题添加 twikoo 代码的位置：layouts/partials/comments.html 推荐添加在自己博客站点下的 layouts 文件夹，不要添加到主题里的 layouts 文件夹，否则更新主题时会被覆盖
&amp;lt;div&amp;gt; &amp;lt;div class=&amp;#34;pagination__title&amp;#34;&amp;gt; &amp;lt;span class=&amp;#34;pagination__title-h&amp;#34; style=&amp;#34;font-size: 20px;&amp;#34;&amp;gt;💬评论&amp;lt;/span&amp;gt; &amp;lt;hr /&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div id=&amp;#34;tcomment&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34; https://cdn.staticfile.org/twikoo/ {{ .Site.Params.twikoo.version }} /twikoo. All. Min. Js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; Twikoo.Init ({ EnvId: &amp;#34;&amp;#34;, //这里填写自己的 envId el: &amp;#34; #tcomment &amp;#34;, Lang: &amp;#39;zh-CN&amp;#39;, Region: &amp;#39;ap-guangzhou&amp;#39;, //我的区域是广州，可以不填，默认是 ap-shanghai Path: window. TWIKOO_MAGIC_PATH||window. Location. Pathname, }); &amp;lt;/script&amp;gt; &amp;lt;/div&amp;gt; 调用上述 twikoo 代码的位置：layouts/_default/single.</description></item><item><title>博客写作流程之工具篇</title><link>https://blog.99bilibili.eu.org/p/%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C%E6%B5%81%E7%A8%8B%E4%B9%8B%E5%B7%A5%E5%85%B7%E7%AF%87/</link><pubDate>Fri, 28 Jul 2023 15:42:11 +0000</pubDate><guid>https://blog.99bilibili.eu.org/p/%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C%E6%B5%81%E7%A8%8B%E4%B9%8B%E5%B7%A5%E5%85%B7%E7%AF%87/</guid><description>本文将对我个人的博文写作流程 所用到的工具 做一个总结与分享。从标题就可以看出来，主要有这几个工具： emacs, orgmode &amp;amp; hugo ，另外还有两个配合 hugo 的辅助包 easy-hugo （可选） &amp;amp; ox-hugo 。
hugo : https://gohugo.io/ orgmode : https://orgmode.org/ ox-hugo : https://ox-hugo.scripter.co/ easy-hygo : https://github.com/masasam/emacs-easy-hugo 自问自答 问： 为什么写这篇文章？ 答： 中文搜索居然搜索不到一篇有关 ox-hugo 的内容。
问： 这篇文章主要解决什么问题？ 答： orgmode 配合 hugo 来写作、发布、管理博文的一种便捷方案。
问： 为什么用 emacs 和 orgmode ？ 答： 谁让我当年入了 emacs 和 orgmode 的「坑」 😂 ，这只是习惯而已。这俩工具还是需要一定的学习成本的，因此，本文对不熟悉 emacs 和 orgmode，或者使用其它编辑器的用户没多大帮助，但多少可以了解一下。
问： 为什么用 hugo ？ 答： 最开始只是因为 hugo 原生支持 orgmode ，事后来看，其实支持的不是很好，但是 ox-hugo 解决了用 orgmode 写博文的问题。当然还有一点，在生成静态网站的诸多工具（如 jekyll, hexo 等等）中，我发现 hugo 的安装是最便捷的，只需要下载一个二进制文件直接安装就能用了，而其它工具却总要安装一些别的依赖。网上还有种说法是 hugo 的网站生成速度是最快的，这个我没测试过，也不太确定。</description></item><item><title>给 Hugo 博客增加搜索功能</title><link>https://blog.99bilibili.eu.org/p/%E7%BB%99-hugo-%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</link><pubDate>Fri, 28 Jul 2023 15:32:05 +0000</pubDate><guid>https://blog.99bilibili.eu.org/p/%E7%BB%99-hugo-%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</guid><description>此方法来自 Hugo官方文档 中的 hugofastsearch
A usability and speed update to “Github Gist for Fuse. Js integration” — global, keyboard-optimized search.
没错，这个方案，是 Github Gist for Fuse.js integration 的改进版。
其实在使用这个方案之前，老灯也尝试了 hugo-lunr-zh 方案。hugo-lunr Last publish 4 years ago 而 hugo-lunr-zh 本身是基于 hugo-lunr 添加了一个 nodejieba (结巴分词 lib)分词的功能以支持中文，同样是年久失修了 Last publish 2 years ago，不过我使用这个生成索引失败了，没有任何错误输出，只能做罢。
亮点 最小/零外部依赖（无需 jQuery） 添加到每个页面尺寸尽可能小 JSON 索引文件按需加载（进一步减少对页的速度/用户体验的整体影响） 键盘友好，瞬时导航（有点像 Alfred / macOS Spotlight） 另外，此方案就像 Eddie Webb指出的那样, 还有如下额外的好处：
无需 NPM, grunt 等外部工具 无需额外的编译步骤，你只需要像往常一样执行 hugo 可以方便地切换到任意可使用 json 索引的客户端搜索工具 集成步骤 添加 index.</description></item><item><title>Hugo 代码拷贝插件</title><link>https://blog.99bilibili.eu.org/p/hugo-%E4%BB%A3%E7%A0%81%E6%8B%B7%E8%B4%9D%E6%8F%92%E4%BB%B6/</link><pubDate>Fri, 28 Jul 2023 14:14:16 +0000</pubDate><guid>https://blog.99bilibili.eu.org/p/hugo-%E4%BB%A3%E7%A0%81%E6%8B%B7%E8%B4%9D%E6%8F%92%E4%BB%B6/</guid><description>博客是建好了，但是总是想添加一个代码一键复制的功能。一开始是想去 html 标签中直接添加一个 button ，但是发现好像并没有那么简单。查阅了 Hugo 的内置功能也没有发现，很幸运找到了一篇博客 黄忠德的博客 ，正好解决了我的需求。所以也记录一下。
思考 我们知道，代码片段是使用 markdown code fences 来编写的
``` jsx import React from &amp;#39;react&amp;#39;; ``` 以上代码在 Hugo 编译下的 Html 将展示成如下形式
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt; &amp;lt;pre style=&amp;#34;background-color:#f0f0f0;tab-size:4&amp;#34;&amp;gt; &amp;lt;code class=&amp;#34;language-jsx&amp;#34; data-lang=&amp;#34;jsx&amp;#34;&amp;gt; &amp;lt;span style=&amp;#34;color:#007020;font-weight:bold&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; React from &amp;lt;span style=&amp;#34;color:#4070a0&amp;#34;&amp;gt;&amp;#39;react&amp;#39;&amp;lt;/span&amp;gt;; &amp;lt;/code&amp;gt; &amp;lt;/pre&amp;gt; &amp;lt;/div&amp;gt; 我们要解决的问题是：
搜索所有突出显示的代码块，特别是所有具有类 highlight 的元素； 如何创建按钮放在代码框中； 给按钮添加一个事件，用于将代码块中的代码复制到剪贴板。 代码 检查复制支持 进行复制之前，我们首先需要对浏览器是否可以使用 document.execCommand('copy') 这个功能，因为这段代码正是我们要使用的复制调用代码，我们需要一个命令来检查一下
if(!document.queryCommandSupported(&amp;#39;copy&amp;#39;)) { return; } 但是 queryCommandSupported 方法似乎已经弃用，所以其实是不用添加的。
选择突出显示的代码块 上文提到，突出显示的代码块是包含在类 highlight 中的，我们可以使用内置的 DOM API 来检查所有的在 highlight 内容</description></item><item><title>hugo子模块错误提示解决办法</title><link>https://blog.99bilibili.eu.org/p/hugo%E5%AD%90%E6%A8%A1%E5%9D%97%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BA%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link><pubDate>Thu, 27 Jul 2023 06:46:23 +0000</pubDate><guid>https://blog.99bilibili.eu.org/p/hugo%E5%AD%90%E6%A8%A1%E5%9D%97%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BA%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid><description>错误信息 &amp;ldquo;No url found for submodule path &amp;rsquo;themes/jane&amp;rsquo; in .gitmodules&amp;rdquo;
表明在你的 Git 项目中的 .gitmodules 文件中找不到 &amp;ldquo;themes/jane&amp;rdquo; 子模块的 URL。
.gitmodules 文件是一个包含子模块配置信息的文件，它用于跟踪和管理项目中使用的子模块。子模块允许你在一个 Git 项目中嵌套另一个 Git 项目，并将其作为你项目的一部分来管理。
出现这个错误可能有几种原因：
缺少 .gitmodules 文件：首先，确保你的项目根目录下有一个名为 .gitmodules 的文件。如果没有该文件，你需要创建一个新的 .gitmodules 文件并添加相应的子模块配置。
Themes/jane 子模块不存在：如果 themes/jane 子模块确实存在，但它没有被正确地添加为项目的子模块，则需要检查是否正确地添加了子模块。
解决方法：
确保 .gitmodules 文件存在：在项目根目录下，使用文本编辑器创建一个新的 .gitmodules 文件，或确保已存在的 .gitmodules 文件没有被移除或重命名。
添加子模块的 URL：在 .gitmodules 文件中添加 themes/jane 子模块的 URL。例如：
[submodule &amp;#34;themes/jane&amp;#34;] path = themes/jane url = https://github.com/xianmin/hugo-theme-jane.git 请将上述 URL 替换为 themes/jane 子模块的实际 Git 仓库 URL。
初始化子模块：运行以下命令来初始化和更新子模块： git submodule init git submodule update 这将会初始化并获取你在 .</description></item><item><title>网站远程自动备份方法分享</title><link>https://blog.99bilibili.eu.org/p/12/</link><pubDate>Tue, 25 Jul 2023 16:39:14 +0000</pubDate><guid>https://blog.99bilibili.eu.org/p/12/</guid><description>将 vps 中 home/web 目录打包并传到指定 VPS 的 home 目录
手动备份迁移 按时间戳打包 cd /home/ &amp;amp;&amp;amp; tar czvf web_$(date +&amp;#34;%Y%m%d%H%M%S&amp;#34;).tar.gz web 传输最新的tar压缩包到其他VPS cd /home/ &amp;amp;&amp;amp; ls -t /home/*.tar.gz | head -1 | xargs -I {} scp {} root@0.0.0.0:/home/ 只保留3个压缩包 cd /home/ &amp;amp;&amp;amp; ls -t /home/*.tar.gz | tail -n +4 | xargs -I {} rm {} 远端机器解压最新tar文件 cd /home/ &amp;amp;&amp;amp; ls -t /home/*.tar.gz | head -1 | xargs -I {} tar -xzf {} 自动备份迁移 下载sh脚本</description></item><item><title>rclone开机自动挂载</title><link>https://blog.99bilibili.eu.org/p/10/</link><pubDate>Tue, 25 Jul 2023 15:57:49 +0000</pubDate><guid>https://blog.99bilibili.eu.org/p/10/</guid><description>假设: 你已经挂载好了GoogleDrive 不能使用systemctl的请先在root下安装 apt install systemd-sysv &amp;amp;&amp;amp; reboot 使用df -h命令查看是否成功 假设 name: gd 挂载目录是 /home/google 运行以下命令:
注意修改为你的挂载名字(name),以及挂载目录,使用df -h命令查看 复制以下命令：
command=&amp;#34; mount gd:/ /home/google --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000&amp;#34; 继续:
以下是一整条命令，一起复制到SSH客户端运行 cat &amp;gt; /etc/systemd/system/rclone.service &amp;lt;&amp;lt;EOF [Unit] Description=Rclone After=network-online.target [Service] Type=simple ExecStart=$(command -v rclone) ${command} Restart=on-abort User=root [Install] WantedBy=default.target EOF 现在就可以使用systemctl来挂载GoogleDrive了
systemctl enable rclone #开机自启 命令:
systemctl start rclone #启动 systemctl restart rclone #重启 systemctl status rclone #状态 完结~</description></item><item><title>Debian10升级到5.X-cloud内核，并安装BBR</title><link>https://blog.99bilibili.eu.org/p/9/</link><pubDate>Tue, 25 Jul 2023 15:50:54 +0000</pubDate><guid>https://blog.99bilibili.eu.org/p/9/</guid><description>1. 谷歌云一键重装系统 Debian 10 10.146.0.5 为内网 IP （需替换）
0.146.0.1 为网关
bash &amp;lt;(wget --no-check-certificate -qO- &amp;#39;https://raw.githubusercontent.com/MoeClub/Note/master/InstallNET.sh&amp;#39;) --ip-addr 10.146.0.5 --ip-gate 10.146.0.1 --ip-mask 255.255.255.0 -d 10 -v 64 -p 123456 -port 22 更新组件 apt update -y &amp;amp;&amp;amp; apt install -y curl &amp;amp;&amp;amp; apt install -y socat &amp;amp;&amp;amp; apt install wget -y su apt-get update apt-get install sudo 2. 更换为 Cloud 内核 听说 5. X 内核对 BBR 有神秘加成，手中正好有闲置小鸡，就来试试
Cloud 内核是什么呢？包页面对 linux-image-cloud-amd 64 的说明是：This package depends on the latest Linux kernel and modules for use on cloud platforms including Amazon EC 2, Microsoft Azure, and Google Compute Engine.</description></item><item><title>修改SSH端口方法</title><link>https://blog.99bilibili.eu.org/p/8/</link><pubDate>Tue, 25 Jul 2023 15:49:53 +0000</pubDate><guid>https://blog.99bilibili.eu.org/p/8/</guid><description>编辑 sshd_config nano /etc/ssh/sshd_config 例如：添加 33 端口，注释掉 22 端口
Port 33
退出保存 crl+x 退出 y 确定保存 回车/ 重启 reboot 查看变更状态 systemctl status sshd 新端口使用后，发现注释后依然可以连接！直接删掉 port 22</description></item><item><title>谷歌云第三方SSH工具登录与一键重装系统</title><link>https://blog.99bilibili.eu.org/p/7/</link><pubDate>Tue, 25 Jul 2023 15:48:31 +0000</pubDate><guid>https://blog.99bilibili.eu.org/p/7/</guid><description>方法一 一，设置 root 密码 先选择从浏览器打开 ssh 连接服务器 切换到 root 账号，输入代码：sudo -i 设置 root 密码，输入代码：passwd 二，开启 SSH 权限 CentOS 和 Debian 通用，输入以下命令 sed -i &amp;#39;s/PermitRootLogin no/PermitRootLogin yes/g&amp;#39; /etc/ssh/sshd_config &amp;amp;&amp;amp; sed -i &amp;#39;s/PasswordAuthentication no/PasswordAuthentication yes/g&amp;#39; /etc/ssh/sshd_config Ubuntu 系统，输入以下命令 sed -i &amp;#39;s/ #PermitRootLogin prohibit-password/PermitRootLogin yes/g&amp;#39; /etc/ssh/sshd_config &amp;amp;&amp;amp; sed -i &amp;#39;s/PasswordAuthentication no/PasswordAuthentication yes/g&amp;#39; /etc/ssh/sshd_config 重启服务器 ： reboot 方法二 切换到root角色 (和前面步骤一样)
sudo -i 修改SSH配置文件/etc/ssh/sshd_config
vi /etc/ssh/sshd_config 修改PermitRootLogin和PasswordAuthentication为yes
# Authentication: PermitRootLogin yes //默认为no，需要开启root用户访问改为yes # Change to no to disable tunnelled clear text passwords PasswordAuthentication yes //默认为no，改为yes开启密码登陆 给root用户设置密码</description></item><item><title>宝塔面板7.7破解版安装教程</title><link>https://blog.99bilibili.eu.org/p/6/</link><pubDate>Tue, 25 Jul 2023 15:38:07 +0000</pubDate><guid>https://blog.99bilibili.eu.org/p/6/</guid><description>https://blog.leshans.eu.org/p/bt/
完结撒花🤡
fuck bt 🤡🤡🤡</description></item><item><title>整理一些常用的脚本（持续更新中）</title><link>https://blog.99bilibili.eu.org/p/5/</link><pubDate>Tue, 25 Jul 2023 15:28:57 +0000</pubDate><guid>https://blog.99bilibili.eu.org/p/5/</guid><description>测试CPU性能脚本 apt update -y &amp;amp;&amp;amp; apt install -y curl wget sudo curl -sL yabs.sh | bash -s -- -i -5 VPS 检测 (二选一) wget -q https://github.com/Aniverse/A/raw/i/a &amp;amp;&amp;amp; bash a wget -qO- bench.sh | bash wget -qO- git.io/superbench.sh | bash 磁盘真实性能读写测试 一般数据在 大于20MB/s 为合格，大于40MB/s 为普通，大于80MB/s 为优秀。
dd bs=64k count=4k if=/dev/zero of=test oflag=dsync 三网测速脚本 bash &amp;lt;(curl -Lso- https://git.io/superspeed_uxh) 三网回程测试脚本(二选一) curl https://raw.githubusercontent.com/zhucaidan/mtr_trace/main/mtr_trace.sh|bash curl https://raw.githubusercontent.com/zhanghanyun/backtrace/main/install.sh -sSf | sh 三网回程延迟测试脚本 wget -qO- git.io/besttrace | bash 解锁状态查看 bash &amp;lt;(curl -Ls https://cdn.</description></item></channel></rss>