<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hugo on 浩瀚笔记</title><link>https://blog.talimus.eu.org/tags/hugo/</link><description>Recent content in Hugo on 浩瀚笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 18 Aug 2024 02:15:46 +0800</lastBuildDate><atom:link href="https://blog.talimus.eu.org/tags/hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>将hugo博客搬迁到服务器</title><link>https://blog.talimus.eu.org/p/306/</link><pubDate>Sun, 18 Aug 2024 02:15:46 +0800</pubDate><guid>https://blog.talimus.eu.org/p/306/</guid><description>本文介绍了将Hugo博客迁移到Ubuntu 22.04服务器的详细步骤。首先，创建并配置具有root权限的git用户，初始化Git仓库并设置钩子。接着，生成SSH密钥，配置服务器以接受公钥并测试SSH连接。然后，本地初始化仓库，添加远程仓库并推送代码。提供了一键推送脚本以简化更新过程。最后，通过宝塔面板使用nginx部署静态站点，并使用计划任务同步更新。</description></item><item><title>迁移 hugo 博客到服务器上</title><link>https://blog.talimus.eu.org/p/%E8%BF%81%E7%A7%BB-hugo-%E5%8D%9A%E5%AE%A2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/</link><pubDate>Sat, 12 Aug 2023 06:00:50 +0000</pubDate><guid>https://blog.talimus.eu.org/p/%E8%BF%81%E7%A7%BB-hugo-%E5%8D%9A%E5%AE%A2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/</guid><description>不管是在腾讯云,阿里云,还是海外vps上部署hugo博客,本教程均适用,详细记录,以备不时之需.
1. 场景 ubuntu 20.04，使用root账号，创建普通账号，并赋予root权限。
查看系统发行版本，命令如下：
lsb_release -a 2. 服务器端 接下来就是网上介绍比较少的服务端配置
1 .ssh 进自己的服务器 ssh root@XXX.XXX.XX.XX 2 .建立 git 用户 adduser git 默认会在/home路径下创建一个与用户名相同的用户目录。
3. 安装 git sudo apt install git 4. 给新用户添加管理权限 如果希望新创建的用户具有管理权限，将用户添加到sudo组即可！
将新用户添加到 sudo 组，命令如下：
adduser git sudo 5. 账号切换 由root账号切换到普通账号：
sudo su git 由普通账号切换到root账号：或者exit
sudo su root 注意：切换到root账号时，需要输入当前账号的密码。
6. 在服务端新建 git 仓库 注意这里建的不是 Github仓库，是自己的服务器上的 git 仓库
在git目录下建立一个仓库 hugo.git 同时建立一个文件夹hugo用来存放仓库文件 su git cd /home mkdir git cd git git init --bare hugo.</description></item><item><title>将hugo博客部署至IPFS</title><link>https://blog.talimus.eu.org/p/%E5%B0%86hugo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E8%87%B3ipfs/</link><pubDate>Wed, 09 Aug 2023 06:34:31 +0000</pubDate><guid>https://blog.talimus.eu.org/p/%E5%B0%86hugo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E8%87%B3ipfs/</guid><description>官网: https://fleek.co/hosting/
免费套餐: 每月50G流量
https://fleek.co/pricing/
特点 优势 Git 集成 简化代码管理和部署流程 自动部署 省时省力地将站点部署到网络 自动SSL 自动为站点提供SSL安全证书 全球CDN 加速内容全球分发 速度极快 利用边缘网络提供快速加载 便于使用 用户友好的界面和操作 协作性 便于团队协作和版本控制 可定制 支持灵活的定制需求 优势 描述 速度快 Fleek的边缘网络结合了IPFS和边缘计算技术，为用户提供极快的加载时间，同时部署到Fleek Edge。 去中心化 使用Fleek，您的IPFS托管网站和应用程序不仅备份在其服务器上，还会自动存档到去中心化存储网络Filecoin，作为开放网络中的附加备份层。</description></item><item><title>Stack主题的自定义</title><link>https://blog.talimus.eu.org/p/stack%E4%B8%BB%E9%A2%98%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89/</link><pubDate>Thu, 03 Aug 2023 15:21:25 +0000</pubDate><guid>https://blog.talimus.eu.org/p/stack%E4%B8%BB%E9%A2%98%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89/</guid><description>🍥Hugo主题魔改 由于之前魔改部分写的很慢,又考虑过出个魔改好的主题直接给人们用,后来想想了还是算了,毕竟博客怎么能缺少折腾的乐趣呢,于是乎我花了点时间把魔改内容进行了一些休整,以内容呈现为核心,放弃了很多花哨的东西,加上考虑到魔改的难易程度与网页加载快慢,最后精简成少量的个人感觉比较有用的样式,并做了注释,直接使用即可完成一些个性化调整.由于本人纯小白,所以可能还有可以优化的地方,如果你有更好的方案欢迎在下方探讨交流.
🍦魔改风格 本文对于主题的魔改主要以圆角风格和阅读沉浸感为核心,目标是魔改出一个与本站类似的主题风格,具体使用体验可以参考目前主题.
🍕魔改前的准备 首先在博客根目录下的assets下创建一个名为scss的文件夹,然后在scss文件夹里创建一个名为custom.scss的文件,最终效果为~blog/assets/scss/custom.scss,创建好文件后,接下来对于主题的大部分样式魔改都将写进这个custom.scss.其中有很多冗余的代码但是为了使用尽可能用少的文件防止杂乱不堪,所以只好这样子了(如果你是大佬的话请随意).
🎈主题整体细节调整 对于这一部分的调整我认为每个打算折腾主题前可以先加上,这样子主题整体上会有较大的改变,而且可以使文章内容的展现更为舒适,因为原主题使用了比较低的对比度,个人不是很习惯.
页面概览:
主页概览
在上文中提到的custom.scss文件中写入以下👇内容
// ~\blog\assets\scss\custom.scss // 页面基本配色 :root { // 全局顶部边距 --main-top-padding: 30px; // 全局卡片圆角 --card-border-radius: 25px; // 标签云卡片圆角 --tag-border-radius: 8px; // 卡片间距 --section-separation: 40px; // 全局字体大小 --article-font-size: 1.8rem; // 行内代码背景色 --code-background-color: #f8f8f8; // 行内代码前景色 --code-text-color: #e96900; // 暗色模式下样式 &amp;amp;[data-scheme=&amp;#34;dark&amp;#34;] { // 行内代码背景色 --code-background-color: #ff6d1b17; // 行内代码前景色 --code-text-color: #e96900; } } //------------------------------------------------------ // 修复引用块内容窄页面显示问题 a { word-break: break-all; } code { word-break: break-all; } //--------------------------------------------------- // 文章内容图片圆角阴影 .</description></item><item><title>利用Github Page和Github Action部署你的Hugo博客</title><link>https://blog.talimus.eu.org/p/%E5%88%A9%E7%94%A8github-page%E5%92%8Cgithub-action%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84hugo%E5%8D%9A%E5%AE%A2/</link><pubDate>Thu, 03 Aug 2023 15:05:36 +0000</pubDate><guid>https://blog.talimus.eu.org/p/%E5%88%A9%E7%94%A8github-page%E5%92%8Cgithub-action%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84hugo%E5%8D%9A%E5%AE%A2/</guid><description>🍕利用Github Page和Github Action部署你的Hugo博客 🍔注册GitHub 打开https://github.com/,(打不开的可能需要魔法,或者换个时间点打开,具体怎么操作就不细说了,懂得都懂😶),注册一个GitHub账号,如果不会注册那你还来看这篇文章干嘛.
🧀创建Github仓库 为了使用GitHub Action自动部署,加上便于管理,所以创建两个仓库,虽然一个也行.
1.我们先创建一个名字为blog的仓库用于存放hugo生成的文件,打开右上角的+号,然后选择New repository以新建仓库
2.跟着图片里的步骤操作,先给仓库取个名字,叫做blog(小白最好将仓库名字跟我起一样的),然后勾选public,接着勾选Add a REAMME file,最后点击Create repository完成创建.
3.接下来我们按照刚才那样依葫芦画瓢,再创建一个名为blog-file的仓库
🍦获取SSH Key密钥 ssh密钥可以是我们推送文件到仓库时不需要每次都输入密码,大大的提高我们的效率.所以我们首先需要在我们的电脑生成ssh密钥
1.在git bash执行以下指令,配置邮箱和用户名
git config --global user.email &amp;#34;you@example.com&amp;#34; #you@example.com替换为你的邮箱并回车 git config --global user.name &amp;#34;Your Name&amp;#34; #Your Name替换为你的名字并回车 Copy
2.生成shh key,在git bash中 输入以下命令
ssh-keygen -t rsa Copy
一路回车就行
默认会生成在如下目录
C:\Users\用户名\.ssh Copy
用记事本打开生成目录下id_rsa.pub,其中的内容即为公钥,id_rsa即为私钥.这两个待会要用到.
3.将将公钥配置到GitHub账户中,先打开设置,即Settings
进入SSH and GPG key配置项里,点击SSH keys下的New SHH key进行添加
4.然后随便在Title项里随便起一个名字,在Key里填入刚才得到的id_rsa.pub里的内容,然后点击Add SSH key就添加好了.
5.接下来我们需要往刚才创建的名为blog-file的仓库里添加id_rsa密钥,点击Settings,然后找到Secrets and variables,点击Actions,然后点击New repository secret，在Name里填入ACTIONS_DEPLOY_KEY，在Value里填入id_rsa密钥即可。
🍚部署hugo博客 1.接下来我们在我们的博客根目录下创建一个名为.github的文件夹,然后在文件夹里新建一个新的文件夹,名字为workflows,接着进入workflows文件夹里新建一个名为deploy.xml的文件,再在deploy.xml里填入如下内容,最终目录为~\blog\.github\workflows\deploy.xml,将deploy.xml中的external_repository项里的lin-snow改为你GitHub注册时的名字即可
name: GitHub Page on: push: branches: - main # main 更新触发 jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: submodules: true # clone submodules fetch-depth: 0 # 克隆所有历史信息 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: &amp;#34;0.</description></item><item><title>Hugo使用Shortcode插入bilibili、Youtube视频</title><link>https://blog.talimus.eu.org/p/hugo%E4%BD%BF%E7%94%A8shortcode%E6%8F%92%E5%85%A5bilibiliyoutube%E8%A7%86%E9%A2%91/</link><pubDate>Sat, 29 Jul 2023 15:18:42 +0000</pubDate><guid>https://blog.talimus.eu.org/p/hugo%E4%BD%BF%E7%94%A8shortcode%E6%8F%92%E5%85%A5bilibiliyoutube%E8%A7%86%E9%A2%91/</guid><description>前言 使用个人博客也有一年多的时间，这一年多的时候踩了很多坑，也学到了很多知识。 这里分享一个系列教程：从零开始搭建个人博客，把我的经验分享在这里。
Shortcodes是什么 shortcode 可以理解为HTML模版，可以很方便的支持markdown里面写一行规定格式的代码，能用shortcode里面的模版替换成对应的HTML文件，然后就把这段HTML代码添加到编译之后的HTML文件中。
Hugo shortcode
//注：去掉@，我这里是为了防止自动编译
{@{&amp;lt; name parameter1 parameter2 &amp;gt;}}
然后在你的主题的layouts/shortcodes 会自动找 名字为 name.html的文件，就把参数的值替换到html中，得到一个最终的html信息。
shortcode可以很方便的做复用，可以让你在每个markdown文件里面添加很少的内容，通常是一行代码，就能生成一个通用的HTML片段。
使用Shortcode，我们就能很方便的通过一行简单的代码来插入B站或者Youtube视频。
插入视频 我们就教大家怎么在Hugo中嵌入Bilibili视频和Youtube视频，这样当别人访问你的个人博客网站的时候，可以直接点击播放你插入的视频，还可以自动跳转到你的自媒体平台播放视频，来给你的自媒体平台引流。
1. 嵌入Bilibili视频 在hugo网站目录你使用的主题目录下themes/{your theme name}/layouts/shortcodes中创建bilibili.html文件。
&amp;lt;!DOCTYPE HTML&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;!-- style 样式 是为了让网页上的视频框按比例显示而非固定的大小 --&amp;gt; &amp;lt;style type=&amp;#34;text/css&amp;#34;&amp;gt; .aspect-ratio { position: relative; width: 100%; height: 0; padding-bottom: 75%; } .aspect-ratio iframe { position: absolute; width: 100%; height: 100%; left: 0; top: 0; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;#34;aspect-ratio&amp;#34;&amp;gt; &amp;lt;iframe src=&amp;#34;https://player.bilibili.com/player.html?bvid={{.Get 0 }}&amp;amp;page={{ if .</description></item><item><title>hugo部署twikoo评论</title><link>https://blog.talimus.eu.org/p/hugo%E9%83%A8%E7%BD%B2twikoo%E8%AF%84%E8%AE%BA/</link><pubDate>Fri, 28 Jul 2023 17:26:55 +0000</pubDate><guid>https://blog.talimus.eu.org/p/hugo%E9%83%A8%E7%BD%B2twikoo%E8%AF%84%E8%AE%BA/</guid><description>1.申请 envId 请看 twikoo 官方文档，我选的是 vercel 部署方式，视频教程：Twikoo Vercel 部署教程
2.添加代码 Hugo 的 PaperMod 主题添加 twikoo 代码的位置：layouts/partials/comments.html 推荐添加在自己博客站点下的 layouts 文件夹，不要添加到主题里的 layouts 文件夹，否则更新主题时会被覆盖
&amp;lt;div&amp;gt; &amp;lt;div class=&amp;#34;pagination__title&amp;#34;&amp;gt; &amp;lt;span class=&amp;#34;pagination__title-h&amp;#34; style=&amp;#34;font-size: 20px;&amp;#34;&amp;gt;💬评论&amp;lt;/span&amp;gt; &amp;lt;hr /&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div id=&amp;#34;tcomment&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34; https://cdn.staticfile.org/twikoo/ {{ .Site.Params.twikoo.version }} /twikoo. All. Min. Js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; Twikoo.Init ({ EnvId: &amp;#34;&amp;#34;, //这里填写自己的 envId el: &amp;#34; #tcomment &amp;#34;, Lang: &amp;#39;zh-CN&amp;#39;, Region: &amp;#39;ap-guangzhou&amp;#39;, //我的区域是广州，可以不填，默认是 ap-shanghai Path: window. TWIKOO_MAGIC_PATH||window. Location. Pathname, }); &amp;lt;/script&amp;gt; &amp;lt;/div&amp;gt; 调用上述 twikoo 代码的位置：layouts/_default/single.</description></item><item><title>博客写作流程之工具篇</title><link>https://blog.talimus.eu.org/p/%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C%E6%B5%81%E7%A8%8B%E4%B9%8B%E5%B7%A5%E5%85%B7%E7%AF%87/</link><pubDate>Fri, 28 Jul 2023 15:42:11 +0000</pubDate><guid>https://blog.talimus.eu.org/p/%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C%E6%B5%81%E7%A8%8B%E4%B9%8B%E5%B7%A5%E5%85%B7%E7%AF%87/</guid><description>本文将对我个人的博文写作流程 所用到的工具 做一个总结与分享。从标题就可以看出来，主要有这几个工具： emacs, orgmode &amp;amp; hugo ，另外还有两个配合 hugo 的辅助包 easy-hugo （可选） &amp;amp; ox-hugo 。
hugo : https://gohugo.io/ orgmode : https://orgmode.org/ ox-hugo : https://ox-hugo.scripter.co/ easy-hygo : https://github.com/masasam/emacs-easy-hugo 自问自答 问： 为什么写这篇文章？ 答： 中文搜索居然搜索不到一篇有关 ox-hugo 的内容。
问： 这篇文章主要解决什么问题？ 答： orgmode 配合 hugo 来写作、发布、管理博文的一种便捷方案。
问： 为什么用 emacs 和 orgmode ？ 答： 谁让我当年入了 emacs 和 orgmode 的「坑」 😂 ，这只是习惯而已。这俩工具还是需要一定的学习成本的，因此，本文对不熟悉 emacs 和 orgmode，或者使用其它编辑器的用户没多大帮助，但多少可以了解一下。
问： 为什么用 hugo ？ 答： 最开始只是因为 hugo 原生支持 orgmode ，事后来看，其实支持的不是很好，但是 ox-hugo 解决了用 orgmode 写博文的问题。当然还有一点，在生成静态网站的诸多工具（如 jekyll, hexo 等等）中，我发现 hugo 的安装是最便捷的，只需要下载一个二进制文件直接安装就能用了，而其它工具却总要安装一些别的依赖。网上还有种说法是 hugo 的网站生成速度是最快的，这个我没测试过，也不太确定。</description></item><item><title>给 Hugo 博客增加搜索功能</title><link>https://blog.talimus.eu.org/p/%E7%BB%99-hugo-%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</link><pubDate>Fri, 28 Jul 2023 15:32:05 +0000</pubDate><guid>https://blog.talimus.eu.org/p/%E7%BB%99-hugo-%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</guid><description>此方法来自 Hugo官方文档 中的 hugofastsearch
A usability and speed update to “Github Gist for Fuse. Js integration” — global, keyboard-optimized search.
没错，这个方案，是 Github Gist for Fuse.js integration 的改进版。
其实在使用这个方案之前，老灯也尝试了 hugo-lunr-zh 方案。hugo-lunr Last publish 4 years ago 而 hugo-lunr-zh 本身是基于 hugo-lunr 添加了一个 nodejieba (结巴分词 lib)分词的功能以支持中文，同样是年久失修了 Last publish 2 years ago，不过我使用这个生成索引失败了，没有任何错误输出，只能做罢。
亮点 最小/零外部依赖（无需 jQuery） 添加到每个页面尺寸尽可能小 JSON 索引文件按需加载（进一步减少对页的速度/用户体验的整体影响） 键盘友好，瞬时导航（有点像 Alfred / macOS Spotlight） 另外，此方案就像 Eddie Webb指出的那样, 还有如下额外的好处：
无需 NPM, grunt 等外部工具 无需额外的编译步骤，你只需要像往常一样执行 hugo 可以方便地切换到任意可使用 json 索引的客户端搜索工具 集成步骤 添加 index.</description></item><item><title>Hugo 代码拷贝插件</title><link>https://blog.talimus.eu.org/p/hugo-%E4%BB%A3%E7%A0%81%E6%8B%B7%E8%B4%9D%E6%8F%92%E4%BB%B6/</link><pubDate>Fri, 28 Jul 2023 14:14:16 +0000</pubDate><guid>https://blog.talimus.eu.org/p/hugo-%E4%BB%A3%E7%A0%81%E6%8B%B7%E8%B4%9D%E6%8F%92%E4%BB%B6/</guid><description>博客是建好了，但是总是想添加一个代码一键复制的功能。一开始是想去 html 标签中直接添加一个 button ，但是发现好像并没有那么简单。查阅了 Hugo 的内置功能也没有发现，很幸运找到了一篇博客 黄忠德的博客 ，正好解决了我的需求。所以也记录一下。
思考 我们知道，代码片段是使用 markdown code fences 来编写的
``` jsx import React from &amp;#39;react&amp;#39;; ``` 以上代码在 Hugo 编译下的 Html 将展示成如下形式
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt; &amp;lt;pre style=&amp;#34;background-color:#f0f0f0;tab-size:4&amp;#34;&amp;gt; &amp;lt;code class=&amp;#34;language-jsx&amp;#34; data-lang=&amp;#34;jsx&amp;#34;&amp;gt; &amp;lt;span style=&amp;#34;color:#007020;font-weight:bold&amp;#34;&amp;gt;import&amp;lt;/span&amp;gt; React from &amp;lt;span style=&amp;#34;color:#4070a0&amp;#34;&amp;gt;&amp;#39;react&amp;#39;&amp;lt;/span&amp;gt;; &amp;lt;/code&amp;gt; &amp;lt;/pre&amp;gt; &amp;lt;/div&amp;gt; 我们要解决的问题是：
搜索所有突出显示的代码块，特别是所有具有类 highlight 的元素； 如何创建按钮放在代码框中； 给按钮添加一个事件，用于将代码块中的代码复制到剪贴板。 代码 检查复制支持 进行复制之前，我们首先需要对浏览器是否可以使用 document.execCommand('copy') 这个功能，因为这段代码正是我们要使用的复制调用代码，我们需要一个命令来检查一下
if(!document.queryCommandSupported(&amp;#39;copy&amp;#39;)) { return; } 但是 queryCommandSupported 方法似乎已经弃用，所以其实是不用添加的。
选择突出显示的代码块 上文提到，突出显示的代码块是包含在类 highlight 中的，我们可以使用内置的 DOM API 来检查所有的在 highlight 内容</description></item><item><title>hugo子模块错误提示解决办法</title><link>https://blog.talimus.eu.org/p/hugo%E5%AD%90%E6%A8%A1%E5%9D%97%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BA%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link><pubDate>Thu, 27 Jul 2023 06:46:23 +0000</pubDate><guid>https://blog.talimus.eu.org/p/hugo%E5%AD%90%E6%A8%A1%E5%9D%97%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BA%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid><description>错误信息 &amp;ldquo;No url found for submodule path &amp;rsquo;themes/jane&amp;rsquo; in .gitmodules&amp;rdquo;
表明在你的 Git 项目中的 .gitmodules 文件中找不到 &amp;ldquo;themes/jane&amp;rdquo; 子模块的 URL。
.gitmodules 文件是一个包含子模块配置信息的文件，它用于跟踪和管理项目中使用的子模块。子模块允许你在一个 Git 项目中嵌套另一个 Git 项目，并将其作为你项目的一部分来管理。
出现这个错误可能有几种原因：
缺少 .gitmodules 文件：首先，确保你的项目根目录下有一个名为 .gitmodules 的文件。如果没有该文件，你需要创建一个新的 .gitmodules 文件并添加相应的子模块配置。
Themes/jane 子模块不存在：如果 themes/jane 子模块确实存在，但它没有被正确地添加为项目的子模块，则需要检查是否正确地添加了子模块。
解决方法：
确保 .gitmodules 文件存在：在项目根目录下，使用文本编辑器创建一个新的 .gitmodules 文件，或确保已存在的 .gitmodules 文件没有被移除或重命名。
添加子模块的 URL：在 .gitmodules 文件中添加 themes/jane 子模块的 URL。例如：
[submodule &amp;#34;themes/jane&amp;#34;] path = themes/jane url = https://github.com/xianmin/hugo-theme-jane.git 请将上述 URL 替换为 themes/jane 子模块的实际 Git 仓库 URL。
初始化子模块：运行以下命令来初始化和更新子模块： git submodule init git submodule update 这将会初始化并获取你在 .</description></item></channel></rss>