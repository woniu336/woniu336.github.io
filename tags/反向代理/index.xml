<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>反向代理 on 路飞博客</title><link>https://blog.lufei.de/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</link><description>Recent content in 反向代理 on 路飞博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 02 Feb 2025 15:34:44 +0800</lastBuildDate><atom:link href="https://blog.lufei.de/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>我找到了建站的绝佳方案</title><link>https://blog.lufei.de/p/408/</link><pubDate>Sun, 02 Feb 2025 15:34:44 +0800</pubDate><guid>https://blog.lufei.de/p/408/</guid><description>折腾了N个方案后，终于找到了这个堪称完美的建站架构！仅是我个人经验，你也许有更好的方法，也可以分享出来，此方案目前稳定运行，速度和安全都得到了极大提升。
配置结构 原理：网站部署在netcup，找一台美西（bagevm）的落地鸡（即反代鸡）做反向代理，然后使用dmit的29.9线路鸡转发落地鸡的80和443端口
线路鸡可以看成多个节点，多个节点转发落地鸡
甚至可以DNS解析到三大运营商上，让吃灰小鸡不再只是探针上的点缀。
项目地址 https://github.com/woniu336/cf-cdn-s
💡 方案亮点 源站安全性MAX：CF 小云朵守护，黑客见了都摇头 高可用性：任何一层出问题都能快速切换，像变魔术一样简单 灵活扩展：手上闲置小鸡可以随时加入战斗，物尽其用！ 一键部署：从繁琐配置到一键搞定，解放双手 🆚 方案对比 原始方案：单机部署 优点：简单直接 缺点：一旦宕机就GG，重新配置太痛苦 吐槽：这就像把所有鸡蛋放在一个篮子里，太冒险了！ 对此方案展开一下：你可能是使用了线路好的机子，但是配置一般都低，流量也少，高配大流量需加钱。
又或者你开启了cloudflare的小云朵，觉得这样最简单，没那么多事，但是速度嘛，稳定固然重要，但是我们还要追求速度。
进阶方案：双机互备 优点：有了基础容灾能力 缺点：配置繁琐，速度提升有限 吐槽：好比给汽车加了个备胎，但还是跑不快&amp;hellip; 两台机子架构，网站部署在A鸡，B鸡做反向代理，反代鸡挂了，需要重新部署nginx，配置站点文件，有些繁琐，
或者你反代鸡开启了cloudflare的小云朵，但是嘛速度又没有了。
我的方案 源站（配置 CF 小云朵）：坚如磐石的基础 美西反代：可靠的中转枢纽 线路机转发：分布式加速网络 基础配置三台机子起，网站部署在nc，或者ovh、hz这些公认稳定的商家，你需要至少两个域名，
例如，111.xyz域名解析到源站，开启cloudflare小云朵，这是第一层，起到了保护网站的作用！
然后找一台普通线路的美西机子做反向代理，为什么是美西，这个要看你的线路鸡是哪里的，如果你使用的是香港线路鸡转发，那么反代鸡可以是香港的普通线路，接着，线路鸡使用haproxy转发反代鸡的80和443端口，222.com（用户访问的域名）解析到线路鸡。
你可能会问：优势在哪，不是更繁琐了，让我介绍介绍。
首先你的源站开启了小云朵，稳定性大大增加，然后反代鸡的普通线路流量又多， 但是如果反代鸡挂了怎么办，这个很好解决，事先备份好证书和站点配置文件，换一台机子重新安装nginx，重启即可还原。 线路鸡起到了加速的作用，一台线路鸡挂了，可以在新的机子上一键部署，非常简单就搞定了。线路鸡流量少，但是也阻止不了你手上小鸡多啊， 多个小鸡转发80和443到反代鸡上，流量均分。 🚀 部署教程 首先你需要一个解析到网站的垃圾域名，并托管在cf，开启了小云朵（cdn），这个域名不是用户访问的域名，我管这个域名叫后端域名，所以，这一步就是那么简单。 举例，后端域名：111.xyz（后端域名），222.com（用户访问的域名）
找两台机子，普通机和线路机。 普通机做反向代理，首先要安装nginx，务必使用我的一键安装nginx脚本，因为nginx配置繁琐，稍有差池就会出错，
curl -sS -O https://raw.githubusercontent.com/woniu336/cf-cdn-s/main/cf-cdn-s.sh &amp;amp;&amp;amp; chmod +x cf-cdn-s.sh &amp;amp;&amp;amp; ./cf-cdn-s.sh 选择菜单2安装nginx。
然后就是证书的申请，注意使用用户访问的域名来申请证书。
下载配置文件，菜单3
配置站点。
获取用户真实ip
curl -sS -O https://raw.githubusercontent.com/woniu336/cf-cdn-s/main/update_nginx.sh &amp;amp;&amp;amp; chmod +x update_nginx.</description></item><item><title>CloudFlare Tunnel 内网穿透和反向代理</title><link>https://blog.lufei.de/p/cloudflare-tunnel-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</link><pubDate>Sun, 20 Aug 2023 22:02:09 +0000</pubDate><guid>https://blog.lufei.de/p/cloudflare-tunnel-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</guid><description>将您的本地服务扩展到全球网络：Cloudflare Tunnel的魔力
Cloudflare Tunnel是您连接全球网络的完美伙伴。无论您是个人开发者还是企业用户，通过Cloudflare Tunnel，您可以轻松将您的本地或电脑上的服务提供给全球用户。这款强大的工具可以安全地将您的服务引导到Cloudflare的分布式网络中，确保数据的安全性和隐私。通过加密通信和强大的安全功能，您的Web服务将免受恶意攻击和数据泄露的威胁。
一键脚本 适用于debian/ubuntu
curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/cloudflared.sh &amp;amp;&amp;amp; chmod +x cloudflared.sh &amp;amp;&amp;amp; ./cloudflared.sh 后面可以不看了
1.下载与安装 安装教程: 点击打开
wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb &amp;amp;&amp;amp; sudo dpkg -i cloudflared-linux-amd64.deb 有两种运行隧道的方式: 控制台和命令行
区别: 控制台添加第2个隧道的时候提示你已经安装过cloudflared服务了,你需要卸载才能继续, 命令行则可以运行多个配置文件,也就是多个服务,所以没有限制
本文使用的是命令行方式
打开控制台&amp;ndash;Access&amp;ndash;Tunnels
2.登录 cloudflared tunnel login 会自动打开浏览器，登录后选择域名，完成验证
此时 Cloudflare 会创建一个 cert.pem 文件放在你的 ~/.cloudflared 目录下。
3.创建隧道 cloudflared tunnel create 隧道名 此时会输出一些隧道 ID 之类的信息
4.配置隧道 给隧道创建一个域名
cloudflared tunnel route dns 隧道名 刚才选择的域名 这里有个坑: 回到域名的DNS解析,把CNAME 记录名称改回来
比如: tt.baidu.com改为mm.baidu.com
内容改为: 隧道UUID.</description></item><item><title>利用Cloudflare Tunnel为Uptime Kuma设置反向代理</title><link>https://blog.lufei.de/p/%E5%88%A9%E7%94%A8cloudflare-tunnel%E4%B8%BAuptime-kuma%E8%AE%BE%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</link><pubDate>Sun, 20 Aug 2023 05:57:08 +0000</pubDate><guid>https://blog.lufei.de/p/%E5%88%A9%E7%94%A8cloudflare-tunnel%E4%B8%BAuptime-kuma%E8%AE%BE%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</guid><description>描述 这是迄今为止我见过的最简单的反向代理！
她就是Cloudflare Tunnel
不用安装Nginx 或 Apache
安装好Uptime Kuma( docker 安装)，您只需在“设置”中提供 Cloudflare Tunnel 令牌，即可在 Internet 上浏览 Uptime Kuma。
优点：
免费 完整的 GUI，零配置文件 您可以将 Uptime Kuma 置于防火墙后面 无需暴露您的真实IP 公开 Docker 端口是可选的 不需要 Nginx、Caddy 或 Traefik 等反向代理软件 零配置 SSL 免费SSL 要求 您域名的 DNS 由 Cloudflare 管理。 对于 Docker，仅 Debian或ubuntu 基础支持。 对于非 Docker，需要下载并安装cloudflared。https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/installation/ 对于非 Docker Windows 用户，您可以在其 Github 版本上下载 msi 安装程序：https://github.com/cloudflare/cloudflared/releases/latest 四个步骤 在Cloudflare Zero Trust上创建隧道。 获取您的隧道令牌并将其设置到您的 Uptime Kuma 实例中。 将域名映射到http://localhost:3001。 启动。 开始吧 步骤其实非常简单。然而，由于这个概念对任何人来说都是相当新的，所以详细地写出来可能会更好。</description></item></channel></rss>