<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>切换npm为国内镜像源，加速依赖包下载</title>
    <link href="/posts/776b4935.html"/>
    <url>/posts/776b4935.html</url>
    
    <content type="html"><![CDATA[<h3 id="国内npm镜像源"><a href="#国内npm镜像源" class="headerlink" title="国内npm镜像源"></a>国内npm镜像源</h3><div class="note note-success">            <p>国内npm镜像源</p>          </div><p>阿里云 NPM 镜像：<a href="https://npm.aliyun.com/">https://npm.aliyun.com</a><br>腾讯云 NPM 镜像：<a href="https://mirrors.cloud.tencent.com/npm/">https://mirrors.cloud.tencent.com/npm/</a><br>华为云 NPM 镜像：<a href="https://mirrors.huaweicloud.com/repository/npm/">https://mirrors.huaweicloud.com/repository/npm/</a></p><h3 id="指定npm镜像源"><a href="#指定npm镜像源" class="headerlink" title="指定npm镜像源"></a>指定npm镜像源</h3><div class="code-wrapper"><pre><code class="hljs arduino">npm config set registry https:<span class="hljs-comment">//mirrors.huaweicloud.com/repository/npm/</span></code></pre></div><p>返回<strong>npm 官方原始镜像</strong></p><div class="code-wrapper"><pre><code class="hljs arduino">npm config set registry https:<span class="hljs-comment">//registry.npmjs.org/</span></code></pre></div><p>清除缓存，可选</p><div class="code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> cache clean -f</code></pre></div><h3 id="查看当前的镜像源"><a href="#查看当前的镜像源" class="headerlink" title="查看当前的镜像源"></a>查看当前的镜像源</h3><div class="code-wrapper"><pre><code class="hljs routeros">npm<span class="hljs-built_in"> config </span><span class="hljs-built_in">get</span> registry</code></pre></div><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><div class="note note-success">            <p>查询全局包存放地址</p>          </div><div class="code-wrapper"><pre><code class="hljs routeros">npm<span class="hljs-built_in"> config </span><span class="hljs-built_in">get</span> prefix</code></pre></div><div class="note note-success">            <p>查询缓存地址</p>          </div><div class="code-wrapper"><pre><code class="hljs routeros">npm<span class="hljs-built_in"> config </span><span class="hljs-built_in">get</span> cache</code></pre></div><div class="note note-success">            <p><strong>查看全局安装的包列表</strong></p>          </div><div class="code-wrapper"><pre><code class="hljs routeros">npm list -g <span class="hljs-attribute">--depth</span>=0</code></pre></div><div class="note note-success">            <p><strong>删除模块</strong> : 例如删除gulp-cli</p>          </div><div class="code-wrapper"><pre><code class="hljs avrasm">npm uninstall -g gulp-<span class="hljs-keyword">cli</span></code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一个策略，让ChatGPT翻译能力提升100%</title>
    <link href="/posts/259aa252.html"/>
    <url>/posts/259aa252.html</url>
    
    <content type="html"><![CDATA[<h3 id="Prompt"><a href="#Prompt" class="headerlink" title="Prompt"></a>Prompt</h3><div class="code-wrapper"><pre><code class="hljs clean">## 角色&amp;任务### 任务我希望你以一个专业翻译团队的身份，协助完成从英文到中文的翻译任务。### 角色对于每个翻译任务，我将扮演三个专家角色，分别负责翻译、校对与润色工作：<span class="hljs-number">1.</span> 翻译专家：具有<span class="hljs-number">20</span>年翻译经验，精通中英双语，并拥有丰富的跨学科知识。此阶段的目标是提供一份既忠实于原文，又在中文中读起来流畅自然的初稿。在翻译时，特别注重保持原文的风格和语调。<span class="hljs-number">2.</span> 资深校对编辑：拥有<span class="hljs-number">20</span>年专业编辑经验，中文系毕业，对中文语法、用词有精准把握。在此阶段，您需要对翻译稿进行深度校对，包括语法、用词、风格的校正，确保翻译的准确性和易读性，进而输出第二版翻译稿。<span class="hljs-number">3.</span> 润色专家：作为一位拥有<span class="hljs-number">20</span>年写作经验的获奖作家，擅长各种风格流派的写作。在此阶段，您需要在校对编辑提供的稿件基础上，进行风格上的润色，提高文本的文学美感，同时保持原文的专业性和准确性。例如，润色诗歌时应使用更优美、富有意境的语言；润色科技类文章时则应维持其专业性和准确性。## 工作流程### <span class="hljs-number">1.</span>翻译阶段参与人：翻译专家输出物：翻译稿件任务：提供忠实原文且流畅的中文初稿。### <span class="hljs-number">2.</span>校对阶段参与人：资深校对编辑输出物：校对过的翻译稿件任务：深度校对初稿，保证准确性和易读性。### <span class="hljs-number">3.</span>润色阶段参与人：润色专家输出物：润色过后的最终翻译稿任务：提升文本的风格美感，同时保持专业性和准确性。## 生成规则你必须遵循以下规则：- 你的第一反应是了解了我的需求，并且让我提供希望翻译的英文文本。- 每个阶段你将生成以下两个部分，使用markdown格式：阶段名称 例如：翻译阶段翻译稿- 每个阶段完成后，等待我的指令，你才能进行下一阶段。</code></pre></div><h3 id="提问一"><a href="#提问一" class="headerlink" title="提问一"></a>提问一</h3><div class="note note-success">            <p>描述这三个版本翻译稿的差异，同时按100分制给每个阶段的翻译稿件质量进行打分，并给出理由。</p>          </div><h3 id="提问二"><a href="#提问二" class="headerlink" title="提问二"></a>提问二</h3><div class="note note-success">            <p>从忠实度（对原文的忠实程度）、流畅性（在目标语言中的可读性）、风格（语言的文学和艺术表现）以及适应性（适应目标语言文化和语境的程度），对以上三个翻译稿件进行评分.</p>          </div><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><div class="note note-success">            <p><code>When I came back from the East last autumn I felt that I wanted the world to be in uniform and at a sort of moral attention forever; I wanted no more riotous13 excursions with privileged glimpses into the human heart. Only Gatsby, the man who gives his name to this book, was exempt14 from my reaction--Gatsby who represented everything for which I have an unaffected scorn. If personality is an unbroken series of successful gestures, then there was something gorgeous about him, some heightened sensitivity to the promises of life, as if he were related to one of those intricate machines that register earthquakes ten thousand miles away. This responsiveness had nothing to do with that flabby impressionability which is dignified15 under the name of the &quot;creative temperament16&quot;--it was an extraordinary gift for hope, a romantic readiness such as I have never found in any other person and which it is not likely I shall ever find again. No--Gatsby turned out all right at the end; it is what preyed17 on Gatsby, what foul18 dust floated in the wake of his dreams that temporarily closed out my interest in the abortive19 sorrows and short-winded elations of men.</code></p>          </div>]]></content>
    
    
    <categories>
      
      <category>chatgpt</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SSH 免密登录，设置好仍然需要密码登录解决方法</title>
    <link href="/posts/8194b7a3.html"/>
    <url>/posts/8194b7a3.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>说明： ssh秘钥登录设置好了，但是登录的时候依然需要提供密码</p></blockquote><h3 id="查看系统安全日志，定位问题"><a href="#查看系统安全日志，定位问题" class="headerlink" title="查看系统安全日志，定位问题"></a>查看系统安全日志，定位问题</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cat</span> /var/log/auth.log</code></pre></div><p>或者</p><div class="code-wrapper"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cat</span> /var/log/secure</code></pre></div><p>找到下面的信息</p><div class="code-wrapper"><pre><code class="hljs mipsasm">Authentication refused: <span class="hljs-keyword">bad </span>ownership <span class="hljs-keyword">or </span>modes...</code></pre></div><p>（网上的图片）<br><img src="https://imgs.leshans.eu.org/docs/1715611417.png"></p><p>（我的）<br><img src="https://imgs.leshans.eu.org/docs/1715612034.png"></p><p><code>for directory</code> 或者 <code>for file</code> 后面跟着的就是指出什么文件或文件夹</p><h3 id="原因排查"><a href="#原因排查" class="headerlink" title="原因排查"></a>原因排查</h3><p>我的这条日志说明 SSH 服务器拒绝了基于密钥的认证,原因是 <code>/root/.ssh/authorized_keys</code> 文件的所有权或权限模式设置不正确。（你的原因可能和我不一样，但是方法是一样的）</p><p>authorized_keys 文件存储了允许使用 SSH 密钥登录的公钥。如果这个文件的权限设置不当,SSH 服务器将拒绝基于密钥的认证,从而要求输入密码进行登录认证。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>解决方法是检查 <code>/root/.ssh/authorized_keys</code> 文件的所有权和权限,确保它只对 root 用户可读写:</p><p>所有权应为 root:root</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> root:root /root/.ssh/authorized_keys</code></pre></div><p>权限应为 600 (所有者可读写)</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 600 /root/.ssh/authorized_keys</code></pre></div><p>如果 <code>/root/.ssh</code> 目录存在,也要检查它的权限为 700 (所有者可读写执行)</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 700 /root/.ssh</code></pre></div><p>做完这些更改后,重新尝试 SSH 密钥登录,应该就不需要输入密码了。如果仍有问题,可以检查 SSH 服务器和客户端的其他配置。</p><p><strong>提供一个自用的SSH免密登录脚本</strong></p><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/ssh-v.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x ssh-v.sh &amp;&amp; ./ssh-v.sh</code></pre></div><br>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>非常实用简单的利用chatgpt写脚本技巧</title>
    <link href="/posts/bc206c7.html"/>
    <url>/posts/bc206c7.html</url>
    
    <content type="html"><![CDATA[<h3 id="方法经验"><a href="#方法经验" class="headerlink" title="方法经验"></a>方法经验</h3><p>一个优秀的提示词(prompt) + 一个简洁的脚本框架 + chatgpt</p><p>编写脚本是一门艺术，您的经验总结对其他人来说很有价值。</p><p>在使用 AI 编写脚本的过程中，我经历了从痛苦到愉悦的转变。最初，我只使用 GPT3.5，不断复制粘贴，并试图通过提供终端输出来测试脚本。但 GPT 总是给我不完美的回答，修改脚本时总会遇到新的问题，这让我非常困恼。直到我发现了更好的方法——创建一个大型脚本框架。</p><p>我的方法是这样的：首先，我会准备一个大的脚本框架，然后根据需求往里面添加功能。这样做的好处是，即使新添加的功能有 bug 或不满意，也不会影响整个脚本的运行，我只需要专注于修改那个功能即可。</p><p>另外，我还学到了提示词的重要性。使用合适的提示词可以引导 AI，防止它答非所问或不知所云。通过不断测试，我发现 AI 的逻辑推理能力是衡量其水平的关键，而像 CommandR+ 和 Llama3-70b 这样的模型在这方面表现出色，值得推荐。</p><p>以下是我创建脚本的流程：</p><ul><li>先提供提示词，等待 AI 索要脚本框架。</li><li>发送脚本框架给AI,AI说他明白了脚本的结构,问我想实现什么功能</li><li>写出我的具体需求发送给AI</li></ul><p>以下提示词是经过我反复测试得出来的,非常好用,至于我给的脚本,哪怕是小白,不会代码,多看看修改几下就知道怎么用了.</p><h3 id="提示词"><a href="#提示词" class="headerlink" title="提示词"></a>提示词</h3><div class="code-wrapper"><pre><code class="hljs ldif"><span class="hljs-comment">## 阅读以下所有说明</span>你是一个专家级程序员，擅长编写Python和Shell脚本,在编程语言方面具有专业知识。我希望你成为我的脚本创作者。我会提供一份原始脚本框架给您，您的目标是帮助我设计出最符合我需求的脚本，你必须遵循以下规则：<span class="hljs-literal">-</span> 您的第一个反应是要求我提供原始脚本框架<span class="hljs-literal">-</span> 我会发送我的脚本框架给你,你阅读后对我说:我已经了解脚本的整体结构,请问你想实现什么功能<span class="hljs-literal">-</span> 你必须等待我回答了我的想法之后,才去生成代码<span class="hljs-literal">-</span> 请勿改动脚本框架的整体结构，仅允许在现有框架基础上进行函数的添加和修改。<span class="hljs-literal">-</span> 必须提供3个部分的完整代码,包括列出`menu_items`选项,列出添加的新功能函数,列出函数的case选项,他们单独展示<span class="hljs-literal">-</span> 你生成的内容必须遵循以下格式:新增函数名称更新菜单选项数组 menu_items 添加相应的 case 选项新增函数修改说明<span class="hljs-literal">-</span> 若回答中包含代码，请使用Markdown代码块格式，并在代码块中注明所使用的编程语言。<span class="hljs-literal">-</span> 若代码过长，可以省略中间函数的具体实现细节，但必须保持框架结构的完整性，以便清晰展示整个脚本的逻辑流程。<span class="hljs-literal">-</span> 请在每个功能函数的结尾处包含以下内容：read -n 1 -s -p &quot;按任意键继续...&quot;：提示用户按任意键继续，以提供交互性。return_to_main_menu：确保用户操作完成后能够返回到主菜单。<span class="hljs-literal">-</span> 请记得用中文跟我说话！ please remember to talk to me in Chinese!</code></pre></div><h3 id="脚本框架"><a href="#脚本框架" class="headerlink" title="脚本框架"></a>脚本框架</h3><p>这是一份shell脚本，你可以测试一下</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-comment"># 定义颜色代码</span>huang=<span class="hljs-string">&#x27;\033[33m&#x27;</span>bai=<span class="hljs-string">&#x27;\033[0m&#x27;</span>lv=<span class="hljs-string">&#x27;\033[0;32m&#x27;</span>lan=<span class="hljs-string">&#x27;\033[0;34m&#x27;</span>hong=<span class="hljs-string">&#x27;\033[31m&#x27;</span>kjlan=<span class="hljs-string">&#x27;\033[96m&#x27;</span>hui=<span class="hljs-string">&#x27;\e[37m&#x27;</span><span class="hljs-comment"># 清屏并显示欢迎信息</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span>clear<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;kjlan&#125;</span>欢迎使用脚本管理工具！<span class="hljs-variable">$&#123;bai&#125;</span>&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-comment"># 显示博客和CSDN主页</span><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;lv&#125;</span>🔗 博客地址: <span class="hljs-variable">$&#123;kjlan&#125;</span>https://blog.qige.cloudns.biz<span class="hljs-variable">$&#123;bai&#125;</span> ✨&quot;</span><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;lv&#125;</span>🔗 CSDN主页: <span class="hljs-variable">$&#123;kjlan&#125;</span>https://blog.csdn.net/u010066597<span class="hljs-variable">$&#123;bai&#125;</span> ✨&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-comment"># 显示分隔线</span><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;kjlan&#125;</span>============================================================<span class="hljs-variable">$&#123;bai&#125;</span>&quot;</span><span class="hljs-comment"># 定义菜单选项数组</span>menu_items=(    <span class="hljs-string">&quot;打印日期&quot;</span>    <span class="hljs-string">&quot;询问我的名字&quot;</span><span class="hljs-string">&quot;显示系统信息&quot;</span>  <span class="hljs-comment"># 新增的菜单选项</span>    <span class="hljs-string">&quot;退出&quot;</span>)<span class="hljs-comment"># 显示菜单函数</span><span class="hljs-function"><span class="hljs-title">display_menu</span></span>() &#123;    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;请选择一个选项：&quot;</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;------------------------&quot;</span>    i=1    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;menu_items[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span>        <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$i</span> -eq <span class="hljs-variable">$&#123;#menu_items[@]&#125;</span> ]; <span class="hljs-keyword">then</span>  <span class="hljs-comment"># 检查是否为最后一个选项</span>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;kjlan&#125;</span>0) <span class="hljs-variable">$&#123;item&#125;</span> ▶<span class="hljs-variable">$&#123;bai&#125;</span>&quot;</span>  <span class="hljs-comment"># 如果是最后一个选项，序号设为0</span>        <span class="hljs-keyword">else</span>            <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$i</span>) <span class="hljs-variable">$item</span>&quot;</span>  <span class="hljs-comment"># 添加样式以确保样式生效</span>        <span class="hljs-keyword">fi</span>        ((i++))    <span class="hljs-keyword">done</span>&#125;<span class="hljs-comment"># 打印日期函数</span><span class="hljs-function"><span class="hljs-title">print_date</span></span>() &#123;    <span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span>    <span class="hljs-built_in">read</span> -n 1 -s -p <span class="hljs-string">&quot;按任意键继续...&quot;</span>    return_to_main_menu&#125;<span class="hljs-comment"># 回答名字函数</span><span class="hljs-function"><span class="hljs-title">answer_name</span></span>() &#123;    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;阿弥陀佛&quot;</span>    <span class="hljs-built_in">read</span> -n 1 -s -p <span class="hljs-string">&quot;按任意键继续...&quot;</span>    return_to_main_menu&#125;<span class="hljs-comment"># 显示系统信息函数</span><span class="hljs-function"><span class="hljs-title">show_system_info</span></span>() &#123;  <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;系统信息：&quot;</span>  <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;-----------------&quot;</span>  <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;操作系统：<span class="hljs-variable">$&#123;kjlan&#125;</span><span class="hljs-subst">$(uname -s)</span><span class="hljs-variable">$&#123;bai&#125;</span>&quot;</span>  <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;主机名：<span class="hljs-variable">$&#123;kjlan&#125;</span><span class="hljs-subst">$(hostname)</span><span class="hljs-variable">$&#123;bai&#125;</span>&quot;</span>  <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;当前用户：<span class="hljs-variable">$&#123;kjlan&#125;</span><span class="hljs-subst">$(whoami)</span><span class="hljs-variable">$&#123;bai&#125;</span>&quot;</span>  <span class="hljs-built_in">read</span> -n 1 -s -p <span class="hljs-string">&quot;按任意键继续...&quot;</span>  return_to_main_menu&#125;<span class="hljs-comment"># 返回主菜单函数</span><span class="hljs-function"><span class="hljs-title">return_to_main_menu</span></span>() &#123;    clear&#125;<span class="hljs-comment"># 退出程序函数</span><span class="hljs-function"><span class="hljs-title">exit_program</span></span>() &#123;    clear    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;lv&#125;</span>已退出...<span class="hljs-variable">$&#123;bai&#125;</span>&quot;</span>    <span class="hljs-built_in">exit</span> 0&#125;<span class="hljs-comment"># 主函数</span><span class="hljs-function"><span class="hljs-title">main</span></span>() &#123;    <span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>; <span class="hljs-keyword">do</span>        <span class="hljs-comment"># 显示菜单</span>        display_menu        <span class="hljs-comment"># 显示分隔线</span>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;------------------------&quot;</span>        <span class="hljs-comment"># 获取用户选择</span>        <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入序号回车：&quot;</span> choice        <span class="hljs-comment"># 函数选项数组</span>        <span class="hljs-keyword">case</span> <span class="hljs-variable">$choice</span> <span class="hljs-keyword">in</span>            1) print_date ;;            2) answer_name ;;  <span class="hljs-comment"># 新增选项</span>    3) show_system_info ;;  <span class="hljs-comment"># 新增的case选项</span>            0) exit_program ;;            *) <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;无效的选择。请再次尝试。&quot;</span> ;;        <span class="hljs-keyword">esac</span>    <span class="hljs-keyword">done</span>&#125;<span class="hljs-comment"># 调用主函数</span>main <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span></code></pre></div><h3 id="实用小技巧"><a href="#实用小技巧" class="headerlink" title="实用小技巧"></a>实用小技巧</h3><p>开头加个: <code>必须</code> 比如: 你必须怎么样… 能让gpt3和gpt4差不多厉害,</p><p>如果你想要获取什么信息, 你可以这样说: 在以下文章中,我想知道啥啥啥,<strong>请提供一个表格,包含两列</strong>,问题和答案</p><p>重要的是这两句话: 请提供一个表格,包含两列,这里的两列可以根据情况修改</p>]]></content>
    
    
    <categories>
      
      <category>chatgpt</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>网页翻译终极方案-DeepLX</title>
    <link href="/posts/195f569d.html"/>
    <url>/posts/195f569d.html</url>
    
    <content type="html"><![CDATA[<p>公益URL:<br><a href="https://deepl.wangwangit.com/">https://deepl.wangwangit.com/</a></p><div class="code-wrapper"><pre><code class="hljs bash">http://1.12.243.147:1188/translatehttp://101.132.149.56:1188/translatehttp://101.201.210.214:1188/translatehttp://101.35.175.93:1188/translatehttp://101.42.168.152:1188/translatehttp://101.43.224.133:1188/translatehttp://101.43.76.234:1188/translatehttp://106.14.139.26:1188/translatehttp://106.14.17.223:1188/translatehttp://115.159.83.26:1188/translatehttp://116.205.130.49:1188/translatehttp://119.3.6.116:1188/translatehttp://119.91.152.74:1188/translatehttp://120.26.116.45:1188/translatehttp://121.199.78.234:1188/translatehttp://123.113.107.144:1188/translatehttp://123.56.13.17:1188/translatehttp://124.222.158.199:1188/translatehttp://139.159.254.35:1188/translatehttp://159.75.240.245:1188/translatehttp://175.178.237.179:1188/translatehttp://39.105.60.208:1188/translatehttp://39.107.106.214:1188/translatehttp://42.192.21.116:1188/translatehttp://42.193.219.103:1188/translatehttp://43.138.46.231:1188/translatehttp://43.139.108.188:1188/translatehttp://47.102.106.172:1188/translatehttp://47.109.111.122:1188/translatehttp://47.113.146.115:1188/translatehttp://47.92.93.118:1188/translatehttp://49.232.164.78:1188/translatehttp://49.235.73.101:1188/translatehttp://8.134.151.104:1188/translatehttp://8.142.134.155:1188/translatehttp://82.156.36.11:1188/translatehttp://82.157.137.187:1188/translatehttp://82.157.157.107:1188/translatehttp://82.157.161.81:1188/translatehttp://82.157.49.14:1188/translate</code></pre></div><h2 id="为什么要选择-DeepL-翻译？"><a href="#为什么要选择-DeepL-翻译？" class="headerlink" title="为什么要选择 DeepL 翻译？"></a>为什么要选择 DeepL 翻译？</h2><p>DeepL 被誉为全世界最精准的机器翻译，比最接近他们的竞争对手<a href="https://www.deepl.com/zh/whydeepl"><strong>准确三倍以上</strong></a></p><h3 id="看看-DeepL-和-微软翻译-的对比-👇👇"><a href="#看看-DeepL-和-微软翻译-的对比-👇👇" class="headerlink" title="看看 DeepL 和 微软翻译 的对比 👇👇"></a>看看 DeepL 和 微软翻译 的对比 👇👇</h3><p>三句英文:</p><p><code>Walking on eggshells during the software update.</code></p><p><code>Wang&#39;s VR game is a rollercoaster of emotions.</code></p><p><code>Caught between a rock and a hard drive with this coding dilemma</code></p><table><thead><tr><th>DeepL</th><th>微软翻译</th></tr></thead><tbody><tr><td>在软件更新时提心吊胆</td><td>在软件更新期间在蛋壳上行走</td></tr><tr><td>Wang 的 VR 游戏让人的情绪如过山车般起伏不定</td><td>Wang的VR游戏是情绪的过山车</td></tr><tr><td>编码难题让我左右为难</td><td>夹在岩石和硬盘驱动器之间，陷入这种编码困境</td></tr></tbody></table><p><strong>翻译大PK 🏆</strong></p><p><a href="https://app.immersivetranslate.com/text/?utm_source=extension&utm_medium=extension&utm_campaign=popup_more">https://app.immersivetranslate.com/text/?utm_source=extension&amp;utm_medium=extension&amp;utm_campaign=popup_more</a></p><p><img src="https://imgs.leshans.eu.org/docs/1715112172.png"></p><p>注意: 如果你没有科学上网,谷歌翻译是无法使用的, <code>OpenAl</code>和<code>Azure翻译</code>需要设置秘钥</p><h2 id="什么是DeepLX"><a href="#什么是DeepLX" class="headerlink" title="什么是DeepLX"></a>什么是DeepLX</h2><p><strong>DeepLX</strong> 是一个开源项目，它基于 DeepL 免费服务，将其转换为本地 API，提供给第三方程序使用，如浏览器插件: 沉浸式翻译</p><p>说人话就是: DeepL可以免费使用,但有限制,使用<strong>DeepLX</strong>可以无限制的调用DeepL API来翻译</p><p>你可能会问: 我直接使用DeepL不就行了,为什么要搞DeepLX,<br>因为DeepL服务器部署在海外,国内连接阻力大,<br>DeepL的付费版不支持国内银行卡购买，而免费版又受到严格限制,</p><h2 id="部署DeepLX"><a href="#部署DeepLX" class="headerlink" title="部署DeepLX"></a>部署DeepLX</h2><p>项目: <a href="https://github.com/OwO-Network/DeepLX">https://github.com/OwO-Network/DeepLX</a></p><p>官网: <a href="https://deeplx.owo.network/">https://deeplx.owo.network/</a></p><p>文档: <a href="https://deeplx.owo.network/install/">https://deeplx.owo.network/install/</a></p><p><strong>Docker部署</strong></p><div class="code-wrapper"><pre><code class="hljs bash">docker run -itd -p 1188:1188 ghcr.io/owo-network/deeplx:latest</code></pre></div><p>或者</p><div class="code-wrapper"><pre><code class="hljs bash">docker run -itd -p 1188:1188 missuo/deeplx:latest</code></pre></div><p><strong>脚本部署</strong></p><div class="code-wrapper"><pre><code class="hljs bash">bash &lt;(curl -Ls https://raw.githubusercontent.com/OwO-Network/DeepLX/main/install.sh)</code></pre></div><p>或者</p><div class="code-wrapper"><pre><code class="hljs bash">bash &lt;(curl -Ls https://owo.nz/deeplx)</code></pre></div><p><strong>腾讯云函数部署</strong></p><p>文档:<br><a href="https://juejin.cn/post/7342697016181047296">https://juejin.cn/post/7342697016181047296</a></p><p><a href="https://github.com/LegendLeo/deeplx-serverless">https://github.com/LegendLeo/deeplx-serverless</a></p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>安装浏览器插件</p><p>插件地址: <strong><a href="https://immersivetranslate.com/">https://immersivetranslate.com/</a></strong></p><p><strong>打开开发者模式</strong></p><p><img src="https://imgs.leshans.eu.org/docs/1715115322.png"></p><p><strong>选择DeepLX(Beta)</strong></p><p><img src="https://imgs.leshans.eu.org/docs/1715115355.png"></p><p>URL 中填入自己搭建的服务 URL，例如: <a href="http://8.8.8.8:1188/translate">http://8.8.8.8:1188/translate</a></p><p><code>8.8.8.8</code> 是你服务器ip地址</p><p><img src="https://imgs.leshans.eu.org/docs/1715115389.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>pip 安装插件加速技巧: 修改为国内源</title>
    <link href="/posts/a1824b40.html"/>
    <url>/posts/a1824b40.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>在国内，用 pip 安装 python 依赖包的时候，总是会遇到 Timeout 或者下载太慢的问题。<br>这是因为 pip 源在国外，解决方法就是把 pip 源改成国内的，就可以实现 pip install 加速。</p></blockquote><p><strong>1. 国内有哪些 pip 源？</strong></p><p>国内有几个名气比较大的源：</p><p>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a></p><p>豆瓣 <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></p><p>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a></p><p>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></p><p>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/">http://pypi.mirrors.ustc.edu.cn/simple/</a></p><p>推荐使用<code>阿里云</code>的源，速度很快。</p><p><strong>2. 设置镜像源</strong></p><p>例如: 阿里云</p><div class="code-wrapper"><pre><code class="hljs bash">pip config <span class="hljs-built_in">set</span> global.index-url http://mirrors.aliyun.com/pypi/simple</code></pre></div><p>当运行上面的命令时,会看到: <code>Writing to ...</code> 后面跟着的是<code>pip配置文件</code>的路径</p><p><strong>3.修改本地的 pip 配置文件</strong></p><div class="code-wrapper"><pre><code class="hljs bash">[global]<span class="hljs-built_in">timeout</span> = 120index-url = http://mirrors.aliyun.com/pypi/simpletrusted-host = mirrors.aliyun.com/pypi[search]index = http://mirrors.aliyun.com/pypi/simple</code></pre></div><p>简单解释一下里面的参数：</p><ul><li>timeout：超时时间为120秒，避免因为短暂的阻塞而导致下载失败.</li><li>index-url：设置为阿里云源，pip install 时下载的地方。</li><li>trusted-host：添加阿里云源为可信主机，要不然可能报错。</li></ul><p>一般来说这样的配置文件就足够用了</p><br>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu安装特定版本的python技巧</title>
    <link href="/posts/8a9eb91c.html"/>
    <url>/posts/8a9eb91c.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>起因: </p></blockquote><p><code>python</code>版本当然是越新越好，但今天体会到有些必要工具依赖python老版本，比如fail2ban这个防止暴力破解的拉黑IP工具.</p><blockquote><p>什么是Pyenv</p></blockquote><ol><li><code>Pyenv</code>允许你在同一系统上安装和切换多个Python版本,</li><li>Pyenv可以创建独立的Python<code>虚拟环境</code>，每个环境都有自己的Python版本和依赖，避免了不同项目间的版本冲突。</li></ol><h3 id="安装pyenv"><a href="#安装pyenv" class="headerlink" title="安装pyenv"></a>安装pyenv</h3><p>你需要首先确保你的系统已经安装了curl,如果没有，你可以通过运行以下命令来安装：</p><div class="code-wrapper"><pre><code class="hljs bash">sudo apt-get updatesudo apt-get install curl</code></pre></div><p>然后，你可以使用以下命令安装pyenv：</p><div class="code-wrapper"><pre><code class="hljs bash">curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash</code></pre></div><p>这将在你的主目录下的 <code>.bashrc</code> 或 <code>.zshrc</code> 文件中添加一些环境变量和路径。如果你使用的是Zsh，你可能需要编辑 <code>.zshrc</code> 文件，如果你使用的是Bash，你则需要编辑 <code>.bashrc</code> 文件。</p><p>打开你的 shell 配置文件：</p><div class="code-wrapper"><pre><code class="hljs bash">nano ~/.bashrc</code></pre></div><p>然后在文件的末尾添加以下行：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># Pyenv</span><span class="hljs-built_in">export</span> PYENV_ROOT=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.pyenv&quot;</span><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$PYENV_ROOT</span>/bin:<span class="hljs-variable">$PATH</span>&quot;</span><span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(pyenv init -)</span>&quot;</span><span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(pyenv virtualenv-init -)</span>&quot;</span></code></pre></div><p>保存并关闭文件，然后运行以下命令使更改生效：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc</code></pre></div><p>现在，你可以使用 <code>pyenv</code> 命令了。你可以通过运行 <code>pyenv --version</code> 来检查它是否已经成功安装。</p><h3 id="查看pyenv版本"><a href="#查看pyenv版本" class="headerlink" title="查看pyenv版本"></a>查看pyenv版本</h3><div class="code-wrapper"><pre><code class="hljs bash">pyenv --version</code></pre></div><h4 id="查看python3版本"><a href="#查看python3版本" class="headerlink" title="查看python3版本"></a>查看python3版本</h4><div class="code-wrapper"><pre><code class="hljs bash">python3 --version</code></pre></div><h4 id="查看可安装的-Python-版本"><a href="#查看可安装的-Python-版本" class="headerlink" title="查看可安装的 Python 版本"></a>查看可安装的 Python 版本</h4><div class="code-wrapper"><pre><code class="hljs bash">pyenv install --list | grep -v - | grep -E <span class="hljs-string">&quot;^\s*3\.[0-9]+\.[0-9]+&quot;</span></code></pre></div><h4 id="安装指定版本"><a href="#安装指定版本" class="headerlink" title="安装指定版本"></a>安装指定版本</h4><p>注意: pyenv无法管理系统默认版本,只管理通过pyenv安装的版本</p><div class="code-wrapper"><pre><code class="hljs bash">pyenv install 3.10.12</code></pre></div><h4 id="指定全局版本"><a href="#指定全局版本" class="headerlink" title="指定全局版本"></a>指定全局版本</h4><p>放心,这不会影响某些程序使用旧版本</p><div class="code-wrapper"><pre><code class="hljs bash">pyenv global 3.10.12</code></pre></div><p>查看是否指定</p><div class="code-wrapper"><pre><code class="hljs bash">python3 --version</code></pre></div><p>查看所有通过<code>pyenv</code>安装的Python版本,<code>*</code> 符号表示当前正在使用的 Python 版本</p><div class="code-wrapper"><pre><code class="hljs bash">pyenv versions</code></pre></div><h4 id="重置为系统默认的Python版本"><a href="#重置为系统默认的Python版本" class="headerlink" title="重置为系统默认的Python版本"></a>重置为系统默认的Python版本</h4><div class="code-wrapper"><pre><code class="hljs bash">pyenv global system</code></pre></div><h4 id="删除指定版本"><a href="#删除指定版本" class="headerlink" title="删除指定版本,"></a>删除指定版本,</h4><p>请放心,这不会卸载系统默认的Python版本</p><div class="code-wrapper"><pre><code class="hljs bash">pyenv uninstall 3.10.12</code></pre></div><h3 id="Python虚拟环境创建"><a href="#Python虚拟环境创建" class="headerlink" title="Python虚拟环境创建"></a>Python虚拟环境创建</h3><p>Python虚拟环境（Virtual Environment）是一个独立的Python运行环境，它允许你在不同的项目中隔离Python环境，每个项目可以有自己的Python版本和依赖包，而不会影响其他项目或系统的全局Python环境。这样有以下好处：</p><ol><li><p><strong>依赖隔离</strong>：每个项目可以有自己的依赖包，避免版本冲突。一个项目可能需要一个特定版本的库，而另一个项目可能需要另一个版本，虚拟环境使得这种并存成为可能。</p></li><li><p><strong>易于管理</strong>：在新的虚拟环境中安装和升级库时，不会影响系统Python或其他项目。你可以轻松创建、切换和删除虚拟环境，方便维护和测试。</p></li><li><p><strong>可重复性</strong>：虚拟环境有助于重现项目环境，因为它们记录了创建时的Python版本和所有安装的库及其版本。这使得在不同的机器上轻松复制开发环境成为可能。</p></li><li><p><strong>开发效率</strong>：由于库的安装仅限于当前环境，安装和更新库的速度更快，因为不需要处理全局环境的复杂性。</p></li><li><p><strong>团队协作</strong>：团队成员可以在各自的虚拟环境中工作，无需担心各自的系统设置对项目的影响，每个人都可以根据项目需求配置自己的环境。</p></li></ol><p>在Python开发中，使用虚拟环境是一个最佳实践，它极大地提高了开发的灵活性和可控性。</p><h4 id="安装pyenv-virtualenv插件"><a href="#安装pyenv-virtualenv插件" class="headerlink" title="安装pyenv-virtualenv插件"></a>安装pyenv-virtualenv插件</h4><p>首先，确保你已经安装了<code>git</code>，如果没有，你可以通过运行以下命令安装：</p><div class="code-wrapper"><pre><code class="hljs bash">sudo apt-get install git</code></pre></div><p>然后，使用以下命令安装<code>pyenv-virtualenv</code>：</p><div class="code-wrapper"><pre><code class="hljs text">git clone https://github.com/pyenv/pyenv-virtualenv.git $.pyenv/plugins/pyenv-virtualenv</code></pre></div><p>使其生效</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc</code></pre></div><p>这将把<code>pyenv-virtualenv</code>作为<code>pyenv</code>的一个插件安装到你的系统中。</p><p>创建一个新的虚拟环境，你可以这样做：</p><div class="code-wrapper"><pre><code class="hljs bash">pyenv virtualenv 3.10.12 vm</code></pre></div><p>这将使用Python 3.10.12创建一个名为<code>vm</code>的虚拟环境。你可以通过以下命令切换到这个环境：</p><div class="code-wrapper"><pre><code class="hljs bash">pyenv activate vm</code></pre></div><p>要退出虚拟环境，使用：</p><div class="code-wrapper"><pre><code class="hljs bash">pyenv deactivate</code></pre></div><p>请注意，如果你使用的是zsh，你可能需要使用<code>pyenv shell vm</code>来激活环境，而不是<code>pyenv activate vm</code>。</p><p>删除名为”vm”的虚拟环境, 输入<code>y</code>然后按回车确定</p><div class="code-wrapper"><pre><code class="hljs bash">pyenv virtualenv-delete vm</code></pre></div><p>或者，如果你的版本较旧，可能会使用：</p><div class="code-wrapper"><pre><code class="hljs bash">pyenv virtualenv-uninstall vm</code></pre></div><p>如果你看到提示确认删除，输入<code>y</code>然后按回车。删除完成后，使用<code>pyenv versions</code>再次检查，”vm”应该已经被移除。</p><div class="code-wrapper"><pre><code class="hljs bash">pyenv versions</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>书签收集</title>
    <link href="/posts/3d5f58cb.html"/>
    <url>/posts/3d5f58cb.html</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>自用书签整理记录</p>          </div><h1 id="个人网盘"><a href="#个人网盘" class="headerlink" title="个人网盘"></a>个人网盘</h1><table><thead><tr><th>名称</th><th>URL</th></tr></thead><tbody><tr><td>谷歌网盘</td><td><a href="https://drive.google.com/drive/my-drive">https://drive.google.com/drive/my-drive</a></td></tr><tr><td>阿里云盘</td><td><a href="https://www.aliyundrive.com/">https://www.aliyundrive.com/</a></td></tr><tr><td>百度网盘</td><td><a href="https://pan.baidu.com/">https://pan.baidu.com/</a></td></tr><tr><td>123云盘</td><td><a href="https://www.123pan.com/">https://www.123pan.com/</a></td></tr><tr><td>蓝奏云储</td><td><a href="https://pc.woozooo.com/mydisk.php">https://pc.woozooo.com/mydisk.php</a></td></tr><tr><td>天翼云盘</td><td><a href="https://cloud.189.cn/web/login.html">https://cloud.189.cn/web/login.html</a></td></tr><tr><td>PikPak云盘</td><td><a href="https://mypikpak.com/drive/login?redirect=/all">https://mypikpak.com/drive/login?redirect=/all</a></td></tr><tr><td>onedrive</td><td><a href="https://url.taoshuge.eu.org/KFAzEZ">https://url.taoshuge.eu.org/KFAzEZ</a></td></tr><tr><td>SharePoint</td><td><a href="https://url.taoshuge.eu.org/MxYGan">https://url.taoshuge.eu.org/MxYGan</a></td></tr><tr><td>backblaze</td><td><a href="https://secure.backblaze.com/user_signin.htm">https://secure.backblaze.com/user_signin.htm</a></td></tr><tr><td>alist</td><td><a href="http://192.168.1.88:5244/">http://192.168.1.88:5244/</a></td></tr></tbody></table><h1 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h1><table><thead><tr><th>名称</th><th>URL</th></tr></thead><tbody><tr><td>果核剥壳</td><td><a href="https://www.ghxi.com/category/all/pcsoft">https://www.ghxi.com/category/all/pcsoft</a></td></tr><tr><td>Software</td><td><a href="https://oss.sunpma.com/?Software">https://oss.sunpma.com/?Software</a></td></tr><tr><td>OBS录屏</td><td><a href="https://obsproject.com/">https://obsproject.com/</a></td></tr><tr><td>PS论坛</td><td><a href="https://www.toprender.com/forum-160-1.html">https://www.toprender.com/forum-160-1.html</a></td></tr><tr><td>Adobe全套</td><td><a href="https://www.yuque.com/islandgg13/tdg1oz/dzmses">https://www.yuque.com/islandgg13/tdg1oz/dzmses</a></td></tr><tr><td>Windows系统下载</td><td><a href="https://hellowindows.cn/">https://hellowindows.cn/</a></td></tr><tr><td>windows10系统下载</td><td><a href="https://www.winos.me/windows10/">https://www.winos.me/windows10/</a></td></tr><tr><td>Uptodown</td><td><a href="https://www.uptodown.com/android">https://www.uptodown.com/android</a></td></tr><tr><td>小众软件</td><td><a href="https://www.appinn.com/">https://www.appinn.com/</a></td></tr><tr><td>磁力星球</td><td><a href="https://btstar.top/">https://btstar.top/</a></td></tr><tr><td>免费字体下载网站</td><td><a href="https://www.100font.com/">https://www.100font.com/</a></td></tr><tr><td>logo设计</td><td><a href="https://www.designevo.com/logo-maker/">https://www.designevo.com/logo-maker/</a></td></tr><tr><td>Microsoft Store</td><td><a href="https://store.rg-adguard.net/">https://store.rg-adguard.net/</a></td></tr></tbody></table><h1 id="素材收藏"><a href="#素材收藏" class="headerlink" title="素材收藏"></a>素材收藏</h1><table><thead><tr><th>名称</th><th>URL</th></tr></thead><tbody><tr><td>Free Stock</td><td><a href="https://www.videezy.com/">https://www.videezy.com/</a></td></tr><tr><td>天空之城</td><td><a href="https://www.skypixel.com/">https://www.skypixel.com/</a></td></tr><tr><td>pexels</td><td><a href="https://www.pexels.com/zh-cn/">https://www.pexels.com/zh-cn/</a></td></tr><tr><td>逗比表情包</td><td><a href="https://www.dbbqb.com/">https://www.dbbqb.com/</a></td></tr><tr><td>觅元素</td><td><a href="https://www.51yuansu.com/">https://www.51yuansu.com/</a></td></tr><tr><td>爱给网</td><td><a href="https://www.aigei.com/">https://www.aigei.com/</a></td></tr></tbody></table><h1 id="切片资源"><a href="#切片资源" class="headerlink" title="切片资源"></a>切片资源</h1><table><thead><tr><th>名称</th><th>URL</th></tr></thead><tbody><tr><td>天空资源站</td><td><a href="https://tiankongzy.com/">https://tiankongzy.com/</a></td></tr><tr><td>淘片资源网</td><td><a href="https://www.taopianzy.com/index.html">https://www.taopianzy.com/index.html</a></td></tr><tr><td>ikun资源站</td><td><a href="https://www.ikunzy.com/">https://www.ikunzy.com/</a></td></tr><tr><td>新浪资源</td><td><a href="https://www.xinlangzy.com/">https://www.xinlangzy.com/</a></td></tr><tr><td>迅雷电影天堂</td><td><a href="https://xunlei8.top/">https://xunlei8.top/</a></td></tr><tr><td>暴风资源</td><td><a href="https://bfzy1.tv/">https://bfzy1.tv/</a></td></tr><tr><td>hdzyk,高清资源库</td><td><a href="https://1080zyk1.com/">https://1080zyk1.com/</a></td></tr><tr><td>索尼资源网</td><td><a href="https://suonizy.net/">https://suonizy.net/</a></td></tr><tr><td>索尼资源网</td><td><a href="https://snzy1.com/">https://snzy1.com/</a></td></tr><tr><td>非凡资源网</td><td><a href="http://ffzy5.tv/">http://ffzy5.tv/</a></td></tr><tr><td>光速资源站</td><td><a href="https://guangsuzy.com/">https://guangsuzy.com/</a></td></tr><tr><td>量子资源网</td><td><a href="http://lzizy1.com/">http://lzizy1.com/</a></td></tr><tr><td>无尽资源采集</td><td><a href="http://www.wujinzy.com/">http://www.wujinzy.com/</a></td></tr><tr><td>红牛资源</td><td><a href="https://hongniuziyuan.com/">https://hongniuziyuan.com/</a></td></tr><tr><td>闪电资源网</td><td><a href="http://shan01.com/">http://shan01.com/</a></td></tr><tr><td>KK资源采集</td><td><a href="https://www.kkzy5.com/">https://www.kkzy5.com/</a></td></tr><tr><td>百度资源站</td><td><a href="http://bdzy.com/">http://bdzy.com/</a></td></tr><tr><td>CK资源采集网</td><td><a href="https://ckzy1.com/">https://ckzy1.com/</a></td></tr><tr><td>影视基地</td><td><a href="https://www.hifast.cn/favorites/films">https://www.hifast.cn/favorites/films</a></td></tr><tr><td>Mp4电影</td><td><a href="https://www.boxmp4.com/index.php">https://www.boxmp4.com/index.php</a></td></tr></tbody></table><h1 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h1><table><thead><tr><th>名称</th><th>URL</th></tr></thead><tbody><tr><td>Gmail</td><td><a href="https://mail.google.com/mail/u/0/#inbox">https://mail.google.com/mail/u/0/#inbox</a></td></tr><tr><td>QQ邮箱</td><td><a href="https://mail.qq.com/">https://mail.qq.com/</a></td></tr><tr><td>Zoho邮箱</td><td><a href="https://mail.zoho.com.cn/zm/#mail/folder/inbox">https://mail.zoho.com.cn/zm/#mail/folder/inbox</a></td></tr><tr><td>Outlook</td><td><a href="https://outlook.live.com/mail/0/">https://outlook.live.com/mail/0/</a></td></tr><tr><td>Proton Mail</td><td><a href="https://mail.proton.me/u/2/inbox">https://mail.proton.me/u/2/inbox</a></td></tr></tbody></table><h1 id="域名DNS"><a href="#域名DNS" class="headerlink" title="域名DNS"></a>域名DNS</h1><table><thead><tr><th>名称</th><th>URL</th></tr></thead><tbody><tr><td>Cloudflare</td><td><a href="https://dash.cloudflare.com/login">https://dash.cloudflare.com/login</a></td></tr><tr><td>Spaceship域名商</td><td><a href="https://www.spaceship.com/en/application/domain-list-application/">https://www.spaceship.com/en/application/domain-list-application/</a></td></tr><tr><td>GoDaddy</td><td><a href="https://www.godaddy.com/zh-sg">https://www.godaddy.com/zh-sg</a></td></tr><tr><td>NameSilo</td><td><a href="https://www.namesilo.com/account_domains.php">https://www.namesilo.com/account_domains.php</a></td></tr><tr><td>dynadot</td><td><a href="https://www.dynadot.com/zh/account/domain/name/list.html">https://www.dynadot.com/zh/account/domain/name/list.html</a></td></tr><tr><td>DNSPod</td><td><a href="https://console.dnspod.cn/dns/list">https://console.dnspod.cn/dns/list</a></td></tr><tr><td>Whois查询</td><td><a href="https://www.whois.com/whois">https://www.whois.com/whois</a></td></tr><tr><td>ClouDNS: Dashboard</td><td><a href="https://www.cloudns.net/main/">https://www.cloudns.net/main/</a></td></tr><tr><td>Freenom</td><td><a href="https://my.freenom.com/clientarea.php?action=domains">https://my.freenom.com/clientarea.php?action=domains</a></td></tr><tr><td>EU.org</td><td><a href="https://nic.eu.org/arf/en/login/?next=/arf/en/">https://nic.eu.org/arf/en/login/?next=/arf/en/</a></td></tr><tr><td>Manage Domain Names</td><td><a href="https://www.dynadot.com/account/domain/name/list.html">https://www.dynadot.com/account/domain/name/list.html</a></td></tr><tr><td>DNS啦</td><td><a href="https://dns.la/Manage/DomainList.aspx">https://dns.la/Manage/DomainList.aspx</a></td></tr><tr><td>域名价格优惠</td><td><a href="https://zh-hans.tld-list.com/">https://zh-hans.tld-list.com/</a></td></tr><tr><td>域名政策Cloudflare</td><td><a href="https://www.cloudflare-cn.com/tld-policies/">https://www.cloudflare-cn.com/tld-policies/</a></td></tr><tr><td>porkbun.com</td><td><a href="https://porkbun.com/tld/com">https://porkbun.com/tld/com</a></td></tr></tbody></table><h1 id="VPS商家"><a href="#VPS商家" class="headerlink" title="VPS商家"></a>VPS商家</h1><table><thead><tr><th>名称</th><th>URL</th></tr></thead><tbody><tr><td>斯巴达</td><td><a href="https://billing.spartanhost.net/login">https://billing.spartanhost.net/login</a></td></tr><tr><td>OVH云</td><td><a href="https://ca.ovh.com/manager/#/hub">https://ca.ovh.com/manager/#/hub</a></td></tr><tr><td>RAKsmart</td><td><a href="https://billing.raksmart.com/whmcs/clientarea.php?action=products">https://billing.raksmart.com/whmcs/clientarea.php?action=products</a></td></tr><tr><td>V.PS</td><td><a href="https://vps.hosting/clientarea/">https://vps.hosting/clientarea/</a></td></tr><tr><td>Dogyun</td><td><a href="https://cvm.dogyun.com/server/list">https://cvm.dogyun.com/server/list</a></td></tr><tr><td>vultr</td><td><a href="https://my.vultr.com/">https://my.vultr.com/</a></td></tr><tr><td>阿里云</td><td><a href="https://home.console.aliyun.com/home/dashboard/ProductAndService">https://home.console.aliyun.com/home/dashboard/ProductAndService</a></td></tr><tr><td>LiteServer</td><td><a href="https://clients.liteserver.nl/index.php?rp=/store/nvme-ssd-vps">https://clients.liteserver.nl/index.php?rp=/store/nvme-ssd-vps</a></td></tr><tr><td>DMIT</td><td><a href="https://www.dmit.io/clientarea.php">https://www.dmit.io/clientarea.php</a></td></tr><tr><td>腾讯云</td><td><a href="https://console.cloud.tencent.com/lighthouse/instance/index?rid=15">https://console.cloud.tencent.com/lighthouse/instance/index?rid=15</a></td></tr><tr><td>RackNerd</td><td><a href="https://my.racknerd.com/cart.php?a=confproduct&i=1">https://my.racknerd.com/cart.php?a=confproduct&amp;i=1</a></td></tr><tr><td>VMISS</td><td><a href="https://app.vmiss.com/cart.php?a=checkout">https://app.vmiss.com/cart.php?a=checkout</a></td></tr><tr><td>ZgoCloud</td><td><a href="https://clients.zgovps.com/index.php?/cart/los-angeles-amd-performance-vps/&step=0">https://clients.zgovps.com/index.php?/cart/los-angeles-amd-performance-vps/&amp;step=0</a></td></tr><tr><td>hostdare</td><td><a href="https://bill.hostdare.com/cart.php?a=confproduct&i=0">https://bill.hostdare.com/cart.php?a=confproduct&amp;i=0</a></td></tr><tr><td>卢森堡官网</td><td><a href="https://my.frantech.ca/cart.php?gid=39">https://my.frantech.ca/cart.php?gid=39</a></td></tr><tr><td>contabo服务器</td><td><a href="https://contabo.com/en/vps/">https://contabo.com/en/vps/</a></td></tr><tr><td>buyvm后台</td><td><a href="https://manage.buyvm.net/">https://manage.buyvm.net/</a></td></tr><tr><td>KURUN</td><td><a href="https://www.kurun.com/cart?fid=5&gid=5">https://www.kurun.com/cart?fid=5&amp;gid=5</a></td></tr></tbody></table><h1 id="我的工具"><a href="#我的工具" class="headerlink" title="我的工具"></a>我的工具</h1><table><thead><tr><th>名称</th><th>URL</th></tr></thead><tbody><tr><td>GitHub</td><td><a href="https://github.com/woniu336?tab=repositories">https://github.com/woniu336?tab=repositories</a></td></tr><tr><td>CSDN博客</td><td><a href="https://blog.csdn.net/u010066597?type=blog">https://blog.csdn.net/u010066597?type=blog</a></td></tr><tr><td>汇率</td><td><a href="https://wise.com/zh-cn/currency-converter/usd-to-cny-rate?amount=10">https://wise.com/zh-cn/currency-converter/usd-to-cny-rate?amount=10</a></td></tr><tr><td>网络测速 - 一个木函</td><td><a href="https://ol.woobx.cn/tool/speedtest">https://ol.woobx.cn/tool/speedtest</a></td></tr><tr><td>中国科学技术大学测速网站</td><td><a href="https://test.ustc.edu.cn/">https://test.ustc.edu.cn/</a></td></tr><tr><td>LeanCloud</td><td><a href="https://console.leancloud.app/apps">https://console.leancloud.app/apps</a></td></tr><tr><td>测速</td><td><a href="https://www.speedtest.net/zh-Hans/run">https://www.speedtest.net/zh-Hans/run</a></td></tr><tr><td>Gitee仓库</td><td><a href="https://gitee.com/dayu777/projects">https://gitee.com/dayu777/projects</a></td></tr><tr><td>notion</td><td><a href="https://www.notion.so/">https://www.notion.so/</a></td></tr><tr><td>Vercel</td><td><a href="https://vercel.com/woniu336s-projects">https://vercel.com/woniu336s-projects</a></td></tr><tr><td>server酱</td><td><a href="https://sct.ftqq.com/sendkey">https://sct.ftqq.com/sendkey</a></td></tr><tr><td>高清壁纸 · Pexels</td><td><a href="https://www.pexels.com/zh-cn/search/wallpaper/">https://www.pexels.com/zh-cn/search/wallpaper/</a></td></tr><tr><td>小众技术</td><td><a href="http://www.xiaozhongjishu.com/">http://www.xiaozhongjishu.com/</a></td></tr><tr><td>免抠图片网</td><td><a href="https://miankoutupian.com/">https://miankoutupian.com/</a></td></tr><tr><td>自动剪辑神器</td><td><a href="https://autocut.video/">https://autocut.video/</a></td></tr><tr><td>用文本编辑器剪视频</td><td><a href="https://github.com/mli/autocut">https://github.com/mli/autocut</a></td></tr><tr><td>以图搜图</td><td><a href="https://yandex.com/images/">https://yandex.com/images/</a></td></tr><tr><td>油猴插件</td><td><a href="https://greasyfork.org/zh-CN/scripts">https://greasyfork.org/zh-CN/scripts</a></td></tr><tr><td>Squoosh压缩图片</td><td><a href="https://squoosh.app/">https://squoosh.app/</a></td></tr><tr><td>PayPal</td><td><a href="https://www.paypal.com/hk">https://www.paypal.com/hk</a></td></tr><tr><td>万里汇</td><td><a href="https://portal.worldfirst.com.cn/">https://portal.worldfirst.com.cn/</a></td></tr><tr><td>Microsoft Azure</td><td><a href="https://portal.azure.com/#home">https://portal.azure.com/#home</a></td></tr><tr><td>Microsoft 365</td><td><a href="https://www.office.com/?auth=2">https://www.office.com/?auth=2</a></td></tr></tbody></table><h1 id="站长工具"><a href="#站长工具" class="headerlink" title="站长工具"></a>站长工具</h1><table><thead><tr><th>名称</th><th>URL</th></tr></thead><tbody><tr><td>ITDOG-狗</td><td><a href="https://www.itdog.cn/ping/">https://www.itdog.cn/ping/</a></td></tr><tr><td>SEO综合查询</td><td><a href="https://seo.chinaz.com/">https://seo.chinaz.com/</a></td></tr><tr><td>51.LA</td><td><a href="https://v6.51.la/report/overview?comId=392490">https://v6.51.la/report/overview?comId=392490</a></td></tr><tr><td>友盟+</td><td><a href="https://mobile.umeng.com/platform/apps/list">https://mobile.umeng.com/platform/apps/list</a></td></tr><tr><td>百度统计</td><td><a href="https://tongji.baidu.com/web5/welcome/login">https://tongji.baidu.com/web5/welcome/login</a></td></tr><tr><td>小鸡监控平台</td><td><a href="https://ping0.cc/vpsmon/30day">https://ping0.cc/vpsmon/30day</a></td></tr><tr><td>vps789-全球主机测速平台</td><td><a href="https://www.vps789.com/">https://www.vps789.com/</a></td></tr><tr><td>IP查询</td><td><a href="https://ipinfo.io/">https://ipinfo.io/</a></td></tr><tr><td>IP地址查询</td><td><a href="https://ping0.cc/">https://ping0.cc/</a></td></tr><tr><td>百度图片上传</td><td><a href="https://img.fzxx.xyz/index2">https://img.fzxx.xyz/index2</a></td></tr><tr><td>测速</td><td><a href="https://speed.cloudflare.com/">https://speed.cloudflare.com/</a></td></tr><tr><td>网站诊断</td><td><a href="https://pagespeed.web.dev/?hl=zh-cn">https://pagespeed.web.dev/?hl=zh-cn</a></td></tr><tr><td>网站必应</td><td><a href="https://www.bing.com/webmasters/">https://www.bing.com/webmasters/</a></td></tr><tr><td>Google Search</td><td><a href="https://search.google.com/search-console/welcome">https://search.google.com/search-console/welcome</a></td></tr><tr><td>斯巴达监控</td><td><a href="https://stock.hostmonit.com/spartanhostE5S">https://stock.hostmonit.com/spartanhostE5S</a></td></tr><tr><td>v.ps速度测试</td><td><a href="https://v.ps/speedtest/">https://v.ps/speedtest/</a></td></tr><tr><td>RackNerd 测速</td><td><a href="http://lg-sea.racknerd.com/">http://lg-sea.racknerd.com/</a></td></tr><tr><td>IP125.com</td><td><a href="https://ip125.com/">https://ip125.com/</a></td></tr><tr><td>大咖网盟</td><td><a href="http://dakawm.cc/index/user/login.html">http://dakawm.cc/index/user/login.html</a></td></tr><tr><td>Cloudflare Tunnels</td><td><a href="https://url.taoshuge.eu.org/YtnMHZ">https://url.taoshuge.eu.org/YtnMHZ</a></td></tr><tr><td>被墙查询</td><td><a href="http://www.chaicp.com/home_cha/chaymqiang_z">http://www.chaicp.com/home_cha/chaymqiang_z</a></td></tr><tr><td>七牛云 -图床</td><td><a href="https://portal.qiniu.com/kodo/bucket/resource-v2?bucketName=rss-note">https://portal.qiniu.com/kodo/bucket/resource-v2?bucketName=rss-note</a></td></tr><tr><td>SK app</td><td><a href="https://skapp.one/">https://skapp.one/</a></td></tr></tbody></table><h1 id="AI工具"><a href="#AI工具" class="headerlink" title="AI工具"></a>AI工具</h1><table><thead><tr><th>名称</th><th>URL</th></tr></thead><tbody><tr><td>chatgpt</td><td><a href="https://chat.openai.com/chat">https://chat.openai.com/chat</a></td></tr><tr><td>Chat Cohere</td><td><a href="https://coral.cohere.com/">https://coral.cohere.com/</a></td></tr><tr><td>Poe</td><td><a href="https://poe.com/">https://poe.com/</a></td></tr><tr><td>perplexity</td><td><a href="https://www.perplexity.ai/">https://www.perplexity.ai/</a></td></tr><tr><td>Kimi</td><td><a href="https://kimi.moonshot.cn/">https://kimi.moonshot.cn/</a></td></tr><tr><td>Google AI</td><td><a href="https://aistudio.google.com/app/prompts/new_chat">https://aistudio.google.com/app/prompts/new_chat</a></td></tr><tr><td>魔搭社区</td><td><a href="https://www.modelscope.cn/home">https://www.modelscope.cn/home</a></td></tr><tr><td>Ollama</td><td><a href="https://ollama.com/">https://ollama.com/</a></td></tr><tr><td>Groq</td><td><a href="https://console.groq.com/playground">https://console.groq.com/playground</a></td></tr><tr><td>huggingface</td><td><a href="https://huggingface.co/models">https://huggingface.co/models</a></td></tr><tr><td>AI工具集导航</td><td><a href="https://ai-bot.cn/">https://ai-bot.cn/</a></td></tr><tr><td>DeepSeek 开放平台</td><td><a href="https://platform.deepseek.com/usage">https://platform.deepseek.com/usage</a></td></tr><tr><td>GPT-4 Coze</td><td><a href="https://url.taoshuge.eu.org/cHxPRk">https://url.taoshuge.eu.org/cHxPRk</a></td></tr><tr><td>大模型评测</td><td><a href="https://huggingface.co/spaces/lmsys/chatbot-arena-leaderboard">https://huggingface.co/spaces/lmsys/chatbot-arena-leaderboard</a></td></tr><tr><td>有声内容创作</td><td><a href="https://speech.microsoft.com/portalaudiocontentcreation">https://speech.microsoft.com/portalaudiocontentcreation</a></td></tr><tr><td>Llama中文社区</td><td><a href="https://llama.family/">https://llama.family/</a></td></tr><tr><td>Slack</td><td><a href="https://w1705985611-wd3656803.slack.com/">https://w1705985611-wd3656803.slack.com/</a></td></tr><tr><td>Clipchamp</td><td><a href="https://app.clipchamp.com/">https://app.clipchamp.com/</a></td></tr><tr><td>API keys</td><td><a href="https://platform.openai.com/account/api-keys">https://platform.openai.com/account/api-keys</a></td></tr><tr><td>API Keys  Cohere</td><td><a href="https://dashboard.cohere.com/api-keys">https://dashboard.cohere.com/api-keys</a></td></tr></tbody></table><h1 id="个人网站"><a href="#个人网站" class="headerlink" title="个人网站"></a>个人网站</h1><table><thead><tr><th>分类</th><th>URL</th></tr></thead><tbody><tr><td>科技lion 官方博客</td><td><a href="https://kejilion.blogspot.com/">https://kejilion.blogspot.com/</a></td></tr><tr><td>我不是咕咕鸽</td><td><a href="https://blog.laoda.de/">https://blog.laoda.de/</a></td></tr><tr><td>Dongdong’s Blog</td><td><a href="https://ddw2019.com/">https://ddw2019.com/</a></td></tr><tr><td>白日梦与诗</td><td><a href="https://www.brmys.top/">https://www.brmys.top/</a></td></tr><tr><td>银河录像局</td><td><a href="https://nf.video/yinhe/web/?sharedId=89308">https://nf.video/yinhe/web/?sharedId=89308</a></td></tr><tr><td>主机格调</td><td><a href="https://zhuji.gd/">https://zhuji.gd/</a></td></tr><tr><td>主机测评</td><td><a href="https://www.zhujiceping.com/">https://www.zhujiceping.com/</a></td></tr><tr><td>大鸟博客</td><td><a href="https://www.daniao.org/">https://www.daniao.org/</a></td></tr><tr><td>笨猫博客</td><td><a href="https://www.nbmao.com/">https://www.nbmao.com/</a></td></tr><tr><td>CMDPE</td><td><a href="https://www.cmdpe.com/">https://www.cmdpe.com/</a></td></tr><tr><td>VPS GO</td><td><a href="https://www.vpsgo.com/">https://www.vpsgo.com/</a></td></tr><tr><td>DongVPS</td><td><a href="https://www.dongvps.com/">https://www.dongvps.com/</a></td></tr><tr><td>环球巴士</td><td><a href="https://universalbus.cn/?s=1LwjP6RN30">https://universalbus.cn/?s=1LwjP6RN30</a></td></tr><tr><td>IOIOX</td><td><a href="https://www.ioiox.com/">https://www.ioiox.com/</a></td></tr><tr><td>东评西就</td><td><a href="https://dongjunke.cn/">https://dongjunke.cn/</a></td></tr><tr><td>盒子萌</td><td><a href="https://www.boxmoe.com/">https://www.boxmoe.com/</a></td></tr><tr><td>HelloGitHub</td><td><a href="https://hellogithub.com/">https://hellogithub.com/</a></td></tr><tr><td>nb.ID</td><td><a href="https://nbid.bid/blog/">https://nbid.bid/blog/</a></td></tr></tbody></table><h1 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h1><table><thead><tr><th>分类</th><th>URL</th></tr></thead><tbody><tr><td>西部世界</td><td><a href="https://fuqing.cz/clientarea.php">https://fuqing.cz/clientarea.php</a></td></tr><tr><td>追风岛</td><td><a href="https://58zfdao.com/auth/login">https://58zfdao.com/auth/login</a></td></tr><tr><td>小强cloud</td><td><a href="https://xqcloud.icu/#/login">https://xqcloud.icu/#/login</a></td></tr><tr><td>翻墙工具</td><td><a href="https://url.taoshuge.eu.org/jA4HwS">https://url.taoshuge.eu.org/jA4HwS</a></td></tr><tr><td>弄子里</td><td><a href="https://su.ygjzjg.com/">https://su.ygjzjg.com</a></td></tr><tr><td>速云梯</td><td><a href="https://suyunti1.com/user##">https://suyunti1.com/user##</a></td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title> Llama3 – 8B/70B 大模型！相关的工具和模型下载</title>
    <link href="/posts/af406e21.html"/>
    <url>/posts/af406e21.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>因为平时会去了解AI相关的东西,写脚本也会用到,所以,记录一下</p></blockquote><p><img src="https://imgs.leshans.eu.org/docs/1714954487.png"></p><h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3><p>在开源大模型领域中，Llama3是非常强大的工具！Meta公司发布了两个性能强悍的大模型，即8B和70B，并即将发布400B，可以与GPT-4一较高下！今天我们将介绍三种本地部署方法，简单易懂，非常适合新手！</p><ol><li><p><code>GPT4All</code>：适合低配置用户，可以在CPU&#x2F;GPU上运行。</p><p><a href="https://gpt4all.io/">下载地址</a></p></li><li><p><code>LMstudio</code>：支持下载多个模型，包括8B和70B等，提供更多模型选择！</p><p><a href="https://lmstudio.ai/">下载地址</a></p></li><li><p><code>Ollama</code>：支持多平台！</p><p><a href="https://ollama.com/">下载地址</a></p></li><li><p><code>AnythingLLM</code></p><p> <a href="https://useanything.com/">下载地址</a></p></li><li><p><code>open-webui</code></p><p> <a href="https://github.com/open-webui/open-webui">下载地址</a></p></li></ol><h3 id="模型下载"><a href="#模型下载" class="headerlink" title="模型下载"></a>模型下载</h3><ul><li>Huggingface <a href="https://huggingface.co/">Hugging Face</a></li><li>Huggingface 镜像站 <a href="https://hf-mirror.com/">HF Mirror</a></li><li>魔搭社区 <a href="https://modelscope.cn/models">ModelScope</a></li></ul><h3 id="在线体验（免费API）"><a href="#在线体验（免费API）" class="headerlink" title="在线体验（免费API）"></a>在线体验（免费API）</h3><ul><li><a href="https://build.nvidia.com/explore/discover">NVIDIA Build</a></li><li><a href="https://console.groq.com/playground">Groq Playground</a></li><li><a href="https://www.perplexity.ai/">Perplexity AI</a></li><li><a href="https://llama.family/model">Llama Family</a></li><li><a href="https://app.tavily.com/home">Tavily</a></li></ul><h3 id="开源大模型API价格"><a href="#开源大模型API价格" class="headerlink" title="开源大模型API价格"></a>开源大模型API价格</h3><ul><li><a href="https://deepinfra.com/pricing">DeepInfra Pricing</a></li><li><a href="https://llmpricecheck.com/">LLM Price Check</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>永不过期的SSL/TLS证书解决方案</title>
    <link href="/posts/562a2571.html"/>
    <url>/posts/562a2571.html</url>
    
    <content type="html"><![CDATA[<p>前提: </p><ol><li>cloudflare API 密钥</li><li>宝塔面板</li><li>安装了nginx</li></ol><p>如果你不使用宝塔面板,可以参照脚本修改</p><p><strong>生成证书脚本</strong></p><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/ssl_pro.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x ssl_pro.sh &amp;&amp; ./ssl_pro.sh</code></pre></div><p>使用方法: <a href="https://blog.csdn.net/u010066597/article/details/137851521">https://blog.csdn.net/u010066597/article/details/137851521</a></p><p>如果你使用了生成脚本成功安装了证书,理论上可以不需要续签脚本了,因为生成脚本已经实现了续签的功能,续签脚本相当于双重保险.</p><p><strong>自动续签脚本</strong></p><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/autossl.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x autossl.sh &amp;&amp; ./autossl.sh</code></pre></div><p><strong>定时执行</strong></p><p>每天凌晨两点20分执行</p><div class="code-wrapper"><pre><code class="hljs bash">(crontab -l ; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;20 2 * * * cd ~ &amp;&amp; ./autossl.sh &gt;/dev/null 2&gt;&amp;1&quot;</span>) | crontab -</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu开启zram彻底解决高I/O引起的卡顿，复制文件无比流畅</title>
    <link href="/posts/16004f5a.html"/>
    <url>/posts/16004f5a.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>环境: Ubuntu 22.04.3 LTS</p></blockquote><p>ZRAM 的原理是：</p><ol><li>将一块内存区域作为虚拟的块设备,</li><li>压缩页面交换数据,</li><li>存储在内存中,</li><li>释放物理内存空间</li><li>可用的物理内存就能随之变多</li></ol><h2 id="开启-加载-zRAM-模块"><a href="#开启-加载-zRAM-模块" class="headerlink" title="开启&#x2F;加载 zRAM 模块"></a>开启&#x2F;加载 zRAM 模块</h2><div class="code-wrapper"><pre><code class="hljs bash">sudo modprobe zram num_devices=1lsmod  | grep zram</code></pre></div><h3 id="安装zram-config"><a href="#安装zram-config" class="headerlink" title="安装zram-config"></a>安装zram-config</h3><div class="code-wrapper"><pre><code class="hljs Shell">sudo apt install zram-config</code></pre></div><h3 id="加载zram模块"><a href="#加载zram模块" class="headerlink" title="加载zram模块"></a>加载zram模块</h3><div class="code-wrapper"><pre><code class="hljs Shell">sudo modprobe zram</code></pre></div><p>更新initramfs以加载zram模块(可选)</p><div class="code-wrapper"><pre><code class="hljs Shell">sudo update-initramfs -u</code></pre></div><p>使用<code>sudo</code>命令启用zram-config服务：</p><div class="code-wrapper"><pre><code class="hljs Shell">sudo systemctl enable zram-config</code></pre></div><p> 使用<code>sudo</code>命令启动zram-config服务：</p><div class="code-wrapper"><pre><code class="hljs Shell">sudo systemctl start zram-config</code></pre></div><p> 重启zram-config服务以应用更改：(释放内存)</p><div class="code-wrapper"><pre><code class="hljs Shell">sudo service zram-config restart</code></pre></div><h3 id="修改swappiness参数"><a href="#修改swappiness参数" class="headerlink" title="修改swappiness参数"></a>修改swappiness参数</h3><div class="code-wrapper"><pre><code class="hljs Shell">sudo vim /etc/sysctl.conf</code></pre></div><p>末尾添加</p><div class="code-wrapper"><pre><code class="hljs bash">vm.swappiness = 180</code></pre></div><p>应用新的swappiness设置：</p><div class="code-wrapper"><pre><code class="hljs Shell">sudo sysctl -p /etc/sysctl.conf</code></pre></div><h2 id="启用-ZRAM-内核模块"><a href="#启用-ZRAM-内核模块" class="headerlink" title="启用 ZRAM 内核模块"></a>启用 ZRAM 内核模块</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;zram&quot;</span> | sudo <span class="hljs-built_in">tee</span> /etc/modules-load.d/zram.conf<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;options zram num_devices=1&quot;</span> | sudo <span class="hljs-built_in">tee</span> /etc/modprobe.d/zram.conf</code></pre></div><p><strong>使其立即生效</strong></p><div class="code-wrapper"><pre><code class="hljs bash">sudo modprobe zram</code></pre></div><h2 id="配置-zram0-设备"><a href="#配置-zram0-设备" class="headerlink" title="配置 zram0 设备"></a>配置 zram0 设备</h2><p><strong>查看默认压缩算法,带括号就是默认的</strong></p><div class="code-wrapper"><pre><code class="hljs Shell">cat /sys/block/zram0/comp_algorithm</code></pre></div><p><strong>查看zram大小</strong></p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /sys/block/zram0/disksize</code></pre></div><p><strong>配置持久化</strong></p><p><code>lz4hc</code> 为压缩算法<br><code>2G</code> 为zram大小,推荐大小为物理内存的一半</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;KERNEL==&quot;zram0&quot;, ATTR&#123;comp_algorithm&#125;=&quot;lz4hc&quot;, ATTR&#123;disksize&#125;=&quot;2G&quot;, TAG+=&quot;systemd&quot;&#x27;</span> | sudo <span class="hljs-built_in">tee</span>  /etc/udev/rules.d/99-zram.rules</code></pre></div><p><strong>然后重载模块</strong></p><div class="code-wrapper"><pre><code class="hljs bash">sudo modprobe zram</code></pre></div><h2 id="将-zram0-设备配置为-Swap"><a href="#将-zram0-设备配置为-Swap" class="headerlink" title="将 zram0 设备配置为 Swap"></a>将 zram0 设备配置为 Swap</h2><div class="code-wrapper"><pre><code class="hljs bash">sudo mkswap /dev/zram0sudo swapon /dev/zram0</code></pre></div><p><strong>开机自启</strong></p><div class="code-wrapper"><pre><code class="hljs bash">sudo vim /etc/systemd/system/zram.service</code></pre></div><p><strong>添加内容</strong></p><div class="code-wrapper"><pre><code class="hljs bash">[Unit]Description=ZRAMBindsTo=dev-zram0.deviceAfter=dev-zram0.device[Service]Type=oneshotRemainAfterExit=<span class="hljs-literal">true</span>ExecStartPre=/sbin/mkswap /dev/zram0ExecStart=/sbin/swapon -p 2 /dev/zram0ExecStop=/sbin/swapoff /dev/zram0[Install]WantedBy=multi-user.target</code></pre></div><p><strong>重载配置文件</strong></p><div class="code-wrapper"><pre><code class="hljs bash">systemctl daemon-reloadsudo systemctl <span class="hljs-built_in">enable</span> zram</code></pre></div><p><strong>最后重启服务器</strong></p><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">reboot</span></code></pre></div><h2 id="查看zram设备"><a href="#查看zram设备" class="headerlink" title="查看zram设备"></a>查看zram设备</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> /dev/zram*</code></pre></div><p>查看已加载的 ZRAM 模块</p><div class="code-wrapper"><pre><code class="hljs bash">lsmod | grep zram</code></pre></div><p>显示已启用的交换空间</p><div class="code-wrapper"><pre><code class="hljs shell">swapon --show</code></pre></div><p>查看<code>zram0</code>设备</p><div class="code-wrapper"><pre><code class="hljs shell">lsblk</code></pre></div><h2 id="调整优先级"><a href="#调整优先级" class="headerlink" title="调整优先级"></a><strong>调整优先级</strong></h2><p>目的是让zram优先使用</p><p>先关闭swap</p><div class="code-wrapper"><pre><code class="hljs bash">sudo swapoff -a</code></pre></div><p>再开启swap</p><div class="code-wrapper"><pre><code class="hljs bash">sudo swapon -a</code></pre></div><p>查看</p><div class="code-wrapper"><pre><code class="hljs bash">swapon --show</code></pre></div><p>输出信息</p><div class="code-wrapper"><pre><code class="hljs fortran">vagrant@ubuntu:~$ swapon --show<span class="hljs-keyword">NAME</span>       <span class="hljs-keyword">TYPE</span>      <span class="hljs-built_in">SIZE</span> USED PRIO/dev/zram0 partition <span class="hljs-number">982</span>M   <span class="hljs-number">0</span>B    <span class="hljs-number">5</span>/swap.img  <span class="hljs-keyword">file</span>        <span class="hljs-number">2</span>G   <span class="hljs-number">0</span>B   -<span class="hljs-number">2</span></code></pre></div><p><code>-2</code>：表示这个交换空间被标记为不活跃的，也就是说，这个交换空间不会被默认使用</p><p><code>5</code>：这是一个正整数优先级，具有默认的优先级。当系统需要进行交换时，会按照优先级的顺序逐个使用这些交换空间。</p><h2 id="测压"><a href="#测压" class="headerlink" title="测压"></a>测压</h2><p>安装stress工具</p><div class="code-wrapper"><pre><code class="hljs bash">sudo apt install stress</code></pre></div><p>测试</p><div class="code-wrapper"><pre><code class="hljs bash">stress --vm 1 --vm-bytes 2G --<span class="hljs-built_in">timeout</span> 60s</code></pre></div><p>这将启动一个stress进程，它会尝试分配2GB的内存并保持该状态持续60秒</p><p>因为我的物理内存是2G,所以我使用2G测试,当zram耗尽时,就会启用swap</p><p>可以另外开一个窗口,使用top命令查看系统状态</p><div class="code-wrapper"><pre><code class="hljs bash">top</code></pre></div><h2 id="ZRAM-分析"><a href="#ZRAM-分析" class="headerlink" title="ZRAM 分析"></a>ZRAM 分析</h2><div class="code-wrapper"><pre><code class="hljs bash">zramctl --output-all</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Cloudflare防火墙其他WAF设置</title>
    <link href="/posts/f9256692.html"/>
    <url>/posts/f9256692.html</url>
    
    <content type="html"><![CDATA[<h3 id="其他WAF设置"><a href="#其他WAF设置" class="headerlink" title="其他WAF设置"></a>其他WAF设置</h3><p><img src="https://imgs.leshans.eu.org/docs/1714477832.png"></p><h3 id="缓存设置"><a href="#缓存设置" class="headerlink" title="缓存设置"></a>缓存设置</h3><p>缓存设置好也可以帮助我们抵挡巨量的CC攻击。有些CC是很多IP随即攻击一个地址，如果我们的安全策略没有拦截到攻击。但是我们设置了缓存，那这些请求则会在CloudFlare边缘节点直接将缓存内容返回给请求。也达到了抗攻击的效果。</p><p>缓存设置是在多个位置进行的。下面大家看截图就好。</p><p><img src="https://imgs.leshans.eu.org/docs/1714477908.png"></p><h3 id="创建静态文件的缓存规则"><a href="#创建静态文件的缓存规则" class="headerlink" title="创建静态文件的缓存规则"></a>创建静态文件的缓存规则</h3><p><img src="https://imgs.leshans.eu.org/docs/1714477947.png"></p><p><img src="https://imgs.leshans.eu.org/docs/1714478116.png"></p><p>表达式:</p><div class="code-wrapper"><pre><code class="hljs bash">(http.request.full_uri contains <span class="hljs-string">&quot;.gif&quot;</span>) or (http.request.full_uri contains <span class="hljs-string">&quot;.js&quot;</span>) or (http.request.full_uri contains <span class="hljs-string">&quot;.css&quot;</span>) or (http.request.full_uri contains <span class="hljs-string">&quot;.woff2&quot;</span>) or (http.request.full_uri contains <span class="hljs-string">&quot;.webp&quot;</span>) or (http.request.full_uri contains <span class="hljs-string">&quot;.png&quot;</span>) or (http.request.full_uri contains <span class="hljs-string">&quot;.jpg&quot;</span>) or (http.request.full_uri contains <span class="hljs-string">&quot;.jpeg&quot;</span>)</code></pre></div><p>缓存时间看个人情况</p><p><img src="https://imgs.leshans.eu.org/docs/1714478050.png"></p><p><img src="https://imgs.leshans.eu.org/docs/1714478072.png"></p><h3 id="开启Tiered-Cache"><a href="#开启Tiered-Cache" class="headerlink" title="开启Tiered Cache"></a>开启Tiered Cache</h3><p><img src="https://imgs.leshans.eu.org/docs/1714478161.png"></p><h3 id="页面规则"><a href="#页面规则" class="headerlink" title="页面规则"></a>页面规则</h3><p><img src="https://imgs.leshans.eu.org/docs/1714478219.png"></p><h3 id="关闭洋葱路由"><a href="#关闭洋葱路由" class="headerlink" title="关闭洋葱路由"></a><strong>关闭洋葱路由</strong></h3><p><img src="https://imgs.leshans.eu.org/docs/1714478264.png"></p><h3 id="Scrape-Shield"><a href="#Scrape-Shield" class="headerlink" title="Scrape Shield"></a>Scrape Shield</h3><p><img src="https://imgs.leshans.eu.org/docs/1714479434.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Cloudflare</tag>
      
      <tag>防火墙</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cloudflare高级防御规则 看看我的网站如何用防御的</title>
    <link href="/posts/d06d821a.html"/>
    <url>/posts/d06d821a.html</url>
    
    <content type="html"><![CDATA[<p>网站已趋于稳定，并且经过nginx调优。我想先分享一下Cloudflare的WAF规则，因为这是最有效的防御之一，可以抵御大量恶意攻击流量，我已经验证了数月。</p><p>对于海外独立站电商网站，Cloudflare的CDN服务是首选，它强大无比，毫无疑问。对于中小型需求，直接免费使用就可以了，接入后网站的加速和防护都交给CF处理，这是最稳妥的选择。</p><p>让我们开始吧！</p><h2 id="进入WAF配置页"><a href="#进入WAF配置页" class="headerlink" title="进入WAF配置页"></a>进入WAF配置页</h2><p>进入CF的后台，选择你要防御的站点域名。</p><p><img src="https://imgs.leshans.eu.org/docs/1714472509.png"></p><p>记得在DNS选项，开启小云朵。这就开启CDN了，后续防御规则才会生效。<br><img src="https://imgs.leshans.eu.org/docs/1714472603.png"></p><p><strong>选择安全性–WAF</strong></p><p><img src="https://imgs.leshans.eu.org/docs/1714472625.png"></p><p><strong>四个WAF规则</strong></p><p>添加完规则后请使用鼠标拖拽方式把四个规则的排序按照下面顺序排列,最上面的优先执行:</p><p><img src="https://imgs.leshans.eu.org/docs/1714473840.png"></p><p><strong>选择正则表达式添加规则，复制规则保存即可。</strong></p><p><img src="https://imgs.leshans.eu.org/docs/1714473166.png"></p><h2 id="防御规则配置"><a href="#防御规则配置" class="headerlink" title="防御规则配置"></a>防御规则配置</h2><p>以下列出四个规则的正则表达式</p><h3 id="放行原站IP"><a href="#放行原站IP" class="headerlink" title="放行原站IP"></a>放行原站IP</h3><p>IPV4和IPV6地址改成自己</p><div class="code-wrapper"><pre><code class="hljs bash">(ip.src eq 192.168.7.17) or (ip.src eq 2901:c080:1110:4c91:5400:4ff:feb8:130a)</code></pre></div><p>没有ipv6</p><div class="code-wrapper"><pre><code class="hljs bash">(ip.src eq 192.168.7.17)</code></pre></div><p>选择操作: <code>跳过  </code></p><p>要跳过的 WAF 组件: <code>所有其余自定义规则</code></p><p><img src="https://imgs.leshans.eu.org/docs/1714473218.png"></p><h3 id="阻止垃圾蜘蛛"><a href="#阻止垃圾蜘蛛" class="headerlink" title="阻止垃圾蜘蛛"></a>阻止垃圾蜘蛛</h3><div class="code-wrapper"><pre><code class="hljs bash">(http.user_agent contains <span class="hljs-string">&quot;YandexBot&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;DotBot&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;SemrushBot&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;AhrefsBot&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;BLEXBot&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;YaK&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;PetalBot&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;MJ12bot&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;MauiBot&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;MegaIndex.ru&quot;</span>)</code></pre></div><p>选择操作: <code>阻止</code></p><p><img src="https://imgs.leshans.eu.org/docs/1714473343.png"></p><h3 id="放行SEO爬虫"><a href="#放行SEO爬虫" class="headerlink" title="放行SEO爬虫"></a>放行SEO爬虫</h3><p>无脑复制即可，无需修改，</p><div class="code-wrapper"><pre><code class="hljs bash">(cf.client.bot) or (http.user_agent contains <span class="hljs-string">&quot;duckduckgo&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;facebookexternalhit&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;Feedfetcher-Google&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;LinkedInBot&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;Mediapartners-Google&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;msnbot&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;Slackbot&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;TwitterBot&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;ia_archive&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;yahoo&quot;</span>)</code></pre></div><p>选择操作: <code>跳过</code></p><p><img src="https://imgs.leshans.eu.org/docs/1714473413.png"></p><h3 id="阻止恶意流量"><a href="#阻止恶意流量" class="headerlink" title="阻止恶意流量"></a>阻止恶意流量</h3><div class="code-wrapper"><pre><code class="hljs bash">(cf.threat_score ge 5 and not cf.client.bot) or (not http.request.version <span class="hljs-keyword">in</span> &#123;<span class="hljs-string">&quot;HTTP/2&quot;</span> <span class="hljs-string">&quot;HTTP/3&quot;</span> <span class="hljs-string">&quot;HTTP/1.1&quot;</span>&#125;) or (not ip.geoip.country <span class="hljs-keyword">in</span> &#123;<span class="hljs-string">&quot;AU&quot;</span> <span class="hljs-string">&quot;CA&quot;</span> <span class="hljs-string">&quot;FR&quot;</span> <span class="hljs-string">&quot;DE&quot;</span> <span class="hljs-string">&quot;HK&quot;</span> <span class="hljs-string">&quot;IR&quot;</span> <span class="hljs-string">&quot;JP&quot;</span> <span class="hljs-string">&quot;KR&quot;</span> <span class="hljs-string">&quot;MY&quot;</span> <span class="hljs-string">&quot;SG&quot;</span> <span class="hljs-string">&quot;TW&quot;</span> <span class="hljs-string">&quot;GB&quot;</span> <span class="hljs-string">&quot;US&quot;</span> <span class="hljs-string">&quot;CN&quot;</span>&#125;)</code></pre></div><p>选择操作: <code>托管质询</code></p><p><img src="https://imgs.leshans.eu.org/docs/1714473433.png"></p><p>国家地区: 表示你允许哪些国家访问你的网站,或者说你业务的范围包含哪些国家,</p><p>这些大写字母是国家或地区的简称，在其中的都是放行的国家。如果你只在香港做业务可以只填写HK，其余的全部会进入质询拦截模式，俗称CF的5秒盾。</p><p>CloudFlare 默认威胁分数5, 实测基本给攻击全漏了进来，设置3同样有漏IP。所以根据2023年9月目前的网络来说这里建议设置为2！</p><p><img src="https://imgs.leshans.eu.org/docs/1714473915.png"></p><h3 id="速率限制"><a href="#速率限制" class="headerlink" title="速率限制"></a>速率限制</h3><p>对了还有频率限制，也很关键。</p><p><img src="https://imgs.leshans.eu.org/docs/1714471453.png"><br><img src="https://imgs.leshans.eu.org/docs/1714471493.png"></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>1: 如果你的某些docker项目或者探针出现问题,请在阻止恶意流量那里把Http&#x2F;1.1添加到规则</p><p><img src="https://imgs.leshans.eu.org/docs/1714473602.png"></p><p>2: 添加完规则后请使用鼠标拖拽方式把四个规则的排序按照下面顺序排列,最上面的优先执行:</p><p><img src="https://imgs.leshans.eu.org/docs/1714472952.png"></p><p><strong>后续观察</strong></p><p>这一波设置基本就ok了。可以放几天试试，观察放行和拦截情况。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Fail2Ban对接cloudflare防火墙技巧</title>
    <link href="/posts/a81b4be4.html"/>
    <url>/posts/a81b4be4.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>我的大部分教程或者叫笔记,除了给自己看,考虑到其他朋友也会看到,本着简洁明白的原则,我基本上会制作一些快捷脚本,方便大家使用,本次脚本,我针对使用宝塔面板的朋友,当然,使用什么看个人情况,你可以更改我的脚本,已达到适合你的方式</p></blockquote><p><img src="https://imgs.leshans.eu.org/docs/1714246505.png"></p><h2 id="fail2ban原理"><a href="#fail2ban原理" class="headerlink" title="fail2ban原理"></a>fail2ban原理</h2><p> Fail2ban通过监视日志文件，检测并阻止恶意登录尝试和攻击.</p><p> 当Fail2ban检测到系统日志中的恶意行为模式时，它会自动阻止攻击者的IP地址，以保护系统安全。</p><h2 id="安装fail2ban"><a href="#安装fail2ban" class="headerlink" title="安装fail2ban"></a>安装fail2ban</h2><p><strong>Debian&#x2F;Ubuntu安装</strong></p><p>使用root用户</p><div class="code-wrapper"><pre><code class="hljs bash">apt update -y &amp;&amp; apt install -y fail2ban</code></pre></div><p><strong>CentOS安装</strong></p><div class="code-wrapper"><pre><code class="hljs bash">yum update -y yum install -y epel-release yum install -y  fail2banyum install -y  nano</code></pre></div><p><strong>启动</strong></p><div class="code-wrapper"><pre><code class="hljs bash">systemctl start fail2ban</code></pre></div><p><strong>开机自启</strong></p><div class="code-wrapper"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> fail2ban</code></pre></div><p><strong>查看状态</strong></p><div class="code-wrapper"><pre><code class="hljs bash">systemctl status fail2ban</code></pre></div><p>按键盘 <code>q</code> 退出</p><h2 id="获取Cloudflare令牌"><a href="#获取Cloudflare令牌" class="headerlink" title="获取Cloudflare令牌"></a>获取Cloudflare令牌</h2><p>到cf后台<code>右上角</code>我的个人资料，选择左侧API令牌，获取<code>Global API Key</code></p><p>获取地址:  <a href="https://dash.cloudflare.com/login">https://dash.cloudflare.com/login</a></p><p><img src="https://imgs.leshans.eu.org/docs/1714246547.png"></p><h2 id="对接Cloudflare"><a href="#对接Cloudflare" class="headerlink" title="对接Cloudflare"></a>对接Cloudflare</h2><p>以下脚本适用于宝塔面板建站的朋友</p><p><strong>一键脚本</strong></p><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/fail2ban.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x fail2ban.sh &amp;&amp; ./fail2ban.sh</code></pre></div><p><strong>国内机器</strong></p><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://gitee.com/dayu777/open_shell/raw/main/fail2ban-c.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x fail2ban-c.sh &amp;&amp; ./fail2ban-c.sh</code></pre></div><p><strong>使用方法</strong></p><p>选择 12 : <code>对接cloudflare防火墙</code>, 输入coudflare的登录账号,输入Global API Key</p><p><img src="https://imgs.leshans.eu.org/docs/1714246505.png"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><strong>注意要点1:</strong> 因为我们需要对接cloudflare,就必须开启cloudflare的<code>cdn</code>,也就是把<code>小云朵</code>打开.</p><p><strong>注意要点2:</strong> 在cloudflare的后台, SSL&#x2F;TLS模式改为 <code>完全(严格)</code>  或者 <code>完全</code>   </p><p>区别: <code>完全(严格)</code> 模式需要你的域名已经有了ssl证书, 如果还没有开启ssl,可以使用<code>完全</code>模式</p><p><strong>注意要点3:</strong> 打开宝塔面板,修改网站配置,如下图:</p><p>把 <code>access_log /dev/null;</code> 改成 <code>access_log /www/wwwlogs/access.log;</code> 然后重启nginx使其生效</p><p><img src="https://imgs.leshans.eu.org/docs/1714249834.png"></p><p>开启ssl:</p><p><img src="https://imgs.leshans.eu.org/docs/1714247803.png"></p><p><strong>如何测试是否生效</strong></p><ol><li><p>打开脚本,选择第8项: <code>查看日志实时监控</code></p></li><li><p>假设你的网站是 <a href="https://baidu.com/">https://baidu.com</a>  , 你就在后面加上一串不存在的字符, 例如:  <a href="https://baidu.com/saddddx">https://baidu.com/saddddx</a>  这样返回的基本上就是404页面或者提示不存在,</p></li><li><p>观察终端的实时日志,你就会看到你的本地ip访问了一个不存在的页面,超过5次,将被拉进小黑屋一个小时,如果需要解除ip,选择第10个菜单,输入你本地的ip即可(不是服务器ip)</p></li><li><p>在cloudflare后台,打开站点,导航到 <code>安全性</code> – <code>事件</code>  你就会看到被拉黑的ip</p></li><li><p>更多功能自行探索吧,很晚了,睡觉了..</p></li><li><p>最后,告诉你一个秘密: 使用<a href="https://www.itdog.cn/http/">https://www.itdog.cn/http/</a>  测速,多测几次,注意是把不存在的页面拿来测试,会把itdog的ip拉黑,效果显著! cf后台可以看到,</p></li><li><p>解除拉黑: 先选择菜单6:<code>查看网站拦截记录</code> 复制被拉黑的一长串ip,然后在回车,选择菜单10,粘贴ip即可.</p></li></ol><p><img src="https://imgs.leshans.eu.org/docs/1714246687.png"></p><p><img src="https://imgs.leshans.eu.org/docs/1714246646.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Cloudflare</tag>
      
      <tag>fail2Ban</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一键安装宝塔面板破解版</title>
    <link href="/posts/cddd6ecc.html"/>
    <url>/posts/cddd6ecc.html</url>
    
    <content type="html"><![CDATA[<h3 id="一键脚本"><a href="#一键脚本" class="headerlink" title="一键脚本"></a>一键脚本</h3><div class="code-wrapper"><pre><code class="hljs bash">curl -sSO https://gitee.com/dayu777/btpanel-v7.7.0/raw/main/install/install_panel.sh &amp;&amp; bash install_panel.sh</code></pre></div><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://gitee.com/dayu777/open_shell/raw/main/optimize.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x optimize.sh &amp;&amp; ./optimize.sh</code></pre></div><ul><li>已去除宝塔面板强制绑定账号.</li><li>已去除各种计算题与延时等待.</li><li>已去除创建网站自动创建的垃圾文件.</li><li>已关闭未绑定域名提示页面.</li><li>已关闭安全入口登录提示页面.</li><li>已去除消息推送与文件校验.</li><li>已去除面板日志与绑定域名上报.</li><li>已关闭活动推荐与在线客服.</li><li>如需还原之前的样子，请在面板首页点击<code>“修复”</code></li></ul><h2 id="手动破解"><a href="#手动破解" class="headerlink" title="手动破解"></a>手动破解</h2><p><code>先登录面板，然后破解</code>，去除登陆需要绑定账号：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -f /www/server/panel/data/bind.pl</code></pre></div><p>手动解锁宝塔所有付费插件为永不过期</p><div class="code-wrapper"><pre><code class="hljs bash">sed -i <span class="hljs-string">&#x27;s/&quot;endtime&quot;: -1/&quot;endtime&quot;: 999999999999/g&#x27;</span> /www/server/panel/data/plugin.json</code></pre></div><p> 给plugin.json文件上锁防止自动修复为免费版</p><div class="code-wrapper"><pre><code class="hljs bash">chattr +i /www/server/panel/data/plugin.json</code></pre></div><h3 id="去后门"><a href="#去后门" class="headerlink" title="去后门"></a>去后门</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; /www/server/panel/script/site_task.pysudo chattr +i /www/server/panel/script/site_task.pysudo <span class="hljs-built_in">rm</span> -rf /www/server/panel/logs/request/*sudo chattr +i -R /www/server/panel/logs/request</code></pre></div><h3 id="净化面板"><a href="#净化面板" class="headerlink" title="净化面板"></a>净化面板</h3><div class="code-wrapper"><pre><code class="hljs bash">wget -O /tmp/bt.zip https://gitee.com/dayu777/open_shell/raw/main/bt/bt.zip</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">unzip -uo /tmp/bt.zip -d /www/server/panel/BTPanel/templates/default</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> /tmp/bt.zip</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">bt restart</code></pre></div><h3 id="软件商店列表无法打开解决办法"><a href="#软件商店列表无法打开解决办法" class="headerlink" title="软件商店列表无法打开解决办法"></a>软件商店列表无法打开解决办法</h3><p>大陆和香港服务器</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#优先选择这条命令执行</span>sed -i <span class="hljs-string">&quot;/bt.cn/d&quot;</span> /etc/hosts<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;103.179.243.14 www.bt.cn download.bt.cn api.bt.cn dg1.bt.cn dg2.bt.cn&quot;</span> &gt;&gt; /etc/hosts</code></pre></div><p>海外服务器:</p><div class="code-wrapper"><pre><code class="hljs bash">sed -i <span class="hljs-string">&quot;/bt.cn/d&quot;</span> /etc/hosts<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;128.1.164.196 www.bt.cn download.bt.cn api.bt.cn dg1.bt.cn dg2.bt.cn&quot;</span> &gt;&gt; /etc/hosts</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>完美的acme证书申请脚本-基于宝塔面板与cloudflare API</title>
    <link href="/posts/3e8a77eb.html"/>
    <url>/posts/3e8a77eb.html</url>
    
    <content type="html"><![CDATA[<br><p>此脚本仅适用于 <strong>宝塔面板</strong> 与 <strong>cloudflare DNS</strong> 验证 ，打引号的完美，大佬别见笑~</p><p>所以，首先你的域名要解析在cloudflare，使用的是宝塔建站</p><p>证书安装完成，后面可以自动更新了。</p><hr><br><p>一键脚本：</p><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/ssl_pro.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x ssl_pro.sh &amp;&amp; ./ssl_pro.sh</code></pre></div><p>国内：</p><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://gitee.com/dayu777/open_shell/raw/main/ssl_pro.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x ssl_pro.sh &amp;&amp; ./ssl_pro.sh</code></pre></div><hr><p>acme.sh 一般有两种方式验证: <code>http</code> 和 <code>dns</code> 验证</p><p>此脚本使用的是 <strong>cloudflare</strong> <code>dns</code> 验证，结合宝塔面板的证书安装路径制作的</p><p><strong>cloudflare API 密钥</strong>获取方式：个人资料 – API令牌 – Global API Key</p><hr><p><img src="https://imgs.leshans.eu.org/docs/1713307622.png"></p><p>注意要点：选择<code>第4项</code>：生成并安装证书  这里需要注意一点:</p><p>宝塔面板会<strong>根据排序</strong>,优先使用<strong>第一个</strong>绑定的域名作为证书路径,</p><p>比如: <code>baidu.com,www.baidu.com,blog.baidu.com</code>,那么<code>baidu.com</code>就是第一个绑定的域名,<strong>证书路径</strong>就是:<br><code>/www/server/panel/vhost/cert/baidu.com</code></p><p>所以先输入首域名作为证书路径(baidu.com)，接着再全部输入要生成证书的域名，可以多个或者通配符，<strong>以空格</strong>隔开</p><p><img src="https://imgs.leshans.eu.org/docs/1713307638.png"><br><img src="https://imgs.leshans.eu.org/docs/1713365393.png"><br><img src="https://imgs.leshans.eu.org/docs/1713307652.png"></p><h2 id="谷歌证书申请方法"><a href="#谷歌证书申请方法" class="headerlink" title="谷歌证书申请方法"></a>谷歌证书申请方法</h2><p>打开链接：<a href="https://cloud.google.com/sdk/gcloud/reference/publicca?hl=zh-cn">https://cloud.google.com/sdk/gcloud/reference/publicca?hl=zh-cn</a></p><p>点击右上角终端，提示授权，确认<br><img src="https://imgs.leshans.eu.org/docs/1713307675.png"></p><hr><p>输入以下命令：</p><div class="code-wrapper"><pre><code class="hljs bash">gcloud publicca external-account-keys create</code></pre></div><p><img src="https://imgs.leshans.eu.org/docs/1713307693.png"></p><p>获取到 <strong>b64MacKey</strong>  和 <strong>keyId</strong>  保存好，在脚本选择 <code>Google Public CA </code>  作为默认证书，输入keyId 和 b64MacKey</p><p><img src="https://imgs.leshans.eu.org/docs/1713307708.png"></p><p>完结，似乎一个域名只能用一次谷歌生成的keyId和 b64MacKey ，其他域名需要重新生成<br>&#96;</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>acme实用技巧：稳妥的自动更新证书之宝塔面板</title>
    <link href="/posts/ca40c71c.html"/>
    <url>/posts/ca40c71c.html</url>
    
    <content type="html"><![CDATA[<br><h2 id="1-安装-acme-sh"><a href="#1-安装-acme-sh" class="headerlink" title="1. 安装 acme.sh"></a>1. 安装 acme.sh</h2><p>安装很简单, 一个命令:</p><div class="code-wrapper"><pre><code class="hljs bash">curl https://get.acme.sh | sh -s email=my@example.com</code></pre></div><p>把 <code>my@example.com</code> 改成自己的邮箱</p><p>安装成功后，会为你自动创建定时任务, 如果快过期了, 需要更新, 则会自动更新证书。</p><p>默认情况下，证书将<code>每60天</code>更新一次。</p><hr><p><strong>切换默认证书</strong></p><p>目前 acme.sh 支持 Let’s Encrypt、Buypass、ZeroSSL、SSL.com 和 Google Public CA，默认使用 ZeroSSL，如果需要更换可以使用下面命令：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#切换 Let&#x27;s Encrypt</span>acme.sh --set-default-ca --server letsencrypt<span class="hljs-comment">#切换 Buypass</span>acme.sh --set-default-ca --server buypass<span class="hljs-comment">#切换 ZeroSSL</span>acme.sh --set-default-ca --server zerossl<span class="hljs-comment">#切换 SSL.com</span>acme.sh --set-default-ca --server ssl.com<span class="hljs-comment">#切换 Google Public CA</span>acme.sh --set-default-ca --server google</code></pre></div><h1 id="2-设置DNS验证"><a href="#2-设置DNS验证" class="headerlink" title="2. 设置DNS验证"></a>2. 设置DNS验证</h1><p>文档：<a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi">https://github.com/acmesh-official/acme.sh/wiki/dnsapi</a></p><p>以 CloudFlare为例：<strong>使用全局API密钥</strong></p><p>准备：全局API密钥在 <strong>我的个人资料</strong>–<strong>API令牌</strong>–<strong>Global API Key</strong> 获得</p><p>设置CloudFlare DNS自动验证使用下面命令：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> CF_Key=<span class="hljs-string">&quot;763eac4f1bcebd8b5c95e9fc50d010b4&quot;</span>  <span class="hljs-comment">#API密钥</span><span class="hljs-built_in">export</span> CF_Email=<span class="hljs-string">&quot;123456@qq.com&quot;</span>               <span class="hljs-comment">#登录邮箱</span></code></pre></div><h1 id="3-生成证书"><a href="#3-生成证书" class="headerlink" title="3. 生成证书"></a>3. 生成证书</h1><p>如果之前安装过证书，后面加 <code>--force</code> 参数，</p><div class="code-wrapper"><pre><code class="hljs bash">acme.sh --issue --dns dns_cf -d xxx.com -d *.xxx.com</code></pre></div><p>成功之后，会在 <code>~/.acme.sh/</code>目录生成以域名为名称的文件夹，里面包含了证书和各种信息</p><p>不要通配符，可以去掉：<code>-d *.xxx.com</code>  ，如果有多个子域名，后面加 <code>-d x.xxx.com</code></p><p><code>--dns dns_cf</code>  表示使用CloudFlare DNS 自动验证</p><h1 id="4-安装证书（重点）"><a href="#4-安装证书（重点）" class="headerlink" title="4. 安装证书（重点）"></a>4. 安装证书（重点）</h1><p>假设：你网站使用的是nginx，<strong>使用以下命令</strong> </p><div class="code-wrapper"><pre><code class="hljs bash">acme.sh --install-cert -d xxx.com -d *.xxx.com \--key-file       /www/server/panel/vhost/cert/xxx.com/privkey.pem  \--fullchain-file /www/server/panel/vhost/cert/xxx.com/fullchain.pem \--reloadcmd     <span class="hljs-string">&quot;service nginx force-reload&quot;</span></code></pre></div><p>使用这条命令时先要生成证书（第三步）</p><p>不要通配符，可以去掉：<code>-d *.xxx.com</code>  ，如果有多个子域名，后面加 <code>-d x.xxx.com</code></p><p><strong>命令解读</strong></p><ul><li><code>--install-cert</code>           #安装证书 </li><li><code>--key-file</code>                  #指定安装证书密钥路径 </li><li><code>--fullchain-file</code>       #指定安装证书路径 </li><li><code>--reloadcmd</code>               #重新加载nginx生效</li></ul><p><strong>为什么要使用那么多参数</strong></p><ol><li><p>因为acme证书虽然60天更新一次，但是更新的证书路径是：<code>~/.acme.sh/xxx.com</code>  </p></li><li><p>你的域名指向的证书路径并不是在 <code>~/.acme.sh/</code></p></li><li><p>不能使用~&#x2F;.acme.sh&#x2F;文件夹中的证书文件，它们仅供内部使用，文件夹结构将来可能会更改</p></li><li><p>这些参数会被<strong>acme保存起来</strong>，下次自动更新时就会自动把证书安装到指定的路径，然后帮你<strong>重新加载nginx生效</strong></p></li></ol><p>所以，你要先知道你的域名证书指向的路径在哪，以宝塔面板为例：</p><p><img src="https://imgs.leshans.eu.org/docs/1713284044.png"></p><div class="code-wrapper"><pre><code class="hljs bash">/www/server/panel/vhost/cert/xxx.com/fullchain.pem/www/server/panel/vhost/cert/xxx.com/privkey.pem</code></pre></div><h1 id="5-签发ECC证书"><a href="#5-签发ECC证书" class="headerlink" title="5. 签发ECC证书"></a>5. 签发ECC证书</h1><p><strong>使用以下命令</strong> （以nginx为例）</p><div class="code-wrapper"><pre><code class="hljs bash">acme.sh --install-cert -d xxx.com -d *.xxx.com --keylength ec-256 \--key-file       /www/server/panel/vhost/cert/xxx.com/privkey.pem  \--fullchain-file /www/server/panel/vhost/cert/xxx.com/fullchain.pem \--reloadcmd     <span class="hljs-string">&quot;service nginx force-reload&quot;</span></code></pre></div><p>多了 <code>--keylength ec-256</code>  参数</p><h1 id="6-强制更新证书"><a href="#6-强制更新证书" class="headerlink" title="6.强制更新证书"></a>6.强制更新证书</h1><p>所有证书将每60天自动更新一次，但你要强制更新的话</p><div class="code-wrapper"><pre><code class="hljs bash">acme.sh --renew -d xxx.com --force</code></pre></div><p>或者，对于ECC证书:</p><div class="code-wrapper"><pre><code class="hljs bash">acme.sh --renew -d xxx.com --force --ecc</code></pre></div><h1 id="如何停止证书续订"><a href="#如何停止证书续订" class="headerlink" title="如何停止证书续订"></a>如何停止证书续订</h1><p>要停止证书的续订，您可以执行以下操作以从续订列表中删除证书:</p><div class="code-wrapper"><pre><code class="hljs shell">acme.sh --remove -d xxx.com [--ecc]</code></pre></div><p>不会从磁盘中删除证书&#x2F;密钥文件。</p><p>您可以自己删除相应的目录 (例如 <code>~/.acme.sh/xxx.com</code> )。</p><h1 id="如何升级-acme-sh"><a href="#如何升级-acme-sh" class="headerlink" title="如何升级 acme.sh"></a>如何升级 <code>acme.sh</code></h1><p>您可以将acme.sh更新为最新代码:</p><div class="code-wrapper"><pre><code class="hljs shell">acme.sh --upgrade</code></pre></div><p>您还可以启用自动升级:</p><div class="code-wrapper"><pre><code class="hljs shell">acme.sh --upgrade --auto-upgrade</code></pre></div><p>然后acme.sh将自动保持最新。</p><p> 禁用自动升级:</p><div class="code-wrapper"><pre><code class="hljs shell">acme.sh --upgrade --auto-upgrade 0</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker-compose 与 docker compose 区别</title>
    <link href="/posts/a3db1cf5.html"/>
    <url>/posts/a3db1cf5.html</url>
    
    <content type="html"><![CDATA[<p>Docker Compose 有两种使用方式,分别是 <code>docker-compose</code> 和 <code>docker compose</code>。这两种方式之间存在一些差异:</p><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a><code>docker-compose</code></h2><ul><li><code>docker-compose</code> 是一个独立的可执行文件,通常位于 <code>/usr/local/bin/docker-compose</code> 或 <code>/usr/bin/docker-compose</code>。</li><li>这种方式是 Docker Compose 的传统用法,在早期版本中一直沿用。</li><li>使用 <code>docker-compose</code> 命令时,需要确保该可执行文件在系统 PATH 中可访问。</li></ul><h2 id="docker-compose-1"><a href="#docker-compose-1" class="headerlink" title="docker compose"></a><code>docker compose</code></h2><ul><li><code>docker compose</code> 是从 Docker 19.03 版本开始引入的新用法。</li><li>这种方式将 Docker Compose 功能集成到了 Docker 命令行工具中,作为一个子命令使用。</li><li>使用 <code>docker compose</code> 命令时,不需要单独安装 <code>docker-compose</code> 可执行文件,因为它是 Docker 命令行工具的一部分。</li></ul><p>两种方式的主要区别在于:</p><ol><li><p><strong>集成程度</strong>:</p><ul><li><code>docker-compose</code> 是一个独立的工具,需要单独安装和配置。</li><li><code>docker compose</code> 是 Docker 命令行工具的一部分,更加紧密地集成在 Docker 生态中。</li></ul></li><li><p><strong>兼容性</strong>:</p><ul><li><code>docker-compose</code> 可以在任何支持 Docker 的系统上使用,不受 Docker 版本的限制。</li><li><code>docker compose</code> 需要 Docker 19.03 及以上版本才能使用。</li></ul></li></ol><p>总的来说,<code>docker compose</code> 是 Docker 官方推荐的新用法,它提供了更好的集成和用户体验。但如果你需要在较旧的 Docker 版本上使用 Docker Compose,或者需要更多的灵活性,那么使用 <code>docker-compose</code> 命令可能更合适。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker安装脚本与区别</title>
    <link href="/posts/8e30f9e8.html"/>
    <url>/posts/8e30f9e8.html</url>
    
    <content type="html"><![CDATA[<h2 id="脚本一"><a href="#脚本一" class="headerlink" title="脚本一"></a>脚本一</h2><div class="code-wrapper"><pre><code class="hljs bash">curl -fsSL https://get.docker.com | sh &amp;&amp; <span class="hljs-built_in">ln</span> -s /usr/libexec/docker/cli-plugins/docker-compose /usr/local/binsystemctl start docker systemctl <span class="hljs-built_in">enable</span> docker</code></pre></div><ol><li>这个命令会先安装 Docker 引擎。</li><li>然后它会创建一个符号链接 <code>/usr/local/bin/docker-compose</code>，指向 Docker 安装目录中的 <code>docker-compose</code> 可执行文件。</li><li>也就是说,这个命令会安装 Docker Compose 作为 Docker 引擎的一部分。</li></ol><h2 id="脚本二"><a href="#脚本二" class="headerlink" title="脚本二"></a>脚本二</h2><div class="code-wrapper"><pre><code class="hljs bash">curl -fsSL https://get.docker.com | shcurl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/latest/download/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose<span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose</code></pre></div><ol><li>这个命令也会先安装 Docker 引擎。</li><li>然后它会单独下载最新版本的 Docker Compose 可执行文件,并将其保存到 <code>/usr/local/bin/docker-compose</code>。</li><li>最后它会给 Docker Compose 可执行文件添加可执行权限。</li></ol><p>所以第一个命令是安装 Docker 引擎和 Docker Compose 的一体化方式,而第二个命令是分开安装 Docker 引擎和 Docker Compose 的最新版本。</p><p>如果你需要使用最新版本的 Docker Compose,建议使用第二个命令。如果你只需要使用 Docker 引擎附带的 Docker Compose 版本,那么第一个命令就足够了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>给远程数据库添加一个可以外部访问的用户</title>
    <link href="/posts/73c005d4.html"/>
    <url>/posts/73c005d4.html</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>有时候我需要使用navicat工具来访问远程数据库，会遇到访问不了的情况，所以记录下方法。</p>          </div><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><ol><li>首先打开ssh终端，进入数据库，提示输入数据库密码</li></ol><div class="code-wrapper"><pre><code class="hljs css">mysql -u root -<span class="hljs-selector-tag">p</span></code></pre></div><ol start="2"><li>例如：添加一个名为<code>pp</code>的用户，密码是<code>pp123</code></li></ol><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;pp&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;pp123&#x27;</span> <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">OPTION</span>;</code></pre></div><ol start="3"><li>确保对权限所做的任何更改立即生效</li></ol><div class="code-wrapper"><pre><code class="hljs abnf">FLUSH PRIVILEGES<span class="hljs-comment">;</span></code></pre></div><ol start="4"><li>退出</li></ol><div class="code-wrapper"><pre><code class="hljs mathematica">按 <span class="hljs-variable">Ctrl</span> <span class="hljs-operator">+</span> <span class="hljs-built_in">D</span></code></pre></div><div class="note note-info">            <p>以上表示允许用户从任何主机访问数据库，但如果加以限制，只允许本地ip为8.8.8.8的用户访问数据库呢？</p>          </div><p>只需要修改第二步：</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;pp&#x27;</span>@<span class="hljs-string">&#x27;8.8.8.8&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;pp123&#x27;</span> <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">OPTION</span>;</code></pre></div><h3 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h3><p>还是先进入数据库</p><div class="code-wrapper"><pre><code class="hljs css">mysql -u root -<span class="hljs-selector-tag">p</span></code></pre></div><p>查看用户</p><div class="code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">User</span>, Host, <span class="hljs-keyword">Password</span> <span class="hljs-keyword">FROM</span> mysql.<span class="hljs-keyword">user</span>;</code></pre></div><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><p>例如：删除用户名为“pp”的用户帐户</p><div class="code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;pp&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两台服务器利用rclone同步文件解决方案</title>
    <link href="/posts/5b25d373.html"/>
    <url>/posts/5b25d373.html</url>
    
    <content type="html"><![CDATA[<h3 id="安装rclone"><a href="#安装rclone" class="headerlink" title="安装rclone"></a>安装rclone</h3><p>服务器A同步文件到服务器B</p><p>首先在服务器<code>A</code>安装rclone,使用以下命令安装</p><div class="code-wrapper"><pre><code class="hljs bash">sudo -v ; curl https://rclone.org/install.sh | sudo bash</code></pre></div><h3 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a><strong>生成密钥对</strong></h3><p>在服务器<code>A</code>生成密钥对，并合并密钥，复制以下命令</p><div class="code-wrapper"><pre><code class="hljs bash">ssh-keygen -q -t rsa -b 4096 -C <span class="hljs-string">&quot;rclone key&quot;</span> -N <span class="hljs-string">&quot;&quot;</span> -f ~/.ssh/rclone <span class="hljs-comment">#静默生成rclone密钥对</span><span class="hljs-built_in">cd</span> ~/.ssh/<span class="hljs-built_in">cat</span> rclone* &gt; rclone-merged   <span class="hljs-comment"># 将密钥对合并，否则会连接失败</span></code></pre></div><p>会在<code>/root/.ssh/</code>目录下生成 <code>rclone.pub</code>，<code>rclone</code>，以及<code>rclone-merged</code> 三个文件</p><h3 id="复制公钥到服务器B"><a href="#复制公钥到服务器B" class="headerlink" title="复制公钥到服务器B"></a><strong>复制公钥到服务器B</strong></h3><p>假设服务器<code>B</code>的ip是192.168.1.33，ssh端口是33，使用以下命令，然后输入服务器B的密码即可</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#在服务器A输入以下命令</span>ssh-copy-id -i ~/.ssh/rclone.pub -f -p 33 root@192.168.1.33 <span class="hljs-comment">#自行修改为你自己的</span></code></pre></div><h3 id="手动复制"><a href="#手动复制" class="headerlink" title="手动复制"></a><strong>手动复制</strong></h3><p>在服务器A打开<code>rclone.pub</code>，复制里面的内容，在<strong>服务器B</strong><code>/root/.ssh/</code></p><p>的目录下新建<code>authorized_keys</code>文件,粘贴内容到<code>authorized_keys</code></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a><strong>配置文件</strong></h3><p>在服务器A编辑<code>rclone.conf</code>文件，没有的话需要新建</p><p>新建</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> ~/.config/rclone/rclone.conf</code></pre></div><p>编辑rclone.conf</p><div class="code-wrapper"><pre><code class="hljs bash">nano ~/.config/rclone/rclone.conf</code></pre></div><p>只需要修改<strong>标识符</strong>，服务器B的<strong>ip</strong>，<strong>user</strong>, <strong>port</strong>,  其他不用动<br><code>标识符</code>就是标记服务器B的，</p><div class="code-wrapper"><pre><code class="hljs bash">[serb]        <span class="hljs-comment">#标识符，很重要，可以随意起</span><span class="hljs-built_in">type</span> = sftphost = 192.168.1.33  <span class="hljs-comment">#改为服务器B的ip</span>user = root     <span class="hljs-comment">#默认root用户</span>port = 22       <span class="hljs-comment">#默认22端口，如果是其他端口请修改</span>key_file = ~/.ssh/rclone-merged  shell_type = unixmd5sum_command = <span class="hljs-built_in">md5sum</span>sha1sum_command = <span class="hljs-built_in">sha1sum</span></code></pre></div><h3 id="开始同步"><a href="#开始同步" class="headerlink" title="开始同步"></a>开始同步</h3><p><strong>多个文件夹同步（需在同级目录下）</strong></p><p>假设服务器A下的<code>/www/wwwroot</code>，有<code>n个</code>文件夹，而你只想要同步aa和bb两个文件夹，把aa和bb同步到服务器B的<code>/www/kkk</code>目录，使用以下命令</p><div class="code-wrapper"><pre><code class="hljs bash">rclone <span class="hljs-built_in">sync</span> /www/wwwroot serb:/www/kkk -u -v -P --transfers=20 --ignore-errors --buffer-size=128M --check-first --checkers=10 --drive-acknowledge-abuse --include <span class="hljs-string">&quot;/&#123;aa,bb&#125;/**&quot;</span></code></pre></div><p><strong>单个文件夹同步</strong></p><p>同步服务器A<code>/www/wwwroot/aa</code> 到 服务器B <code>/www/kkk</code></p><div class="code-wrapper"><pre><code class="hljs bash">rclone <span class="hljs-built_in">sync</span> /www/wwwroot/aa serb:/www/kkk -u -v -P --transfers=20 --ignore-errors --buffer-size=128M --check-first --checkers=10 --drive-acknowledge-abuse</code></pre></div><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p>把要执行同步的命令输入即可</p><div class="code-wrapper"><pre><code class="hljs bash">sudo curl -sS -O https://gitee.com/dayu777/open_shell/raw/main/synct.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x synct.sh &amp;&amp; ./synct.sh</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 22.04 安装 Clash</title>
    <link href="/posts/a9b4e219.html"/>
    <url>/posts/a9b4e219.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>在个人的开发平台上到处都需要<code>网络代理环境</code>，<code>Clash</code>是款用Go语言开发的软件，可以直接下载预编译的版本进行</p></blockquote><h2 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 切换超级管理员</span>sudo -i<span class="hljs-comment"># 创建文件夹</span><span class="hljs-built_in">cd</span> &amp;&amp; <span class="hljs-built_in">mkdir</span> clash<span class="hljs-built_in">cd</span> clash</code></pre></div><p>下载文件</p><div class="code-wrapper"><pre><code class="hljs bash">wget https://raw.githubusercontent.com/woniu336/linuxmint/main/clash-linux-amd64-v1.18.0.gz</code></pre></div><h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 解压文件</span>gzip -d clash-linux-amd64-v1.18.0.gz<span class="hljs-comment"># 给予权限</span><span class="hljs-built_in">chmod</span> +x clash-linux-amd64-v1.18.0<span class="hljs-comment"># 改名移动</span><span class="hljs-built_in">mv</span> clash-linux-amd64-v1.18.0 /usr/local/bin/clash<span class="hljs-comment"># 查看版本</span>clash -v</code></pre></div><h2 id="3、启动"><a href="#3、启动" class="headerlink" title="3、启动"></a>3、启动</h2><p>启动 Clash，生成 <code>~/.config/clash/config.yaml</code> 文件</p><div class="code-wrapper"><pre><code class="hljs bash">clash</code></pre></div><p>进入目录配置文件</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/.config/clash/</code></pre></div><p>把订阅地址的配置文件导入本地配置文件</p><div class="code-wrapper"><pre><code class="hljs bash">wget -O config.yaml 订阅地址</code></pre></div><p>下载mmdb文件</p><div class="code-wrapper"><pre><code class="hljs bash">wget https://raw.githubusercontent.com/woniu336/linuxmint/main/Country.mmdb</code></pre></div><p>如果是自建的Clash订阅节点，下载模板配置文件，修改<code>V2ray</code>配置块，</p><div class="code-wrapper"><pre><code class="hljs bash">wget -O config.yaml https://raw.githubusercontent.com/woniu336/linuxmint/main/config.yaml</code></pre></div><p><img src="https://imgs.leshans.eu.org/docs/1712777427.png"></p><h2 id="4、设置开机启动"><a href="#4、设置开机启动" class="headerlink" title="4、设置开机启动"></a>4、设置开机启动</h2><p>生成 systemd 配置文件</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt; /etc/systemd/system/clash.service &lt;&lt; <span class="hljs-string">EOF</span><span class="hljs-string">[Unit]</span><span class="hljs-string">Description=Clash - A rule-based tunnel in Go</span><span class="hljs-string">Documentation=https://github.com/Dreamacro/clash/wiki</span><span class="hljs-string">[Service]</span><span class="hljs-string">OOMScoreAdjust=-1000</span><span class="hljs-string">ExecStart=/usr/local/bin/clash -f /root/.config/clash/config.yaml</span><span class="hljs-string">Restart=on-failure</span><span class="hljs-string">RestartSec=5</span><span class="hljs-string">[Install]</span><span class="hljs-string">WantedBy=multi-user.target</span><span class="hljs-string">EOF</span></code></pre></div><p>配置开机自启</p><div class="code-wrapper"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> clash</code></pre></div><p>启动 clash 服务</p><div class="code-wrapper"><pre><code class="hljs bash">systemctl start clash</code></pre></div><p>配置环境变量</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;export http_proxy=http://127.0.0.1:7890\nexport https_proxy=http://127.0.0.1:7890&quot;</span> &gt;&gt; ~/.bashrc</code></pre></div><h2 id="5、修改系统代理"><a href="#5、修改系统代理" class="headerlink" title="5、修改系统代理"></a>5、修改系统代理</h2><p><img src="https://imgs.leshans.eu.org/docs/1712777663.png"></p><p>另一种<code>开机启动</code>解决方案：在 Startup Applications Preference 中添加 Clash。</p><p><img src="https://imgs.leshans.eu.org/docs/1712777696.png"></p><h2 id="6、节点管理"><a href="#6、节点管理" class="headerlink" title="6、节点管理"></a>6、节点管理</h2><div class="code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">http:</span>//clash.razord.top/<span class="hljs-meta">#/settings</span></code></pre></div><h2 id="7、查看被占用的端口"><a href="#7、查看被占用的端口" class="headerlink" title="7、查看被占用的端口"></a>7、查看被占用的端口</h2><div class="code-wrapper"><pre><code class="hljs bash">sudo netstat -tulpn</code></pre></div><p>停止clash</p><div class="code-wrapper"><pre><code class="hljs bash">sudo killall clash</code></pre></div><p>验证 Clash 进程是否已经终止</p><div class="code-wrapper"><pre><code class="hljs bash">sudo netstat -tulpn | grep clash</code></pre></div><h2 id="8、设置-DNS"><a href="#8、设置-DNS" class="headerlink" title="8、设置 DNS"></a>8、设置 DNS</h2><div class="code-wrapper"><pre><code class="hljs bash">sudo nano /etc/resolv.conf</code></pre></div><p>添加</p><div class="code-wrapper"><pre><code class="hljs bash">nameserver 1.0.0.1nameserver 8.8.8.8</code></pre></div><br>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu22.04换源技巧</title>
    <link href="/posts/f30c9f02.html"/>
    <url>/posts/f30c9f02.html</url>
    
    <content type="html"><![CDATA[<h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><p>适用国内机子，或者虚拟机，提高下载速度</p><div class="code-wrapper"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak</code></pre></div><p>接着：</p><div class="code-wrapper"><pre><code class="hljs bash">sudo vim /etc/apt/sources.list</code></pre></div><p><strong>清空原有内容，添加：</strong></p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">## 默认禁用源码镜像以提高速度，如需启用请自行取消注释</span>deb https://mirrors.ustc.edu.cn/ubuntu jammy main restricted universe multiverse<span class="hljs-comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu jammy main restricted universe multiverse</span>deb https://mirrors.ustc.edu.cn/ubuntu jammy-updates main restricted universe multiverse<span class="hljs-comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu jammy-updates main restricted universe multiverse</span>deb https://mirrors.ustc.edu.cn/ubuntu jammy-backports main restricted universe multiverse<span class="hljs-comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu jammy-backports main restricted universe multiverse</span>deb https://mirrors.ustc.edu.cn/ubuntu jammy-security main restricted universe multiverse<span class="hljs-comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu jammy-security main restricted universe multiverse</span><span class="hljs-comment">## 预发布软件源（不建议启用）</span><span class="hljs-comment"># deb https://mirrors.ustc.edu.cn/ubuntu jammy-proposed main restricted universe multiverse</span><span class="hljs-comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu jammy-proposed main restricted universe multiverse</span></code></pre></div><p>保存退出 <code>:wq</code></p><h2 id="更新软件包列表"><a href="#更新软件包列表" class="headerlink" title="更新软件包列表"></a>更新软件包列表</h2><div class="code-wrapper"><pre><code class="hljs bash">sudo apt update</code></pre></div><hr><p>以下是一些常用设置</p><h2 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h2><p>设置上海时区</p><div class="code-wrapper"><pre><code class="hljs bash">sudo timedatectl set-timezone Asia/Shanghai</code></pre></div><p>启用同步：</p><div class="code-wrapper"><pre><code class="hljs bash">sudo timedatectl set-ntp on</code></pre></div><p>使用<code>hwclock --systohc</code>可以将系统时间同步到硬件时间。</p><div class="code-wrapper"><pre><code class="hljs bash">sudo hwclock --systohc</code></pre></div><p>使用 <code>timedatectl</code>命令可以查看时区</p><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">timedatectl</span></code></pre></div><h2 id="其他换源方法"><a href="#其他换源方法" class="headerlink" title="其他换源方法"></a>其他换源方法</h2><div class="code-wrapper"><pre><code class="hljs bash">wget https://gitee.com/SuperManito/LinuxMirrors/raw/main/ChangeMirrors.shsudo bash ChangeMirrors.sh</code></pre></div><h2 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h2><div class="code-wrapper"><pre><code class="hljs bash">lsb_release -a</code></pre></div><h2 id="查看python版本"><a href="#查看python版本" class="headerlink" title="查看python版本"></a>查看python版本</h2><div class="code-wrapper"><pre><code class="bash"> python3 --version</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Github加速技巧</title>
    <link href="/posts/26bff38.html"/>
    <url>/posts/26bff38.html</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs bash">项目地址：https://gitclone.com/ <span class="hljs-comment">#速度可以</span>https://gitmirror.com/ <span class="hljs-comment">#速度快</span></code></pre></div><h2 id="方法一：设置git参数-（推荐）"><a href="#方法一：设置git参数-（推荐）" class="headerlink" title="方法一：设置git参数 （推荐）"></a>方法一：设置git参数 （推荐）</h2><div class="code-wrapper"><pre><code class="hljs jboss-cli">git config <span class="hljs-params">--global</span> url.<span class="hljs-string">&quot;https://gitclone.com/&quot;</span><span class="hljs-string">.insteadOf</span> https:<span class="hljs-string">//</span></code></pre></div><p><strong>或者</strong></p><div class="code-wrapper"><pre><code class="hljs jboss-cli">git config <span class="hljs-params">--global</span> url.<span class="hljs-string">&quot;https://hub.gitmirror.com/&quot;</span><span class="hljs-string">.insteadOf</span> https:<span class="hljs-string">//</span></code></pre></div><p><strong>速度测试</strong></p><div class="code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/tendermint/tendermint.git</code></pre></div><h2 id="方法二：替换URL"><a href="#方法二：替换URL" class="headerlink" title="方法二：替换URL"></a>方法二：替换URL</h2><p>前面加上<code>https://gitclone.com/</code> 或者<br><code>https://hub.gitmirror.com/</code></p><p><strong>速度测试</strong></p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#前面加上https://gitclone.com</span>git <span class="hljs-built_in">clone</span> https://gitclone.com/github.com/tendermint/tendermint.git <span class="hljs-comment">#前面加上https://hub.gitmirror.com/</span>git <span class="hljs-built_in">clone</span> https://hub.gitmirror.com/github.com/tendermint/tendermint.git</code></pre></div><h2 id="Github-RAW-加速服务"><a href="#Github-RAW-加速服务" class="headerlink" title="Github RAW 加速服务"></a>Github RAW 加速服务</h2><p>将原网址</p><div class="code-wrapper"><pre><code class="hljs bash">raw.githubusercontent.com</code></pre></div><p>替换为</p><div class="code-wrapper"><pre><code class="hljs bash">raw.githubusercontents.com <span class="hljs-comment">#后面多了一个s</span></code></pre></div><p>GO代理</p><div class="code-wrapper"><pre><code class="hljs shell">export GOPROXY=https://goproxy.io</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>rclone挂载远程服务器之SSH</title>
    <link href="/posts/5608db0f.html"/>
    <url>/posts/5608db0f.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>以下内容基于windows，使用git bash 终端</p></blockquote><p><strong>以SSH&#x2F;SFTP方式挂载Linux目录</strong></p><div class="code-wrapper"><pre><code class="hljs bash">ssh-keygen -q -t rsa -b 4096 -C <span class="hljs-string">&quot;rclone key&quot;</span> -N <span class="hljs-string">&quot;&quot;</span> -f ~/.ssh/rclone <span class="hljs-comment">#静默生成rclone密钥对</span><span class="hljs-built_in">cd</span> ~/.ssh/<span class="hljs-built_in">cat</span> rclone* &gt; rclone-merged   <span class="hljs-comment"># 将密钥对合并，否则会连接失败</span></code></pre></div><p>会在<code>~/.ssh/</code>目录下生成 <code>rclone.pub</code>，和 <code>rclone</code></p><p><strong>复制公钥到远程服务器</strong></p><div class="code-wrapper"><pre><code class="hljs bash">ssh-copy-id -i ~/.ssh/rclone.pub -f -p 33 root@8.8.8.8 <span class="hljs-comment">#意思是把pub公钥复制到ip是8.8.8.8，ssh端口是33的服务器，提示输入密码验证..</span></code></pre></div><p>或者手动复制<code>rclone.pub</code>里的内容到远程服务器<code>/root/.ssh/authorized_keys</code>，</p><p>如果没有<code>authorized_keys</code>文件，可以手动创建</p><p><strong>rclone极速配置</strong></p><p>在rclone所在目录打开<code>rclone.conf</code>文件，写入以下内容，没有备注的默认即可</p><div class="code-wrapper"><pre><code class="hljs bash">[vps-01]        <span class="hljs-comment">#别名，很重要，可以随意起</span><span class="hljs-built_in">type</span> = sftphost = 8.8.8.8  <span class="hljs-comment">#改为你的服务器ip</span>user = root     <span class="hljs-comment">#默认root用户</span>port = 22       <span class="hljs-comment">#默认22端口，如果是其他端口请修改</span>key_file = ~/.ssh/rclone-merged  shell_type = unixmd5sum_command = <span class="hljs-built_in">md5sum</span>sha1sum_command = <span class="hljs-built_in">sha1sum</span></code></pre></div><p><strong>在windows挂载</strong></p><div class="code-wrapper"><pre><code class="hljs bash">rclone mount <span class="hljs-string">&quot;vps-01:/www/wwwroot&quot;</span> W: --vfs-cache-mode full --vfs-cache-max-size 20G --vfs-cache-max-age 1h --dir-cache-time 1h --poll-interval 10s --buffer-size 128M --vfs-read-ahead 256M --cache-dir <span class="hljs-string">&quot;d:/cache&quot;</span></code></pre></div><blockquote><p>挂载目录和盘符（w）和一些参数可以修改，缓存目录d:&#x2F;cache（可修改）记得经常清理</p></blockquote><ul><li><code>rclone mount</code>: 使用rclone挂载命令</li><li><code>&quot;vps-01:/www/wwwroot&quot;</code>: 别名为”vps-01”的远程服务器上的”&#x2F;www&#x2F;wwwroot”目录</li><li><code>W:</code>: 挂载到本地驱动器W磁盘</li><li><code>--vfs-cache-mode full</code>: 启用完全的虚拟文件系统缓存模式</li><li><code>--vfs-cache-max-size 20G</code>: 设置虚拟文件系统缓存的最大大小为20GB</li><li><code>--vfs-cache-max-age 1h</code>: 设置虚拟文件系统缓存的最大年龄为1小时</li><li><code>--dir-cache-time 1h</code>: 设置目录缓存的时间为1小时</li><li><code>--poll-interval 10s</code>: 设置rclone轮询远程服务器的间隔为10秒</li><li><code>--buffer-size 128M</code>: 设置缓冲区大小为128MB</li><li><code>--vfs-read-ahead 256M</code>: 设置虚拟文件系统预读的大小为256MB</li><li><code>--cache-dir &quot;d:/cache&quot;</code>: 指定缓存目录为本地磁盘上的”d:&#x2F;cache”</li></ul><p><strong>后台运行</strong></p><p>保存为bat文件，双击运行</p><div class="code-wrapper"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off%1 start mshta vbscript:createobject(<span class="hljs-string">&quot;wscript.shell&quot;</span>).run(<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;%~0&quot;</span><span class="hljs-string">&quot; ::&quot;</span>,0)(window.close)&amp;&amp;<span class="hljs-built_in">exit</span>start /b rclone mount <span class="hljs-string">&quot;vps-01:/www/wwwroot&quot;</span> W: --vfs-cache-mode full --vfs-cache-max-size 20G --vfs-cache-max-age 1h --dir-cache-time 1h --poll-interval 10s --buffer-size 128M --vfs-read-ahead 256M --cache-dir <span class="hljs-string">&quot;d:/cache&quot;</span></code></pre></div><p><strong>终止运行</strong> 保存为bat文件，双击运行</p><div class="code-wrapper"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> offtaskkill /im rclone.exe /fpause</code></pre></div><p><strong>安装依赖</strong> (适用Linux)</p><div class="code-wrapper"><pre><code class="hljs bash">sudo apt-get install fuse3 <span class="hljs-comment">#不安装可能会报错无法挂载网盘</span></code></pre></div><p><strong>挂载命令2</strong></p><p>也可以使用以下命令（适用于Linux、windows）</p><div class="code-wrapper"><pre><code class="hljs bash">rclone mount r2:web K: --allow-other --vfs-cache-mode full --allow-non-empty &amp;</code></pre></div><br>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SSH多种远程登录方法</title>
    <link href="/posts/81fa36ff.html"/>
    <url>/posts/81fa36ff.html</url>
    
    <content type="html"><![CDATA[<p>使用 SSH 登录服务器有两种方法：<strong>用户账号登录</strong> 和 <strong>使用公钥登录</strong></p><h2 id="用户账号登录"><a href="#用户账号登录" class="headerlink" title="用户账号登录"></a><strong>用户账号登录</strong></h2><p>直接使用以下命令</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># -p 指定服务器端口号，默认 22</span><span class="hljs-comment"># root 为登录的用户名</span><span class="hljs-comment"># 192.168.56.102 为服务器ip，也可使用域名</span>$ ssh root@192.168.56.102 -p 22</code></pre></div><p>另外可以配置主机别名，这个和 <strong>使用公钥登录</strong> 差不多，区别是无需指定公钥地址而已，这里就不重复了。</p><h2 id="使用公钥登录"><a href="#使用公钥登录" class="headerlink" title="使用公钥登录"></a><strong>使用公钥登录</strong></h2><h3 id="一、生成密钥对"><a href="#一、生成密钥对" class="headerlink" title="一、生成密钥对"></a><strong>一、生成密钥对</strong></h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># -t type，指定要生成的密钥类型，有rsa1(SSH1),dsa(SSH2),ecdsa(SSH2),rsa(SSH2)等类型，较为常用的是rsa类型</span><span class="hljs-comment"># -C comment，提供一个新的注释</span><span class="hljs-comment"># -f filename，指定生成的密钥文件名字 </span>$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;这是注释&quot;</span> <span class="hljs-comment"># 不指定密钥文件名的话，在操作时会有提示设置密钥文件名</span><span class="hljs-comment"># 或</span>$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;这是注释&quot;</span> -f <span class="hljs-string">&quot;id_rsa&quot;</span></code></pre></div><h3 id="二、上传公钥到服务器"><a href="#二、上传公钥到服务器" class="headerlink" title="二、上传公钥到服务器"></a><strong>二、上传公钥到服务器</strong></h3><ol><li>将公钥内容上传到远程服务器的<code>~/.ssh</code>目录下的 <strong>authorized_keys</strong> 文件内</li></ol><div class="code-wrapper"><pre><code class="hljs bash">ssh-copy-id -i ~/.ssh/id_rsa.pub -p 6871 root@8.8.8.8 <span class="hljs-comment">#假设ssh端口为6871</span></code></pre></div><ol start="2"><li>设置文件权限（否则会有权限问题）</li></ol><p>服务端</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 为 .ssh 目录指定权限</span><span class="hljs-built_in">chmod</span> 700 .ssh<span class="hljs-comment"># 为 authorized_keys 指定权限</span><span class="hljs-built_in">chmod</span> 600 authorized_keys</code></pre></div><p>客户端</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 0600 id_rsa</code></pre></div><h3 id="三、服务端允许使用-RSA-登录"><a href="#三、服务端允许使用-RSA-登录" class="headerlink" title="三、服务端允许使用 RSA 登录"></a><strong>三、服务端允许使用 RSA 登录</strong></h3><div class="code-wrapper"><pre><code class="hljs bash">$ vim /etc/ssh/sshd_config<span class="hljs-comment"># 允许使用 RSA 密钥校验登录</span>RSAAuthentication <span class="hljs-built_in">yes</span>PubkeyAuthentication <span class="hljs-built_in">yes</span><span class="hljs-comment"># 禁止登录 root，本人由于是在本地虚拟机测试玩的，为了方便，全开了</span>PermitRootLogin <span class="hljs-built_in">yes</span><span class="hljs-comment"># 是否允许密码登录</span>PasswordAuthentication <span class="hljs-built_in">yes</span></code></pre></div><h3 id="五、登录服务器"><a href="#五、登录服务器" class="headerlink" title="五、登录服务器"></a><strong>五、登录服务器</strong></h3><p>方法一：（在命令行中指定私钥文件）</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># -i 指定私钥地址（私钥和公钥的文件名是一样的，只不过公钥文件有一个 .pub 后缀名。换句话说，如果把本地公钥给删了，只剩下私钥是无法登录的，因为在登录时要将公钥id发送给服务端，这样服务端才知道要选择哪个公钥加密）</span>$ ssh root@192.168.56.102 -i ~/.ssh/id_rsa_server</code></pre></div><p>方法二：（使用 ssh-agent 代理）</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 先添加私钥</span>$ ssh-add ~/.ssh/id_rsa_server<span class="hljs-comment"># 查看添加的私钥</span>$ ssh-add -l<span class="hljs-comment"># 使用 ssh-agent 代理，ssh-agent 会在 ssh-add 列表中寻找到合适的私钥</span>$ ssh root@192.168.56.102</code></pre></div><p>方法三：（在 SSH 配置中指定私钥文件）</p><div class="code-wrapper"><pre><code class="hljs bash">$ vim ~/.ssh/configHost gateway <span class="hljs-comment"># 主机别名，使用 ssh gateway 命令可以直接登录该主机</span>Protocol 2  <span class="hljs-comment"># SSH 协议版本</span>HostName example.com <span class="hljs-comment"># 主机地址，支持IP或域名</span>Port 22  <span class="hljs-comment"># SSH 服务端口号</span>User ubuntu <span class="hljs-comment"># 登录用户名，会被 ssh root@gateway 覆盖，除非使用 ssh gateway</span>IdentityFile ~/.ssh/id_rsa <span class="hljs-comment"># 使用的私钥文件</span></code></pre></div><p>如果我把这三种方法都用了呢？</p><ul><li>即既使用了 <code>-i ~/.ssh/id_rsa_server</code> </li><li>又使用了 ssh-agent <code>ssh-add ~/.ssh/id_rsa_server</code></li><li>还使用了域名主机配置 <code>IdentityFile ~/.ssh/id_rsa</code></li></ul><blockquote><p>答案很简单，SSH 会先使用 <code>-i ~/.ssh/id_rsa_server</code>，</p><p>如果登录失败，则使用 <code>ssh-agent ssh-add ~/.ssh/id_rsa_server</code>，</p><p>找不到合适的公钥的话，再使用 <code>IdentityFile ~/.ssh/id_rsa</code>，还是失败的话则提示输入密码，如果允许账号登录的话，否则整个登录失败。</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>跳板机工具Lssh技巧介绍</title>
    <link href="/posts/24b463a2.html"/>
    <url>/posts/24b463a2.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>项目：<a href="https://github.com/blacknon/lssh/">https://github.com/blacknon/lssh/</a></p></blockquote><blockquote><p>wiki: <a href="https://github.com/blacknon/lssh/wiki/Config">https://github.com/blacknon/lssh/wiki/Config</a></p></blockquote><blockquote><p>以下教程基于ubuntu20.04</p></blockquote><h2 id="安装-go"><a href="#安装-go" class="headerlink" title="安装 go"></a>安装 go</h2><div class="code-wrapper"><pre><code class="hljs bash">wget https://go.dev/dl/go1.22.2.linux-amd64.tar.gz  <span class="hljs-comment">#下载go程序</span><span class="hljs-built_in">rm</span> -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf go1.22.2.linux-amd64.tar.gz <span class="hljs-comment">#安装</span></code></pre></div><p>配置环境变量</p><div class="code-wrapper"><pre><code class="hljs bash">sudo nano /etc/profile</code></pre></div><p>末尾添加</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/usr/local/go/bin</code></pre></div><p>按 <code>CTRL+X</code> 保存，<code>y</code>确认，<code>回车</code></p><p>使其立即生效</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile</code></pre></div><p>检测</p><div class="code-wrapper"><pre><code class="hljs bash">go version <span class="hljs-comment">#输出go version go1.22.2 linux/amd64 信息</span></code></pre></div><h2 id="安装-依赖"><a href="#安装-依赖" class="headerlink" title="安装 依赖"></a>安装 依赖</h2><div class="code-wrapper"><pre><code class="hljs bash">sudo apt install makesudo apt updatesudo apt install build-essential</code></pre></div><p>安装lssh</p><div class="code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/blacknon/lssh<span class="hljs-built_in">cd</span> lsshGO111MODULE=auto make &amp;&amp; sudo make install<span class="hljs-built_in">test</span> -f ~/.lssh.conf||curl -s https://raw.githubusercontent.com/blacknon/lssh/master/example/config.tml -o ~/.lssh.conf</code></pre></div><h2 id="添加主机"><a href="#添加主机" class="headerlink" title="添加主机"></a>添加主机</h2><p>编辑<code> /root/.lssh.conf</code> 文件</p><div class="code-wrapper"><pre><code class="hljs bash">[common]port = <span class="hljs-string">&quot;22&quot;</span>                       user = <span class="hljs-string">&quot;root&quot;</span>     key  = <span class="hljs-string">&quot;~/.ssh/id_rsa&quot;</span>  pre_cmd = <span class="hljs-string">&quot;echo &#x27;SSH连接中。。。&#x27;&quot;</span>post_cmd = <span class="hljs-string">&quot;find /root/log/lssh -mindepth 2 -maxdepth 2 -type d -name &#x27;logdir&#x27; -exec sh -c &#x27;cd \&quot;&#123;&#125;\&quot; &amp;&amp; ls -t | tail -n +2 | xargs rm -f&#x27; \\;&quot;</span>[server.node1]addr = <span class="hljs-string">&quot;192.168.1.8&quot;</span>port = <span class="hljs-string">&quot;33&quot;</span>                       user = <span class="hljs-string">&quot;root&quot;</span>pass = <span class="hljs-string">&quot;&quot;</span> note = <span class="hljs-string">&quot;node1主机&quot;</span>[server.node3]addr = <span class="hljs-string">&quot;192.168.1.6&quot;</span>port = <span class="hljs-string">&quot;55&quot;</span>                       user = <span class="hljs-string">&quot;root&quot;</span>pass = <span class="hljs-string">&quot;&quot;</span>note = <span class="hljs-string">&quot;node3主机&quot;</span><span class="hljs-comment">#[includes]</span>path = [     <span class="hljs-string">&quot;~/.lssh.conf.include1&quot;</span>    ,<span class="hljs-string">&quot;~/.lssh.conf.include2&quot;</span>][<span class="hljs-built_in">log</span>]<span class="hljs-built_in">enable</span> = <span class="hljs-literal">true</span>                       timestamp = <span class="hljs-literal">true</span>                    dirpath = <span class="hljs-string">&quot;~/log/lssh/&lt;Date&gt;_&lt;Hostname&gt;/logdir&quot;</span></code></pre></div><h3 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h3><p><code>[common]</code> 代表通用配置，主机配置可以覆盖通用配置</p><div class="code-wrapper"><pre><code class="hljs bash">port = <span class="hljs-string">&quot;22&quot;</span>          <span class="hljs-comment">#假设所有主机默认ssh端口为22，可以是其他端口       </span>user = <span class="hljs-string">&quot;root&quot;</span>        <span class="hljs-comment">#默认用户root</span>key  = <span class="hljs-string">&quot;~/.ssh/id_rsa&quot;</span>   <span class="hljs-comment">#默认密钥路径</span>pre_cmd = <span class="hljs-string">&quot;echo &#x27;SSH连接中。。。&#x27;&quot;</span>  <span class="hljs-comment">#连接前执行的命令，可以是其他命令</span>post_cmd = <span class="hljs-string">&quot;find /root/log/lssh -mindepth 2 -maxdepth 2 -type d -name &#x27;logdir&#x27; -exec sh -c &#x27;cd \&quot;&#123;&#125;\&quot; &amp;&amp; ls -t | tail -n +2 | xargs rm -f&#x27; \\;&quot;</span>  <span class="hljs-comment">#退出后的命令</span></code></pre></div><p><code>[server.主机昵称]</code>  主机配置，主机昵称可以随意，不能是中文和重复，但前面必须加 <code>server.</code></p><p>例如：[server.node3] 、[server.node2]  <strong>按照以下写法逐个添加</strong></p><div class="code-wrapper"><pre><code class="hljs bash">[server.node1]addr = <span class="hljs-string">&quot;192.168.1.8&quot;</span>  <span class="hljs-comment"># ip地址</span>port = <span class="hljs-string">&quot;33&quot;</span>           <span class="hljs-comment">#ssh端口号33，如果与通用配置一样，则可以为空         </span>user = <span class="hljs-string">&quot;root&quot;</span>         <span class="hljs-comment">#如果与通用配置一样，可以留空  </span>pass = <span class="hljs-string">&quot;&quot;</span>             <span class="hljs-comment">#主机登录密码，如果使用密钥连接，可以为空</span>note = <span class="hljs-string">&quot;node1主机&quot;</span>    <span class="hljs-comment">#主机备注，方便查找</span></code></pre></div><p><code>[includes]</code> 配置，表示可以指定其他文件作为<code>主机配置</code>，写法与主机配置一样，一般不用</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#[includes]</span>path = [     <span class="hljs-string">&quot;~/.lssh.conf.include1&quot;</span>    ,<span class="hljs-string">&quot;~/.lssh.conf.include2&quot;</span>]</code></pre></div><p><code>[log]</code> 主机操作日志，所有在终端敲打的命令都会记录保存在 <code>~/log/lssh/日期_主机昵称/logdir</code>目录</p><div class="code-wrapper"><pre><code class="hljs bash">[<span class="hljs-built_in">log</span>]<span class="hljs-built_in">enable</span> = <span class="hljs-literal">true</span>                       timestamp = <span class="hljs-literal">true</span>                    dirpath = <span class="hljs-string">&quot;~/log/lssh/&lt;Date&gt;_&lt;Hostname&gt;/logdir&quot;</span></code></pre></div><p>这条命令表示只保留最新一个日志,在退出ssh连接时执行</p><div class="code-wrapper"><pre><code class="hljs lsl">post_cmd = <span class="hljs-string">&quot;find /root/log/lssh -mindepth 2 -maxdepth 2 -type d -name &#x27;logdir&#x27; -exec sh -c &#x27;cd <span class="hljs-subst">\&quot;</span>&#123;&#125;<span class="hljs-subst">\&quot;</span> &amp;&amp; ls -t | tail -n +2 | xargs rm -f&#x27; <span class="hljs-subst">\\</span>;&quot;</span></code></pre></div><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h4 id="登录主机"><a href="#登录主机" class="headerlink" title="登录主机"></a>登录主机</h4><div class="code-wrapper"><pre><code class="hljs bash">lssh    <span class="hljs-comment">#使用键盘上下方向键选择，也可以用鼠标，最上方可以输入关键字查找,回车登录</span></code></pre></div><h4 id="发送命令"><a href="#发送命令" class="headerlink" title="发送命令"></a>发送命令</h4><div class="code-wrapper"><pre><code class="hljs bash">lssh hostname  <span class="hljs-comment">#可以按ALT+A全选，也可单独选一台主机，或者输入关键字查找</span></code></pre></div><p>上面的命令只是<code>例子</code>，写法：<code>lssh 后面加命令即可</code></p><h4 id="并行运行命令"><a href="#并行运行命令" class="headerlink" title="并行运行命令"></a>并行运行命令</h4><div class="code-wrapper"><pre><code class="hljs bash">lssh -p <span class="hljs-built_in">uname</span> -a</code></pre></div><p>上面的命令只是<code>例子</code>，写法：<code>lssh 后面加 -p </code></p><h4 id="交互命令"><a href="#交互命令" class="headerlink" title="交互命令"></a>交互命令</h4><div class="code-wrapper"><pre><code class="hljs bash">lssh -s</code></pre></div><h4 id="scp命令"><a href="#scp命令" class="headerlink" title="scp命令"></a>scp命令</h4><p>写法: 远程路径前面加 <code>r:</code>  不能单独使用 <code>lscp</code> 命令</p><div class="code-wrapper"><pre><code class="hljs bash">lscp /path/to/123.txt r:/path/to/remote</code></pre></div><p>例如：<code>lcsp 123/uuu.txt r:./123</code>  复制&#x2F;root&#x2F;123&#x2F;uuu.txt到远程主机（选择后）</p><p>本地复制到远程</p><div class="code-wrapper"><pre><code class="hljs applescript"><span class="hljs-comment"># lscp local =&gt; remote(multiple)</span>lscp /path/<span class="hljs-keyword">to</span>/<span class="hljs-keyword">local</span>... r:/path/<span class="hljs-keyword">to</span>/remote</code></pre></div><p>远程复制到本地（这里有个bug,会进入选择界面，直接回车）</p><div class="code-wrapper"><pre><code class="hljs applescript"><span class="hljs-comment"># lscp remote(multiple) =&gt; local</span>lscp r:/path/<span class="hljs-keyword">to</span>/remote... /path/<span class="hljs-keyword">to</span>/<span class="hljs-keyword">local</span></code></pre></div><p>远程到远程（先选择第一个主机，再选择第二个主机）</p><div class="code-wrapper"><pre><code class="hljs applescript"><span class="hljs-comment"># lscp remote =&gt; remote(multiple)</span>lscp r:/path/<span class="hljs-keyword">to</span>/remote... r:/path/<span class="hljs-keyword">to</span>/<span class="hljs-keyword">local</span></code></pre></div><h4 id="lsftp命令-推荐好用"><a href="#lsftp命令-推荐好用" class="headerlink" title="lsftp命令 推荐好用"></a>lsftp命令 推荐好用</h4><div class="code-wrapper"><pre><code class="hljs bash">lsftp  <span class="hljs-comment">#可选择多台主机</span></code></pre></div><p><strong>本地到远程</strong></p><div class="code-wrapper"><pre><code class="hljs bash">put /path/to/local ./</code></pre></div><p>例如 <code>put 123/xx.md ./123</code>  复制xx.md文件到远程主机&#x2F;root&#x2F;123目录下</p><p><strong>远程到本地</strong></p><div class="code-wrapper"><pre><code class="hljs bash">get /path/to/remote ./</code></pre></div><br>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>rclone工具箱</title>
    <link href="/posts/5432d085.html"/>
    <url>/posts/5432d085.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>云盘的路径格式 比如：<code>oss:back</code>  中间要加冒号，后面才是路径或者存储桶名称</p></blockquote><div class="code-wrapper"><pre><code class="hljs bash">oss:back          <span class="hljs-comment">#oss云盘下的名称为back的存储桶</span>oss:back/工具箱   <span class="hljs-comment">#back存储桶下的工具箱文件夹</span>onedrive:工具箱   <span class="hljs-comment">#onedrive根目录下的工具箱文件夹</span></code></pre></div><p><img src="https://imgs.leshans.eu.org/docs/1712478873.png"></p><p><img src="https://imgs.leshans.eu.org/docs/1712479398.png"></p><p><a href="https://github.com/woniu336/open_shell/blob/main/rclone%E5%B7%A5%E5%85%B7%E7%AE%B1.bat">rclone工具箱脚本地址</a></p><div class="code-wrapper"><pre><code class="hljs bash">https://gitee.com/dayu777/open_shell/blob/main/rclone%E5%B7%A5%E5%85%B7%E7%AE%B1.bat</code></pre></div><p><strong>使用方法</strong></p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>、下载rclone程序<span class="hljs-attribute">https</span>://downloads.rclone.org/v1.<span class="hljs-number">66</span>.<span class="hljs-number">0</span>/rclone-v1.<span class="hljs-number">66</span>.<span class="hljs-number">0</span>-windows-amd64.zip<span class="hljs-attribute">2</span>、解压后，把程序文件夹添加到环境变量，<span class="hljs-attribute">3</span>、配置好云盘：rclone.conf<span class="hljs-attribute">4</span>，双击运行bat脚本</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ansible使用技巧</title>
    <link href="/posts/af7d7628.html"/>
    <url>/posts/af7d7628.html</url>
    
    <content type="html"><![CDATA[<blockquote><p><strong>官方文档</strong><a href="https://docs.ansible.com/ansible/latest/installation_guide/index.html">https://docs.ansible.com/ansible/latest/installation_guide/index.html</a></p><p>项目：<a href="https://github.com/ansible/ansible">https://github.com/ansible/ansible</a></p></blockquote><h2 id="安装ansible"><a href="#安装ansible" class="headerlink" title="安装ansible"></a>安装ansible</h2><h4 id="在Ubuntu上安装Ansible"><a href="#在Ubuntu上安装Ansible" class="headerlink" title="在Ubuntu上安装Ansible"></a>在Ubuntu上安装Ansible</h4><div class="code-wrapper"><pre><code class="hljs bash">sudo apt updatesudo apt install software-properties-commonsudo add-apt-repository --<span class="hljs-built_in">yes</span> --update ppa:ansible/ansiblesudo apt install ansible</code></pre></div><h4 id="在Debian上安装Ansible"><a href="#在Debian上安装Ansible" class="headerlink" title="在Debian上安装Ansible"></a>在Debian上安装Ansible</h4><p>先复制对应版本的 <strong>UBUNTU_CODENAME</strong></p><div class="code-wrapper"><pre><code class="hljs bash">Debian 12   jammy  <span class="hljs-comment">#jammy为UBUNTU_CODENAME</span>Debian 11   focal  <span class="hljs-comment">#focal为UBUNTU_CODENAME</span>Debian 10   bionic <span class="hljs-comment">#bionic为UBUNTU_CODENAME</span></code></pre></div><p>然后</p><div class="code-wrapper"><pre><code class="hljs bash">sudo apt install wget -y</code></pre></div><p>最后</p><div class="code-wrapper"><pre><code class="hljs bash">UBUNTU_CODENAME=jammywget -O- <span class="hljs-string">&quot;https://keyserver.ubuntu.com/pks/lookup?fingerprint=on&amp;op=get&amp;search=0x6125E2A8C77F2818FB7BD15B93C4A3FD7BB9C367&quot;</span> | sudo gpg --dearmour -o /usr/share/keyrings/ansible-archive-keyring.gpg<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb [signed-by=/usr/share/keyrings/ansible-archive-keyring.gpg] http://ppa.launchpad.net/ansible/ansible/ubuntu <span class="hljs-variable">$UBUNTU_CODENAME</span> main&quot;</span> | sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/ansible.listsudo apt update &amp;&amp; sudo apt install ansible</code></pre></div><h4 id="使用pip安装和升级Ansible"><a href="#使用pip安装和升级Ansible" class="headerlink" title="使用pip安装和升级Ansible"></a>使用pip安装和升级Ansible</h4><p>确保 <code>pip</code> 可用,要验证是否已为首选Python安装了 <code>pip</code> :</p><div class="code-wrapper"><pre><code class="hljs bash">python3 -m pip -V</code></pre></div><p>如果你看到像 <code>No module named pip</code> 这样的错误</p><div class="code-wrapper"><pre><code class="hljs bash">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.pypython3 get-pip.py --user</code></pre></div><p><strong>安装Ansible</strong></p><div class="code-wrapper"><pre><code class="hljs bash">python3 -m pip install --user ansible</code></pre></div><p> <strong>升级Ansible</strong></p><div class="code-wrapper"><pre><code class="hljs bash">python3 -m pip install --upgrade --user ansible</code></pre></div><h2 id="管理Ansible配置文件"><a href="#管理Ansible配置文件" class="headerlink" title="管理Ansible配置文件"></a>管理Ansible配置文件</h2><h3 id="📜第一层-配置文件优先级"><a href="#📜第一层-配置文件优先级" class="headerlink" title="📜第一层 配置文件优先级"></a>📜第一层 配置文件优先级</h3><p>Ansible配置文件ansible.cfg，可以存在于多个位置，他们的被读取的顺序如下</p><div class="code-wrapper"><pre><code class="hljs bash">ANSIBLE_CONFIG                   <span class="hljs-comment"># (环境变量)</span>ansible.cfg                      <span class="hljs-comment"># (当前目录)</span>.ansible.cfg                     <span class="hljs-comment"># (用户家目录)</span>/etc/ansible/ansible.cfg         <span class="hljs-comment"># (默认配置文件)</span></code></pre></div><h3 id="📜第二层-配置选项"><a href="#📜第二层-配置选项" class="headerlink" title="📜第二层 配置选项"></a>📜第二层 配置选项</h3><p>查看ansible.cfg的配置项</p><div class="code-wrapper"><pre><code class="hljs bash">grep <span class="hljs-string">&quot;^\[&quot;</span> /etc/ansible/ansible.cfg</code></pre></div><p>配置项</p><div class="code-wrapper"><pre><code class="hljs bash">[defaults]                     <span class="hljs-comment"># 默认常用配置</span>[inventory]                    <span class="hljs-comment"># 主机清单插件</span>[privilege_escalation]         <span class="hljs-comment"># 用于提权</span>[paramiko_connection]          <span class="hljs-comment"># python paramiko模块的连接设置（默认使用SSH）</span>[ssh_connection]               <span class="hljs-comment"># SSH连接设置</span>[persistent_connection]        <span class="hljs-comment"># 长连接设置</span>[accelerate]                   <span class="hljs-comment"># 加速模式的配置</span>[selinux]                      <span class="hljs-comment"># selinux设置</span>[colors]                       <span class="hljs-comment"># 输出结果颜色的设置</span>[diff]                         <span class="hljs-comment"># 输出不同的设置</span></code></pre></div><h3 id="📜第三层-常用配置选项解读"><a href="#📜第三层-常用配置选项解读" class="headerlink" title="📜第三层 常用配置选项解读"></a>📜第三层 常用配置选项解读</h3><p>虽然ansible.cfg配置文件一堆配置选项参数，但常用的，就那么几个</p><p>1、常用配置</p><div class="code-wrapper"><pre><code class="hljs bash">[defaults]inventory =/etc/ansible/hostsforks=5remote_user=host_key_checking=Falseask_pass=Falsemodule_name=</code></pre></div><p><strong>解释</strong></p><div class="code-wrapper"><pre><code class="hljs bash">[defaults]                ; 默认设置部分开始inventory = /etc/ansible/hosts  ; 指定清单文件路径forks = 5                ; 并行执行任务的进程数remote_user =            ; 远程用户，默认为空host_key_checking = False ; 主机密钥检查设置为禁用，不检查主机密钥ask_pass = False         ; 是否要求输入密码设置为禁用module_name =            ; 模块名称，默认为空</code></pre></div><p>2、用于提权</p><div class="code-wrapper"><pre><code class="hljs bash">[privilege_escalation]become=Truebecome_method=sudobecome_user=rootbecome_ask_pass=False</code></pre></div><p><strong>解释</strong></p><div class="code-wrapper"><pre><code class="hljs bash">[privilege_escalation]   ; 特权升级设置部分开始become = True             ; 启用特权升级功能become_method = sudo      ; 使用sudo进行特权升级become_user = root        ; 指定特权升级后的用户为rootbecome_ask_pass = False  ; 是否需要sudo密码</code></pre></div><h2 id="实验开始"><a href="#实验开始" class="headerlink" title="实验开始"></a>实验开始</h2><h3 id="以主机名做为访问互联"><a href="#以主机名做为访问互联" class="headerlink" title="以主机名做为访问互联"></a>以主机名做为访问互联</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo vim /etc/hosts <span class="hljs-comment">#可选，为了方便可以不输入ip</span></code></pre></div><p>例如：</p><div class="code-wrapper"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.159.111</span> servera <span class="hljs-number">192.168.159.112</span> serverb <span class="hljs-number">192.168.159.113</span> serverc <span class="hljs-number">192.168.159.114</span> serverd</code></pre></div><h3 id="📑编写配置文件"><a href="#📑编写配置文件" class="headerlink" title="📑编写配置文件"></a>📑编写配置文件</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo vim /etc/ansible/ansible.cfg</code></pre></div><p><strong>内容如下：</strong></p><div class="code-wrapper"><pre><code class="hljs bash">[defaults]inventory =/etc/ansible/hostsforks=5remote_user=host_key_checking=Falseask_pass=Falsemodule_name=[privilege_escalation]become=Truebecome_method=sudobecome_user=rootbecome_ask_pass=False</code></pre></div><h3 id="📑编写主机清单"><a href="#📑编写主机清单" class="headerlink" title="📑编写主机清单"></a>📑编写主机清单</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo vim /etc/ansible/hosts</code></pre></div><p><strong>格式</strong></p><div class="code-wrapper"><pre><code class="hljs accesslog">#可以是ip地址，使用主机名是为了方便<span class="hljs-string">[web]</span>xx.xx.xx.com<span class="hljs-number">192.168.1.11</span><span class="hljs-number">192.168.1.28</span>node3 #children表示包含若干组<span class="hljs-string">[everyone:children]</span>web</code></pre></div><p><strong>自定义参数</strong></p><div class="code-wrapper"><pre><code class="hljs routeros">192.168.1.11 <span class="hljs-attribute">ansible_port</span>=6871 <span class="hljs-attribute">ansible_user</span>=root <span class="hljs-attribute">ansible_ssh_pass</span>=123</code></pre></div><p>解释：</p><div class="code-wrapper"><pre><code class="hljs bash">ansible_host <span class="hljs-comment">#主机地址</span>ansible_port <span class="hljs-comment">#端口，默认是22端口</span>ansible_user <span class="hljs-comment">#认证的用户</span>ansible_ssh_pass  <span class="hljs-comment">#用户认证的密码</span></code></pre></div><p><strong>查看清单</strong></p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/ansible/hosts</code></pre></div><h3 id="📑验证主机清单"><a href="#📑验证主机清单" class="headerlink" title="📑验证主机清单"></a>📑验证主机清单</h3><div class="code-wrapper"><pre><code class="hljs bash">ansible all --list-hosts <span class="hljs-comment">#查看主机</span>ansible all -m ping  <span class="hljs-comment">#连通性检查</span></code></pre></div><p><strong>测试命令：</strong></p><div class="code-wrapper"><pre><code class="hljs bash">ansible web -m <span class="hljs-built_in">command</span> -a <span class="hljs-string">&quot;hostname&quot;</span></code></pre></div><h2 id="提权测试"><a href="#提权测试" class="headerlink" title="提权测试"></a>提权测试</h2><p>添加账户xiao1</p><div class="code-wrapper"><pre><code class="hljs bash">ansible web -m <span class="hljs-built_in">command</span> -a <span class="hljs-string">&#x27;useradd xiao1&#x27;</span></code></pre></div><p>删除账户xiao1</p><div class="code-wrapper"><pre><code class="hljs bash">ansible web -m <span class="hljs-built_in">command</span> -a <span class="hljs-string">&#x27;userdel -r xiao1&#x27;</span></code></pre></div><h2 id="密钥连接"><a href="#密钥连接" class="headerlink" title="密钥连接"></a>密钥连接</h2><h3 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h3><div class="code-wrapper"><pre><code class="hljs bash">ssh-keygen -t rsa -P <span class="hljs-string">&#x27;&#x27;</span> -q -f ~/.ssh/id_rsa</code></pre></div><h3 id="复制公钥到被控主机"><a href="#复制公钥到被控主机" class="headerlink" title="复制公钥到被控主机"></a>复制公钥到被控主机</h3><p>主机数量少，可用以下命令，假设ssh端口是<strong>6871</strong>，ip是 <strong>8.8.8.8</strong></p><div class="code-wrapper"><pre><code class="hljs bash">ssh-copy-id -i ~/.ssh/id_rsa.pub -p 6871 root@8.8.8.8</code></pre></div><p>登录测试</p><div class="code-wrapper"><pre><code class="hljs bash">ssh -p 6871 root@8.8.8.8</code></pre></div><p><code>默认端口是22</code></p><div class="code-wrapper"><pre><code class="hljs bash">ssh-copy-id -i ~/.ssh/id_rsa.pub root@8.8.8.8</code></pre></div><p>主机名是node1,node2,node3,有规律的，使用以下命令，</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> host <span class="hljs-keyword">in</span> node&#123;1..3&#125;; <span class="hljs-keyword">do</span> ssh-copy-id -i ~/.ssh/id_rsa.pub <span class="hljs-variable">$host</span>; <span class="hljs-keyword">done</span></code></pre></div><p>单独复制</p><div class="code-wrapper"><pre><code class="hljs bash">ssh-copy-id -i ~/.ssh/id_rsa.pub node2</code></pre></div><p>登录测试</p><div class="code-wrapper"><pre><code class="hljs bash">ssh node2</code></pre></div><p>或者指定用户名：vagrant</p><div class="code-wrapper"><pre><code class="hljs bash">ssh-copy-id -i ~/.ssh/id_rsa.pub vagrant@node2</code></pre></div><p><strong>主机数量多</strong></p><p>下载脚本</p><div class="code-wrapper"><pre><code class="hljs bash">wget https://gitee.com/dayu777/open_shell/raw/main/pub_send.py</code></pre></div><p>编辑脚本</p><div class="code-wrapper"><pre><code class="hljs bash">vim pub_send.py</code></pre></div><p>运行脚本</p><div class="code-wrapper"><pre><code class="hljs bash">python3 pub_send.py</code></pre></div><h2 id="被控主机无需输入sudo密码"><a href="#被控主机无需输入sudo密码" class="headerlink" title="被控主机无需输入sudo密码"></a>被控主机无需输入sudo密码</h2><h3 id="每次-sudo-不用输入密码"><a href="#每次-sudo-不用输入密码" class="headerlink" title="每次 sudo 不用输入密码"></a>每次 <code>sudo</code> 不用输入密码</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo visudo</code></pre></div><p>末尾添加</p><div class="code-wrapper"><pre><code class="hljs bash">laoge ALL=(ALL) NOPASSWD: ALL  <span class="hljs-comment">#laoge 为用户名</span></code></pre></div><p><code>CTRL+x</code>保存，<code>y</code> 确认，<code>回车</code></p><br>]]></content>
    
    
    <categories>
      
      <category>ansible</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自动化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>国内服务器安装宝塔面板</title>
    <link href="/posts/9d8996b8.html"/>
    <url>/posts/9d8996b8.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>宝塔7.7.0版本 </p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><div class="code-wrapper"><pre><code class="hljs bash">curl -sSO https://gitee.com/dayu777/btpanel-v7.7.0/raw/main/install/install_panel.sh &amp;&amp; bash install_panel.sh</code></pre></div><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://gitee.com/dayu777/open_shell/raw/main/optimize.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x optimize.sh &amp;&amp; ./optimize.sh</code></pre></div><ul><li>已去除宝塔面板强制绑定账号.</li><li>已去除各种计算题与延时等待.</li><li>已去除创建网站自动创建的垃圾文件.</li><li>已关闭未绑定域名提示页面.</li><li>已关闭安全入口登录提示页面.</li><li>已去除消息推送与文件校验.</li><li>已去除面板日志与绑定域名上报.</li><li>已关闭活动推荐与在线客服.</li><li>如需还原之前的样子，请在面板首页点击<code>“修复”</code></li></ul><h2 id="手动破解"><a href="#手动破解" class="headerlink" title="手动破解"></a>手动破解</h2><p><code>先登录面板，然后破解</code>，去除登陆需要绑定账号：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -f /www/server/panel/data/bind.pl</code></pre></div><p>手动解锁宝塔所有付费插件为永不过期</p><div class="code-wrapper"><pre><code class="hljs bash">sed -i <span class="hljs-string">&#x27;s/&quot;endtime&quot;: -1/&quot;endtime&quot;: 999999999999/g&#x27;</span> /www/server/panel/data/plugin.json</code></pre></div><p> 给plugin.json文件上锁防止自动修复为免费版</p><div class="code-wrapper"><pre><code class="hljs bash">chattr +i /www/server/panel/data/plugin.json</code></pre></div><h2 id="去后门"><a href="#去后门" class="headerlink" title="去后门"></a>去后门</h2><div class="code-wrapper"><pre><code class="hljs bash">sudo <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; /www/server/panel/script/site_task.pysudo chattr +i /www/server/panel/script/site_task.pysudo <span class="hljs-built_in">rm</span> -rf /www/server/panel/logs/request/*sudo chattr +i -R /www/server/panel/logs/request</code></pre></div><h2 id="卸载宝塔"><a href="#卸载宝塔" class="headerlink" title="卸载宝塔"></a>卸载宝塔</h2><div class="code-wrapper"><pre><code class="hljs bash">wget http://download.bt.cn/install/bt-uninstall.sh</code></pre></div><p><strong>执行</strong></p><div class="code-wrapper"><pre><code class="hljs bash">sh bt-uninstall.sh</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ansible批量安装宝塔脚本</title>
    <link href="/posts/a0747c84.html"/>
    <url>/posts/a0747c84.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>版本介绍：<code>7.7.0版本</code> 包括一些优化</p></blockquote><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><div class="code-wrapper"><pre><code class="hljs bash">https://gitee.com/dayu777/open_shell/raw/main/tb.yaml</code></pre></div><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><div class="code-wrapper"><pre><code class="hljs bash">ansible-playbook tb.yaml</code></pre></div><h2 id="手动破解"><a href="#手动破解" class="headerlink" title="手动破解"></a>手动破解</h2><p><code>先登录面板，然后破解</code>，去除登陆需要绑定账号：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -f /www/server/panel/data/bind.pl</code></pre></div><p>手动解锁宝塔所有付费插件为永不过期</p><div class="code-wrapper"><pre><code class="hljs bash">sed -i <span class="hljs-string">&#x27;s/&quot;endtime&quot;: -1/&quot;endtime&quot;: 999999999999/g&#x27;</span> /www/server/panel/data/plugin.json</code></pre></div><p> 给plugin.json文件上锁防止自动修复为免费版</p><div class="code-wrapper"><pre><code class="hljs bash">chattr +i /www/server/panel/data/plugin.json</code></pre></div><h2 id="去后门"><a href="#去后门" class="headerlink" title="去后门"></a>去后门</h2><div class="code-wrapper"><pre><code class="hljs bash">sudo <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; /www/server/panel/script/site_task.pysudo chattr +i /www/server/panel/script/site_task.pysudo <span class="hljs-built_in">rm</span> -rf /www/server/panel/logs/request/*sudo chattr +i -R /www/server/panel/logs/request</code></pre></div><h2 id="卸载宝塔"><a href="#卸载宝塔" class="headerlink" title="卸载宝塔"></a>卸载宝塔</h2><div class="code-wrapper"><pre><code class="hljs bash">wget http://download.bt.cn/install/bt-uninstall.sh</code></pre></div><p><strong>执行</strong></p><div class="code-wrapper"><pre><code class="hljs bash">sh bt-uninstall.sh</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ansible</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自动化</tag>
      
      <tag>ansible</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VirtualBox启动和关闭虚拟机命令</title>
    <link href="/posts/79388bce.html"/>
    <url>/posts/79388bce.html</url>
    
    <content type="html"><![CDATA[<h2 id="查看virtualbox正在运行的虚拟机"><a href="#查看virtualbox正在运行的虚拟机" class="headerlink" title="查看virtualbox正在运行的虚拟机"></a>查看virtualbox正在运行的虚拟机</h2><div class="code-wrapper"><pre><code class="hljs bash">VBoxManage list runningvms</code></pre></div><h2 id="后台开启虚拟机"><a href="#后台开启虚拟机" class="headerlink" title="后台开启虚拟机"></a>后台开启虚拟机</h2><div class="code-wrapper"><pre><code class="hljs bash">VBoxManage startvm 虚拟机名字 --<span class="hljs-built_in">type</span> headless</code></pre></div><h2 id="后台关闭虚拟机"><a href="#后台关闭虚拟机" class="headerlink" title="后台关闭虚拟机"></a>后台关闭虚拟机</h2><div class="code-wrapper"><pre><code class="hljs bash">VBoxManage controlvm 虚拟机名字 acpipowerbutton</code></pre></div><h2 id="Windows开机自动启动"><a href="#Windows开机自动启动" class="headerlink" title="Windows开机自动启动"></a>Windows开机自动启动</h2><p>制作bat脚本</p><div class="code-wrapper"><pre><code class="hljs bash">@ECHO OFFstart VBoxManage startvm 虚拟机名字 --<span class="hljs-built_in">type</span> headlessstart VBoxManage startvm 虚拟机名字2 --<span class="hljs-built_in">type</span> headless...EXIT</code></pre></div><p>将bat拖进下面的目录</p><div class="code-wrapper"><pre><code class="hljs bash">C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ansible安装docker-自动化批量安装docker</title>
    <link href="/posts/9446d5df.html"/>
    <url>/posts/9446d5df.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于ubuntu22.04</p></blockquote><h2 id="运行："><a href="#运行：" class="headerlink" title="运行："></a><strong>运行：</strong></h2><div class="code-wrapper"><pre><code class="hljs bash">ansible-playbook docker_install.yaml</code></pre></div><h2 id="脚本地址"><a href="#脚本地址" class="headerlink" title="脚本地址"></a><strong>脚本地址</strong></h2><div class="code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/dayu777/</span>open_shell<span class="hljs-regexp">/raw/m</span>ain/docker_install.yaml</code></pre></div><div class="code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/woniu336/</span>open_shell<span class="hljs-regexp">/main/</span>docker_install.yaml</code></pre></div><h2 id="无法启动docker解决"><a href="#无法启动docker解决" class="headerlink" title="无法启动docker解决"></a><strong>无法启动docker解决</strong></h2><p><code>多发生在卸载重装后</code></p><p>清空daemon.json文件里的内容</p><div class="code-wrapper"><pre><code class="hljs awk">sudo vim <span class="hljs-regexp">/etc/</span>docker/daemon.json</code></pre></div><p>重启：</p><div class="code-wrapper"><pre><code class="hljs bash">sudo systemctl restart dockersudo systemctl start docker</code></pre></div><p><strong>查看 Docker 服务状态</strong></p><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo systemctl status docker</span></code></pre></div><p><strong>运行 Docker 命令</strong></p><div class="code-wrapper"><pre><code class="hljs bash">sudo docker ps</code></pre></div><h2 id="服务重启后docker容器不见解决方案"><a href="#服务重启后docker容器不见解决方案" class="headerlink" title="服务重启后docker容器不见解决方案"></a>服务重启后docker容器不见解决方案</h2><p>服务重启后，docker服务没有自启动</p><p>重启docker</p><div class="code-wrapper"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> docker</code></pre></div><p>查询所有容器</p><div class="code-wrapper"><pre><code class="hljs mel">docker <span class="hljs-keyword">container</span> <span class="hljs-keyword">ls</span> -a</code></pre></div><p>重启容器</p><div class="code-wrapper"><pre><code class="hljs xquery">docker container <span class="hljs-keyword">start</span><span class="hljs-built_in"> id</span></code></pre></div><p>自动重启</p><div class="code-wrapper"><pre><code class="hljs pgsql">docker <span class="hljs-keyword">update</span> <span class="hljs-comment">--restart=always NAME</span></code></pre></div><p> QA</p><p>报错：Cannot restart container 316c21f93fa8: failed to create task for container: task 316c21f93fa8205d1f684d69c2699e5b72525e34dd5f006636b30a7620c331bd: already exists</p><p>重启服务 <code>reboot</code>，然后重启容器</p><h2 id="批量卸载docker"><a href="#批量卸载docker" class="headerlink" title="批量卸载docker"></a>批量卸载docker</h2><p>脚本：</p><div class="code-wrapper"><pre><code class="hljs bash">https://gitee.com/dayu777/open_shell/raw/main/remove_docker.yaml</code></pre></div><p><strong>运行</strong></p><div class="code-wrapper"><pre><code class="hljs bash">ansible-playbook remove_docker.yaml</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ansible</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自动化</tag>
      
      <tag>ansible</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>国内源安装docker</title>
    <link href="/posts/bf46cd00.html"/>
    <url>/posts/bf46cd00.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于ubuntu22.04</p></blockquote><h3 id="更新索引包"><a href="#更新索引包" class="headerlink" title="更新索引包"></a>更新索引包</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo apt update</code></pre></div><h3 id="安装设置仓库必须的工具"><a href="#安装设置仓库必须的工具" class="headerlink" title="安装设置仓库必须的工具"></a>安装设置仓库必须的工具</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo apt update &amp;&amp; sudo apt install -y ca-certificates curl gnupg lsb-release</code></pre></div><h3 id="安装HTTPS支持包"><a href="#安装HTTPS支持包" class="headerlink" title="安装HTTPS支持包"></a>安装HTTPS支持包</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo apt -y install apt-transport-https ca-certificates curl software-properties-common</code></pre></div><h3 id="添加软件源的GPG密钥"><a href="#添加软件源的GPG密钥" class="headerlink" title="添加软件源的GPG密钥"></a>添加软件源的GPG密钥</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/aliyun-docker.gpg</code></pre></div><h3 id="添加Docker软件源"><a href="#添加Docker软件源" class="headerlink" title="添加Docker软件源"></a>添加Docker软件源</h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> \  <span class="hljs-string">&quot;deb [arch=<span class="hljs-subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/trusted.gpg.d/aliyun-docker.gpg] https://download.docker.com/linux/ubuntu \</span><span class="hljs-string">  <span class="hljs-subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</code></pre></div><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo apt updatesudo apt install -y docker-ce</code></pre></div><h3 id="启动后台服务"><a href="#启动后台服务" class="headerlink" title="启动后台服务"></a>启动后台服务</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo service docker startsudo systemctl restart dockersudo systemctl start docker</code></pre></div><h3 id="查看-Docker-服务状态"><a href="#查看-Docker-服务状态" class="headerlink" title="查看 Docker 服务状态"></a>查看 Docker 服务状态</h3><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo systemctl status docker</span></code></pre></div><h3 id="开启自启动"><a href="#开启自启动" class="headerlink" title="开启自启动"></a>开启自启动</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">enable</span> docker</code></pre></div><h3 id="将当前用户添加到-docker-用户组"><a href="#将当前用户添加到-docker-用户组" class="headerlink" title="将当前用户添加到 docker 用户组"></a>将当前用户添加到 docker 用户组</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo groupadd dockersudo usermod -aG docker <span class="hljs-variable">$USER</span>newgrp docker</code></pre></div><h3 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> -p /etc/dockersudo <span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span>&#123;  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://oyac73nr.mirror.aliyuncs.com&quot;</span>]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker</code></pre></div><p><strong>查看加速配置是否生效</strong></p><div class="code-wrapper"><pre><code class="hljs bash">sudo docker info</code></pre></div><p><strong>正确的效果</strong></p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">以上省略</span>  <span class="hljs-attr">Registry Mirrors:</span>  <span class="hljs-string">https://oyac73nr.mirror.aliyuncs.com/</span> <span class="hljs-attr">Live Restore Enabled:</span> <span class="hljs-literal">false</span></code></pre></div><p><strong>创建软链接</strong></p><div class="code-wrapper"><pre><code class="hljs bash">sudo <span class="hljs-built_in">ln</span> -s /usr/libexec/docker/cli-plugins/docker-compose /usr/bin/docker-compose</code></pre></div><p>注意：  <code>/usr/libexec/docker/cli-plugins/docker-compose</code>  通过 <code>sudo docker info</code> 查找</p><p><strong>查看docker-compose版本</strong></p><div class="code-wrapper"><pre><code class="hljs bash">sudo docker-compose -v</code></pre></div><h3 id="卸载docker"><a href="#卸载docker" class="headerlink" title="卸载docker"></a>卸载docker</h3><p>即使报错，也能干净</p><div class="code-wrapper"><pre><code class="hljs bash">sudo apt-get remove docker docker-engine docker.io containerd runcsudo apt-get purge docker-ce docker-ce-cli containerd.iosudo <span class="hljs-built_in">rm</span> -rf /var/lib/docker  sudo <span class="hljs-built_in">rm</span> -rf /var/lib/containerdsudo apt-get remove -y docker* containerd.io podman* runc &amp;&amp; apt-get autoremove</code></pre></div><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><div class="code-wrapper"><pre><code class="hljs awk">cd <span class="hljs-regexp">/etc/</span>apt<span class="hljs-regexp">/sources.list.d/</span></code></pre></div><p>删除与Docker 相关的文件，</p><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo apt clean</span><span class="hljs-attribute">sudo apt update</span></code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>公钥分发脚本</title>
    <link href="/posts/9ea1753f.html"/>
    <url>/posts/9ea1753f.html</url>
    
    <content type="html"><![CDATA[<h2 id="公钥分发脚本："><a href="#公钥分发脚本：" class="headerlink" title="公钥分发脚本："></a>公钥分发脚本：</h2><blockquote><p><code>只需要修改IP、用户、密码、ssh端口</code> 如果不是root用户或者ssh端口不是22，可定义</p></blockquote><p>脚本地址：<a href="https://github.com/woniu336/open_shell/blob/main/pub_send.py">https://github.com/woniu336/open_shell/blob/main/pub_send.py</a></p><p><a href="https://gitee.com/dayu777/open_shell/raw/main/pub_send.py">https://gitee.com/dayu777/open_shell/raw/main/pub_send.py</a></p><p><strong>注意：脚本会删除原来的密钥对</strong></p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><blockquote><p>你有几十台服务器，现在用跳板机（堡垒机）来统一管控，把公钥分发到每台机器上</p></blockquote><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><div class="code-wrapper"><pre><code class="hljs bash">python3 pub_send.py</code></pre></div><p>脚本内容：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/env python3</span>import os<span class="hljs-comment"># 删除用户家目录下的 SSH 密钥文件</span>os.system(<span class="hljs-string">&#x27;rm -rf ~/.ssh/id_rsa*&#x27;</span>)<span class="hljs-comment"># 生成新的 SSH 密钥对</span>os.system(<span class="hljs-string">&#x27;ssh-keygen -f ~/.ssh/id_rsa -P &quot;&quot; &gt;/dev/null 2&gt;&amp;1&#x27;</span>)<span class="hljs-comment"># 设置 SSH 密钥路径</span>key_path = os.path.expanduser(<span class="hljs-string">&#x27;~/.ssh/id_rsa.pub&#x27;</span>)<span class="hljs-comment"># 定义IP地址列表、用户名、密码和端口</span>hosts_and_passwords = &#123;    <span class="hljs-string">&quot;192.168.1.28&quot;</span>: &#123;<span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>, <span class="hljs-string">&quot;port&quot;</span>: 22&#125;,    <span class="hljs-string">&quot;192.168.1.29&quot;</span>: &#123;<span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>, <span class="hljs-string">&quot;port&quot;</span>: 22&#125;,    <span class="hljs-string">&quot;192.168.1.30&quot;</span>: &#123;<span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>, <span class="hljs-string">&quot;port&quot;</span>: 22&#125;&#125;<span class="hljs-comment"># 循环遍历 IP 地址列表，将 SSH 公钥复制到远程主机</span><span class="hljs-keyword">for</span> host, credentials <span class="hljs-keyword">in</span> hosts_and_passwords.items():    user = credentials[<span class="hljs-string">&quot;user&quot;</span>]    password = credentials[<span class="hljs-string">&quot;password&quot;</span>]    port = credentials[<span class="hljs-string">&quot;port&quot;</span>]    os.system(f<span class="hljs-string">&#x27;sshpass -p &quot;&#123;password&#125;&quot; ssh-copy-id -i &#123;key_path&#125; -o StrictHostKeyChecking=no -p &#123;port&#125; &#123;user&#125;@&#123;host&#125;&#x27;</span>)</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>油管下载神器，超简单一键下载</title>
    <link href="/posts/8bafa103.html"/>
    <url>/posts/8bafa103.html</url>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/yt-dlp/yt-dlp">https://github.com/yt-dlp/yt-dlp</a></p><p>下载：<a href="https://www.123pan.com/s/cjqrVv-rcq9d.html">https://www.123pan.com/s/cjqrVv-rcq9d.html</a></p><blockquote><p>下载解压，解压路径<code>不能是中文</code>，双击 <code>懒人版.exe</code> 输入油管链接即可下载</p></blockquote><p>视频保存路径在 <code>yt-dlp.conf</code> 里面修改：</p><div class="code-wrapper"><pre><code class="hljs wren"><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-variable">output</span> <span class="hljs-string">&quot;E:/youtube/<span class="hljs-subst">%(uploader)</span>s/<span class="hljs-subst">%(title)</span>s-<span class="hljs-subst">%(resolution)</span>s.<span class="hljs-subst">%(ext)</span>s&quot;</span></code></pre></div><p>解释：E:&#x2F;youtube&#x2F; 保存在E盘youtube目录下，自行修改 </p><ul><li>uploader：频道名称或者up主名称</li><li>title：视频标题 </li><li>resolution：视频分辨率 </li><li>ext 这个可以暂时理解为视频扩展名 是必须要写的哈。</li></ul><h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><blockquote><p>默认即可</p></blockquote><p><code>yt-dlp.conf</code> 为配置文件</p><p>进度条标题栏显示 这部分用处不大 可以不写</p><p><code>--console-title --progress-template &quot;download-title:%(info.id)s-%(progress.eta)s&quot;</code></p><p>将下载的视频 转换为MP4格式，很重要。</p><p><code>--merge-output-format mp4</code></p><p>只下载英文和中文字幕</p><p><code>--sub-langs &quot;en.*,zh-Hans&quot;</code></p><p>将字幕、缩图、视频描述等信息内嵌到视频文件</p><p><code>--embed-subs</code></p><p><code>--embed-thumbnail</code></p><p><code>--embed-metadata</code></p><p><code>--convert-subs srt</code></p><h3 id="如何下载指定分辨率的视频？"><a href="#如何下载指定分辨率的视频？" class="headerlink" title="如何下载指定分辨率的视频？"></a>如何下载指定分辨率的视频？</h3><p>双击 <code>查询支持的分辨率.bat</code> 输入链接</p><p><img src="https://imgs.leshans.eu.org/docs/1712008848.png"></p><p>如图所示，如果想下载<code>1920x1080</code>分辨率的视频，我们需要<code>记录一下音频和视频id</code> 比如我们可以把140作为视频的音轨，把137作为视频的图像，这样最终会合成一个有图像有声音的视频</p><p>如何书写命令，举例：</p><p><code>yt-dlp.exe https://www.youtube.com/watch?v=XA2YEHn-A8Q</code> <code>-f137+140</code></p><p>大家务必注意结尾处的写法。f137前面是有一个减号的。当然你还可以自由的组合音视频。 这样我们就把指定分辨率的视频下载出来了。</p><h3 id="如何只下载音频？"><a href="#如何只下载音频？" class="headerlink" title="如何只下载音频？"></a>如何只下载音频？</h3><p>和上面的代码类似。还是根据<strong>音频id</strong>来下载，比如上面的图中 140是m4a格式的音频，代码如下：</p><p><code>yt-dlp.exe https://www.youtube.com/watch?v=XA2YEHn-A8Q -f140</code></p><h3 id="下载播放列表的所有视频"><a href="#下载播放列表的所有视频" class="headerlink" title="下载播放列表的所有视频"></a>下载播放列表的所有视频</h3><p>其实这个功能，api直接就支持，注意播放列表形如：</p><p><code>https://www.youtube.com/playlist?list=PL-Gg8EgJJQpDtccexkyEpSEK46m-epsFH</code></p><p>如何找播放列表 不用我多介绍了吧，去up主的主页，点击播放列表，出来的就都是播放列表了。</p><p>那么命令为：</p><p><code>yt-dlp.exe https://www.youtube.com/playlist?list=PL-Gg8EgJJQpDtccexkyEpSEK46m-epsFH</code></p><h3 id="如何升级yt-dlp的版本？"><a href="#如何升级yt-dlp的版本？" class="headerlink" title="如何升级yt-dlp的版本？"></a>如何升级yt-dlp的版本？</h3><p>确认yt-dlp.exe 所在目录为非中文，注意包括父级目录 都不能有中文。</p><p>此时执行 <code>yt-dlp.exe -U</code></p><p>即可完成版本升级，更新到最新的Release版本。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>超简单利用 CloudFlare Api 宕机自动切换ip，并开启小云朵(cdn)</title>
    <link href="/posts/cfd820bc.html"/>
    <url>/posts/cfd820bc.html</url>
    
    <content type="html"><![CDATA[<p><img src="https://imgs.leshans.eu.org/docs/1711972692.png"></p><h2 id="首先获取API密钥"><a href="#首先获取API密钥" class="headerlink" title="首先获取API密钥"></a>首先获取API密钥</h2><p>登录cloudflare</p><p><a href="https://dash.cloudflare.com/profile/api-tokens">https://dash.cloudflare.com/profile/api-tokens</a></p><p>获取：<code>Global API Key</code></p><h2 id="获取域名区域ID"><a href="#获取域名区域ID" class="headerlink" title="获取域名区域ID"></a>获取域名区域ID</h2><p>选择其中一个域名进入</p><p>域名的右侧，找到区域ID，复制ID</p><p>前提：要把域名提前解析好，</p><p>准备好域名正在使用的IP（原始ip） 备用IP（切换后的ip）</p><h2 id="下载脚本"><a href="#下载脚本" class="headerlink" title="下载脚本"></a>下载脚本</h2><p>脚本地址：<a href="https://github.com/woniu336/open_shell/tree/main/dns_update">https://github.com/woniu336/open_shell/tree/main/dns_update</a></p><p><strong>脚本下载</strong></p><div class="code-wrapper"><pre><code class="hljs bash">wget https://raw.githubusercontent.com/woniu336/open_shell/main/dns_update/dns_update.sh &amp;&amp; wget https://raw.githubusercontent.com/woniu336/open_shell/main/dns_update/dns_update.py &amp;&amp; <span class="hljs-built_in">chmod</span> +x dns_update.sh dns_update.py</code></pre></div><p><strong>国内</strong></p><div class="code-wrapper"><pre><code class="hljs bash">wget https://gitee.com/dayu777/open_shell/raw/main/dns_update/dns_update.sh &amp;&amp; wget https://gitee.com/dayu777/open_shell/raw/main/dns_update/dns_update.py &amp;&amp; <span class="hljs-built_in">chmod</span> +x dns_update.sh dns_update.py</code></pre></div><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><div class="code-wrapper"><pre><code class="hljs bash">apt install python3-pippip install requestssudo apt-get install jq</code></pre></div><h2 id="运行dns-update-sh"><a href="#运行dns-update-sh" class="headerlink" title="运行dns_update.sh"></a>运行dns_update.sh</h2><blockquote><p>先运行<code>dns_update.sh</code> 提示输入API密钥，登录邮箱，区域ID，原始IP，备用ip，检测的端口号</p></blockquote><p>注意：原始ip就是正在使用的IP，检测到宕机后切换ip就是备用ip，要检测哪个端口号看你的需求，</p><div class="code-wrapper"><pre><code class="hljs bash">./dns_update.sh</code></pre></div><p>完成后，会将信息录入<code>dns_update.py</code>脚本</p><h2 id="运行dns-update-py"><a href="#运行dns-update-py" class="headerlink" title="运行dns_update.py"></a>运行dns_update.py</h2><p>终端输入：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x dns_update.py</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">python3 dns_update.py</code></pre></div><h2 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h2><p>比如你安装了宝塔面板，端口是5577，检测的端口号就是5577,然后停止面板，</p><p>或者你安装了nginx，停止ngnix, 检测的端口号就是80,</p><p>以上都会触发脚本自动更换ip</p><p>会看到终端显示<code>更新DNS记录</code>，切换<code>备用ip</code>提示，也可以到cloudflare去看DNS解析情况</p><p>如果要关掉小云朵cdn,修改：</p><div class="code-wrapper"><pre><code class="hljs bash">把 proxied=True 改成 proxied=False</code></pre></div><h2 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> python3 dns_update.py &gt;&gt; nohup.out 2&gt;&amp;1 &amp;</code></pre></div><h2 id="查看所有Python3进程"><a href="#查看所有Python3进程" class="headerlink" title="查看所有Python3进程"></a>查看所有Python3进程</h2><div class="code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;[p]ython3 dns_update.py&#x27;</span></code></pre></div><p>或者</p><div class="code-wrapper"><pre><code class="hljs bash">ps -ef | grep python3</code></pre></div><h2 id="禁止运行"><a href="#禁止运行" class="headerlink" title="禁止运行"></a>禁止运行</h2><div class="code-wrapper"><pre><code class="hljs bash">pkill -f dns_update.py</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>网站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cloudflare</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CapsWriter-Offline 电脑端离线语音输入工具</title>
    <link href="/posts/c7fda629.html"/>
    <url>/posts/c7fda629.html</url>
    
    <content type="html"><![CDATA[<h3 id="离线语音输入"><a href="#离线语音输入" class="headerlink" title="离线语音输入"></a>离线语音输入</h3><p>项目：<br><a href="https://github.com/HaujetZhao/CapsWriter-Offline">https://github.com/HaujetZhao/CapsWriter-Offline</a></p><p>视频教程：</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>翻译工具推荐：快速准确翻译，截图翻译，划词翻译</title>
    <link href="/posts/c6512b63.html"/>
    <url>/posts/c6512b63.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>推荐使用<code>deepl</code>翻译源，最准确的翻译</p></blockquote><p><code>第一款：TTime</code></p><p><a href="https://ttime.timerecord.cn/">https://ttime.timerecord.cn</a> </p><p>GitHub： <a href="https://github.com/InkTimeRecord/TTime">https://github.com/InkTimeRecord/TTime</a></p><p><code>第二款：quicker+翻译动作</code></p><p><img src="https://imgs.leshans.eu.org/docs/1711896485.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>rclone加密文件方法</title>
    <link href="/posts/2f5df31a.html"/>
    <url>/posts/2f5df31a.html</url>
    
    <content type="html"><![CDATA[<p><img src="https://imgs.leshans.eu.org/docs/1711895891.png"></p><p>选择：<code>Encrypt/Decrypt a remote</code></p><p>完成之后，挂载：</p><div class="code-wrapper"><pre><code class="hljs bash">rclone mount 路径 盘符：</code></pre></div><p>例如：</p><div class="code-wrapper"><pre><code class="hljs bash">rclone mount jiami: W:</code></pre></div><br>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux安装 python3</title>
    <link href="/posts/96366121.html"/>
    <url>/posts/96366121.html</url>
    
    <content type="html"><![CDATA[<p>安装 python3</p><div class="code-wrapper"><pre><code class="hljs bash">sudo apt updatesudo apt install python3</code></pre></div><p>其他：</p><div class="code-wrapper"><pre><code class="hljs bash">sudo apt updatesudo apt install python3-pippip3 install beautifulsoup4sudo apt install python3-lxml</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sitemap自动化提交方案</title>
    <link href="/posts/6db270ba.html"/>
    <url>/posts/6db270ba.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>并不是所有网站都像wordpress那样有插件可以实现</p></blockquote><h3 id="以下方案基于windows"><a href="#以下方案基于windows" class="headerlink" title="以下方案基于windows"></a>以下方案基于windows</h3><p>假设我更新了10篇文章，那么我要如何快速也更新sitemap呢，</p><p>1、首先把这10篇链接复制到一个<code>txt</code>文本，每行一条链接，假设为123.txt，</p><p>2、同目录下新建一个<code>sitemap.xml</code> 文件 (空文件)</p><p>3、同目录下新建一个<code>sitemap.bat</code>脚本</p><p>4、最后新建一个推送到网站的<code>push.sh</code>脚本</p><p><img src="https://imgs.leshans.eu.org/docs/1711709149.png"></p><h4 id="sitemap-bat脚本"><a href="#sitemap-bat脚本" class="headerlink" title="sitemap.bat脚本"></a>sitemap.bat脚本</h4><div class="code-wrapper"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> offsetlocal enabledelayedexpansionREM 设置变量<span class="hljs-built_in">set</span> <span class="hljs-string">&quot;sitemap=sitemap.xml&quot;</span><span class="hljs-built_in">set</span> <span class="hljs-string">&quot;temp_file=temp.xml&quot;</span>REM 清空sitemap.xml文件<span class="hljs-built_in">type</span> nul &gt; <span class="hljs-string">&quot;%sitemap%&quot;</span>REM 将sitemap.xml中的&lt;urlset&gt;标签写入临时文件<span class="hljs-built_in">echo</span> ^&lt;urlset xmlns=<span class="hljs-string">&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;</span> xmlns:mobile=<span class="hljs-string">&quot;http://www.baidu.com/schemas/sitemap-mobile/1/&quot;</span>^&gt; &gt;&gt; <span class="hljs-string">&quot;%sitemap%&quot;</span>REM 逐行读取123.txt中的链接，并将每个链接写入sitemap.xml中<span class="hljs-keyword">for</span> /f <span class="hljs-string">&quot;usebackq tokens=*&quot;</span> %%a <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;123.txt&quot;</span>) <span class="hljs-keyword">do</span> (    <span class="hljs-built_in">echo</span> ^&lt;url^&gt; &gt;&gt; <span class="hljs-string">&quot;%sitemap%&quot;</span>    <span class="hljs-built_in">echo</span> ^&lt;loc^&gt;%%a^&lt;/loc^&gt; &gt;&gt; <span class="hljs-string">&quot;%sitemap%&quot;</span>    <span class="hljs-built_in">echo</span> ^&lt;mobile:mobile <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;pc,mobile&quot;</span>/^&gt; &gt;&gt; <span class="hljs-string">&quot;%sitemap%&quot;</span>    REM 获取当前时间并将其格式化为需要的格式    <span class="hljs-keyword">for</span> /f <span class="hljs-string">&quot;delims=&quot;</span> %%t <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;powershell Get-Date -Format yyyy-MM-ddTHH:mm:sszzz&#x27;</span>) <span class="hljs-keyword">do</span> <span class="hljs-built_in">set</span> <span class="hljs-string">&quot;timestamp=%%t&quot;</span>    <span class="hljs-built_in">echo</span> ^&lt;lastmod^&gt;!timestamp!^&lt;/lastmod^&gt; &gt;&gt; <span class="hljs-string">&quot;%sitemap%&quot;</span>    <span class="hljs-built_in">echo</span> ^&lt;changefreq^&gt;daily^&lt;/changefreq^&gt; &gt;&gt; <span class="hljs-string">&quot;%sitemap%&quot;</span>    <span class="hljs-built_in">echo</span> ^&lt;priority^&gt;1.0^&lt;/priority^&gt; &gt;&gt; <span class="hljs-string">&quot;%sitemap%&quot;</span>    <span class="hljs-built_in">echo</span> ^&lt;/url^&gt; &gt;&gt; <span class="hljs-string">&quot;%sitemap%&quot;</span>)REM 添加&lt;/urlset&gt;标签到sitemap.xml文件中<span class="hljs-built_in">echo</span> ^&lt;/urlset^&gt; &gt;&gt; <span class="hljs-string">&quot;%sitemap%&quot;</span><span class="hljs-built_in">echo</span> Links have been successfully inserted into the sitemap.xml file.REM 清空123.txt文件<span class="hljs-built_in">type</span> nul &gt; <span class="hljs-string">&quot;123.txt&quot;</span><span class="hljs-built_in">echo</span> 123.txt has been cleared.</code></pre></div><h4 id="push-sh脚本"><a href="#push-sh脚本" class="headerlink" title="push.sh脚本"></a>push.sh脚本</h4><blockquote><p>这里需要你使用密钥方式连接你的服务器，教程博客有</p></blockquote><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-comment"># 执行 SCP 命令</span>scp -i ~/.ssh/id_ed25519 -P 22 sitemap.xml root@223.5.5.5:/www/wwwroot/sitemap</code></pre></div><p>这条命令的意思是把当前sitemap.xml文件传送到ip为223.5.5.5的服务器的&#x2F;www&#x2F;wwwroot&#x2F;sitemap目录</p><h4 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h4><p>当前目录新建一个run.bat ,来运行上面两个脚本</p><div class="code-wrapper"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> offrem 运行sitemap.bat<span class="hljs-built_in">echo</span> Running sitemap.batcall sitemap.batrem 等待2秒<span class="hljs-built_in">timeout</span> /t 2 &gt;nulrem 运行push.sh<span class="hljs-built_in">echo</span> Running push.shcall push.sh<span class="hljs-built_in">echo</span> All scripts executed successfully</code></pre></div><h3 id="如何自动化"><a href="#如何自动化" class="headerlink" title="如何自动化"></a>如何自动化</h3><p>想象一下，上面的这些操作哪些是需要变化的，<code>文章链接</code>是变化的，</p><p>再进一步，如果文章更新的位置是不变的，也就是说<code>网站的布局是不变的</code></p><p>那么可以使用模拟鼠标键盘的操作，去复制粘贴，最后一键运行run.bat</p><blockquote><p>推荐工具：</p></blockquote><p>quicker的<code>录制键鼠</code>动作 </p><p>ztasker : 定时任务工具</p><br>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>robots规则以及阻止垃圾爬虫</title>
    <link href="/posts/8a7c213d.html"/>
    <url>/posts/8a7c213d.html</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs bash">User-agent: *Crawl-delay: 10Disallow: /wp-admin/Disallow: /go/Disallow: /wp-content/plugins/Disallow: /?s=*Disallow: /author/Disallow: /astra-advanced-hook/Disallow: /themeDisallow: /demo/*Disallow: /*/page/*Disallow: /*blackholeDisallow: /?blackholeAllow: /wp-admin/admin-ajax.phpUser-agent: YandexBotDisallow: /User-agent: DotBotDisallow: /User-agent: AhrefsBotDisallow: /User-agent: GooglebotDisallow: /User-agent: BLEXBotDisallow: /User-agent: YaKDisallow: /User-agent: PetalBotDisallow: /User-agent: MJ12botDisallow: /Sitemap: https://www.xxx.com/sitemap.xml</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一键脚本设置SSH密钥登录服务器</title>
    <link href="/posts/4291a0c9.html"/>
    <url>/posts/4291a0c9.html</url>
    
    <content type="html"><![CDATA[<h3 id="脚本地址："><a href="#脚本地址：" class="headerlink" title="脚本地址："></a>脚本地址：</h3><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/ssh-v.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x ssh-v.sh &amp;&amp; ./ssh-v.sh</code></pre></div><p>脚本如下，请在电脑上安装好 <strong>Git</strong> 将代码保存为xxx.sh，双击运行：</p><p><code>一路回车</code>，输入yes,输入你的端口号，ip，密码，搞定</p><p>最后自定义别名（随意什么名称）</p><p>登录方式，打开终端，输入：<code>ssh [别名]</code> 登录</p><p>例如 <code>ssh kk</code> 就登录了</p><p>如果要在Linux系统上运行脚本，记得在目标服务器设置权限</p><h3 id="SSH设置不生效解决办法"><a href="#SSH设置不生效解决办法" class="headerlink" title="SSH设置不生效解决办法"></a>SSH设置不生效解决办法</h3><p>如果遇到设置ssh成功后仍然需要密码登录的情况解决办法</p><p> 一、查看系统安全日志，定位问题</p><div class="code-wrapper"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cat</span> /var/log/auth.log</code></pre></div><p>或者</p><div class="code-wrapper"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cat</span> /var/log/secure</code></pre></div><p>找到下面的信息</p><div class="code-wrapper"><pre><code class="hljs mipsasm">Authentication refused: <span class="hljs-keyword">bad </span>ownership <span class="hljs-keyword">or </span>modes...</code></pre></div><p>（网上的图片）<br><img src="https://imgs.leshans.eu.org/docs/1715611417.png"></p><p>（我的）<br><img src="https://imgs.leshans.eu.org/docs/1715612034.png"></p><p><code>for directory</code> 或者 <code>for file</code> 后面跟着的就是指出什么文件或文件夹</p><p>我的这条日志说明 SSH 服务器拒绝了基于密钥的认证,原因是 <code>/root/.ssh/authorized_keys</code> 文件的所有权或权限模式设置不正确。（你的原因可能和我不一样，但是方法是一样的）</p><p>authorized_keys 文件存储了允许使用 SSH 密钥登录的公钥。如果这个文件的权限设置不当,SSH 服务器将拒绝基于密钥的认证,从而要求输入密码进行登录认证。</p><p>解决方法是检查 <code>/root/.ssh/authorized_keys</code> 文件的所有权和权限,确保它只对 root 用户可读写:</p><p>所有权应为 root:root</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> root:root /root/.ssh/authorized_keys</code></pre></div><p>权限应为 600 (所有者可读写)</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 600 /root/.ssh/authorized_keys</code></pre></div><p>如果 <code>/root/.ssh</code> 目录存在,也要检查它的权限为 700 (所有者可读写执行)</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 700 /root/.ssh</code></pre></div><p>做完这些更改后,重新尝试 SSH 密钥登录,应该就不需要输入密码了。如果仍有问题,可以检查 SSH 服务器和客户端的其他配置。</p><h3 id="脚本："><a href="#脚本：" class="headerlink" title="脚本："></a>脚本：</h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-comment"># 创建SSH目录</span><span class="hljs-built_in">mkdir</span> -p ~/.ssh<span class="hljs-built_in">cd</span> ~/.ssh<span class="hljs-comment"># 生成SSH密钥</span><span class="hljs-comment"># 生成SSH密钥</span><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\e[32m开始愉快之旅吧\e[0m&quot;</span><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\e[32m系统将提示您指定密钥对名称: \e[33m一路回车\e[32m 请按Enter继续\e[0m&quot;</span><span class="hljs-built_in">echo</span>ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;注释随意&quot;</span><span class="hljs-comment"># 复制公钥到远程服务器</span><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入SSH端口号（默认22）：&quot;</span> ssh_portssh_port=<span class="hljs-variable">$&#123;ssh_port:-22&#125;</span><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入服务器IP地址：&quot;</span> server_ip<span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入用户名（默认root）：&quot;</span> ssh_userssh-copy-id -i ~/.ssh/id_ed25519.pub -p <span class="hljs-variable">$ssh_port</span> <span class="hljs-variable">$ssh_user</span>@<span class="hljs-variable">$server_ip</span><span class="hljs-comment"># 修改远程服务器配置</span>ssh -p <span class="hljs-variable">$ssh_port</span> <span class="hljs-variable">$ssh_user</span>@<span class="hljs-variable">$server_ip</span> &lt;&lt; <span class="hljs-string">&#x27;EOF&#x27;</span><span class="hljs-keyword">if</span> grep -q <span class="hljs-string">&quot;^#*PubkeyAuthentication\s*no&quot;</span> /etc/ssh/sshd_config; <span class="hljs-keyword">then</span>    sudo sed -i <span class="hljs-string">&#x27;s/^#*PubkeyAuthentication\s*no/ PubkeyAuthentication yes/&#x27;</span> /etc/ssh/sshd_config<span class="hljs-keyword">elif</span> grep -q <span class="hljs-string">&quot;^#*PubkeyAuthentication\s*yes&quot;</span> /etc/ssh/sshd_config; <span class="hljs-keyword">then</span>    sudo sed -i <span class="hljs-string">&#x27;s/^#*PubkeyAuthentication\s*yes/ PubkeyAuthentication yes/&#x27;</span> /etc/ssh/sshd_config<span class="hljs-keyword">else</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;PubkeyAuthentication yes&quot;</span> | sudo <span class="hljs-built_in">tee</span> -a /etc/ssh/sshd_config<span class="hljs-keyword">fi</span>sudo service ssh restart<span class="hljs-built_in">exit</span>EOF<span class="hljs-comment"># 提示用户输入别名和ip</span><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入别名：&quot;</span> alias_name<span class="hljs-comment"># 检查~/.ssh/config文件是否存在，如果不存在则创建并添加配置</span><span class="hljs-keyword">if</span> [ ! -f ~/.ssh/config ]; <span class="hljs-keyword">then</span>    <span class="hljs-built_in">touch</span> ~/.ssh/config<span class="hljs-keyword">fi</span><span class="hljs-comment"># 添加别名和IP到~/.ssh/config文件中</span><span class="hljs-keyword">if</span> ! grep -q <span class="hljs-string">&quot;Host <span class="hljs-variable">$alias_name</span>&quot;</span> ~/.ssh/config; <span class="hljs-keyword">then</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Host <span class="hljs-variable">$alias_name</span>&quot;</span> &gt;&gt; ~/.ssh/config    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;    Hostname <span class="hljs-variable">$server_ip</span>&quot;</span> &gt;&gt; ~/.ssh/config    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;    IdentityFile ~/.ssh/id_ed25519&quot;</span> &gt;&gt; ~/.ssh/config    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;    User <span class="hljs-variable">$ssh_user</span>&quot;</span> &gt;&gt; ~/.ssh/config  <span class="hljs-comment"># 更新User为用户输入的用户名</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;    Port <span class="hljs-variable">$ssh_port</span>&quot;</span> &gt;&gt; ~/.ssh/config  <span class="hljs-comment"># 添加Port选项</span><span class="hljs-keyword">fi</span><span class="hljs-comment"># 使用SSH密钥登录</span><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\e[33m输入 ssh <span class="hljs-variable">$alias_name</span> 愉快登录吧\e[0m&quot;</span>ssh <span class="hljs-variable">$alias_name</span></code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows server2022 调出剪贴板</title>
    <link href="/posts/787f9fbd.html"/>
    <url>/posts/787f9fbd.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>由于这个2022版本没有剪贴板功能，故使用以下方法调出</p></blockquote><p>保存为xx.reg文件 然后双击执行 重启电脑</p><div class="code-wrapper"><pre><code class="hljs bash">Windows Registry Editor Version 5.00[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Clipboard]<span class="hljs-string">&quot;IsCloudAndHistoryFeatureAvailable&quot;</span>=dword:00000001</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>复制本地文件到远程服务器</title>
    <link href="/posts/c6029fe9.html"/>
    <url>/posts/c6029fe9.html</url>
    
    <content type="html"><![CDATA[<p>假设你使用密钥的方式登录服务器，并且 <code>ssh 端口是 2233</code>，并且 <code>不是</code> 使用 root 登录，</p><p>从桌面复制 sitemap123. xml 到服务器目录 &#x2F;www&#x2F;wwwroot&#x2F;bt.cc 并且将文件 <code>重命名</code>：</p><blockquote><p>~&#x2F;.ssh&#x2F;id_rsa 是密钥路径</p><p>ssh -p 2233 sp #登录服务器的命令，事先在~&#x2F;.ssh&#x2F;config文件中配置</p></blockquote><p>config:</p><div class="code-wrapper"><pre><code class="hljs bash">Host sp    Hostname 服务器IP    IdentityFile ~/.ssh/id_rsa    User laoge</code></pre></div><p>复制命令如下：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-comment"># 执行 SCP 命令</span>scp -i ~/.ssh/id_rsa -P 2233 C:/Users/Administrator/Desktop/sitemap123.xml laoge@ip:~/sitemap123.xml<span class="hljs-comment"># 执行 SSH 命令</span>ssh -p 2233 sp &lt;&lt; <span class="hljs-string">&#x27;EOF&#x27;</span>    <span class="hljs-comment"># 在 SSH 会话中执行 sudo 命令，使用 -S 选项从标准输入读取密码</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;服务器密码&quot;</span> | sudo -S <span class="hljs-built_in">mv</span> ~/sitemap123.xml /www/wwwroot/bt.cc/    <span class="hljs-comment"># 在 SSH 会话中执行另一个 sudo 命令，使用 -S 选项从标准输入读取密码</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;服务器密码&quot;</span> | sudo -S <span class="hljs-built_in">mv</span> /www/wwwroot/bt.cc/sitemap123.xml /www/wwwroot/273bt.cc/sitemap.xmlEOF</code></pre></div><p>root用户密码登录：</p><div class="code-wrapper"><pre><code class="hljs bash">scp -P 2233 sitemap.xml root@xx.xx.x..:/www/wwwroot/xxx.com</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>vps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssh</tag>
      
      <tag>scp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>非常好用的PDF工具分享</title>
    <link href="/posts/e6159f87.html"/>
    <url>/posts/e6159f87.html</url>
    
    <content type="html"><![CDATA[<p>1、<a href="https://github.com/sumatrapdfreader/sumatrapdf">https://github.com/sumatrapdfreader/sumatrapdf</a></p><p>2、<a href="https://github.com/Stirling-Tools/Stirling-PDF">https://github.com/Stirling-Tools/Stirling-PDF</a></p><p>3、<a href="https://pdf2docx.cn/">https://pdf2docx.cn/</a></p><p>4、<a href="https://tools.pdf24.org/zh/">https://tools.pdf24.org/zh/</a></p><p>下载地址：<br><a href="https://www.123pan.com/s/cjqrVv-9Nq9d.html">https://www.123pan.com/s/cjqrVv-9Nq9d.html</a></p><p><img src="https://imgs.leshans.eu.org/docs/1711549355.png"></p>]]></content>
    
    
    <categories>
      
      <category>Windows工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pdf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git版本控制命令</title>
    <link href="/posts/e968a174.html"/>
    <url>/posts/e968a174.html</url>
    
    <content type="html"><![CDATA[<h2 id="撤销工作区修改"><a href="#撤销工作区修改" class="headerlink" title="撤销工作区修改"></a>撤销工作区修改</h2><p>使用场景：已有修改加入暂存区，后续出现 bug, 恢复到上一次暂存状态。</p><div class="code-wrapper"><pre><code class="hljs bash">git add .          <span class="hljs-comment"># 加入暂存区</span>git checkout -- .  <span class="hljs-comment"># 撤销工作区修改，恢复到上一次暂存时的状态</span></code></pre></div><h2 id="恢复到上一次提交-commit"><a href="#恢复到上一次提交-commit" class="headerlink" title="恢复到上一次提交 commit"></a>恢复到上一次提交 commit</h2><div class="code-wrapper"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">restore</span> <span class="hljs-built_in">--staged</span> . <span class="hljs-comment"># 恢复到未暂存状态</span><span class="hljs-string">git</span> <span class="hljs-string">checkout</span> -- .      <span class="hljs-comment"># 恢复上一次提交</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>rclone 阿里云OSS配置文件模板</title>
    <link href="/posts/c7dd02b6.html"/>
    <url>/posts/c7dd02b6.html</url>
    
    <content type="html"><![CDATA[<h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><p>修改：云存储名称、ID、密钥、endpoint，其他默认</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[oss]</span> <span class="hljs-comment"># 云存储名称，随意！但使用rclone时需要一致</span><span class="hljs-attr">type</span> = s3<span class="hljs-attr">provider</span> = Alibaba<span class="hljs-attr">env_auth</span> = <span class="hljs-literal">false</span><span class="hljs-attr">access_key_id</span> = &lt;ID&gt;<span class="hljs-attr">secret_access_key</span> = &lt;密钥&gt;<span class="hljs-attr">endpoint</span> = oss-cn-shenzhen.aliyuncs.com <span class="hljs-comment"># 这里我的是shenzhen(深圳)</span><span class="hljs-attr">acl</span> = public-read<span class="hljs-attr">storage_class</span> = STANDARD<span class="hljs-attr">bucket_acl</span> = public-read</code></pre></div><h3 id="命令："><a href="#命令：" class="headerlink" title="命令："></a>命令：</h3><div class="code-wrapper"><pre><code class="hljs bash">rclone <span class="hljs-built_in">sync</span> D:\blog oss:tvcdn\blog -u -v -P --transfers=20 --ignore-errors --buffer-size=128M --check-first --checkers=10 --drive-acknowledge-abuse --exclude <span class="hljs-string">&quot;/&#123;.git,public,resources&#125;/&quot;</span> --exclude <span class="hljs-string">&quot;*.mp4&quot;</span></code></pre></div><h4 id="命令解读"><a href="#命令解读" class="headerlink" title="命令解读"></a>命令解读</h4><table><thead><tr><th>序号</th><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>1</td><td>同步本地文件夹 <code>D:\blog</code> 到远程 <code>oss:tvcdn\blog</code></td><td><code>rclone sync D:\blog oss:tvcdn\blog</code></td></tr><tr><td>2</td><td>忽略已存在文件（此参数慎重）</td><td><code>--ignore-existing</code></td></tr><tr><td>3</td><td>仅更新新文件</td><td><code>-u</code></td></tr><tr><td>4</td><td>显示详细进度</td><td><code>-v -P </code></td></tr><tr><td>5</td><td>并发传输数量为 20</td><td><code>--transfers=20</code></td></tr><tr><td>6</td><td>忽略错误</td><td><code>--ignore-errors</code></td></tr><tr><td>7</td><td>缓冲大小为 128 M</td><td><code>--buffer-size=128M</code></td></tr><tr><td>8</td><td>在首次同步前检查文件列表</td><td><code>--check-first</code></td></tr><tr><td>9</td><td>使用 10 个检查线程</td><td><code>--checkers=10</code></td></tr><tr><td>10</td><td>启用 Google Drive 滥用确认</td><td><code>--drive-acknowledge-abuse</code></td></tr><tr><td>11</td><td>排除 <code>.git</code>、<code>public</code> 和 <code>resources</code> 文件夹</td><td><code>--exclude &quot;/&#123;.git,public,resources&#125;/&quot;</code></td></tr><tr><td>12</td><td>排除所有 <code>*.mp4</code> 文件</td><td><code>--exclude &quot;*.mp4&quot;</code></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>rclone</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rclone</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rclone 过滤，包含和排除规则</title>
    <link href="/posts/16190999.html"/>
    <url>/posts/16190999.html</url>
    
    <content type="html"><![CDATA[<p>文档：<a href="https://www.rclone.cn/document/%E8%BF%87%E6%BB%A4%EF%BC%8C%E5%8C%85%E5%90%AB%E5%92%8C%E6%8E%92%E9%99%A4%E8%A7%84%E5%88%99/">资料</a></p><h3 id="文件类型过滤"><a href="#文件类型过滤" class="headerlink" title="文件类型过滤"></a><strong>文件类型过滤</strong></h3><p>比如 <code>--exclude &quot;*.bak&quot;</code>，表示排除所有 <code>.bak</code> 结尾的文件，也可以写作 <code>--filter &quot;- *.bak&quot;</code></p><p>比如 <code>--include &quot;*.&#123;png,jpg&#125;&quot;</code>，包含所有 <code>png</code> 和 <code>jpg</code> 文件，排除其他文件，也可以写作 <code>--filter &quot;+ *.&#123;png,jpg&#125;&quot;</code></p><p><code>--delete-excluded</code> 删除排除的文件。需配合过滤参数使用，否则无效。</p><h3 id="目录过滤"><a href="#目录过滤" class="headerlink" title="目录过滤"></a><strong>目录过滤</strong></h3><p>目录过滤需要在目录名称后面加上 <code>/</code>，否则会被当做文件进行匹配。以 <code>/</code> 开头只会匹配根目录（指定目录下），否则匹配所目录。这同样适用于文件。</p><p><code>--exclude &quot;.git/&quot;</code> 排除所有目录下的<code>.git</code> 目录。</p><p><code>--exclude &quot;/.git/&quot;</code> 只排除根目录下的<code>.git</code> 目录。</p><p><code>--exclude &quot;&#123;Video,Software&#125;/&quot;</code> 排除所有目录下的 <code>Video</code> 和 <code>Software</code> 目录。</p><p><code>--exclude &quot;/&#123;Video,Software&#125;/&quot;</code> 只排除根目录下的 <code>Video</code> 和 <code>Software</code> 目录。</p><p><code>--include &quot;/&#123;Video,Software&#125;/**&quot;</code> 仅包含根目录下的 <code>Video</code> 和 <code>Software</code> 目录的所有内容。</p><h3 id="大小过滤"><a href="#大小过滤" class="headerlink" title="大小过滤"></a><strong>大小过滤</strong></h3><p>默认大小单位为 <code>kBytes</code> ，但可以使用 <code>k</code> ，<code>M</code> 或 <code>G</code> 后缀。</p><p><code>--min-size</code> 过滤小于指定大小的文件。比如 <code>--min-size 50</code> 表示不会传输小于 50k 的文件。</p><p><code>--max-size</code> 过滤大于指定大小的文件。比如 <code>--max-size 1G</code> 表示不会传输大于 1G 的文件。</p><h3 id="过滤规则来自某个文件"><a href="#过滤规则来自某个文件" class="headerlink" title="过滤规则来自某个文件"></a><strong>过滤规则来自某个文件</strong></h3><p><code>--exclude-from &lt;规则文件&gt;</code> ：从文件添加包含规则</p><p><code>--include-from &lt;规则文件&gt;</code>：从文件添加删除规则</p><p><code>--filter-from &lt;规则文件&gt;</code> ：从文件添加包含 &#x2F; 排除规则。比如 <code>--filter-from filter-file.txt</code>。</p><p><code>filter-file.txt</code> 示例：</p><div class="code-wrapper"><pre><code class="hljs bash">- secret*.jpg + *.jpg+ *.png+ file2.avi- /dir/Trash/**+ /dir/**- *</code></pre></div><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><div class="code-wrapper"><pre><code class="hljs bash">rclone <span class="hljs-built_in">sync</span> D:\blog oss:tvcdn\blog -u -v -P --transfers=20 --ignore-errors --buffer-size=128M --check-first --checkers=10 --drive-acknowledge-abuse --exclude <span class="hljs-string">&quot;/&#123;.git,public,resources&#125;/&quot;</span> --exclude <span class="hljs-string">&quot;*.mp4&quot;</span></code></pre></div><p>这段代码的意思是：</p><table><thead><tr><th>序号</th><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>1</td><td>同步本地文件夹 <code>D:\blog</code> 到远程 <code>oss:tvcdn\blog</code></td><td><code>rclone sync D:\blog oss:tvcdn\blog</code></td></tr><tr><td>2</td><td>忽略已存在文件（此参数慎重）</td><td><code>--ignore-existing</code></td></tr><tr><td>3</td><td>仅更新新文件</td><td><code>-u</code></td></tr><tr><td>4</td><td>显示详细进度</td><td><code>-v -P </code></td></tr><tr><td>5</td><td>并发传输数量为 20</td><td><code>--transfers=20</code></td></tr><tr><td>6</td><td>忽略错误</td><td><code>--ignore-errors</code></td></tr><tr><td>7</td><td>缓冲大小为 128M</td><td><code>--buffer-size=128M</code></td></tr><tr><td>8</td><td>在首次同步前检查文件列表</td><td><code>--check-first</code></td></tr><tr><td>9</td><td>使用 10 个检查线程</td><td><code>--checkers=10</code></td></tr><tr><td>10</td><td>启用 Google Drive 滥用确认</td><td><code>--drive-acknowledge-abuse</code></td></tr><tr><td>11</td><td>排除 <code>.git</code>、<code>public</code> 和 <code>resources</code> 文件夹</td><td><code>--exclude &quot;/&#123;.git,public,resources&#125;/&quot;</code></td></tr><tr><td>12</td><td>排除所有 <code>*.mp4</code> 文件</td><td><code>--exclude &quot;*.mp4&quot;</code></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>rclone</category>
      
    </categories>
    
    
    <tags>
      
      <tag>同步</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git回退到指定版本</title>
    <link href="/posts/f295ec7a.html"/>
    <url>/posts/f295ec7a.html</url>
    
    <content type="html"><![CDATA[<h2 id="git回退到上个版本"><a href="#git回退到上个版本" class="headerlink" title="git回退到上个版本"></a>git回退到上个版本</h2><div class="code-wrapper"><pre><code class="hljs bash">git reset --hard HEAD^</code></pre></div><p>回退到前3次提交之前，以此类推，回退到n次提交之前</p><div class="code-wrapper"><pre><code class="hljs bash">git reset --hard HEAD~3</code></pre></div><h2 id="回退到指定版本"><a href="#回退到指定版本" class="headerlink" title="回退到指定版本"></a>回退到指定版本</h2><p>查看 <code>commit</code> 哈希值</p><div class="code-wrapper"><pre><code class="hljs bash">git reflog</code></pre></div><p>红色框框的就是哈希值</p><p><img src="https://imgs.leshans.eu.org/docs/1711195589.png"></p><br><p>例如我要回退到commit信息为: <code>版本005</code> 的时候,对应哈希值: adacc9e</p><div class="code-wrapper"><pre><code class="hljs bash">git reset --hard adacc9e</code></pre></div><h2 id="更多版本"><a href="#更多版本" class="headerlink" title="更多版本"></a>更多版本</h2><p>要回退到更久之前的版本,使用脚本:</p><p>按 <code>q</code> 退出 再按序号选择版本</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-comment"># 显示git的reflog</span>git reflog<span class="hljs-comment"># 提取reflog输出的序号和对应的提交哈希值，并将其存储在数组中</span><span class="hljs-built_in">mapfile</span> -t commit_array &lt; &lt;(git reflog | grep -E <span class="hljs-string">&#x27;^[a-f0-9]+&#x27;</span> | <span class="hljs-built_in">cat</span> -n)<span class="hljs-comment"># 显示序号和对应的提交哈希值供用户选择</span><span class="hljs-keyword">for</span> ((i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-variable">$&#123;#commit_array[@]&#125;</span>; i++)); <span class="hljs-keyword">do</span>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;commit_array[i]&#125;</span>&quot;</span><span class="hljs-keyword">done</span><span class="hljs-comment"># 提示用户输入要恢复的版本号前面对应的数字</span><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入要恢复的版本号前面对应的数字: &quot;</span> version_number<span class="hljs-comment"># 提取用户选择的提交哈希值</span>selected_commit_hash=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;commit_array[version_number-1]&#125;</span>&quot;</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>)<span class="hljs-comment"># 使用git reset --hard命令将本地代码回退到指定版本</span>git reset --hard <span class="hljs-string">&quot;<span class="hljs-variable">$selected_commit_hash</span>&quot;</span></code></pre></div><br>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>frps一键安装脚本</title>
    <link href="/posts/81cd3357.html"/>
    <url>/posts/81cd3357.html</url>
    
    <content type="html"><![CDATA[<h3 id="frps脚本"><a href="#frps脚本" class="headerlink" title="frps脚本"></a>frps脚本</h3><p>文档来自 <a href="https://github.com/stilleshan/frps">https://github.com/stilleshan/frps</a></p><blockquote><p>先执行脚本,在自行修改 frps.toml 文件</p></blockquote><p>安装</p><div class="code-wrapper"><pre><code class="hljs bash">wget https://raw.githubusercontent.com/stilleshan/frps/master/frps_linux_install.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x frps_linux_install.sh &amp;&amp; ./frps_linux_install.sh</code></pre></div><p>以下为国内镜像</p><div class="code-wrapper"><pre><code class="hljs bash">wget https://github.ioiox.com/stilleshan/frps/raw/branch/master/frps_linux_install.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x frps_linux_install.sh &amp;&amp; ./frps_linux_install.sh</code></pre></div><p>使用</p><div class="code-wrapper"><pre><code class="hljs bash">vi /usr/local/frp/frps.toml<span class="hljs-comment"># 修改 frps.toml 配置</span>sudo systemctl restart frps<span class="hljs-comment"># 重启 frps 服务即可生效</span></code></pre></div><p>卸载</p><div class="code-wrapper"><pre><code class="hljs bash">wget https://raw.githubusercontent.com/stilleshan/frps/master/frps_linux_uninstall.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x frps_linux_uninstall.sh &amp;&amp; ./frps_linux_uninstall.sh<span class="hljs-comment"># 以下为国内镜像</span>wget https://github.ioiox.com/stilleshan/frps/raw/branch/master/frps_linux_uninstall.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x frps_linux_uninstall.sh &amp;&amp; ./frps_linux_uninstall.sh</code></pre></div><h3 id="frps相关命令"><a href="#frps相关命令" class="headerlink" title="frps相关命令"></a>frps相关命令</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo systemctl start frps<span class="hljs-comment"># 启动服务 </span>sudo systemctl <span class="hljs-built_in">enable</span> frps<span class="hljs-comment"># 开机自启</span>sudo systemctl status frps<span class="hljs-comment"># 状态查询</span>sudo systemctl restart frps<span class="hljs-comment"># 重启服务</span>sudo systemctl stop frps<span class="hljs-comment"># 停止服务</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>内网穿透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网穿透</tag>
      
      <tag>frps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装 Docker 环境</title>
    <link href="/posts/44f424b6.html"/>
    <url>/posts/44f424b6.html</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="安装-Docker（非大陆服务器）"><a href="#安装-Docker（非大陆服务器）" class="headerlink" title="安装 Docker（非大陆服务器）"></a>安装 Docker（非大陆服务器）</h3><div class="code-wrapper"><pre><code class="hljs bash">wget -qO- get.docker.com | bash</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">docker -v  <span class="hljs-comment">#查看 docker 版本</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> docker  <span class="hljs-comment"># 设置开机自动启动</span></code></pre></div><h3 id="安装-Docker-compose（非大陆服务器）"><a href="#安装-Docker-compose（非大陆服务器）" class="headerlink" title="安装 Docker-compose（非大陆服务器）"></a>安装 Docker-compose（非大陆服务器）</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">docker-compose --version  <span class="hljs-comment">#查看 docker-compose 版本</span></code></pre></div><h3 id="安装-Docker（国内服务器）"><a href="#安装-Docker（国内服务器）" class="headerlink" title="安装 Docker（国内服务器）"></a>安装 Docker（国内服务器）</h3><div class="code-wrapper"><pre><code class="hljs bash">curl -sSL https://get.daocloud.io/docker | sh</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">docker -v  <span class="hljs-comment">#查看 docker 版本  </span></code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> docker  <span class="hljs-comment"># 设置开机自动启动</span></code></pre></div><h3 id="安装-Docker-compose（国内服务器）"><a href="#安装-Docker-compose（国内服务器）" class="headerlink" title="安装 Docker-compose（国内服务器）"></a>安装 Docker-compose（国内服务器）</h3><div class="code-wrapper"><pre><code class="hljs bash">curl -L https://get.daocloud.io/docker/compose/releases/download/v2.1.1/docker-compose-`<span class="hljs-built_in">uname</span> -s`-`<span class="hljs-built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose<span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-composedocker-compose --version  <span class="hljs-comment">#查看 docker-compose 版本</span></code></pre></div><p>修改 Docker 配置（可选）<br>内容参考：烧饼博客  </p><p>以下配置会增加一段自定义内网 IPv6 地址，开启容器的 IPv6 功能，以及限制日志文件大小，防止 Docker 日志塞满硬盘（泪的教训）：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt;<span class="hljs-string">EOF</span><span class="hljs-string">&#123;</span><span class="hljs-string">    &quot;log-driver&quot;: &quot;json-file&quot;,</span><span class="hljs-string">    &quot;log-opts&quot;: &#123;</span><span class="hljs-string">        &quot;max-size&quot;: &quot;20m&quot;,</span><span class="hljs-string">        &quot;max-file&quot;: &quot;3&quot;</span><span class="hljs-string">    &#125;,</span><span class="hljs-string">    &quot;ipv6&quot;: true,</span><span class="hljs-string">    &quot;fixed-cidr-v6&quot;: &quot;fd00:dead:beef:c0::/80&quot;,</span><span class="hljs-string">    &quot;experimental&quot;:true,</span><span class="hljs-string">    &quot;ip6tables&quot;:true</span><span class="hljs-string">&#125;</span><span class="hljs-string">EOF</span></code></pre></div><p>然后重启 Docker 服务：</p><div class="code-wrapper"><pre><code class="hljs bash">systemctl restart docker</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用vagrant快速创建Linux虚拟机</title>
    <link href="/posts/69c82de8.html"/>
    <url>/posts/69c82de8.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>安装方法：<br>1、安装<code>vagrant</code><br>2、再安装<code>virtualbox</code> 具体不写了，太繁琐。<br><a href="https://developer.hashicorp.com/vagrant/install?product_intent=vagrant">https://developer.hashicorp.com/vagrant/install?product_intent=vagrant</a><br><a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></p></blockquote><p><strong>你可能好奇</strong>，不是安装了<code>virtualbox</code>虚拟机吗，干嘛还去安装什么<code>vagrant</code></p><p>因为使用<code>vagrant</code>安装虚拟机实在是太方便了，那为什么要再安装<code>virtualbox</code> ，因为<code>virtualbox</code>只作为后端，可以不用打开。两者缺一不可</p><h2 id="设置环境变量（可选）"><a href="#设置环境变量（可选）" class="headerlink" title="设置环境变量（可选）"></a>设置环境变量（可选）</h2><ul><li><code>VAGRANT_HOME</code>  .vagrant.d 默认目录</li><li><code>VAGRANT_DEFAULT_PROVIDER</code>    #使用哪种虚拟机 默认<strong>virtualbox</strong></li></ul><h2 id="路径设置（可选）"><a href="#路径设置（可选）" class="headerlink" title="路径设置（可选）"></a>路径设置（可选）</h2><ul><li><code>virtualbox</code>的全局设定：Linux虚拟机安装位置</li><li><code>.vagrant.d </code>路径 ：环境变量里设置 默认<code>~/.vagrant.</code></li><li><code>Vagrantfile</code> 配置文件路径</li></ul><h1 id="教程开始"><a href="#教程开始" class="headerlink" title="教程开始"></a>教程开始</h1><h3 id="1、初始化-Vagrantfile-配置"><a href="#1、初始化-Vagrantfile-配置" class="headerlink" title="1、初始化 Vagrantfile 配置"></a>1、初始化 Vagrantfile 配置</h3><p>在当前目录下打开终端，输入以下命令初始化：</p><div class="code-wrapper"><pre><code class="hljs bash">vagrant init</code></pre></div><p>会在当前目录生成一个<strong>Vagrantfile</strong>文件</p><h3 id="2、修改配置："><a href="#2、修改配置：" class="headerlink" title="2、修改配置："></a>2、修改配置：</h3><p>清空<code>Vagrantfile</code>里面的内容，把以下内容添加到 <code>Vagrantfile</code> 文件</p><div class="code-wrapper"><pre><code class="hljs bash">Vagrant.configure(<span class="hljs-string">&quot;2&quot;</span>) <span class="hljs-keyword">do</span> |config|    config.vm.box = <span class="hljs-string">&quot;generic/ubuntu2204&quot;</span>    <span class="hljs-comment"># 规格配置</span>  config.vm.provider :virtualbox <span class="hljs-keyword">do</span> |vbox|    vbox.name    = <span class="hljs-string">&quot;ubuntu-1&quot;</span>    vbox.cpus    = 1    vbox.memory  = 1024    vbox.customize [<span class="hljs-string">&#x27;modifyvm&#x27;</span>, :<span class="hljs-built_in">id</span>, <span class="hljs-string">&#x27;--graphicscontroller&#x27;</span>, <span class="hljs-string">&#x27;vmsvga&#x27;</span>]  end      <span class="hljs-comment"># 修改hostname，更新/etc/hosts</span>  config.vm.hostname = <span class="hljs-string">&quot;ubuntu-1&quot;</span>    <span class="hljs-comment"># 公有网络 设置静态ip</span>  config.vm.network <span class="hljs-string">&quot;public_network&quot;</span>, ip: <span class="hljs-string">&quot;192.168.1.99&quot;</span>end</code></pre></div><h3 id="3、添加镜像box"><a href="#3、添加镜像box" class="headerlink" title="3、添加镜像box"></a>3、添加镜像box</h3><p><strong>box可以理解为打包好的虚拟机镜像</strong>，就像安装windows虚拟机一样，</p><p>官方镜像下载地址：<a href="https://app.vagrantup.com/boxes/search">https://app.vagrantup.com/boxes/search</a></p><p>提供一个国内下载地址：<a href="https://www.123pan.com/s/cjqrVv-Wm69d.html">https://www.123pan.com/s/cjqrVv-Wm69d.html</a></p><p>下载好之后，假如你放在<code>D:\box</code>目录，使用以下命令添加，</p><div class="code-wrapper"><pre><code class="hljs bash">vagrant box add generic/ubuntu2204 D:\box\ubuntu2204.box</code></pre></div><p>注意：<code>generic/ubuntu2204</code>对应 <strong>Vagrantfile</strong> 文件里的 config.vm.box &#x3D; <code>&quot;generic/ubuntu2204&quot;</code></p><p>也就是说，要先添加镜像，这个镜像名称是：<code>generic/ubuntu2204</code> </p><p>如果你在官网下载其他的镜像，下载到本地后可能不是<code>.box</code>后缀，修改改成<code>.box</code> </p><p><img src="https://imgs.leshans.eu.org/docs/1712693014.png"></p><p>注意看上面图片的 <code>ubuntu/trusty64</code> 就是镜像名称，添加的时候使用命令改成：</p><div class="code-wrapper"><pre><code class="hljs bash">vagrant box add ubuntu/trusty64 D:\box\trusty64.box</code></pre></div><p><strong>Vagrantfile</strong> 也要改成 config.vm.box &#x3D; <code>&quot;ubuntu/trusty64&quot;</code></p><h3 id="4、创建虚拟机"><a href="#4、创建虚拟机" class="headerlink" title="4、创建虚拟机"></a>4、创建虚拟机</h3><div class="code-wrapper"><pre><code class="hljs bash">vagrant up</code></pre></div><h3 id="5、登录虚拟机"><a href="#5、登录虚拟机" class="headerlink" title="5、登录虚拟机"></a>5、登录虚拟机</h3><div class="code-wrapper"><pre><code class="hljs bash">vagrant ssh</code></pre></div><h2 id="6、批量创建虚拟机"><a href="#6、批量创建虚拟机" class="headerlink" title="6、批量创建虚拟机"></a>6、批量创建虚拟机</h2><p>配置文件如下：</p><div class="code-wrapper"><pre><code class="hljs bash">vm_list = [  &#123; <span class="hljs-comment"># hash map</span>    <span class="hljs-string">&quot;name&quot;</span> =&gt; <span class="hljs-string">&quot;node-1&quot;</span>,    <span class="hljs-string">&quot;cpu&quot;</span> =&gt; <span class="hljs-string">&quot;2&quot;</span>,    <span class="hljs-string">&quot;mem&quot;</span> =&gt; <span class="hljs-string">&quot;2048&quot;</span>,    <span class="hljs-string">&quot;ip_addr&quot;</span> =&gt; <span class="hljs-string">&quot;192.168.1.10&quot;</span>  &#125;,  &#123;    <span class="hljs-string">&quot;name&quot;</span> =&gt; <span class="hljs-string">&quot;node-2&quot;</span>,    <span class="hljs-string">&quot;cpu&quot;</span> =&gt; <span class="hljs-string">&quot;1&quot;</span>,    <span class="hljs-string">&quot;mem&quot;</span> =&gt; <span class="hljs-string">&quot;1024&quot;</span>,    <span class="hljs-string">&quot;ip_addr&quot;</span> =&gt; <span class="hljs-string">&quot;192.168.1.11&quot;</span>  &#125;,  &#123;    <span class="hljs-string">&quot;name&quot;</span> =&gt; <span class="hljs-string">&quot;node-3&quot;</span>,    <span class="hljs-string">&quot;cpu&quot;</span> =&gt; <span class="hljs-string">&quot;1&quot;</span>,    <span class="hljs-string">&quot;mem&quot;</span> =&gt; <span class="hljs-string">&quot;1024&quot;</span>,    <span class="hljs-string">&quot;ip_addr&quot;</span> =&gt; <span class="hljs-string">&quot;192.168.1.12&quot;</span>  &#125;]Vagrant.configure(2) <span class="hljs-keyword">do</span> |config|   config.vm.box = <span class="hljs-string">&quot;generic/ubuntu2204&quot;</span>   vm_list.each <span class="hljs-keyword">do</span> |item|        config.vm.define item[<span class="hljs-string">&quot;name&quot;</span>] <span class="hljs-keyword">do</span> |node|            node.vm.provider <span class="hljs-string">&quot;virtualbox&quot;</span> <span class="hljs-keyword">do</span> |vbox|              vbox.name = item[<span class="hljs-string">&quot;name&quot;</span>];  <span class="hljs-comment"># 虚拟机名称</span>              vbox.memory = item[<span class="hljs-string">&quot;mem&quot;</span>]; <span class="hljs-comment"># 内存</span>              vbox.cpus = item[<span class="hljs-string">&quot;cpu&quot;</span>];   <span class="hljs-comment"># CPU</span>            end            <span class="hljs-comment"># 设置hostanme</span>            node.vm.hostname = item[<span class="hljs-string">&quot;name&quot;</span>]            <span class="hljs-comment"># 设置IP</span>            node.vm.network <span class="hljs-string">&quot;public_network&quot;</span>, ip: item[<span class="hljs-string">&quot;ip_addr&quot;</span>]        end    endend</code></pre></div><p>命令后面加虚拟机的名字，可以单独操作虚拟机：</p><div class="code-wrapper"><pre><code class="hljs crmsh">vagrant up <span class="hljs-keyword">node</span><span class="hljs-title">-1</span>vagrant halt <span class="hljs-keyword">node</span><span class="hljs-title">-1</span>vagrant reload <span class="hljs-keyword">node</span><span class="hljs-title">-1</span>vagrant destroy <span class="hljs-keyword">node</span><span class="hljs-title">-1</span>vagrant provision <span class="hljs-keyword">node</span><span class="hljs-title">-1</span></code></pre></div><p>SSH的私钥也分别存放在.vagrant虚拟机名对应的目录下</p><div class="code-wrapper"><pre><code class="hljs bash">ssh vagrant@192.168.1.10 -i .vagrant/machines/虚拟机名称/virtualbox/private_key</code></pre></div><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>重启：</p><div class="code-wrapper"><pre><code class="hljs bash">vagrant reload --provision <span class="hljs-comment">#--provision修改配置后</span></code></pre></div><p>查看box:</p><div class="code-wrapper"><pre><code class="hljs bash">vagrant box list</code></pre></div><p>连接虚拟机</p><div class="code-wrapper"><pre><code class="hljs bash">vagrant ssh</code></pre></div><p>常用命令  </p><div class="code-wrapper"><pre><code class="hljs bash">vagrant reload <span class="hljs-comment">#重新配置虚拟机</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">vagrant halt <span class="hljs-comment">#关闭虚拟机 </span></code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">vagrant destroy <span class="hljs-comment">#删除虚拟机  </span></code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">vagrant <span class="hljs-built_in">suspend</span> <span class="hljs-comment">#休眠  </span></code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">vagrant resume <span class="hljs-comment">#唤醒</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">vagrant box remove <span class="hljs-comment">#移除box</span></code></pre></div><p>查看IP：</p><div class="code-wrapper"><pre><code class="hljs bash">ip addr show ens33 <span class="hljs-comment">#ens33是接口名称，使用 ip addr 查看</span></code></pre></div><p>查看默认路由：</p><div class="code-wrapper"><pre><code class="hljs bash">ip route show</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>虚拟机</tag>
      
      <tag>vagrant</tag>
      
      <tag>VirtualBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Ubuntu 服务器 22.04 上设置静态 IP 地址</title>
    <link href="/posts/2f993e.html"/>
    <url>/posts/2f993e.html</url>
    
    <content type="html"><![CDATA[<h3 id="1、首先查看接口名称"><a href="#1、首先查看接口名称" class="headerlink" title="1、首先查看接口名称"></a>1、首先查看接口名称</h3><p>登录到你的 Ubuntu 服务器 22.04，查找 netplan 配置文件。它位于 <code>/etc/netplan</code> 目录下。</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/netplan/<span class="hljs-built_in">ls</span> -l</code></pre></div><p>运行以下 <code>cat</code> 命令以查看 <code>00-installer-config.yaml</code> 的内容。</p><blockquote><p>注意：配置文件的名称不一定跟我的一样，也可能有多个yaml文件，前面带<code>-rw-r--r--</code>就是我们需要修改的</p></blockquote><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> 00-installer-config.yaml````输出：![Default-Content-netplan-ubuntu-server](http://imgs.leshans.eu.org/2024/03/f492afa4c220988310d626d967e23255.png)根据上面的输出，可以看到 `ens33` 就是接口名称，它正在从 DHCP 服务器获取 IP。其他命令：```baship addr</code></pre></div><p>或者</p><div class="code-wrapper"><pre><code class="hljs bash">ifconfig</code></pre></div><p><img src="http://imgs.leshans.eu.org/2024/03/b2efa70f5bf487fdcbfa829973b62ff6.png"></p><p>或者使用nmcli 查看，需要执行安装sudo apt install network-manager</p><div class="code-wrapper"><pre><code class="hljs bash">nmcli device show ens33</code></pre></div><h3 id="2、编辑-netplan-配置文件"><a href="#2、编辑-netplan-配置文件" class="headerlink" title="2、编辑 netplan 配置文件"></a>2、编辑 netplan 配置文件</h3><p>现在，要配置静态 IP 代替 DHCP，使用 <code>vi</code> 或 <code>nano</code> 编辑器编辑 netplan 配置文件并添加以下内容。</p><div class="code-wrapper"><pre><code class="hljs bash">network:  renderer: networkd  ethernets:      ens33:                    <span class="hljs-comment">## network card name</span>          dhcp4: <span class="hljs-literal">false</span>          addresses:            - 192.168.1.25/24   <span class="hljs-comment">## set static IP</span>          routes:            - to: default              via: 192.168.1.1  <span class="hljs-comment">## gateway</span>          nameservers:            addresses: [223.5.5.5,8.8.8.8,192.168.1.1]  version: 2</code></pre></div><p>注意：根据你的环境更改 IP 详细信息和接口名称。</p><h3 id="3、重启网络服务"><a href="#3、重启网络服务" class="headerlink" title="3、重启网络服务"></a>3、重启网络服务</h3><p>配置完前面的参数之后，就可以重启网络服务生效。</p><p>执行命令1</p><div class="code-wrapper"><pre><code class="hljs bash">sudo systemctl start systemd-networkd</code></pre></div><p>执行命令2</p><div class="code-wrapper"><pre><code class="hljs bash">sudo systemctl status systemd-networkd</code></pre></div><p>执行命令3</p><div class="code-wrapper"><pre><code class="hljs bash">sudo netplan apply</code></pre></div><p>三条命令执行结果应均无报错，如有报错请检查配置参数是否有问题。</p><p>确保其中的 nameserver 行包含了您的 DNS 服务器的正确 IP 地址。</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/resolv.conf</code></pre></div><p>运行以下 IP 命令查看接口上的 IP 地址：</p><div class="code-wrapper"><pre><code class="hljs bash">ip addr show ens33</code></pre></div><p>要查看默认路由，请运行：</p><div class="code-wrapper"><pre><code class="hljs bash">ip route show</code></pre></div><p>上述命令的输出。</p><p><img src="http://imgs.leshans.eu.org/2024/03/70767bce5c5307ca458519d9c5762ce5.png"></p><p>完美，以上命令的输出确认静态 IP 和路由配置成功。</p>]]></content>
    
    
    <categories>
      
      <category>ubuntu</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>VMware Workstation 虚拟机桥接模式</title>
    <link href="/posts/3ec13554.html"/>
    <url>/posts/3ec13554.html</url>
    
    <content type="html"><![CDATA[<h3 id="查看桥接模式下的物理网卡是否对应正确"><a href="#查看桥接模式下的物理网卡是否对应正确" class="headerlink" title="查看桥接模式下的物理网卡是否对应正确"></a>查看桥接模式下的物理网卡是否对应正确</h3><p><img src="http://imgs.leshans.eu.org/2024/03/5d093b02a44f5ae29779ec9f3b9afe2a.png"></p><p><img src="http://imgs.leshans.eu.org/2024/03/c954746c359d237a62e5afc92e5e18cc.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vmware 挂载共享文件夹 虚拟机系列</title>
    <link href="/posts/15e96cbc.html"/>
    <url>/posts/15e96cbc.html</url>
    
    <content type="html"><![CDATA[<ul><li>共享文件夹设置</li></ul><h3 id="1-虚拟机设置"><a href="#1-虚拟机设置" class="headerlink" title="1.虚拟机设置"></a><strong>1.虚拟机设置</strong></h3><p>虚拟机菜单栏 -&gt; 虚拟机 -&gt; 设置 -&gt; 选项 -&gt; 共享文件夹 -&gt; 总是启用 -&gt; 添加（我将添加的共享目录命名为share_file） -&gt;确定</p><p><img src="http://imgs.leshans.eu.org/2024/03/0b9052a51f36603bc29a0cdedf2bdd98."></p><p><strong>2.VMware Tools安装</strong>  </p><p>（1）虚拟机菜单栏 -&gt; 虚拟机 -&gt; 安装<a href="https://so.csdn.net/so/search?q=VMware&spm=1001.2101.3001.7020">VMware</a> Tools  </p><p>（2）等一会虚拟机会自己打开VMware Tools文件夹  </p><p>（3）在该目录下，右键打开命令行，将压缩文件拷贝到桌面上，再到桌面上将其解压缩，安装完成后删除即可。  </p><div class="code-wrapper"><pre><code class="hljs cobol">cp /media/suzhch/VMwareTools-10.1.6-5214329.tar.gz /home/hadoop/Desktop/cd /home/hadoop/Desktop/tar -xzvf VMwareTools-10.1.6-5214329.tar.gz</code></pre></div><p>（4）成功之后以管理员root身份执行解压缩之后文件目录里的vmware-install.pl文件即可进行安装  </p><div class="code-wrapper"><pre><code class="hljs html">sudo vmware-tools-distrib/vmware-install.pl</code></pre></div><p>（5）然后按照提示输入指令即可。 (yes or no)</p><h3 id="共享文件在-mnt-hgfs-文件夹下"><a href="#共享文件在-mnt-hgfs-文件夹下" class="headerlink" title="共享文件在 &#x2F;mnt&#x2F;hgfs&#x2F;文件夹下"></a>共享文件在 &#x2F;mnt&#x2F;hgfs&#x2F;文件夹下</h3><p><strong>注意：</strong></p><p>上面的步骤走完之后会出现 在&#x2F;mnt&#x2F;hgfs目录下是空 的问题</p><p>解决办法：</p><p>1.vmware-hgfsclient 命令查看当前有哪些共享的目录  </p><div class="code-wrapper"><pre><code class="hljs undefined">vmware-hgfsclient</code></pre></div><p>会显示你设置的共享文件名，我上面设置的是share_file ,所以我这里显示的是share_file.懒得贴我的示意图了。</p><p>2.安装</p><div class="code-wrapper"><pre><code class="hljs kotlin">sudo apt-<span class="hljs-keyword">get</span> install <span class="hljs-keyword">open</span>-vm-dkms</code></pre></div><p>3.挂载共享文件</p><div class="code-wrapper"><pre><code class="hljs cobol">mount  -t vmhgfs .host:/share_file /mnt/hgfs</code></pre></div><p>如果显示 <br>如果显示<br>Error: cannot mount filesystem: No such device<br>ubuntu则先执行  sudo apt-get install open-vm-dkms</p><p>然后再执行3.挂载共享文件</p><p>如果还是不行，就重启下Linux，然后再看&#x2F;mnt&#x2F;hgfs&#x2F;文件夹下是否有share_file共享文件。</p><p>网上也有一种说法是使用如下命令</p><div class="code-wrapper"><pre><code class="hljs cobol">vmhgfs-fuse .host:/ /mnt/hgfs</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机ubuntu安装vmware tools</title>
    <link href="/posts/519f1cc8.html"/>
    <url>/posts/519f1cc8.html</url>
    
    <content type="html"><![CDATA[<h3 id="1-挂载vmware-tools光驱"><a href="#1-挂载vmware-tools光驱" class="headerlink" title="1. 挂载vmware tools光驱"></a>1. 挂载vmware tools光驱</h3><p><img src="http://imgs.leshans.eu.org/2024/03/3fffa2ec1fceb0093a85bed4dc705a1e.png" alt="Pasted image 20240319002205"></p><p>会自动挂载，然后进入挂载目录：</p><p>打开左侧边栏的VMwareTools：</p><p><img src="http://imgs.leshans.eu.org/2024/03/659145b719b91fdf79aee3afb3aa5438.png" alt="Pasted image 20240319002305"></p><h3 id="2-右键提取tar-gz压缩包"><a href="#2-右键提取tar-gz压缩包" class="headerlink" title="2.右键提取tar.gz压缩包"></a>2.右键提取tar.gz压缩包</h3><p>点击所选中的压缩包</p><p>右键将tar.gz压缩包提取到适当位置，我这里是用户下的Downloads文件夹</p><p><img src="http://imgs.leshans.eu.org/2024/03/cce0e71333fd31cf4544d870b69ff64e.png" alt="Pasted image 20240319002329"></p><p>然后打开命令窗口 进入解压后的目录</p><p>执行如下命令：一路回车</p><div class="code-wrapper"><pre><code class="hljs bash">sudo ./vmware-install.pl</code></pre></div><p><img src="http://imgs.leshans.eu.org/2024/03/fa5a5e0db44d24f919577994901245c6.png" alt="Pasted image 20240319002601"></p><p><img src="http://imgs.leshans.eu.org/2024/03/99b8d28f3ca5a90cd43617ae1123dcaa.png" alt="Pasted image 20240319002723"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>VMware Workstation Pro15 虚拟机密钥</title>
    <link href="/posts/dbf3fcf0.html"/>
    <url>/posts/dbf3fcf0.html</url>
    
    <content type="html"><![CDATA[<p> Player 版本是免费的，就是没有快照功能，其他与专业版一样，更小巧</p><p>Player 密钥其实就是获得商业许可而已，没有啥用处</p><h3 id="密钥"><a href="#密钥" class="headerlink" title="密钥"></a>密钥</h3><p>专业版密钥</p><div class="code-wrapper"><pre><code class="hljs gcode">Y<span class="hljs-name">G5</span>H<span class="hljs-number">2</span>-A<span class="hljs-symbol">NZ0</span>H-<span class="hljs-name">M8</span>ERY-TXZZZ-YKRV<span class="hljs-number">8</span></code></pre></div><p>player版密钥</p><div class="code-wrapper"><pre><code class="hljs bash">ZY3E8-6GD1L-M8DXP-6WMXZ-ZZ8Y6</code></pre></div><p>专业版下载：<a href="https://www.123pan.com/s/cjqrVv-PQq9d.html">https://www.123pan.com/s/cjqrVv-PQq9d.html</a></p><p>player下载：<a href="https://customerconnect.vmware.com/en/downloads/details?downloadGroup=PLAYER-1557&productId=800&rPId=55787">VMware Workstation 15.5.7 Player</a>  </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>virtualbox虚拟机共享文件夹挂载</title>
    <link href="/posts/a1346ea8.html"/>
    <url>/posts/a1346ea8.html</url>
    
    <content type="html"><![CDATA[<p><img src="http://imgs.leshans.eu.org/2024/03/c4b68d4cf8ceca6df176f625cc66e54f.png"></p><p>创建挂载目录</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /mnt/sudo <span class="hljs-built_in">mkdir</span> ./gd</code></pre></div><p>挂载：<strong>gd</strong>是共享文件夹名称，&#x2F;mnt&#x2F;gd 是linux挂载目录</p><div class="code-wrapper"><pre><code class="hljs bash">sudo mount -t vboxsf -o uid=1000,gid=1000 gd /mnt/gd</code></pre></div><p>卸载</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ..sudo umount /mnt/gd</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>windows 完全禁用传递优化服务 Delivery Optimization</title>
    <link href="/posts/43bde194.html"/>
    <url>/posts/43bde194.html</url>
    
    <content type="html"><![CDATA[<h3 id="禁用Delivery-Optimization"><a href="#禁用Delivery-Optimization" class="headerlink" title="禁用Delivery Optimization"></a>禁用<code>Delivery Optimization</code></h3><p><code>Delivery Optimization</code>是关于windows系统更新的一项服务，它会自动在E盘或某个盘生成文件夹<strong>Delivery Optimization</strong>，里面是一些缓存，强迫症可能很不爽。</p><p>在服务中关闭，win+r输入<strong>services.msc</strong>，打开服务管理界面，找到对应服务</p><p><img src="http://imgs.leshans.eu.org/2024/03/9007414188afadafcb049e9cad39040b.png"></p><p>如果你直接右键，修改属性，启动类型为：禁用，通常是拒绝访问</p><p>3.修改注册表</p><p><strong>计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\DoSvc</strong> 下start值改为4，win11值为4是禁用，刷新一下，变成禁用即可。</p><p><img src="http://imgs.leshans.eu.org/2024/03/f22626c01870144f4f2b74a5e8a536dc.png" alt="Pasted image 20240318011658"></p><p>并且把恢复选项下的所有重启改为无操作</p><p><img src="http://imgs.leshans.eu.org/2024/03/b8ecaae9461ed6df717c3b8c223b8502.png" alt="Pasted image 20240318011712"></p><p>修改注册表</p><p><img src="http://imgs.leshans.eu.org/2024/03/b6fc0fbb5dd4d90ecc2bad2f6760ffe8.png" alt="Pasted image 20240318011728"></p><p><img src="http://imgs.leshans.eu.org/2024/03/d1d3c107a29901a439a62d2277751671.png" alt="Pasted image 20240318011735"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>解决“Windows Terminal软件报0xd000003a“问题</title>
    <link href="/posts/c91ecb8e.html"/>
    <url>/posts/c91ecb8e.html</url>
    
    <content type="html"><![CDATA[<h3 id="修改condrv的Start值"><a href="#修改condrv的Start值" class="headerlink" title="修改condrv的Start值"></a>修改condrv的Start值</h3><p>按win+R，输入: regedit 回车</p><div class="code-wrapper"><pre><code class="hljs bash">计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\condrv</code></pre></div><p><img src="http://imgs.leshans.eu.org/2024/03/bcfe29fd051fd5432e63a94e24e1a733.png"></p><p>右侧找到 <strong>Start</strong> 字段，右击 <strong>Start</strong> 修改</p><p><img src="http://imgs.leshans.eu.org/2024/03/e6e515a522478f0298a3d9db81dd93fb.png"></p><p><img src="http://imgs.leshans.eu.org/2024/03/235badcd0d064f65dc2c7de152071ee1.png"></p><p>改完重启电脑</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一条命令完全卸载hyper-v虚拟机</title>
    <link href="/posts/6d9ecb84.html"/>
    <url>/posts/6d9ecb84.html</url>
    
    <content type="html"><![CDATA[<p>如果不需要Hyper-V，使用下面的命令卸载Hyper-V角色以及管理工具</p><div class="code-wrapper"><pre><code class="hljs bash">UnInstall-WindowsFeature -Name Hyper-V -IncludeManagementTools -Restart</code></pre></div><p>完成上面的命令后，hyper-v就从电脑中卸除。可以开始安装vmware虚拟机软件或者其他第三方虚拟机软件。</p>]]></content>
    
    
    
    <tags>
      
      <tag>虚拟机</tag>
      
      <tag>Hyper-v</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows server2022优化版</title>
    <link href="/posts/429ebf82.html"/>
    <url>/posts/429ebf82.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>根据zh-cn_windows_server_2022_x64_dvd_6c73507d.iso原版优化，</p><p>重装前最好使用驱动工具备份一下驱动，因为重装之后，需要先安装驱动，才能正常使用</p></blockquote><p><a href="https://www.123pan.com/s/cjqrVv-gdq9d.html">https://www.123pan.com/s/cjqrVv-gdq9d.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>WindowsTerminal安装posh-git</title>
    <link href="/posts/57f6ca.html"/>
    <url>/posts/57f6ca.html</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs bash">set-executionpolicy remotesigned</code></pre></div><p>安装：PSReadLine</p><div class="code-wrapper"><pre><code class="hljs bash">Install-Module PSReadLine -RequiredVersion 2.1.0</code></pre></div><p>安装posh-git</p><div class="code-wrapper"><pre><code class="hljs bash">PowerShellGet\Install-Module posh-git -Scope CurrentUser -Force</code></pre></div><p>写入配置：</p><div class="code-wrapper"><pre><code class="hljs bash">notepad <span class="hljs-variable">$PROFILE</span></code></pre></div><p>若提示错误：请继续以下代码</p><div class="code-wrapper"><pre><code class="hljs bash">New-Item -Path <span class="hljs-variable">$PROFILE</span> -Type File -Force</code></pre></div><p>Microsoft.PowerShell_profile.ps1 配置：</p><div class="code-wrapper"><pre><code class="hljs bash">clear<span class="hljs-comment"># Tab 当按Tab键时，显示所有选项的导航菜单</span>Set-PSReadlineKeyHandler -Key Tab -Function MenuComplete <span class="hljs-comment"># 每次回溯输入历史，光标定位于输入内</span>Set-PSReadLineOption -HistorySearchCursorMovesToEnd <span class="hljs-comment"># 下一条自动补全 History记录 line模式中相反</span>Set-PSReadlineKeyHandler -Key Ctrl+n -Function HistorySearchForward<span class="hljs-comment"># 上一条自动补全 History记录</span>Set-PSReadlineKeyHandler -Key Ctrl+p -Function HistorySearchBackward <span class="hljs-comment"># auto suggestions</span>Import-Module PSReadLineSet-PSReadLineOption -PredictionSource History <span class="hljs-comment"># git自动补全</span><span class="hljs-comment">#Add-PoshGitToProfile</span>Import-Module posh-git</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Winserver2022安装winget</title>
    <link href="/posts/10037906.html"/>
    <url>/posts/10037906.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>winget介绍：Windows 程序包管理器：优雅的安装软件, 类似Linux系统apt、dpkg</p><p>本教程只限于<code>server</code>系统,只在<code>winserver2022</code>测试通过，其他系统版本未知</p></blockquote><p>比如我想安装QQ，输入命令：<code>winget search QQ </code>搜索，然后使用 <code>winget install &lt;ID&gt;</code>安装</p><p><img src="http://imgs.leshans.eu.org/2024/03/42cbfa28fb23f6ea830ee0c783cb26e7.jpg"></p><p><strong>教程开始</strong></p><p><a href="https://www.123pan.com/s/cjqrVv-xf59d.html">https://www.123pan.com/s/cjqrVv-xf59d.html</a></p><p>将所有文件下载，解压 <code>microsoft.ui.xaml.2.7.3.zip</code></p><p>以管理员打开<code>powershell</code></p><p><code>cd microsoft.ui.xaml.2.7.3</code> 进入解压目录</p><p>执行命令：</p><div class="code-wrapper"><pre><code class="hljs bash">Add-AppxPackage -Path .\tools\AppX\x64\Release\Microsoft.UI.Xaml.2.7.appx</code></pre></div><p>回到上层目录 <code>cd ..</code></p><p>执行以下命令：</p><div class="code-wrapper"><pre><code class="hljs bash">Add-AppxPackage -Path .\Microsoft.VCLibs.x64.14.00.Desktop.appx</code></pre></div><p>继续</p><div class="code-wrapper"><pre><code class="hljs bash">Add-AppxPackage .\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle</code></pre></div><p>最后：</p><div class="code-wrapper"><pre><code class="hljs bash">Add-AppxProvisionedPackage -Online -Package .\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle -LicensePath .\24146eb205d040e69ef2d92d7034d97f_License1.xml</code></pre></div><p><strong>最后一点：记得要给winget换源</strong> 查看往期文章</p><br>]]></content>
    
    
    
    <tags>
      
      <tag>winget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 winget 搜索和安装应用程序</title>
    <link href="/posts/477bfdd0.html"/>
    <url>/posts/477bfdd0.html</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>winget 源</th><th>内容</th><th>地址</th></tr></thead><tbody><tr><td>微软官方</td><td>应用商店中的程序 + 开源软件包</td><td><code>https://cdn.winget.microsoft.com/cache</code></td></tr><tr><td>中科大开</td><td>开源软件包</td><td><code>https://mirrors.ustc.edu.cn/winget-source</code></td></tr></tbody></table><p>好像就中科大的提供 winget 国内镜像，有点少啊。</p><h2 id="使用-winget-搜索和安装应用程序"><a href="#使用-winget-搜索和安装应用程序" class="headerlink" title="使用 winget 搜索和安装应用程序"></a>使用 winget 搜索和安装应用程序</h2><p>对于不熟悉基于文本界面的用户来说，刚开始使用 winget 时可能有点令人望而却步，但实际上它非常简单易用。winget 的基本用法只涉及搜索和安装应用程序。请按照以下步骤操作：</p><p>1在 Windows 11 中鼠标右击「开始」菜单 – 选择打开「终端管理员」。</p><p>2要搜索应用程序，请执行：</p><div class="code-wrapper"><pre><code class="hljs vim">winget <span class="hljs-built_in">search</span> <span class="hljs-symbol">&lt;AppName&gt;</span></code></pre></div><p>例如，输入<code>winget search Chrome</code>来尝试查找 Google Chrome。</p><p><img src="http://imgs.leshans.eu.org/2024/03/883aa4bf07087fcdd0b9b66b98499577.webp" alt="使用 winget 搜索应用程序"></p><p>使用 winget 搜索应用程序</p><p>3如果首次使用<code>winget</code>命令，需要同意服务条款，请按<code>Y</code>然后按回车键。查询结果中可以看到包括不同版本的 Chrome，以及一些名称相似的应用程序。</p><p>4为了获取和安装正确的应用程序，最准确的方法是使用第二列中列出的包 <strong>ID</strong>。例如，要安装 Google Chrome 的稳定版，可以使用如下命令：</p><div class="code-wrapper"><pre><code class="hljs cmake">winget <span class="hljs-keyword">install</span> Google.Chrome</code></pre></div><p><img src="http://imgs.leshans.eu.org/2024/03/98f0d7a0dc67761ab20a034f5883c02b.webp" alt="使用 winget 安装应用程序"></p><p>使用 winget 安装应用程序</p><ul><li>如果要安装的程序需要通过 Microsoft Store 获取（源在列表的最后一列），还需要同意服务条款，请按<code>Y</code>然后按回车键。</li><li>也可以在安装命令中添加<code>--accept-package-agreements</code>参数，以自动接受任何协议。</li></ul><p>5安装完成后，可以重复这个过程来安装其他任何需要的应用程序。</p><p>在 Windows 11 中使用基于文本的命令行界面安装应用程序非常简单，而且有许多应用程序都可以通过<code>winget</code>命令实现静默安装，而且速度非常快。正如我们之前提到的，您也可以使用 Windows Package Manager 安装来自 Microsoft Store 的应用程序。</p><h2 id="使用-winget-更新应用程序"><a href="#使用-winget-更新应用程序" class="headerlink" title="使用 winget 更新应用程序"></a>使用 winget 更新应用程序</h2><p>Windows Package Manager 的另一个功能是通过集中的界面保持应用程序的更新。如果有一个或多个应用程序可在 winget 仓库中获取（即使不是通过该仓库安装），也可以使用它一次性轻松更新这些应用：</p><p>1在 Windows 11 中鼠标右击「开始」菜单 – 选择打开「终端管理员」。</p><p>2执行以下命令查看可用的软件更新包列表：</p><div class="code-wrapper"><pre><code class="hljs clean">winget update##或者winget upgrade</code></pre></div><p><img src="http://imgs.leshans.eu.org/2024/03/c51ca1596b0f71857c110ff29c216cb0.webp" alt="使用 winget 更新应用程序"></p><p>使用 winget 更新应用程序</p><p>3要更新特定的软件包，请运行：</p><div class="code-wrapper"><pre><code class="hljs vim">winget <span class="hljs-keyword">update</span> <span class="hljs-symbol">&lt;ID&gt;</span></code></pre></div><p><img src="http://imgs.leshans.eu.org/2024/03/fb15cf4fde0a9d6f2d6d514a86dfa967.webp" alt="使用 winget 更新应用程序"></p><p>使用 winget 更新应用程序</p><p>请将<code>&lt;ID&gt;</code>替换为想要更新的包 <strong>ID</strong>。</p><p>4如果要更新所有软件包，可以运行：</p><div class="code-wrapper"><pre><code class="hljs n1ql">winget <span class="hljs-keyword">update</span> --<span class="hljs-keyword">all</span></code></pre></div><p>5也可以添加<code>--include-unknown</code>参数来安装计算机上未知版本软件包的最新版本。</p><p>6软件包将逐个进行更新。同样地，一些安装程序在更新时可能需要人工干预，但可以使用<code>--disable-interactivity</code>参数来跳过。</p><p>您可以随时再次运行此操作，以确保应用程序保持最新。</p><h2 id="使用-winget-卸载应用程序"><a href="#使用-winget-卸载应用程序" class="headerlink" title="使用 winget 卸载应用程序"></a>使用 winget 卸载应用程序</h2><p>当然，我们也可以使用 winget 包管理器来卸载应用程序：</p><p>1在 Windows 11 中鼠标右击「开始」菜单 – 选择打开「终端管理员」。</p><p>2运行以下命令查看计算机上安装的所有软件包：</p><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">winget list</span></code></pre></div><p>3找到想要卸载的应用程序包 <strong>ID</strong>，再运行以下命令：</p><div class="code-wrapper"><pre><code class="hljs applescript">winget uninstall &lt;<span class="hljs-built_in">id</span>&gt;</code></pre></div><p><img src="http://imgs.leshans.eu.org/2024/03/79d55d0df75cbc790a8d74e56cfb4edd.webp" alt="使用 winget 卸载应用程序"></p><p>使用 winget 卸载应用程序</p><p>将<code>&lt;id&gt;</code>替换为要移除的包 <strong>ID</strong>。</p><p>4按照屏幕上的指示进行操作，或者使用<code>--disable-interactivity</code>参数以静默方式移除应用程序。</p><h2 id="使用-winget-导出和导入软件包列表"><a href="#使用-winget-导出和导入软件包列表" class="headerlink" title="使用 winget 导出和导入软件包列表"></a>使用 winget 导出和导入软件包列表</h2><p>winget 工具的另一个强大功能是能够将 Windows 中已安装的所有软件包导出为一个 JSON 文件。在设置新电脑时，就可以导入该文件，以便一次性安装列表中的所有应用程序。</p><h3 id="导出软件包列表"><a href="#导出软件包列表" class="headerlink" title="导出软件包列表"></a>导出软件包列表</h3><p>要导出 Windows 中已安装的软件包列表，只需运行：</p><div class="code-wrapper"><pre><code class="hljs elm"><span class="hljs-title">winget</span> ex<span class="hljs-keyword">port</span> -o &lt;output&gt;</code></pre></div><p>将<code>&lt;output&gt;</code>替换为要存储包列表文件的路径。某些应用可能需要同意源协议。</p><ul><li>可以使用<code>--source</code>参数仅筛选来自选定源（如 <strong>winget</strong> 或 <strong>msstore</strong>）的软件包。</li><li>可以使用<code>--version</code>参数导出特定版本的应用程序，而不是安装最新版本。</li></ul><p><img src="http://imgs.leshans.eu.org/2024/03/174e92284a056a1e7e641523aa8d5a70.webp" alt="使用 winget 导出软件包列表"></p><p>使用 winget 导出软件包列表</p><p>还可以将该文件移动到 U 盘或 OneDrive 这样的云服务中，以便稍后在其他设备上导入。在此过程中，可能会出现许多错误，因为许多应用程序是预装在 Windows 中的，或者可能不是通过 <strong>winget</strong> 或 <strong>msstore</strong> 源安装的。</p><p>此操作只会导出软件包列表，不包括实际的安装程序。在导入时，新电脑需要连接到 Internet，以便下载和安装这些软件包。</p><h3 id="导入软件包列表"><a href="#导入软件包列表" class="headerlink" title="导入软件包列表"></a>导入软件包列表</h3><p>要导入软件包列表，可以使用以下命令：</p><div class="code-wrapper"><pre><code class="hljs elm"><span class="hljs-title">winget</span> <span class="hljs-keyword">import</span> -i &lt;<span class="hljs-keyword">import</span>-file&gt;</code></pre></div><p>其中<code>&lt;import-file&gt;</code>是要导入的文件路径，还可以添加<code>--accept-package-agreements</code>参数以接受所有需要同意的源的协议。</p><p><img src="http://imgs.leshans.eu.org/2024/03/688a88540a9e979d253227849a8829cb.webp" alt="使用 winget 导入软件包列表"></p><p>使用 winget 导入软件包列表</p><ul><li>Windows Package Manager 将尝试逐个安装软件包列表中的所有应用程序。</li><li>由于其中一些是随 Windows 11 一起提供的应用程序包，因此可能已经安装了某些应用程序。</li><li>对于新的应用程序和更新，可能需要与每个安装程序进行交互，或者在导入时使用<code>--disable-interactivity</code>参数来跳过所有安装程序的交互过程。</li></ul><h2 id="Winget-1-6-3482-版本更新"><a href="#Winget-1-6-3482-版本更新" class="headerlink" title="Winget 1.6.3482 版本更新"></a>Winget 1.6.3482 版本更新</h2><p>Winget 1.6.3482 版本适用于 Windows 10（1809+）和 Windows 11。在此次更新中，禁用了实验性功能并更新了商店证书，以提高系统安全性。需要注意的是，当前商店证书将于 2024 年 3 月初到期。</p><p>在新版本中，<code>winget configure</code>命令是一个稳定的功能。可以帮助你在 Windows 系统上自动处理设置和配置，从而创建理想的开发环境。通过应用 WinGet 配置文件，能够更轻松地安装和管理软件包、应用程序、编程语言、框架、工具或项目所需的设置。</p><p>此次稳定版本还引入了对软件包依赖性的全面支持。现在，通过使用<code>winget download</code>命令，可以将软件包安装程序下载到本地，实现更加灵活的管理。</p><p>变更摘要：</p><ul><li>在安装包枚举时，现在包括了框架包。</li><li>引入了安装程序之间的强弱比较功能。</li><li>商店证书已经更新。</li></ul><hr><p>本文应该让您对如何使用 winget 包管理器有了一个基本了解。您可以进一步深入，通过添加自定义源获取应用程序，例如公司内部的应用程序存储库，并验证应用程序的清单文件。但本文介绍的核心功能已经非常实用。</p>]]></content>
    
    
    
    <tags>
      
      <tag>winget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows Terminal美化</title>
    <link href="/posts/f7a47aab.html"/>
    <url>/posts/f7a47aab.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、-oh-my-posh-安装"><a href="#一、-oh-my-posh-安装" class="headerlink" title="一、 oh my posh  安装"></a>一、 oh my posh  安装</h3><h4 id="安装方式1："><a href="#安装方式1：" class="headerlink" title="安装方式1："></a>安装方式1：</h4><p>打开 <code>PowerShell</code> 提示符并运行以下命令：</p><div class="code-wrapper"><pre><code class="hljs bash">Set-ExecutionPolicy Bypass -Scope Process -Force; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString(&#x27;https://ohmyposh.dev/install.ps1&#x27;))</code></pre></div><blockquote><p>可能会失败，请看安装方式2</p></blockquote><p>如果下载慢，使用代理：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> http_proxy=socks5://127.0.0.1:7890 <span class="hljs-built_in">set</span> https_proxy=socks5://127.0.0.1:7890</code></pre></div><p>手动加入环境变量（可不加）：</p><p>注意我的用户名是：<code>Administrator</code></p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-variable">$env</span>:Path += <span class="hljs-string">&quot;;C:\Users\Administrator\AppData\Local\Programs\oh-my-posh\bin&quot;</span></code></pre></div><h4 id="安装方式2："><a href="#安装方式2：" class="headerlink" title="安装方式2："></a>安装方式2：</h4><p>打开 <code>PowerShell</code> 提示符并运行以下命令：</p><div class="code-wrapper"><pre><code class="hljs bash">winget install JanDeDobbeleer.OhMyPosh -s winget</code></pre></div><p>但是首先<strong>为 winget 更换国内源</strong>，为了提高响应速度，以下是操作步骤：</p><p>1以管理员身份打开「命令提示符」。</p><p>2执行以下命令，删除由 Microsoft 维护的官方源：</p><div class="code-wrapper"><pre><code class="hljs routeros">winget source <span class="hljs-built_in">remove</span> winget</code></pre></div><p>3执行以下命令添加 winget 国内源：</p><div class="code-wrapper"><pre><code class="hljs css">winget source add <span class="hljs-selector-attr">[源名称]</span> <span class="hljs-selector-attr">[源地址]</span></code></pre></div><p>例如，若要添加中科大开源软件镜像源，可执行以下命令：</p><div class="code-wrapper"><pre><code class="hljs vim">winget <span class="hljs-keyword">source</span> <span class="hljs-built_in">add</span> winget https://mirrors.ustc.edu.<span class="hljs-keyword">cn</span>/winget-<span class="hljs-keyword">source</span></code></pre></div><p>建议就使用<code>winget</code>作为名称，以便在需要时轻松重置回官方源。</p><p>4换源完成后，可以通过以下命令进行验证和查看：</p><div class="code-wrapper"><pre><code class="hljs bash">winget <span class="hljs-built_in">source</span> list</code></pre></div><p>5如果要恢复使用 Microsoft 官方源，可以使用以下命令进行重置：</p><div class="code-wrapper"><pre><code class="hljs bash">winget <span class="hljs-built_in">source</span> reset winget</code></pre></div><p>源删除：</p><div class="code-wrapper"><pre><code class="hljs routeros">winget source <span class="hljs-built_in">remove</span> msstore</code></pre></div><p>6安装oh my posh：</p><div class="code-wrapper"><pre><code class="hljs bash">winget install JanDeDobbeleer.OhMyPosh -s winget</code></pre></div><h3 id="二、创建配置文件"><a href="#二、创建配置文件" class="headerlink" title="二、创建配置文件"></a>二、创建配置文件</h3><blockquote><p>配置文件路径：<br>C:\Users\Administrator\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1</p></blockquote><div class="code-wrapper"><pre><code class="hljs bash">notepad <span class="hljs-variable">$PROFILE</span></code></pre></div><p>若提示错误：请继续以下代码</p><div class="code-wrapper"><pre><code class="hljs bash">New-Item -Path <span class="hljs-variable">$PROFILE</span> -Type File -Force</code></pre></div><p>然后添加以下代码到Microsoft.PowerShell_profile.ps1</p><div class="code-wrapper"><pre><code class="hljs bash">oh-my-posh init pwsh --config <span class="hljs-variable">$env</span>:POSH_THEMES_PATH\montys.omp.json | Invoke-Expression</code></pre></div><p>重新加载以使更改生效:</p><div class="code-wrapper"><pre><code class="hljs bash">. <span class="hljs-variable">$PROFILE</span></code></pre></div><h3 id="解决“无法加载文件"><a href="#解决“无法加载文件" class="headerlink" title="解决“无法加载文件"></a>解决“无法加载文件</h3><p>解决“无法加载文件 ***\WindowsPowerShell\profile.ps1，因为在此系统上禁止运行脚本”</p><div class="code-wrapper"><pre><code class="hljs text">set-executionpolicy remotesigned</code></pre></div><h3 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h3><blockquote><p>主题目录：C:\Users\Administrator\AppData\Local\Programs\oh-my-posh\themes</p></blockquote><div class="code-wrapper"><pre><code class="hljs bash">notepad <span class="hljs-variable">$PROFILE</span></code></pre></div><p>改成：</p><div class="code-wrapper"><pre><code class="hljs bash">oh-my-posh init pwsh --config <span class="hljs-variable">$env</span>:POSH_THEMES_PATH\montys.omp.json | Invoke-Expressioncls</code></pre></div><blockquote><p>只需要修改<code>montys.omp.json</code>，是主题配置文件 </p></blockquote><p>主题预览：</p><div class="code-wrapper"><pre><code class="hljs bash">get-Poshthemes</code></pre></div><p><a href="https://ohmyposh.dev/docs/themes">https://ohmyposh.dev/docs/themes</a></p><h3 id="三、美化"><a href="#三、美化" class="headerlink" title="三、美化"></a>三、美化</h3><p>1：字体下载</p><p><a href="https://github.com/ryanoasis/nerd-fonts/releases">https://github.com/ryanoasis/nerd-fonts/releases</a></p><p><a href="https://www.123pan.com/s/cjqrVv-J159d.html">https://www.123pan.com/s/cjqrVv-J159d.html</a></p><p>下载：JetBrainsMono.tar.xz 字体 （这款字体能<code>解决乱码</code>）</p><p>解压JetBrainsMono.tar.xz，全选-右键安装即可</p><p>打开powershell, 按 <code>CTRL + SHIFT + ,</code> 打开<code>settings.json</code>文件，</p><p>将<code>defaults</code>字段改成如下：</p><div class="code-wrapper"><pre><code class="hljs bash">           <span class="hljs-string">&quot;defaults&quot;</span>:        &#123;            <span class="hljs-string">&quot;useAcrylic&quot;</span>: <span class="hljs-literal">true</span>,            <span class="hljs-string">&quot;acrylicOpacity&quot;</span>: 0.7,            <span class="hljs-string">&quot;backgroundImage&quot;</span>: <span class="hljs-string">&quot;D:/bg/789.jpg&quot;</span>,            <span class="hljs-string">&quot;backgroundImageOpacity&quot;</span>: 0.4,            <span class="hljs-string">&quot;fontFace&quot;</span>: <span class="hljs-string">&quot;JetBrainsMono Nerd Font Mono&quot;</span>,            <span class="hljs-string">&quot;fontSize&quot;</span>: 12        &#125;,</code></pre></div><p>或者：</p><div class="code-wrapper"><pre><code class="hljs bash">        <span class="hljs-string">&quot;defaults&quot;</span>:        &#123;            <span class="hljs-string">&quot;backgroundImage&quot;</span>: <span class="hljs-string">&quot;D:/bg/789.jpg&quot;</span>,            <span class="hljs-string">&quot;backgroundImageOpacity&quot;</span>: 0.4,            <span class="hljs-string">&quot;font&quot;</span>:                        &#123;                <span class="hljs-string">&quot;face&quot;</span>: <span class="hljs-string">&quot;JetBrainsMono Nerd Font Mono&quot;</span>,                <span class="hljs-string">&quot;size&quot;</span>: 12.0            &#125;,                        <span class="hljs-string">&quot;opacity&quot;</span>: 100,            <span class="hljs-string">&quot;useAcrylic&quot;</span>: <span class="hljs-literal">true</span>        &#125;,</code></pre></div><p><code>acrylicOpacity</code>: 表示亚克力效果的不透明度  值范围在 0（完全透明）到 1（完全不透明）之间</p><p><code>backgroundImageOpacity</code>: 表示背景图片的不透明度。值范围在 0（完全透明）到 1（完全不透明）之间</p><p><code>backgroundImage</code>:  表示背景图片的路径</p><p><code>JetBrainsMono Nerd Font Mono</code>  字体</p><h3 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h3><p>打开 控制面板—&gt;时钟和区域—&gt;区域-&gt;管理—&gt;更改系统区域设置</p><p><img src="http://imgs.leshans.eu.org/2024/03/0f8597b292d3c9bcf1479edc6e4ac9ca.webp"></p><p>勾选：使用 Unicode UTF-8 提供全球语音支持</p><p><img src="http://imgs.leshans.eu.org/2024/03/3cd45ee42e2e0a27986c60d09b10b344.webp"></p><p>点击确定，这个时候电脑提示需要重启，重启后再打开 powershell 就可以正常显示中文啦。</p>]]></content>
    
    
    
    <tags>
      
      <tag>xshell</tag>
      
      <tag>Terminal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows10更换全局字体，快速替换Win10默认字体步骤分享</title>
    <link href="/posts/c83e38ef.html"/>
    <url>/posts/c83e38ef.html</url>
    
    <content type="html"><![CDATA[<h3 id="第一步：为Win10下载新字体"><a href="#第一步：为Win10下载新字体" class="headerlink" title="第一步：为Win10下载新字体"></a>第一步：为Win10下载新字体</h3><ul><li><p><a href="https://ziyouziti.com/"><strong>自由字体网</strong></a>，一家专业字体网站，搜罗了全网不少可以免费商用的字体，字体样式也比较齐全，且无需注册登录，即可下载。遗憾的是，度盘链接常挂，默认下载使用的是城通网盘。</p></li><li><p><a href="https://www.fonts.net.cn/"><strong>字体天下</strong></a>，和自由字体一样无需注册登录即可下载，且不再使用网盘寄存数据下载速度更快，包含收费字体和免费字体，种类更多更全。</p></li><li><p><a href="https://www.zitijia.com/t/%E5%85%8D%E8%B4%B9%E5%95%86%E7%94%A8"><strong>字体家</strong></a>，无需注册登录即可下载，下载源为百度云盘和城通云盘，下载速度上可能对非VIP用户不是太友好。在免费字体种类，数量上一般，可视作前两者的补充。</p></li></ul><h3 id="第二步：为Windows10更换全局字体"><a href="#第二步：为Windows10更换全局字体" class="headerlink" title="第二步：为Windows10更换全局字体"></a>第二步：为Windows10更换全局字体</h3><p><img src="http://imgs.leshans.eu.org/2024/03/2f6889f6d672d627e52b247e5d987691.webp"></p><p>Win10修改系统默认字体需要利用到一个软件：<a href="https://github.com/Tatsu-syo/noMeiryoUI/blob/master/README_CN.md">noMeiryoUI</a></p><p>软件下载：<a href="https://www.123pan.com/s/cjqrVv-fk59d.html">https://www.123pan.com/s/cjqrVv-fk59d.html</a></p><p>其他教程： <a href="http://www.dians.net/thread-1202.htm">http://www.dians.net/thread-1202.htm</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>rclone基于windows一键脚本工具</title>
    <link href="/posts/bef8152.html"/>
    <url>/posts/bef8152.html</url>
    
    <content type="html"><![CDATA[<h3 id="bat脚本"><a href="#bat脚本" class="headerlink" title="bat脚本"></a>bat脚本</h3><p>rclone下载地址： <a href="https://rclone.org/downloads/">https://rclone.org/downloads/</a></p><p>以windows为例：</p><blockquote><p>前提：在rclone安装目录需要有<code>rclone.conf</code>配置文件存在,而且配置好了网盘</p></blockquote><div class="code-wrapper"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<span class="hljs-built_in">set</span> /p <span class="hljs-built_in">source</span>=请输入源路径：<span class="hljs-built_in">set</span> /p destination=请输入目标路径：<span class="hljs-built_in">set</span> /p proxy=是否需要代理？(<span class="hljs-built_in">yes</span>/no)：<span class="hljs-keyword">if</span> /i <span class="hljs-string">&quot;%proxy%&quot;</span>==<span class="hljs-string">&quot;yes&quot;</span> (    <span class="hljs-built_in">set</span> http_proxy=socks5://127.0.0.1:7890     <span class="hljs-built_in">set</span> https_proxy=socks5://127.0.0.1:7890) <span class="hljs-keyword">else</span> (    <span class="hljs-built_in">set</span> http_proxy=     <span class="hljs-built_in">set</span> https_proxy=)<span class="hljs-built_in">cd</span> /d D:\rclone-v1.63.0-windows-amd64rclone copy <span class="hljs-string">&quot;%source%&quot;</span> <span class="hljs-string">&quot;%destination%&quot;</span> --ignore-existing -u -v -P --transfers=20 --ignore-errors --buffer-size=128M --check-first --checkers=10 --drive-acknowledge-abusepause</code></pre></div><p>rclone.conf配置文件：</p><p><img src="http://imgs.leshans.eu.org/2024/03/88e05105d93c2d216b5bdd03830293f6.webp"></p><ul><li>目标标路径可以自动创建(如果没有) ，代理端口7890，如果你的不是7890端口请修改</li><li>编码：<code>ANSI</code> 避免windows下运行乱码</li><li>将rclone 下载到D盘，文件夹名： rclone-v1.63.0-windows-amd64</li><li>这里的代理是针对比如<code>谷歌网盘</code>需要魔法访问的情况</li><li>并且代理设置只会在该次运行过程中生效</li><li>每次运行这个批处理文件时，用户都需要重新选择是否需要代理</li></ul><h3 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h3><p>例如将<code>E:\迅雷下载</code>的文件复制到<code>onedrive</code>下的电影目录</p><div class="code-wrapper"><pre><code class="hljs bash">rclone copy E:\迅雷下载 onedrive:电影 --ignore-existing -u -v -P --transfers=20 --ignore-errors --buffer-size=128M --check-first --checkers=10</code></pre></div><blockquote><p>如果用于谷歌网盘，末尾添加参数： <code>--drive-acknowledge-abuse</code></p></blockquote><p>这是一个命令行命令，用于使用rclone工具将本地文件夹中的内容复制到远程存储中。以下是各个选项的解释：</p><ul><li><p><code>rclone</code>: 这是命令行工具rclone的名称，用于在不同云存储之间进行文件同步和传输。</p></li><li><p><code>copy</code>: 这是rclone的一个操作命令，用于复制文件和目录。</p></li><li><p><code>E:\迅雷下载</code>: 这是本地文件夹的路径，即要复制的源文件夹路径。</p></li><li><p><code>onedrive:电影</code>: 这是远程存储的名称和目标路径。在这里，<code>onedrive</code>是远程存储的名称，<code>电影</code>是目标路径。</p></li><li><p><code>--ignore-existing</code>: 这个选项告诉rclone在复制文件时忽略已经存在于目标路径中的文件。</p></li><li><p><code>-u</code>: 这个选项表示只复制更新过的文件，即源文件夹中修改过的文件或者新文件。</p></li><li><p><code>-v</code>: 这个选项表示以详细模式进行操作，会输出更多的信息。</p></li><li><p><code>-P</code>: 这个选项表示在复制过程中显示进度和统计信息。</p></li><li><p><code>--transfers=20</code>: 这个选项指定了同时进行的传输数，这里是20个并发传输。</p></li><li><p><code>--ignore-errors</code>: 这个选项告诉rclone在发生错误时继续进行，而不是停止操作。</p></li><li><p><code>--buffer-size=128M</code>: 这个选项设置了传输缓冲区的大小，这里是128MB。</p></li><li><p><code>--check-first</code>: 这个选项表示在开始复制之前检查目标路径，确保不会覆盖目标路径中的任何现有文件。</p></li><li><p><code>--checkers=10</code>: 这个选项设置了并发检查器的数量，用于检查源和目标文件之间的差异。</p></li></ul><p>通过这个命令，你可以将本地文件夹中的内容复制到远程存储中，并且可以控制复制过程的各种参数。</p><br>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>git 配置多端多个账号（码云、github、gitlab）</title>
    <link href="/posts/d107e88b.html"/>
    <url>/posts/d107e88b.html</url>
    
    <content type="html"><![CDATA[<p>首先确认已安装Git，可以通过 git –version 命令可以查看当前安装的版本。</p><blockquote><p>为同一个电脑，配置多个 git 账号，其整体流程如下：<br>清空默认的全局 user.name 和 user.email<br>为不同的 git 账户生成不同的 ssh-key<br>将以上的 ssh-key 分别添加到 ssh-agent 信任列表<br>添加以上的公钥到自己的 git 账户中<br>在 config 文件配置多个 ssh-key<br>测试</p></blockquote><h2 id="1-清空默认的全局-user-name-和-user-email"><a href="#1-清空默认的全局-user-name-和-user-email" class="headerlink" title="1. 清空默认的全局 user.name 和 user.email"></a>1. 清空默认的全局 user.name 和 user.email</h2><div class="code-wrapper"><pre><code class="hljs js">git config --<span class="hljs-variable language_">global</span> --unset user.<span class="hljs-property">name</span>git config --<span class="hljs-variable language_">global</span> --unset user.<span class="hljs-property">email</span></code></pre></div><p>查看git配置： <code>git config --global --list</code></p><h2 id="2、配置多个git的用户名和邮箱"><a href="#2、配置多个git的用户名和邮箱" class="headerlink" title="2、配置多个git的用户名和邮箱"></a>2、配置多个git的用户名和邮箱</h2><p>a、单个配置</p><div class="code-wrapper"><pre><code class="hljs js">git config --<span class="hljs-variable language_">global</span> user.<span class="hljs-property">name</span> <span class="hljs-string">&quot;yourusername&quot;</span>git config --<span class="hljs-variable language_">global</span> user.<span class="hljs-property">email</span> <span class="hljs-string">&quot;youremail@email.com&quot;</span></code></pre></div><p>b、多个配置</p><p>注意： 这里git config命令没有带—global，表示这是一个局部的设置，也就是这个用户是当前项目的，而不是全局的。</p><div class="code-wrapper"><pre><code class="hljs js">git config user.<span class="hljs-property">name</span> <span class="hljs-string">&quot;1&quot;</span>git config user.<span class="hljs-property">email</span> <span class="hljs-string">&quot;1@hotmail.com&quot;</span></code></pre></div><p>c、删除配置</p><div class="code-wrapper"><pre><code class="hljs js">git config --unset user.<span class="hljs-property">name</span>git config --unset user.<span class="hljs-property">email</span></code></pre></div><h2 id="3、生成多个密钥"><a href="#3、生成多个密钥" class="headerlink" title="3、生成多个密钥"></a>3、生成多个密钥</h2><p>管理员打开控制台</p><p>a、生成gitte仓库的SSH</p><p>指定文件路径，方便后面操作：~&#x2F;.ssh&#x2F;id_rsa.gitte，id_rsa.github是秘钥的别名。</p><div class="code-wrapper"><pre><code class="hljs js">ssh-keygen -t rsa -f ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.<span class="hljs-property">gitte</span> -C <span class="hljs-string">&quot;lx@qq.com&quot;</span></code></pre></div><p>b、生成github仓库的SSH</p><div class="code-wrapper"><pre><code class="hljs js">ssh-keygen -t rsa -f ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.<span class="hljs-property">github</span> -C <span class="hljs-string">&quot;lx@qq.com&quot;</span></code></pre></div><h2 id="4、将-ssh-key-分别添加到-ssh-agent-信任列表"><a href="#4、将-ssh-key-分别添加到-ssh-agent-信任列表" class="headerlink" title="4、将 ssh-key 分别添加到 ssh-agent 信任列表"></a>4、将 ssh-key 分别添加到 ssh-agent 信任列表</h2><div class="code-wrapper"><pre><code class="hljs js">ssh-agent bashssh-add ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.<span class="hljs-property">gitte</span>ssh-add ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.<span class="hljs-property">github</span></code></pre></div><blockquote><p>如果看到 Identitiy added: ~&#x2F;.ssh&#x2F;id_ras_github，就表示添加成功了。</p></blockquote><h2 id="5、添加公钥到自己的-git-账户中"><a href="#5、添加公钥到自己的-git-账户中" class="headerlink" title="5、添加公钥到自己的 git 账户中"></a>5、添加公钥到自己的 git 账户中</h2><blockquote><p>使用命令，copy公钥，到 git 账户中粘贴即可。或者打开文件复制，带 pub 的文件</p></blockquote><div class="code-wrapper"><pre><code class="hljs js">pbcopy &lt; ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.<span class="hljs-property">gitte</span></code></pre></div><p>添加步骤参考：<a href="https://www.jianshu.com/p/68578d52470c">https://www.jianshu.com/p/68578d52470c</a></p><h2 id="6、在-config-文件配置多个-ssh-key"><a href="#6、在-config-文件配置多个-ssh-key" class="headerlink" title="6、在 config 文件配置多个 ssh-key"></a>6、在 config 文件配置多个 ssh-key</h2><p>在生成密钥的.ssh 目录下，新建一个config文件，然后配置不同的仓库，</p><div class="code-wrapper"><pre><code class="hljs js">#<span class="hljs-title class_">Default</span> gitHub user <span class="hljs-title class_">Self</span><span class="hljs-title class_">Host</span> github.<span class="hljs-property">com</span>    <span class="hljs-title class_">HostName</span> github.<span class="hljs-property">com</span>    <span class="hljs-title class_">User</span> git #默认就是git，可以不写    <span class="hljs-title class_">IdentityFile</span> ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.<span class="hljs-property">github</span># gitee的配置host gitee.<span class="hljs-property">com</span>  # 别名,最好别改<span class="hljs-title class_">Hostname</span> gitee.<span class="hljs-property">com</span> #要连接的服务器<span class="hljs-title class_">User</span> <span class="hljs-number">4505946500</span>@qq.<span class="hljs-property">com</span> #用户名#密钥文件的地址，注意是私钥<span class="hljs-title class_">IdentityFile</span> ~<span class="hljs-regexp">/.ssh/i</span>d_rsa_gitte#<span class="hljs-title class_">Add</span> gitLab user <span class="hljs-title class_">Host</span> git.<span class="hljs-property">lingban</span>.<span class="hljs-property">cn</span>    <span class="hljs-title class_">HostName</span> git.<span class="hljs-property">lingban</span>.<span class="hljs-property">cn</span>    <span class="hljs-title class_">User</span> wlliu00@ling-ban.<span class="hljs-property">com</span>    <span class="hljs-title class_">PreferredAuthentications</span> publickey    <span class="hljs-title class_">IdentityFile</span> ~<span class="hljs-regexp">/.ssh/i</span>d_rsa_lingban</code></pre></div><h2 id="7、测试"><a href="#7、测试" class="headerlink" title="7、测试"></a>7、测试</h2><div class="code-wrapper"><pre><code class="hljs js">ssh -T git@gitee.<span class="hljs-property">com</span></code></pre></div><ul><li>传送门：<a href="https://juejin.cn/post/6999630383130083358">https://juejin.cn/post/6999630383130083358</a></li><li>传送门：<a href="https://www.jianshu.com/p/76656fb121d4">https://www.jianshu.com/p/76656fb121d4</a></li></ul><p>本文转自 <a href="https://www.cnblogs.com/DL-CODER/p/17302223.html">https://www.cnblogs.com/DL-CODER/p/17302223.html</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vscode:git常用命令</title>
    <link href="/posts/31f9bf44.html"/>
    <url>/posts/31f9bf44.html</url>
    
    <content type="html"><![CDATA[<p><img src="http://imgs.leshans.eu.org/2024/03/b27317e6c75b1244ea4148d92d3e6759.webp" alt="Pasted image 20240301115624"></p><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><div class="code-wrapper"><pre><code class="hljs bash">git initgit add .git commit -m <span class="hljs-string">&quot;初始化&quot;</span>git remote add origin https://github.com/githubusername/demo.gitgit pull origin mastergit push -u origin master <span class="hljs-comment">#首次推送加-u参数</span></code></pre></div><h3 id="创建和切换分支"><a href="#创建和切换分支" class="headerlink" title="创建和切换分支"></a>创建和切换分支</h3><p>1、创建新分支</p><div class="code-wrapper"><pre><code class="hljs undefined">git branch 新分支名称</code></pre></div><p>2、切换分支</p><div class="code-wrapper"><pre><code class="hljs undefined">git checkout 分支名称</code></pre></div><p> 3、创建分支的同时，切换到该分支上</p><div class="code-wrapper"><pre><code class="hljs css">git checkout -<span class="hljs-selector-tag">b</span> 新分支名称</code></pre></div><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><blockquote><p>假如把dev分支合并到main</p></blockquote><p>首先切换到main分支上</p><div class="code-wrapper"><pre><code class="hljs bash">git checkout main</code></pre></div><p>如果是多人开发的话，需要把远程main分支上的代码pull下来</p><div class="code-wrapper"><pre><code class="hljs bash">git pull origin main</code></pre></div><p>然后把dev分支的代码合并到main上</p><div class="code-wrapper"><pre><code class="hljs bash">git merge dev</code></pre></div><p>警告提示： <code>Please enter a commit message to explain why this merge is necessary</code></p><blockquote><p><strong>遇到警告</strong>  直接按键盘左上角”<code>Esc</code>“  然后输入<code>:wq</code> 按回车键,或者按 <code>ctrl+x</code> 再输入<code>y</code>回车即可</p></blockquote><p>最后一步，Push推送到远程仓库</p><div class="code-wrapper"><pre><code class="hljs bash">git push origin main</code></pre></div><h3 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h3><p>列出所有的本地分支</p><div class="code-wrapper"><pre><code class="hljs bash">git branch</code></pre></div><blockquote><p>在删除一个本地分支之前，请确保切换到另一个你<code>不想删除</code>的分支</p></blockquote><p>切换分支</p><div class="code-wrapper"><pre><code class="hljs bash">git checkout 分支名</code></pre></div><p>删除本地分支:</p><div class="code-wrapper"><pre><code class="hljs bash">git branch -D 分支名</code></pre></div><p>大写字母D（这是<code>-- delete --force</code> 的别名），强制删除本地分支，而不考虑其合并状态</p><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><p>获取所有远程分支的列表：</p><div class="code-wrapper"><pre><code class="hljs bash">git branch -r</code></pre></div><p>找到您想要删除的远程分支，然后运行以下命令以删除它：</p><div class="code-wrapper"><pre><code class="hljs bash">git push origin -d 分支名</code></pre></div><h3 id="pull代码到本地分支"><a href="#pull代码到本地分支" class="headerlink" title="pull代码到本地分支"></a>pull代码到本地分支</h3><div class="code-wrapper"><pre><code class="hljs bash">git pull --rebase origin 分支名</code></pre></div><h3 id="push分支到远程仓库"><a href="#push分支到远程仓库" class="headerlink" title="push分支到远程仓库"></a>push分支到远程仓库</h3><div class="code-wrapper"><pre><code class="hljs bash">git push origin 分支名</code></pre></div><blockquote><p>假设本地创建了一个名为dev的分支，远程仓库还没有这个分支，推送的命令是： </p></blockquote><div class="code-wrapper"><pre><code class="hljs csharp">git push --<span class="hljs-keyword">set</span>-upstream origin dev</code></pre></div><h3 id="删除暂存区"><a href="#删除暂存区" class="headerlink" title="删除暂存区"></a>删除暂存区</h3><blockquote><p>删除暂存区和版本库的文件，但保留了工作区的文件</p></blockquote><p>例如：</p><div class="code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">rm</span> -r --cached D:/code/vosk-model-small-cn-0.22</code></pre></div><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><div class="code-wrapper"><pre><code class="hljs bash">git status</code></pre></div><h3 id="同步更新源仓库"><a href="#同步更新源仓库" class="headerlink" title="同步更新源仓库"></a>同步更新源仓库</h3><blockquote><p>a开发者fork了b开发者的项目后，如果b开发人员更新代码后，a开发者如何获得更新？</p></blockquote><p>1.给fork配置远程库,先查看远程状态</p><div class="code-wrapper"><pre><code class="hljs bash">git remote -v</code></pre></div><p>2.同步上游仓库, <code>upstream</code>后的地址是你即将同步的上游仓库git地址</p><div class="code-wrapper"><pre><code class="hljs bash">git remote add upstream https://github.com/xxx/xxxx.git</code></pre></div><p>再次查看状态确认是否配置成功。</p><div class="code-wrapper"><pre><code class="hljs bash">git remote -v</code></pre></div><p>3.开始同步fork</p><div class="code-wrapper"><pre><code class="hljs bash">git fetch upstream</code></pre></div><p>4.切换到本地主分支</p><div class="code-wrapper"><pre><code class="hljs bash">git checkout master</code></pre></div><p>把 <code>upstream/master</code> 分支合并到本地 master 上，这样就完成了同步，并且不会丢掉本地修改的内容。</p><div class="code-wrapper"><pre><code class="hljs bash">git merge upstream/master</code></pre></div><p>如果想更新到 GitHub 的 fork 上，直接push就好了</p><div class="code-wrapper"><pre><code class="hljs bash">git push origin master</code></pre></div><h3 id="储藏与清理"><a href="#储藏与清理" class="headerlink" title="储藏与清理"></a>储藏与清理</h3><p>储藏会处理工作目录的脏的状态 - 即，修改的跟踪文件与暂存改动 - 然后将未完成的修改保存到一个栈上，而你可以在任何时候重新应用这些改动。</p><p>首先查看状态</p><div class="code-wrapper"><pre><code class="hljs console">git status git status -s</code></pre></div><p>新的储藏推送到栈上</p><div class="code-wrapper"><pre><code class="hljs console">git stash</code></pre></div><p>查看储藏的东西，可以使用 <code>git stash list</code></p><div class="code-wrapper"><pre><code class="hljs bash">git stash list</code></pre></div><div class="code-wrapper"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git stash list</span>stash@&#123;0&#125;: WIP on master: 049d078 added the index filestash@&#123;1&#125;: WIP on master: c264051 Revert &quot;added file_size&quot;stash@&#123;2&#125;: WIP on master: 21d80a5 added number to log</code></pre></div><p><strong>应用存储的更改</strong>: 最近的储藏</p><div class="code-wrapper"><pre><code class="hljs console">git stash apply</code></pre></div><p><strong>应用存储的更改</strong>: 索引号为 0的存储</p><div class="code-wrapper"><pre><code class="hljs bash">git stash apply stash@&#123;0&#125;</code></pre></div><p><strong>移除储藏</strong></p><p>列出存储:</p><div class="code-wrapper"><pre><code class="hljs console">git stash list</code></pre></div><p>移除某个存储:例如</p><div class="code-wrapper"><pre><code class="hljs console">git stash drop stash@&#123;0&#125;</code></pre></div><p>运行 <code>git stash pop</code> 来应用储藏然后立即从栈上扔掉它</p><div class="code-wrapper"><pre><code class="hljs bash">git stash pop</code></pre></div><h3 id="git报错的解决方法"><a href="#git报错的解决方法" class="headerlink" title="git报错的解决方法"></a>git报错的解决方法</h3><h4 id="ssh-key有问题-："><a href="#ssh-key有问题-：" class="headerlink" title="ssh key有问题 ："></a>ssh key有问题 ：</h4><p><code>Please make sure you have the correct access rights and the repository exists</code></p><p>解决办法：<br>1、设置用户名和邮箱</p><div class="code-wrapper"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;yourname&quot;</span>git config --global user.email <span class="hljs-string">&quot;your@email.com&quot;</span></code></pre></div><p>2、删除.ssh文件夹下的known_hosts(手动删除即可，不需要git）</p><p>3、生成 SSH Key  一路回车即可</p><div class="code-wrapper"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;your@email.com&quot;</span></code></pre></div><p>用户主目录 &#x2F;.ssh 下有两个文件，id_rsa 是私钥，id_rsa.pub 是公钥, 记事本打开公钥 id_rsa.pub, 然后复制公钥内容</p><p>4、添加 SSH keys</p><p>添加地址: <a href="https://github.com/settings/ssh/new">https://github.com/settings/ssh/new</a></p><p>新建一个 SSH keys，标题自己起，Key 的内容就是id_rsa.pub 公钥内容，然后添加。</p><p>5、在git中输入命令：</p><div class="code-wrapper"><pre><code class="hljs bash">ssh -T git@github.com</code></pre></div><p>输入命令：yes</p><h4 id="没有添加远程仓库"><a href="#没有添加远程仓库" class="headerlink" title="没有添加远程仓库"></a>没有添加远程仓库</h4><p><code>fatal: ‘origin’ does not appear to be a git repository</code></p><p>解决办法：</p><div class="code-wrapper"><pre><code class="hljs bash">git remote add origin git@github.com:xxse/xx.git</code></pre></div><p>如果remote时出现<code>fatal: remote origin already exists.</code></p><p>解决方法是删除原有的<code>origin</code></p><div class="code-wrapper"><pre><code class="hljs bash">git remote -v git remote <span class="hljs-built_in">rm</span> origin</code></pre></div><h4 id="rejected-master-master-fetch-first"><a href="#rejected-master-master-fetch-first" class="headerlink" title="[! [rejected] master -&gt; master (fetch first)"></a>[! [rejected] master -&gt; master (fetch first)</h4><blockquote><p>github允许你本地仓库有的东西，远程仓库里没有，但<strong>不允许远程仓库有的东西，你本地仓库没有</strong>。</p></blockquote><p>所以在提交之前需要先拷贝远程仓库，命令如下</p><div class="code-wrapper"><pre><code class="hljs git">git pull --rebase origin master</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github推送报错：Failed to connect to 127.0.0.1 port 7890</title>
    <link href="/posts/aaabfdc1.html"/>
    <url>/posts/aaabfdc1.html</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在linuxmint桌面版系统下,使用vscode克隆仓库时遇到: Failed to connect to 127.0.0.1 port 7890</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法:"></a>解决办法:</h3><p><strong>取消 http, https 代理</strong></p><div class="code-wrapper"><pre><code class="hljs bash">git config --global --<span class="hljs-built_in">unset</span> http.proxygit config --global --<span class="hljs-built_in">unset</span> https.proxy</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vmware虚拟机: 您的主机不满足在启用hyper-v 解决方法</title>
    <link href="/posts/24aafe1d.html"/>
    <url>/posts/24aafe1d.html</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><blockquote><p>由于之前安装了windows10自带的hyper-v虚拟机,在安装vm虚拟机启动镜像时遇到下图bug</p></blockquote><p><img src="http://imgs.leshans.eu.org/2024/02/d3812273fe8ce205ef337a7ab55b810d.webp"></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="1-关闭hyper-v"><a href="#1-关闭hyper-v" class="headerlink" title="1. 关闭hyper-v"></a>1. 关闭hyper-v</h3><p>在控制面板→卸载程序，  </p><p>去掉前面的勾 Hyper-V</p><p>最后三个选项的勾也去掉</p><p><img src="http://imgs.leshans.eu.org/2024/02/fd24988e42fcae80e6928bce02df6154.webp"></p><p><img src="http://imgs.leshans.eu.org/2024/02/3d2dadc7277c9f8a731177f77e76eb71.webp"></p><h3 id="2-禁用Hyper-v服务"><a href="#2-禁用Hyper-v服务" class="headerlink" title="2. 禁用Hyper-v服务"></a>2. 禁用Hyper-v服务</h3><p>到windows服务中关闭hyper-v的相关服务，以及HV主机服务 改成禁用</p><p>右键我的电脑，管理，  </p><p><img src="http://imgs.leshans.eu.org/2024/02/bef22e7bdb6bcf06e73ccc8c6059e2af.webp"></p><h3 id="3-关闭基于虚拟化的安全性"><a href="#3-关闭基于虚拟化的安全性" class="headerlink" title="3.关闭基于虚拟化的安全性"></a>3.关闭基于虚拟化的安全性</h3><p>下载工具<a href="https://www.microsoft.com/en-us/download/details.aspx?id=53337">https://www.microsoft.com/en-us/download/details.aspx?id=53337</a>。</p><p>解压zip包，使用管理员打开<code>PowerShell</code>，<code>cmd</code>也行(管理员)<br>切换到下载工具的目录，执行：</p><div class="code-wrapper"><pre><code class="hljs bash">.\DG_Readiness_Tool_v3.6.ps1 -Disable -AutoReboot</code></pre></div><p>执行成功之后电脑将自动重启，按照启动提示 (<code>按F3</code>) 即可关闭继续虚拟化的安全性，VMware即可使用。</p><p>按win+r 输入 <code>msinfo32</code></p><p><img src="http://imgs.leshans.eu.org/2024/02/084d693b56cf76dc9e0eba1699d59b48.webp"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>解决ubuntu虚拟机vmware tools无法共享剪贴板问题</title>
    <link href="/posts/2ef77320.html"/>
    <url>/posts/2ef77320.html</url>
    
    <content type="html"><![CDATA[<p>使用如下方法成功解决问题，一路回车默认即可。</p><div class="code-wrapper"><pre><code class="hljs bash">sudo apt install open-vm-toolssudo apt install open-vm-tools-desktop</code></pre></div><p><code>vmware tools</code>的开源版本 <strong>open-vm-tools</strong> 由两个组件构成，</p><p>一个是<code>open-vm-tools</code>，这个装上之后虚拟机就有了显示驱动，屏幕可以自适应大小；</p><p>另一个<code>open-vm-tools-desktop</code>，用于共享剪贴板和文件拖拽功能。</p><p>最后重启虚拟机搞定</p>]]></content>
    
    
    <categories>
      
      <category>ubuntu</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu创建账户与禁止root用户通过SSH远程登陆</title>
    <link href="/posts/92ebb13a.html"/>
    <url>/posts/92ebb13a.html</url>
    
    <content type="html"><![CDATA[<h3 id="1-登录root用户"><a href="#1-登录root用户" class="headerlink" title="1. 登录root用户"></a>1. 登录root用户</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo -i</code></pre></div><h3 id="2-创建新用户"><a href="#2-创建新用户" class="headerlink" title="2. 创建新用户"></a>2. 创建新用户</h3><blockquote><p>假设新用户: <code>laoge</code></p></blockquote><div class="code-wrapper"><pre><code class="hljs bash">sudo useradd -m -s /bin/bash laoge</code></pre></div><h3 id="3-手动为用户设置密码"><a href="#3-手动为用户设置密码" class="headerlink" title="3. 手动为用户设置密码"></a>3. 手动为用户设置密码</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo passwd laoge</code></pre></div><h3 id="4-赋予新用户sudo权限"><a href="#4-赋予新用户sudo权限" class="headerlink" title="4.赋予新用户sudo权限"></a>4.赋予新用户sudo权限</h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;laoge ALL=(ALL:ALL) ALL&quot;</span> | sudo <span class="hljs-built_in">tee</span> -a /etc/sudoers</code></pre></div><h3 id="5-禁止ROOT远程SSH登录"><a href="#5-禁止ROOT远程SSH登录" class="headerlink" title="5.禁止ROOT远程SSH登录"></a>5.禁止ROOT远程SSH登录</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo vim /etc/ssh/sshd_config</code></pre></div><p>把</p><div class="code-wrapper"><pre><code class="hljs undefined">PermitRootLogin yes</code></pre></div><p>改为</p><div class="code-wrapper"><pre><code class="hljs undefined">PermitRootLogin no</code></pre></div><h3 id="重启sshd服务"><a href="#重启sshd服务" class="headerlink" title="重启sshd服务"></a>重启sshd服务</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo service ssh restart</code></pre></div><p> 下次登录服务器使用用户名: <code>laoge</code> 登录  切换root: <code>sudo -i</code> 然后输入密码</p><blockquote><p>注意：这些修改不影响已经连接的SSH。 只对以后的的连接产生影响。</p></blockquote><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><blockquote><p>如果遇到bug, 则给sudoers写入权限,看具体情况</p></blockquote><p>给root用户增加w权限</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> u+w /etc/sudoers</code></pre></div><p>恢复sudoers文件原来的读写权限</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> u-w /etc/sudoers</code></pre></div><p>退出root用户</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ubuntu</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>最快配置SSH密钥免密码登录你的服务器</title>
    <link href="/posts/1be28c5c.html"/>
    <url>/posts/1be28c5c.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>使用密钥方式登录更安全</p></blockquote><p>自用一键设置脚本：（基于windows 10 安装了git）</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-comment"># 创建SSH目录</span><span class="hljs-built_in">mkdir</span> -p ~/.ssh<span class="hljs-built_in">cd</span> ~/.ssh<span class="hljs-comment"># 生成SSH密钥</span><span class="hljs-comment"># 生成SSH密钥</span><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\e[32m开始愉快之旅吧\e[0m&quot;</span><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\e[32m系统将提示您指定密钥对名称: \e[33m一路回车\e[32m 请按Enter继续\e[0m&quot;</span><span class="hljs-built_in">echo</span>ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;注释随意&quot;</span><span class="hljs-comment"># 复制公钥到远程服务器</span><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入SSH端口号（默认为22）：&quot;</span> ssh_portssh_port=<span class="hljs-variable">$&#123;ssh_port:-22&#125;</span><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入服务器IP地址：&quot;</span> server_ipssh-copy-id -i ~/.ssh/id_ed25519.pub -p <span class="hljs-variable">$ssh_port</span> root@<span class="hljs-variable">$server_ip</span><span class="hljs-comment"># 修改远程服务器配置</span>ssh -p <span class="hljs-variable">$ssh_port</span> root@<span class="hljs-variable">$server_ip</span> &lt;&lt; <span class="hljs-string">&#x27;EOF&#x27;</span><span class="hljs-keyword">if</span> grep -q <span class="hljs-string">&quot;^#*PubkeyAuthentication\s*no&quot;</span> /etc/ssh/sshd_config; <span class="hljs-keyword">then</span>    sudo sed -i <span class="hljs-string">&#x27;s/^#*PubkeyAuthentication\s*no/ PubkeyAuthentication yes/&#x27;</span> /etc/ssh/sshd_config<span class="hljs-keyword">elif</span> grep -q <span class="hljs-string">&quot;^#*PubkeyAuthentication\s*yes&quot;</span> /etc/ssh/sshd_config; <span class="hljs-keyword">then</span>    sudo sed -i <span class="hljs-string">&#x27;s/^#*PubkeyAuthentication\s*yes/ PubkeyAuthentication yes/&#x27;</span> /etc/ssh/sshd_config<span class="hljs-keyword">else</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;PubkeyAuthentication yes&quot;</span> | sudo <span class="hljs-built_in">tee</span> -a /etc/ssh/sshd_config<span class="hljs-keyword">fi</span>sudo service ssh restart<span class="hljs-built_in">exit</span>EOF<span class="hljs-comment"># 提示用户输入别名和ip</span><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入别名：&quot;</span> alias_name<span class="hljs-comment"># 检查~/.ssh/config文件是否存在，如果不存在则创建并添加配置</span><span class="hljs-keyword">if</span> [ ! -f ~/.ssh/config ]; <span class="hljs-keyword">then</span>    <span class="hljs-built_in">touch</span> ~/.ssh/config<span class="hljs-keyword">fi</span><span class="hljs-comment"># 添加别名和IP到~/.ssh/config文件中</span><span class="hljs-keyword">if</span> ! grep -q <span class="hljs-string">&quot;Host <span class="hljs-variable">$alias_name</span>&quot;</span> ~/.ssh/config; <span class="hljs-keyword">then</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Host <span class="hljs-variable">$alias_name</span>&quot;</span> &gt;&gt; ~/.ssh/config    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;    Hostname <span class="hljs-variable">$server_ip</span>&quot;</span> &gt;&gt; ~/.ssh/config    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;    IdentityFile ~/.ssh/id_ed25519&quot;</span> &gt;&gt; ~/.ssh/config    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;    User root&quot;</span> &gt;&gt; ~/.ssh/config<span class="hljs-keyword">fi</span><span class="hljs-comment"># 使用SSH密钥登录</span><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\e[33m使用 ssh -p <span class="hljs-variable">$ssh_port</span> <span class="hljs-variable">$alias_name</span> 愉快登录吧\e[0m&quot;</span>ssh -p <span class="hljs-variable">$ssh_port</span> -i ~/.ssh/id_ed25519 root@<span class="hljs-variable">$server_ip</span></code></pre></div><p>双击ovh.bat文件一键登录服务器,还是密钥登录,里面就几个字符</p><p><img src="http://imgs.leshans.eu.org/2024/02/a204254f12c09bbd3abb7958981054bd.webp"></p><h2 id="教程开始"><a href="#教程开始" class="headerlink" title="教程开始"></a>教程开始</h2><h3 id="本地配置密钥对"><a href="#本地配置密钥对" class="headerlink" title="本地配置密钥对"></a>本地配置密钥对</h3><p><strong>以windows为例</strong></p><p>为了方便代码运行,我安装了Git,因为以下代码在CMD不通用</p><p>Git 下载: <a href="https://git-scm.com/">https://git-scm.com/</a></p><p>安装好后,桌面右键-Git Bash Here</p><p><img src="http://imgs.leshans.eu.org/2024/02/ec36ab4eb8365e4a17bf98e420407f71.webp"></p><p><strong>开始整密钥对</strong></p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/.ssh<span class="hljs-built_in">cd</span> ~/.sshssh-keygen -t ed25519 -C <span class="hljs-string">&quot;注释随意&quot;</span></code></pre></div><p>系统将提示您指定密钥对名称: 建议输入名称 请按<code>Enter</code>继续</p><p><code>Enter file in which to save the key (/c/Users/Administrator/.ssh/id_ed25519)</code></p><p>接下来，系统会要求您输入安全密码 请按<code>Enter</code>继续</p><p><code>Enter passphrase (empty for no passphrase)</code> </p><blockquote><p>如果不设置名称,下次使用时会覆盖掉原有的, 如果设置密码短语，则每次使用该密钥登录服务器时，系统都会提示您输入密码短语。(更安全) </p><p>我的方式是: 设置名称 不设密码</p></blockquote><p>查看密钥对是否创建:</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l | grep <span class="hljs-string">&quot;密钥名称&quot;</span></code></pre></div><blockquote><p>完成后在C:\Users\Administrator\ .ssh目录下有两个文件,其中<code>xx.pub</code>就是公钥文件</p></blockquote><h2 id="将公钥复制到远程服务器"><a href="#将公钥复制到远程服务器" class="headerlink" title="将公钥复制到远程服务器"></a>将公钥复制到远程服务器</h2><p>也就是复制公钥内容到 <strong>~&#x2F;.ssh&#x2F;authorized_keys</strong> 文件</p><p>假设你的公钥文件是<code>xx.pub</code> ip是8.8.8.8</p><blockquote><p>注意: 如果你的服务器默认SSH端口不是22,请使用第二条命令,还要注意如果用户不是root,也要改</p></blockquote><div class="code-wrapper"><pre><code class="hljs bash">ssh-copy-id -i ~/.ssh/xx.pub root@8.8.8.8</code></pre></div><p>如果SSH端口是33</p><div class="code-wrapper"><pre><code class="hljs bash">ssh-copy-id -i ~/.ssh/xx.pub -p 33 root@8.8.8.8</code></pre></div><p>提示输入<code> yes</code>  然后输入你的服务器<strong>密码</strong>验证,  最后提示下面信息则成功!!</p><div class="code-wrapper"><pre><code class="hljs livecodeserver">Number <span class="hljs-keyword">of</span> key(s) added: <span class="hljs-number">1</span>Now <span class="hljs-keyword">try</span> logging <span class="hljs-keyword">into</span> <span class="hljs-keyword">the</span> machine, <span class="hljs-keyword">with</span>:   <span class="hljs-string">&quot;ssh &#x27;username@server_ip_address&#x27;&quot;</span><span class="hljs-keyword">and</span> check <span class="hljs-built_in">to</span> make sure that only <span class="hljs-keyword">the</span> key(s) you wanted were added.</code></pre></div><h3 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h3><blockquote><p>注意: 这里的<code>xx</code>是密钥,不是<code>xx.pub</code>公钥</p></blockquote><div class="code-wrapper"><pre><code class="hljs bash">ssh -i ~/.ssh/xx root@8.8.8.8</code></pre></div><p>如果SSH端口是33</p><div class="code-wrapper"><pre><code class="hljs bash">ssh -p 33 -i ~/.ssh/xx root@8.8.8.8</code></pre></div><h2 id="禁用密码登录"><a href="#禁用密码登录" class="headerlink" title="禁用密码登录"></a>禁用密码登录</h2><div class="code-wrapper"><pre><code class="hljs bash">sudo vim /etc/ssh/sshd_config <span class="hljs-comment">#在你的服务器上操作</span></code></pre></div><p>修改:  按<code>键盘i</code>进入编辑模式,修改完成按<code>esc键</code>退出模式,最后输入<code> :wq</code> 保存退出</p><p>主要是第一和第二个</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">PubkeyAuthentication</span> <span class="hljs-literal">yes</span>  <span class="hljs-comment">#允许密钥对连接</span>PasswordAuthentication <span class="hljs-literal">no</span>  <span class="hljs-comment">#禁止密码登录</span>ChallengeResponseAuthentication <span class="hljs-literal">no</span>UsePAM <span class="hljs-literal">no</span>PermitRootLogin <span class="hljs-literal">yes</span> <span class="hljs-comment">#默认允许root登录</span></code></pre></div><blockquote><p><strong>注意: &#x2F;etc&#x2F;ssh&#x2F;sshd_config.d 目录下是否有其他文件,同样有修改,没有就不管</strong></p></blockquote><p>重启ssh生效</p><div class="code-wrapper"><pre><code class="hljs bash">sudo service ssh restart</code></pre></div><h3 id="验证密码登录是否禁止"><a href="#验证密码登录是否禁止" class="headerlink" title="验证密码登录是否禁止"></a>验证密码登录是否禁止</h3><div class="code-wrapper"><pre><code class="hljs bash">ssh root@8.8.8.8</code></pre></div><p>如果SSH端口是33</p><div class="code-wrapper"><pre><code class="hljs bash">ssh -p 33 root@8.8.8.8</code></pre></div><p>出现: <strong>Permission denied (publickey)</strong>.提示需要密钥对方式登录,则成功</p><p><img src="http://imgs.leshans.eu.org/2024/02/ffc6c7076ae5e45c91e34197febf5f80.webp"></p><h2 id="最后大招"><a href="#最后大招" class="headerlink" title="最后大招"></a>最后大招</h2><p>回到你的本地电脑,打开git bash</p><div class="code-wrapper"><pre><code class="hljs bash">vim ~/.ssh/config</code></pre></div><p><strong>如果没有config文件可以创建,注意没有任何后缀</strong></p><p>文件在 C:\Users\Administrator\ .ssh 目录</p><blockquote><p>写入以下代码: 删掉注释,不要有多余空格</p></blockquote><div class="code-wrapper"><pre><code class="hljs bash">Host bb  <span class="hljs-comment">#bb为Host名称 随便一个名称</span>    Hostname 8.8.8.8 <span class="hljs-comment">#你的IP地址</span>    IdentityFile ~/.ssh/xx <span class="hljs-comment">#xx私钥路径</span>    User root <span class="hljs-comment">#用户名</span></code></pre></div><p>登录验证:</p><blockquote><p>在cmd中或者git bash 输入<code>ssh bb</code>   ##bb为设置的Host名称,即可登录成功 如果之前你设置了安全密码,则需要输入安全密码</p></blockquote><div class="code-wrapper"><pre><code class="hljs bash">ssh bb</code></pre></div><p>如果SSH端口是33</p><div class="code-wrapper"><pre><code class="hljs bash">ssh -p 33 bb</code></pre></div><p>桌面新建一个bat文件,写入:</p><div class="code-wrapper"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> offssh bb</code></pre></div><p>双击就登录你的服务器了!!!</p><p>其他:</p><div class="code-wrapper"><pre><code class="hljs text">chmod 600 ~/.ssh/authorized_keyschmod 700 ~/.ssh</code></pre></div><h3 id="完结撒花"><a href="#完结撒花" class="headerlink" title="完结撒花"></a>完结撒花</h3>]]></content>
    
    
    
    <tags>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu20+window双系统启动引导项的修复</title>
    <link href="/posts/e307b3a2.html"/>
    <url>/posts/e307b3a2.html</url>
    
    <content type="html"><![CDATA[<h3 id="修复ubuntu引导项"><a href="#修复ubuntu引导项" class="headerlink" title="修复ubuntu引导项"></a>修复ubuntu引导项</h3><p>由于上面一个修复window引导项动作覆盖了整个启动目录，导致我的电脑ubuntu引导项丢失了，所以我现在又开始修复ubuntu启动引导项。方法类似，不过ubuntu修复启动引导项时候，需要我们安装boot-repair软件</p><ul><li>制作Ubuntu启动U盘，UtroISO即可；</li><li>将U盘插入电脑，开机，进入BIOS，选择U盘启动；</li><li>出现Ubuntu安装界面，选择第一项（Try ubuntu without install）；</li><li>进入ubuntu，打开终端，获取root权限；</li></ul><p>执行以下命令：</p><div class="code-wrapper"><pre><code class="hljs bash">sudo add-apt-repository ppa:yannubuntu/boot-repairapt-get updateapt-get install boot-repair</code></pre></div><p>boot-repair安装完成之后，输入boot-repair命令，进入软件</p><div class="code-wrapper"><pre><code class="hljs bash">boot-repair</code></pre></div><p>最后: <code>reboot</code></p><p>选择推荐修复</p><p><img src="http://imgs.leshans.eu.org/2024/02/7f996bfa943ef4479d83373d2b24f5bb.webp"></p><p>进入修复等一小会，修复就完成了</p><p><img src="http://imgs.leshans.eu.org/2024/02/b93cd62e5e1d6b97c1f8d33c51bbfd77.webp"></p><p>大家可以看到修复提示log</p><p><img src="http://imgs.leshans.eu.org/2024/02/2258bea35284967556e541e460d9217a.webp"></p><p>reboot机器，这个时候大家就可以看到电脑启动的引导项都恢复了。</p><p><img src="http://imgs.leshans.eu.org/2024/02/40ba43bb60e236e3b4fc41215eb1e18c.webp"></p>]]></content>
    
    
    <categories>
      
      <category>ubuntu</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一键更改电源计划的方法</title>
    <link href="/posts/8683158a.html"/>
    <url>/posts/8683158a.html</url>
    
    <content type="html"><![CDATA[<p>先win+R 输入cmd打开命令行，输入powercfg -list 显示已有的电源策略以及对应的编码</p><div class="code-wrapper"><pre><code class="hljs bash">powercfg -list</code></pre></div><p>然后新建一个文本文档，命名为 （比如）Power.bat</p><p>修改为自己的GUID,例如</p><p><code>381b4222-f694-41f0-9685-ff5bb260df2e</code> 是我的平衡模式GUID</p><p><code>a1841308-3541-4fab-bc81-f71556f20b4a</code> 是节能GUID</p><div class="code-wrapper"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> offrem 执行 powercfg -getactivescheme 命令，并将结果保存到临时文件powercfg /getactivescheme &gt; tmp.txtrem 使用 findstr 命令检查临时文件中是否包含“节能”字符findstr /C:<span class="hljs-string">&quot;节能&quot;</span> tmp.txt &gt;nulrem 检查 findstr 命令的退出代码<span class="hljs-keyword">if</span> %errorlevel% == 0 (    rem 如果包含，则切换到平衡模式    POWERCFG /SETACTIVE 381b4222-f694-41f0-9685-ff5bb260df2e    <span class="hljs-built_in">echo</span> 已切换到平衡模式    rem 使用绿色显示提示    color 0A) <span class="hljs-keyword">else</span> (    rem 否则切换到节能模式    POWERCFG /SETACTIVE a1841308-3541-4fab-bc81-f71556f20b4a    <span class="hljs-built_in">echo</span> 已切换到节能模式    rem 使用黄色显示提示    color 0E)rem 删除临时文件del tmp.txtrem 暂停脚本以便在窗口上显示提示pause</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Winserver2022调优</title>
    <link href="/posts/d49d4a07.html"/>
    <url>/posts/d49d4a07.html</url>
    
    <content type="html"><![CDATA[<h3 id="激活命令"><a href="#激活命令" class="headerlink" title="激活命令"></a>激活命令</h3><p>打开PowerShell(管理员),输入以下代码:</p><div class="code-wrapper"><pre><code class="hljs bash">irm https://massgrave.dev/get | iex</code></pre></div><p>选择第三个,再选1</p><h3 id="开启hyper-v"><a href="#开启hyper-v" class="headerlink" title="开启hyper-v"></a>开启hyper-v</h3><p>打开PowerShell(管理员),输入以下代码:</p><div class="code-wrapper"><pre><code class="hljs bash">Install-WindowsFeature -Name Hyper-V -IncludeManagementTools -Restart</code></pre></div><p>安装完成会重启</p><h3 id="1-开启远程桌面"><a href="#1-开启远程桌面" class="headerlink" title="1.开启远程桌面"></a>1.开启远程桌面</h3><p><img src="http://imgs.leshans.eu.org/2024/02/3ebfc87e56db7ba4f9765020dae6ba72.webp"></p><h3 id="2-修改主机名称"><a href="#2-修改主机名称" class="headerlink" title="2.修改主机名称"></a>2.修改主机名称</h3><p><img src="http://imgs.leshans.eu.org/2024/02/876dd1be786ae5084755ce35310100d4.webp"></p><h3 id="3-密码策略"><a href="#3-密码策略" class="headerlink" title="3.密码策略"></a>3.密码策略</h3><p>右上角-工具-本地安全策略</p><p>安全设置-账户策略-密码策略</p><p>禁用密码复杂性要求以及最长使用期限为0(不过期)</p><p><img src="http://imgs.leshans.eu.org/2024/02/8c874a6242dbe3ff4ac5541a90a5e393.webp"></p><h3 id="4-关闭登录系统按CTRL-ALT-DEL"><a href="#4-关闭登录系统按CTRL-ALT-DEL" class="headerlink" title="4.关闭登录系统按CTRL+ALT+DEL"></a>4.关闭登录系统按CTRL+ALT+DEL</h3><p>本地策略-安全选项</p><p><img src="http://imgs.leshans.eu.org/2024/02/ac98f3ef2d9f0502da67caafdb530997.webp"></p><h3 id="4-组策略中打开-启用不安全来宾登陆-选项"><a href="#4-组策略中打开-启用不安全来宾登陆-选项" class="headerlink" title="4.组策略中打开 启用不安全来宾登陆 选项"></a>4.组策略中打开 启用不安全来宾登陆 选项</h3><p>目的是局域网文件共享: <a href="https://blog.csdn.net/u010499872/article/details/115704644">https://blog.csdn.net/u010499872/article/details/115704644</a></p><p>开始运行，或者快捷键 Win+R 打开运行，输入 gpedit.msc 打开组策略。</p><p>然后分别选择 <strong>计算机配置 → 管理模板 → 网络 →Lanman工作站</strong>，在右边找到 <strong>启用不安全的来宾登陆</strong>，双击打开，然后<strong>选择启用</strong>，点确定即可。</p><p><img src="http://imgs.leshans.eu.org/2024/02/feb98406d360b2237fb10393c56516b5.webp"></p><h3 id="5-重命名管理员名称"><a href="#5-重命名管理员名称" class="headerlink" title="5.重命名管理员名称"></a>5.重命名管理员名称</h3><p>安全设置-本地策略-安全选项</p><p><img src="http://imgs.leshans.eu.org/2024/02/b5b9b4ce8d72e6ffc066f500a7e8d268.webp"></p><h3 id="6-修改管理员密码"><a href="#6-修改管理员密码" class="headerlink" title="6.修改管理员密码:"></a>6.修改管理员密码:</h3><p>cmd输入: net user admin 123</p><div class="code-wrapper"><pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">管理员名称 密码</span></code></pre></div><h3 id="7-一键远程登录脚本"><a href="#7-一键远程登录脚本" class="headerlink" title="7.一键远程登录脚本"></a>7.一键远程登录脚本</h3><p>将以下代码保存为bat文件,双击运行即可</p><div class="code-wrapper"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<span class="hljs-built_in">set</span> ip_file=last_ip.txt:menucls<span class="hljs-built_in">echo</span> 请选择选项：<span class="hljs-built_in">echo</span> [1] 使用上次登录的 IP 地址<span class="hljs-built_in">echo</span> [2] 输入新的 IP 地址<span class="hljs-built_in">set</span> /p option=请输入选项数字: <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;%option%&quot;</span>==<span class="hljs-string">&quot;1&quot;</span> (    <span class="hljs-keyword">if</span> exist %ip_file% (        <span class="hljs-built_in">set</span> /p remote_ip=&lt;%ip_file%        goto connect    ) <span class="hljs-keyword">else</span> (        <span class="hljs-built_in">echo</span> 没有找到上次登录的 IP 地址。请手动输入新的 IP 地址。        pause        goto input_ip    )) <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;%option%&quot;</span>==<span class="hljs-string">&quot;2&quot;</span> (    goto input_ip) <span class="hljs-keyword">else</span> (    <span class="hljs-built_in">echo</span> 无效的选项，请重新输入。    pause    goto menu):input_ip<span class="hljs-built_in">set</span> /p remote_ip=请输入远程计算机的IP地址: <span class="hljs-built_in">echo</span> %remote_ip% &gt; %ip_file%goto connect:connectstart mstsc.exe /v:%remote_ip%</code></pre></div><h3 id="8-多台设备同时远程桌面连接"><a href="#8-多台设备同时远程桌面连接" class="headerlink" title="8.多台设备同时远程桌面连接"></a>8.多台设备同时远程桌面连接</h3><p>按<code>Win</code>+<code>R</code>键输入：<code>gpedit.msc</code></p><p>依次点击展开<code>计算机配置</code>&gt;<code>管理模板</code>&gt;<code>Windows 组件</code>&gt;<code>远程桌面服务</code>&gt;<code>远程桌面会话主机</code>&gt;<code>连接</code></p><p>在连接项右侧找到并双击打开<code>将远程桌面服务的用户限制到单独的远程桌面会话</code>配置为<code>禁用</code></p><h3 id="9-禁用关机需要原因"><a href="#9-禁用关机需要原因" class="headerlink" title="9.禁用关机需要原因"></a>9.禁用关机需要原因</h3><p>WIN键+R键，输入gpedit.msc，进入组策略设置</p><p>计算机配置，管理模板，系统，显示”关闭事件跟踪程序”，设置为”已禁用”。  </p><p>解决问题：关机时，需要输入关机原因。设置后不再需要。</p><h3 id="10-功能与服务"><a href="#10-功能与服务" class="headerlink" title="10.功能与服务"></a>10.功能与服务</h3><p>功能与服务  </p><p>1、控制面板—&gt;服务器管理器—&gt;本地服务器，IE 增强的安全配置，”管理员”与”用户”的下方，勾选”关闭”。  </p><p>解决问题：IE默认设置下，上网会有一堆安全提示，设置后不再提示，与个人win10保持一致。  </p><p>2、控制面板—&gt;程序和功能—&gt;启用或关闭 Windwos 功能—&gt;服务器选择—&gt;功能—&gt;勾选 “Direct Play” 、“无线 LAN 服务”、“优质 Windows 音频视频体验” 确认安装  </p><p>解决问题：默认如wifi、多媒体、索引服务等是关闭的，添加后可以启用这些功能。  </p><p>3、设置服务  </p><p>解决问题：windows server 2016默认没有声音、索引选项无法启用，设置服务后可以解决该问题。  </p><p>启动两项声音服务，<strong>Windows Audio</strong> 和 <strong>Windows Audio Endpoint Builder</strong>，并设为自动属性。  </p><p>三、系统属性<br>1、WIN键+X键，系统，高级系统设置，性能（设置），高级，调整以优化性能，设置为”程序”。<br>2、WIN键+X键，系统，高级系统设置，性能（设置），数据执行保护，选择”仅为基本Windows程序和服务启用DEP(T)”。</p><h3 id="壁纸"><a href="#壁纸" class="headerlink" title=".壁纸"></a>.壁纸</h3><p><a href="https://bz.zzzmh.cn/index#anime">https://bz.zzzmh.cn/index#anime</a></p><p><a href="https://konachan.net/post">https://konachan.net/post</a></p>]]></content>
    
    
    <categories>
      
      <category>系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>docker项目dockge和nginx-proxy-manager-zh中文版</title>
    <link href="/posts/2d5360e9.html"/>
    <url>/posts/2d5360e9.html</url>
    
    <content type="html"><![CDATA[<h3 id="Dockge"><a href="#Dockge" class="headerlink" title="Dockge"></a>Dockge</h3><p>项目地址: <a href="https://github.com/louislam/dockge">https://github.com/louislam/dockge</a></p><table><thead><tr><th>特色</th></tr></thead><tbody><tr><td>快速搭建docker compose环境</td></tr><tr><td>可以<code>管理compose.yaml</code>文件，包括创建、<code>编辑、启动、停止、重启和删除</code></td></tr><tr><td>能够更新Docker映像</td></tr><tr><td>提供交互式编辑器，方便编辑compose.yaml文件</td></tr><tr><td>提供交互式网络终端功能</td></tr><tr><td>支持管理来自不同Docker主机的多个堆栈</td></tr><tr><td><code>可以将docker run命令转换为compose.yaml</code></td></tr><tr><td>Dockge不会绑架编译文件，而是将其存储在硬盘上，可以与普通的docker compose命令交互</td></tr></tbody></table><p>1、开源项目地址: <a href="https://github.com/louislam/dockge">https://github.com/louislam/dockge</a></p><p>2、更新系统</p><div class="code-wrapper"><pre><code class="hljs bash">apt update &amp;&amp; apt upgrade</code></pre></div><p>3、安装Docker</p><p>国外服务器推荐:</p><div class="code-wrapper"><pre><code class="hljs bash">curl -fsSL https://get.docker.com -o get-docker.shsh get-docker.sh</code></pre></div><p>或者: 脚本集成安装 <a href="https://docs.docker.com/engine"><code>Docker Engine</code></a> 和 <a href="https://docs.docker.com/compose"><code>Docker Compose</code></a></p><div class="code-wrapper"><pre><code class="hljs bash">bash &lt;(curl -sSL https://raw.githubusercontent.com/SuperManito/LinuxMirrors/main/DockerInstallation.sh)</code></pre></div><p>国内服务器:</p><div class="code-wrapper"><pre><code class="hljs bash">bash &lt;(curl -sSL https://gitee.com/SuperManito/LinuxMirrors/raw/main/DockerInstallation.sh)</code></pre></div><p>4、创建Dockge存储目录</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /opt/stacks /opt/dockge</code></pre></div><p>进入目录</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/dockge</code></pre></div><p>下载compose配置文件</p><div class="code-wrapper"><pre><code class="hljs bash">curl https://raw.githubusercontent.com/louislam/dockge/master/compose.yaml --output compose.yaml</code></pre></div><p>启动服务</p><div class="code-wrapper"><pre><code class="hljs bash">docker compose up -d</code></pre></div><p>或者:  <code>docker-compose up -d</code></p><blockquote><p>登录面板: 你的ip:5001</p></blockquote><p>升级更新:</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/dockgedocker compose pull &amp;&amp; docker compose up -d</code></pre></div><h3 id="nginx-proxy-manager中文版"><a href="#nginx-proxy-manager中文版" class="headerlink" title="nginx-proxy-manager中文版"></a>nginx-proxy-manager中文版</h3><p>项目地址: <a href="https://github.com/xiaoxinpro/nginx-proxy-manager-zh">https://github.com/xiaoxinpro/nginx-proxy-manager-zh</a></p><p>基于nginx-proxy-manager翻译的中文版本</p><table><thead><tr><th>特色</th></tr></thead><tbody><tr><td>基于<a href="https://github.com/NginxProxyManager/nginx-proxy-manager">NginxProxyManager&#x2F;nginx-proxy-manager</a>的预构建docker映像，可以轻松部署到网站上运行</td></tr><tr><td>提供免费的<code>SSL证书</code>支持，无需了解太多关于<code>Nginx</code>或Let’s Encrypt的信息</td></tr></tbody></table><p>快速部署</p><ol><li>环境部署</li></ol><p>安装Docker和Docker-compose</p><ol start="2"><li>创建YAML文件</li></ol><p>创建一个 docker-compose.yml 文件:</p><div class="code-wrapper"><pre><code class="hljs bash">version: <span class="hljs-string">&#x27;3&#x27;</span>services:  app:    category_bar: <span class="hljs-literal">true</span> <span class="hljs-string">&#x27;chishin/nginx-proxy-manager-zh:release&#x27;</span>    restart: always    ports:      - <span class="hljs-string">&#x27;80:80&#x27;</span>      - <span class="hljs-string">&#x27;81:81&#x27;</span>      - <span class="hljs-string">&#x27;443:443&#x27;</span>    volumes:      - ./data:/data      - ./letsencrypt:/etc/letsencrypt</code></pre></div><ol start="3"><li>部署运行</li></ol><div class="code-wrapper"><pre><code class="hljs bash">docker-compose up -d</code></pre></div><ol start="4"><li>登录管理页面<br>当你的docker容器成功运行，使用浏览器访问81端口。 有些时候需要稍等一段时间。</li></ol><p><a href="http://127.0.0.1:81/">http://127.0.0.1:81</a></p><p>默认管理员信息:</p><div class="code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">Email:</span>    admin@example.com<span class="hljs-symbol">Password:</span> changeme</code></pre></div><p>第二种安装方法：</p><div class="code-wrapper"><pre><code class="hljs ruby">docker run -d \  --name nginx-proxy-manager \  -p <span class="hljs-number">80</span><span class="hljs-symbol">:</span><span class="hljs-number">80</span> \  -p <span class="hljs-number">81</span><span class="hljs-symbol">:</span><span class="hljs-number">81</span> \  -p <span class="hljs-number">443</span><span class="hljs-symbol">:</span><span class="hljs-number">443</span> \  -v ~<span class="hljs-regexp">/docker/data</span><span class="hljs-symbol">:/data</span> \  -v ~<span class="hljs-regexp">/docker/letsencrypt</span><span class="hljs-symbol">:/etc/letsencrypt</span> \  chishin/nginx-proxy-manager-<span class="hljs-symbol">zh:</span>release</code></pre></div><h3 id="关于DNSPod创建证书失败"><a href="#关于DNSPod创建证书失败" class="headerlink" title="关于DNSPod创建证书失败"></a>关于DNSPod创建证书失败</h3><p>此问题在2.9.19版本开始就已经存在，原因是zope引起的，由于ARM架构一直安装失败所以无法打包到镜像中，建议使用如下方法修复此问题：</p><p>首先确保nginx-proxy-manager-zh的Docker容器已经正常运行，使用docker-compose ps查看容器名，这里假设容器名为npm-zh。</p><p>进入容器：（注意替换下文中的容器名）</p><div class="code-wrapper"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it npm-zh bash</code></pre></div><p>执行安装zope命令：</p><div class="code-wrapper"><pre><code class="hljs bash">python3 -m pip install --upgrade pippip install certbot-dns-dnspodpip install zope</code></pre></div><p>等待安装完成，退出容器：</p><p>exit</p><p>最后刷新浏览器，再次使用DNSPod创建证书即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>npm</tag>
      
      <tag>dockge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一款追求轻量化的开源可视化路由跟踪工具-NextTrace</title>
    <link href="/posts/37f8d551.html"/>
    <url>/posts/37f8d551.html</url>
    
    <content type="html"><![CDATA[<p><img src="http://imgs.leshans.eu.org/2024/02/b89d1e07c5381409f955711a9a3e4bca.webp"></p><p><strong>一键安装脚本(linux)</strong></p><div class="code-wrapper"><pre><code class="hljs bash">curl nxtrace.org/nt | bash</code></pre></div><p>一切准备就绪！使用命令 (例如ip地址是<code>1.1.1.1</code>)</p><div class="code-wrapper"><pre><code class="hljs bash">nexttrace 1.1.1.1</code></pre></div><p>更多进阶命令玩法可以用 <code>nexttrace -h</code> 查看哦</p><p> 关于软件卸载，因为nexttrace是绿色版单文件，卸载只需输入命令 </p> <div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> /usr/local/bin/nexttrace</code></pre></div><p><strong>windows使用方法:</strong></p><p><a href="https://github.com/nxtrace/NTrace-core/releases/download/v1.2.8/nexttrace_windows_amd64.exe">https://github.com/nxtrace/NTrace-core/releases/download/v1.2.8/nexttrace_windows_amd64.exe</a></p><p>下载后将<code>nexttrace_windows_amd64.exe</code>重命名 <code>nexttrace.exe</code></p><p>然后cmd,  改成你要追踪的<code>ip</code>  注意:打开cmd的位置要在<code>nexttrace.exe</code>所在目录</p><div class="code-wrapper"><pre><code class="hljs armasm"><span class="hljs-symbol">nexttrace</span> 你的<span class="hljs-built_in">ip</span></code></pre></div><p><strong>方法二</strong></p><div class="code-wrapper"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<span class="hljs-built_in">set</span> /p ip=请输入要跟踪的 IP 地址:D:\nexttrace.exe %ip%pause</code></pre></div><p>保存为<code>nexttrace.bat</code>文件双击运行</p><p>注意: D:\nexttrace.exe 是nexttrace.exe所在的目录,这里是D盘</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于安装宝塔后 samba访问失败 网络管理</title>
    <link href="/posts/a3e853bc.html"/>
    <url>/posts/a3e853bc.html</url>
    
    <content type="html"><![CDATA[<p>原因 ：由于安装了宝塔服务，添加了防火墙，对原有的<code>samba</code>服务产生了影响。</p><h3 id="查看某网络软件需要的端口"><a href="#查看某网络软件需要的端口" class="headerlink" title="查看某网络软件需要的端口:"></a>查看某网络软件需要的端口:</h3><blockquote><p>宝塔面板后台放行: 445和139端口</p></blockquote><div class="code-wrapper"><pre><code class="hljs bash">sudo netstat -tunlp | grep <span class="hljs-string">&#x27;smb&#x27;</span></code></pre></div><p>tcp        0      0 0.0.0.0:445             0.0.0.0:*               LISTEN      2857&#x2F;smbd<br>tcp        0      0 0.0.0.0:139             0.0.0.0:*               LISTEN      2857&#x2F;smbd<br>tcp6       0      0 :::445                  :::*                    LISTEN      2857&#x2F;smbd<br>tcp6       0      0 :::139                  :::*                    LISTEN      2857&#x2F;smbd  </p><h3 id="以下来自AI的答案"><a href="#以下来自AI的答案" class="headerlink" title="以下来自AI的答案:"></a>以下来自AI的答案:</h3><p>要在 Ubuntu 上放行端口 445 和 139，您可以使用 <code>ufw</code>（Uncomplicated Firewall）工具进行配置。以下是在 Ubuntu 上使用 <code>ufw</code> 放行端口的步骤：</p><ol><li><p><strong>检查 <code>ufw</code> 状态</strong>：<br>首先，检查 <code>ufw</code> 是否已启用并运行。您可以使用以下命令检查状态：</p><div class="code-wrapper"><pre><code class="hljs bash">sudo ufw status</code></pre></div></li><li><p><strong>允许端口</strong>：<br>如果 <code>ufw</code> 已启用，但端口 445 和 139 尚未放行，您可以使用以下命令允许这些端口：</p><div class="code-wrapper"><pre><code class="hljs bash">sudo ufw allow 445sudo ufw allow 139</code></pre></div></li><li><p><strong>启用防火墙</strong>：<br>如果 <code>ufw</code> 尚未启用，您可以使用以下命令启用它：</p><div class="code-wrapper"><pre><code class="hljs bash">sudo ufw <span class="hljs-built_in">enable</span></code></pre></div></li><li><p><strong>确认配置</strong>：<br>最后，您可以再次运行 <code>ufw status</code> 命令来确认端口已经被放行：</p><div class="code-wrapper"><pre><code class="hljs bash">sudo ufw status</code></pre></div></li></ol><p>请注意，放行端口可能会带来安全风险，请确保您了解潜在的风险并采取适当的安全措施。如果您使用其他防火墙工具或有特定的网络配置，请提供更多详细信息，以便我能够提供更准确的指导。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>宝塔面板软件商店列表无法打开解决办法</title>
    <link href="/posts/ae9c236d.html"/>
    <url>/posts/ae9c236d.html</url>
    
    <content type="html"><![CDATA[<p>大陆和香港服务器</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#优先选择这条命令执行</span>sed -i <span class="hljs-string">&quot;/bt.cn/d&quot;</span> /etc/hosts<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;103.179.243.14  www.bt.cn download.bt.cn api.bt.cn dg1.bt.cn dg2.bt.cn&quot;</span> &gt;&gt; /etc/hosts</code></pre></div><p>海外服务器:</p><div class="code-wrapper"><pre><code class="hljs bash">sed -i <span class="hljs-string">&quot;/bt.cn/d&quot;</span> /etc/hosts<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;128.1.164.196 www.bt.cn download.bt.cn api.bt.cn dg1.bt.cn dg2.bt.cn&quot;</span> &gt;&gt; /etc/hosts</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>refind，可能是颜值最高的多系统、硬盘引导神器,efi</title>
    <link href="/posts/61160d2b.html"/>
    <url>/posts/61160d2b.html</url>
    
    <content type="html"><![CDATA[<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>视频教程:</p><blockquote><p>我提供的文件是配置好的,可以直接使用,免去你花时间配置和美化主题的时间</p></blockquote><p>准备好: DiskGenius, refind文件</p><p><a href="https://www.123pan.com/s/cjqrVv-fUL9d.html">https://www.123pan.com/s/cjqrVv-fUL9d.html</a></p><p><a href="https://www.123pan.com/s/cjqrVv-aUL9d.html">https://www.123pan.com/s/cjqrVv-aUL9d.html</a></p><p>打开DiskGenius,打开efi分区,将refind文件夹复制到efi分区</p><p><img src="http://imgs.leshans.eu.org/2024/02/dafea496b460a356ea6fc9b670158492.webp"></p><p>左上角-工具-设置UEFi启动项</p><p><img src="http://imgs.leshans.eu.org/2024/02/7b4d5a507ae326401a6cde6fd5144967.webp"></p>]]></content>
    
    
    
    <tags>
      
      <tag>引导</tag>
      
      <tag>efi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 20.04 搭建 Samba 服务</title>
    <link href="/posts/61da953c.html"/>
    <url>/posts/61da953c.html</url>
    
    <content type="html"><![CDATA[<h3 id="安装-Samba-服务"><a href="#安装-Samba-服务" class="headerlink" title="安装 Samba 服务"></a>安装 Samba 服务</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo apt install samba</code></pre></div><p>查看版本,确保正确安装</p><div class="code-wrapper"><pre><code class="hljs bash">samba --version</code></pre></div><h3 id="配置需要共享的目录"><a href="#配置需要共享的目录" class="headerlink" title="配置需要共享的目录"></a>配置需要共享的目录</h3><p>例如: <code>/mnt/500GB</code> 为挂载目录</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 新建目录，用于共享</span>sudo <span class="hljs-built_in">mkdir</span> /mnt/500GB<span class="hljs-comment"># 更改权限信息</span>sudo <span class="hljs-built_in">chown</span> nobody:nogroup /mnt/500GB<span class="hljs-comment"># 给所有用户添加读写权限</span>sudo <span class="hljs-built_in">chmod</span> 777 /mnt/500GB<span class="hljs-comment">#对目录的Others权限添加w(写)权限</span>sudo <span class="hljs-built_in">chmod</span> o+w /mnt/500GB</code></pre></div><h3 id="配置挂载"><a href="#配置挂载" class="headerlink" title="配置挂载:"></a>配置挂载:</h3><p>安装vim:</p><div class="code-wrapper"><pre><code class="hljs bash">sudo apt install vim</code></pre></div><p>编辑: smb.conf</p><div class="code-wrapper"><pre><code class="hljs bash">sudo vim /etc/samba/smb.conf</code></pre></div><p>注意: <code>qige</code>为你的ubuntu用户名,在 Linux 中必须存在,请改为自己的</p><p>在smb.conf末尾添加下面的代码</p><div class="code-wrapper"><pre><code class="hljs bash">[share]   comment = share folder   browseable = <span class="hljs-built_in">yes</span>   path = /mnt/500GB   create mask = 0777   directory mask =0777   valid <span class="hljs-built_in">users</span> = qige   force user = qige   force group = qige   public = <span class="hljs-built_in">yes</span>   available = <span class="hljs-built_in">yes</span>   writable = <span class="hljs-built_in">yes</span></code></pre></div><h3 id="添加-Samba-用户"><a href="#添加-Samba-用户" class="headerlink" title="添加 Samba 用户"></a>添加 Samba 用户</h3><p>添加 Samba 用户，用于在访问共享目录时使用。这里添加的用户是之前配置的用户名。</p><div class="code-wrapper"><pre><code class="hljs bash">sudo smbpasswd -a qige</code></pre></div><p>重启 Samba 服务</p><div class="code-wrapper"><pre><code class="hljs bash">sudo service smbd restart</code></pre></div><p>其他</p><div class="code-wrapper"><pre><code class="hljs maxima">#或者sudo /etc/init.d/smbd <span class="hljs-built_in">restart</span>sudo service nmbd <span class="hljs-built_in">restart</span>#或者以下方法sudo <span class="hljs-built_in">restart</span> smbdsudo <span class="hljs-built_in">restart</span> nmbd</code></pre></div><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法:"></a>使用方法:</h3><p>windows: 在<code>运行框</code>输入: 也就是的ubuntu IP地址</p><p>例如:</p><div class="code-wrapper"><pre><code class="hljs dns">\\<span class="hljs-number">192.168.1</span>.xx</code></pre></div><p>即可成功smb</p><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><p>问题描述</p><div class="code-wrapper"><pre><code class="hljs javascript">磁盘被写保护，请去掉写保护或使用另一张磁盘。</code></pre></div><p>解决方案</p><p>回到windows, 请您通过以下操作清除磁盘的只读属性。</p><ol><li>在<strong>开始</strong>菜单的<strong>运行</strong>中输入<code>diskpart</code>命令。</li></ol><div class="code-wrapper"><pre><code class="hljs bash">diskpart</code></pre></div><ol><li><p>执行以下命令，查看磁盘清单。</p> <div class="code-wrapper"><pre><code class="hljs javascript">list disk</code></pre></div></li><li><p>执行以下命令，选择磁盘。</p> <div class="code-wrapper"><pre><code class="hljs javascript">select disk <span class="hljs-number">1</span></code></pre></div><p> <strong>说明</strong></p><p> <code>1</code>指的是磁盘编号，请您根据实际环境填写。</p></li><li><p>执行以下命令，清除只读属性。</p> <div class="code-wrapper"><pre><code class="hljs javascript">att disk clear readonly</code></pre></div></li></ol>]]></content>
    
    
    <categories>
      
      <category>ubuntu</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>远程协助连接这台计算机灰色无法勾选?</title>
    <link href="/posts/6a5c046e.html"/>
    <url>/posts/6a5c046e.html</url>
    
    <content type="html"><![CDATA[<h3 id="更改注册表设置"><a href="#更改注册表设置" class="headerlink" title="更改注册表设置"></a>更改注册表设置</h3><p>在注册表编辑器中更改一些设置，也能解决允许远程协助连接这台计算机灰色无法勾选这一问题，以下是具体的操作步骤。</p><p><strong>步骤1.</strong> 按<strong>“Windows + R”</strong>打开运行框，输入<strong>“regedit”</strong>，然后单击<strong>“确定”</strong>。</p><p><strong>步骤2.</strong> 导航到：</p><div class="code-wrapper"><pre><code class="hljs bash">计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services</code></pre></div><p><img src="http://imgs.leshans.eu.org/2024/02/f15959979ce6455d2da71f081c820577.webp"></p><p><strong>步骤3.</strong> 在右侧窗格，右键单击并选择<strong>“新建”</strong>，然后单击第三个<strong>“DWORD (32位)值”</strong>，并命名为 <strong>“fDenyTSConnections”</strong>。</p><p><img src="http://imgs.leshans.eu.org/2024/02/fce506a3aac3f03fff4dee4990bd536e.webp"></p><p><strong>步骤4.</strong> 双击打开 <strong>“fDenyTSConnections”</strong>，将<strong>“数值数据”</strong>更改为<strong>“0”</strong>，然后单击<strong>“确定”</strong>。</p><p><img src="http://imgs.leshans.eu.org/2024/02/099081f7ca8382316f67b7a926766443.webp"></p><p><strong>说明：</strong> “0”表示“允许用户通过终端服务&#x2F;远程桌面远程连接”；“1”表示“禁止使用终端服务&#x2F;远程桌面进行远程连接”。</p>]]></content>
    
    
    
    <tags>
      
      <tag>远程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hyper-v创建虚拟交换机失败与网络共享重启失效解决办法</title>
    <link href="/posts/f3b46fde.html"/>
    <url>/posts/f3b46fde.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>物理网卡属性里去掉勾选 <code>Hyper-v Extensible Virtual Switch</code> 或者叫 <code>Hyper-v 可扩展的虚拟交换机</code></p></blockquote><h3 id="创建虚拟交换机失败解决办法"><a href="#创建虚拟交换机失败解决办法" class="headerlink" title="创建虚拟交换机失败解决办法"></a>创建虚拟交换机失败解决办法</h3><p>创建之前先关闭<code>Hyper-v Extensible Virtual Switch</code></p><p><img src="http://imgs.leshans.eu.org/2024/02/9a5b0a848f2875f21b16c4a806a87299.webp"></p><p>其他方法:</p><table><thead><tr><th>步骤</th><th>操作</th></tr></thead><tbody><tr><td>1</td><td>在“启用或关闭Windows功能”中卸载Hyper-V</td></tr><tr><td>2</td><td>重启计算机</td></tr><tr><td>3</td><td>以管理员方式在“运行”中运行命令<code>netsh winsock reset</code></td></tr><tr><td>4</td><td>重启计算机</td></tr><tr><td>5</td><td>重启后查看“网络适配器”中是否有其他非物理网卡，若有则删除</td></tr><tr><td>6</td><td>确认物理网卡属性中没有勾选或存在“Hyper-v Extensible Virtual Switch”</td></tr><tr><td>7</td><td>在“启用或关闭Windows功能”中重新启用Hyper-V</td></tr><tr><td>8</td><td>重启计算机</td></tr><tr><td>9</td><td>确认要绑定“虚拟交换机”的物理网卡属性中没有勾选“Hyper-v Extensible Virtual Switch”</td></tr></tbody></table><p>请注意，这些步骤仅供参考，具体操作可能因系统版本和配置而有所不同。在执行任何更改之前，请确保备份重要数据并谨慎操作。</p><h3 id="网络共享重启失效解决办法"><a href="#网络共享重启失效解决办法" class="headerlink" title="网络共享重启失效解决办法"></a>网络共享重启失效解决办法</h3><h4 id="一键脚本-方法1-推荐"><a href="#一键脚本-方法1-推荐" class="headerlink" title="一键脚本: (方法1)推荐"></a>一键脚本: (方法1)推荐</h4><div class="code-wrapper"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> offREM 设置输出编码为UTF-8chcp 65001 &gt; nulREM 导入注册表键值reg add <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\SharedAccess&quot;</span> /v <span class="hljs-string">&quot;EnableRebootPersistConnection&quot;</span> /t REG_DWORD /d 1 /f<span class="hljs-built_in">echo</span> 注册表键值已创建并设置为1。REM 设置输出编码为UTF-8chcp 65001 &gt; nulREM 使用 sc 命令更改服务启动类型为自动sc config SharedAccess start= auto<span class="hljs-built_in">echo</span> 服务 <span class="hljs-string">&quot;Internet Connection Sharing (ICS)&quot;</span> 的启动类型已更改为自动。pause</code></pre></div><p>将上述代码保存为扩展名为<code>.bat</code>文件，例如<code>enable_reboot.bat</code>。然后，双击运行该批处理文件</p><h4 id="手动修复-方法2"><a href="#手动修复-方法2" class="headerlink" title="手动修复 (方法2)"></a>手动修复 (方法2)</h4><ol><li>修改注册表</li></ol><p>快捷键 win+r 输入 regedit 确认打开 注册表编辑器</p><p><img src="http://imgs.leshans.eu.org/2024/02/28bfef24348e3de28ac85acad463f779.webp" alt="image-1683871305927"></p><p>输入注册表路径</p><p><code>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\SharedAccess</code>  </p><p><img src="http://imgs.leshans.eu.org/2024/02/960d2d380ff750b6fc0099dceb032c9e.webp" alt="image-1683871363608"></p><p>新建项 “DWORD(32位)值(D) 名称 <code>EnableRebootPersistConnection</code> 并修改值为1</p><p><img src="http://imgs.leshans.eu.org/2024/02/f1864d3898c6c7a89b6932a5c748a161.webp" alt="image-1683871433057"></p><h4 id="修改服务Internet-Connection-Sharing-ICS-启动类型为自动"><a href="#修改服务Internet-Connection-Sharing-ICS-启动类型为自动" class="headerlink" title="修改服务Internet Connection Sharing (ICS) 启动类型为自动"></a>修改服务Internet Connection Sharing (ICS) 启动类型为自动</h4><h4 id="打开服务面板"><a href="#打开服务面板" class="headerlink" title="打开服务面板"></a>打开服务面板</h4><p><img src="http://imgs.leshans.eu.org/2024/02/eb960ac2bc20e3523647e7519793e0cf.webp" alt="image-1683871479766"></p><p><img src="http://imgs.leshans.eu.org/2024/02/d4c977a9c485f00fe0c66deb5593fb86.webp" alt="image-1683871576352"></p><h3 id="重新设置共享链接"><a href="#重新设置共享链接" class="headerlink" title="重新设置共享链接"></a>重新设置共享链接</h3><p><img src="http://imgs.leshans.eu.org/2024/02/89065f856e5ed9dcd6247971e64baa94.webp" alt="image-1683871613904"></p><p>这次重启后不会失效了</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hyper-v</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AdGuard Home - DNS缓存加速</title>
    <link href="/posts/620f8101.html"/>
    <url>/posts/620f8101.html</url>
    
    <content type="html"><![CDATA[<h3 id="AdGuard-Home设置"><a href="#AdGuard-Home设置" class="headerlink" title="AdGuard Home设置"></a>AdGuard Home设置</h3><blockquote><p>AdGuard Home作为DNS分流,拦截广告效果并不如浏览器插件,但是作为DNS服务器使用是非常优秀的, 拦截广告的方法很多,不是一定要用他,不要本末倒置</p></blockquote><p><img src="http://imgs.leshans.eu.org/2024/02/2025326830aaea9a9148a4c53f6038d9.webp"></p><h3 id="重要设置"><a href="#重要设置" class="headerlink" title="重要设置:"></a>重要设置:</h3><p><img src="http://imgs.leshans.eu.org/2024/02/310bec32651c467fd0a78a7eddaf5789.webp"></p><p>前面两个DNS使用你运营商的,解析才会快,查询地址:</p><p><a href="https://www.xdtool.com/dnsdx">https://www.xdtool.com/dnsdx</a></p><p>你是电信就查电信,其他类似</p><p>后面三个使用: 百度,阿里,腾讯,就行了,不是越多越好.</p><div class="code-wrapper"><pre><code class="hljs bash">180.76.76.76223.5.5.5119.29.29.29</code></pre></div><p>选择:  <strong>并行请求</strong></p><p>Bootstrap DNS 服务器也使用运营商的</p><p><img src="http://imgs.leshans.eu.org/2024/02/c7df89f161ab3684e437ea2e1a02aafd.webp"></p><p>其他默认就好,日志选择7天就行</p><h3 id="DNS黑名单"><a href="#DNS黑名单" class="headerlink" title="DNS黑名单"></a>DNS黑名单</h3><p><img src="http://imgs.leshans.eu.org/2024/02/4c5f0dab72f701a3a31a6944ccd52ff5.webp"></p><p>两个足以,添加方法:</p><p><strong>点击添加黑名单–从列表中选择</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>dns</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>winserver2022安装hyper-v</title>
    <link href="/posts/984b7145.html"/>
    <url>/posts/984b7145.html</url>
    
    <content type="html"><![CDATA[<p>在已经安装好的winserver2022上打好驱动，这个如果缺的话，可以在网上寻找就好了</p><p>有个重要的核显驱动在因特尔官网</p><p><a href="https://www.intel.cn/content/www/cn/zh/download/19344/intel-graphics-windows-dch-drivers.html?wapkw=gfx">英特尔® 显卡 – Windows* DCH 驱动程序 (intel.cn)</a></p><h3 id="激活命令"><a href="#激活命令" class="headerlink" title="激活命令"></a>激活命令</h3><p>打开PowerShell(管理员),输入以下代码:</p><div class="code-wrapper"><pre><code class="hljs bash">irm https://massgrave.dev/get | iex</code></pre></div><p>或者使用激活脚本:</p><p><a href="https://www.123pan.com/s/cjqrVv-6rL9d.html">https://www.123pan.com/s/cjqrVv-6rL9d.html</a></p><h3 id="开启hyper-v"><a href="#开启hyper-v" class="headerlink" title="开启hyper-v"></a>开启hyper-v</h3><p>一键开启:</p><p>打开PowerShell(管理员),输入以下代码:</p><div class="code-wrapper"><pre><code class="hljs bash">Install-WindowsFeature -Name Hyper-V -IncludeManagementTools -Restart</code></pre></div><p>手动开启:</p><p>启用windows功能</p><p><img src="http://imgs.leshans.eu.org/2024/02/c4b1708514957b8958834b8d57347015.webp" alt="image-20221129220627106"></p><p><img src="http://imgs.leshans.eu.org/2024/02/ae37b510dd20fa5f0117e8e33d56f6a2.webp" alt="image-20221129220708301"></p><p><img src="http://imgs.leshans.eu.org/2024/02/598f88fd0354186f9672420b65970227.webp" alt="image-20221129220730293"></p><p><img src="http://imgs.leshans.eu.org/2024/02/c2b2438d8fd2e14cc50ec0e89d1949a4.webp" alt="image-20221129220755338"></p><p>开启hyper-v</p><p><img src="http://imgs.leshans.eu.org/2024/02/f9a84db3ff0e831e0a41b15ecd8ce3f4.webp" alt="image-20221129220828917"></p><p>SMB</p><p><img src="http://imgs.leshans.eu.org/2024/02/b4bfb2d33c5512e942afe7d2f7ece2c9.webp" alt="image-20221129221004329"></p><p>剩下暂时都不管，后期还可以改</p><p><img src="http://imgs.leshans.eu.org/2024/02/e0c819814796d0e7d6f5b1d5f0c97907.webp" alt="image-20221129221315469"></p><p>安装相关内容后重启</p><h3 id="修改用户名组策略"><a href="#修改用户名组策略" class="headerlink" title="修改用户名组策略"></a>修改用户名组策略</h3><h4 id="修改计算机名"><a href="#修改计算机名" class="headerlink" title="修改计算机名"></a>修改计算机名</h4><p><img src="http://imgs.leshans.eu.org/2024/02/042d3fff2ad4481bec8701d59b398816.webp" alt="image-20221130101551203"></p><h4 id="修改组策略"><a href="#修改组策略" class="headerlink" title="修改组策略"></a>修改组策略</h4><div class="code-wrapper"><pre><code class="hljs undefined">gpedit.msc</code></pre></div><p>修改如下</p><p><img src="http://imgs.leshans.eu.org/2024/02/5070e1632b731253dd586c54b2272785.webp" alt="image-20221130101932927"></p><p>重命名管理员，然后重启</p><p><img src="http://imgs.leshans.eu.org/2024/02/dc5963d87a3b59a6fc16d6415e633237.webp" alt="image-20221130102049939"></p><h3 id="下载DDA"><a href="#下载DDA" class="headerlink" title="下载DDA"></a>下载DDA</h3><p><a href="https://www.123pan.com/s/cjqrVv-yrL9d.html">https://www.123pan.com/s/cjqrVv-yrL9d.html</a></p><p><a href="https://github.com/chanket/DDA">chanket&#x2F;DDA: 实现Hyper-V离散设备分配功能的图形界面工具。A GUI Tool For Hyper-V’s Discrete Device Assignment(DDA). (github.com)</a></p><h3 id="下载starwind-v2v-converter"><a href="#下载starwind-v2v-converter" class="headerlink" title="下载starwind v2v converter"></a>下载starwind v2v converter</h3><p>可以将img直接转化为虚拟磁盘启动</p><p><a href="https://www.starwindsoftware.com/tmplink/starwindconverter.exe">https://www.starwindsoftware.com/tmplink/starwindconverter.exe</a></p><p><a href="https://www.123pan.com/s/cjqrVv-jrL9d.html">https://www.123pan.com/s/cjqrVv-jrL9d.html</a></p><h3 id="创建交换机"><a href="#创建交换机" class="headerlink" title="创建交换机"></a>创建交换机</h3><p>我要做一个主路由模式的网络结构</p><p>打开hyperv管理</p><p><img src="http://imgs.leshans.eu.org/2024/02/32bfffe0aec213f13c9f81cfca904ad8.webp" alt="image-20221130104504949"></p><p>当前没连接网线的是WAN口，之后要在这个口进行PPPoE拨号</p><p>在设置里面找到当前连接的网口</p><p><img src="http://imgs.leshans.eu.org/2024/02/d95a2b9c2d9a32f807ffeb7d9687a03a.webp" alt="image-20221130105057969"></p><p>现在连网线的是LAN口，之后要连接硬路由的口，这里同样选外部</p><p><img src="http://imgs.leshans.eu.org/2024/02/94db23a8fb67203311b01373bca3555c.webp" alt="image-20221130105633335"></p><h3 id="下载openwrt并转化"><a href="#下载openwrt并转化" class="headerlink" title="下载openwrt并转化"></a>下载openwrt并转化</h3><p><a href="https://github.com/klever1988/nanopi-openwrt/releases">Releases · klever1988&#x2F;nanopi-openwrt · GitHub</a></p><p>选择X86版本</p><h3 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h3><p>打开hyperv管理器</p><p><img src="http://imgs.leshans.eu.org/2024/02/ecc6ca56bb06efa60d0f22f36236b207.webp" alt="image-20221129222654079"></p><p>新建，然后在代数选择第一代，第二代启动不了ovo</p><p><img src="http://imgs.leshans.eu.org/2024/02/4c9ff2242909557d461910da29151ec0.webp" alt="image-20221129222725362"></p><p>内存1G就行</p><p>存储最大选择2G差不多了</p><p><img src="http://imgs.leshans.eu.org/2024/02/aa0ab58df548d7d7c2e23019f0405a53.webp" alt="image-20221129222827127"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hyper-v</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一条命令在 Windows 10 上安装 Hyper-V虚拟机</title>
    <link href="/posts/de3cc109.html"/>
    <url>/posts/de3cc109.html</url>
    
    <content type="html"><![CDATA[<h2 id="使用-PowerShell-启用-Hyper-V"><a href="#使用-PowerShell-启用-Hyper-V" class="headerlink" title="使用 PowerShell 启用 Hyper-V"></a>使用 PowerShell 启用 Hyper-V</h2><ol><li><p>以管理员身份打开 <code>PowerShell</code> 控制台。</p></li><li><p>运行以下命令：</p></li></ol><p>PowerShell复制</p><div class="code-wrapper"><pre><code class="hljs bash">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All</code></pre></div><p>如果无法找到此命令，请确保你以管理员身份运行 PowerShell。</p><p>安装完成后，请重启。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Office 365正版免费激活！2024最新激活方法！</title>
    <link href="/posts/76c72c5d.html"/>
    <url>/posts/76c72c5d.html</url>
    
    <content type="html"><![CDATA[<p>工具地址:</p><p><a href="https://otp.landian.vip/zh-cn/download.html">https://otp.landian.vip/zh-cn/download.html</a></p><blockquote><p>提示: <code>右键图片</code>-在新标签页打开图片即可<code>放大观看</code></p></blockquote><p>1.部署</p><p>第3步, 选择: <code>Microsoft 365企业应用版</code></p><p><img src="https://imgs.leshans.eu.org/2024/02/95557e6261d57e30f98342c5bfd884fd.png"></p><p> 2.激活</p><p>选择 <code>Office Mondo 2016 - 批量许可证</code></p><p><img src="https://imgs.leshans.eu.org/2024/02/40df4baf2f60c11f308b057a9a3ba4c1.png"></p><p>kms主机写入:</p><p><code>kms.loli.beer</code></p><p><img src="https://imgs.leshans.eu.org/2024/02/dc154b5be5ad1b7fbe2700d40a1c3023.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>中兴F4600T光猫超级密码获取方法</title>
    <link href="/posts/92b1e789.html"/>
    <url>/posts/92b1e789.html</url>
    
    <content type="html"><![CDATA[<h3 id="中兴F4600T光猫超级密码获取方法（IOS）"><a href="#中兴F4600T光猫超级密码获取方法（IOS）" class="headerlink" title="中兴F4600T光猫超级密码获取方法（IOS）"></a>中兴F4600T光猫超级密码获取方法（IOS）</h3><blockquote><p>1.工具和软件准备：<code>iPhone或者iPad</code>、<code>Stream抓包软件</code>，<code>小翼管家</code>。如下图：</p></blockquote><p><img src="https://imgs.leshans.eu.org/2024/02/9f24b42b13a100a4460c1b5929db5cf4.avif"></p><p>软件准备</p><p>2.登录小翼管家，查看光猫是否绑定。</p><p><img src="https://imgs.leshans.eu.org/2024/02/7cfb3abbace24e208d4bc101fb810123.avif"></p><p>小翼管家主页面</p><p>3.点击《家庭网络》，就可以看到光猫的控制界面了。</p><p><img src="https://imgs.leshans.eu.org/2024/02/8f759b7dc680e3d61bcb829eaeaf14ab.avif"></p><p>光猫管理界面</p><p>4.点击《网关管理》，可以看到指示灯、休眠模式等这个界面。这个页面不要关闭，打开Stream软件。</p><p><img src="https://imgs.leshans.eu.org/2024/02/2ed6da51367bbcbf09a5dcb830097c9e.avif"></p><p>5.打开Stream软件后，点击《设置抓包模式》—《白名单模式》—《白名单设置》—《189cube.com》–《立即生效》，请看图。</p><p><img src="https://imgs.leshans.eu.org/2024/02/6eee66f746fdf34ddb32617171d71ec6.avif"></p><p>设置抓包模式</p><p><img src="https://imgs.leshans.eu.org/2024/02/b80664cc7aac868db905042941858e92.avif"></p><p>白名单设置</p><p><img src="https://imgs.leshans.eu.org/2024/02/b4e1115e2bbcaccc28d0f18be5279547.avif"></p><p>添加189cube.com</p><p>6.回到Stream抓包主页面，点击开始抓包。  </p><p><img src="https://imgs.leshans.eu.org/2024/02/2dd6d465d173a095f7cfe2cafb8231bb.avif"></p><p>开始抓包</p><p>7.返回到小翼管家APP，点击《指示灯》，反复开关几次。</p><p><img src="https://imgs.leshans.eu.org/2024/02/8a3b09a53cce0b461064b40ac310420b.avif"></p><p>反复开关几次指示灯</p><p>8.返回Stream抓包界面，点击《停止抓包》—《抓包历史》。</p><p><img src="https://imgs.leshans.eu.org/2024/02/7c7bad4197cf06dba9383f3991b1dc3f.avif"></p><p>停止抓包—查看抓包历史</p><p>9.可以看到有个19秒的抓包，点击打开，有两个请求，随意点开一个。</p><p><img src="https://imgs.leshans.eu.org/2024/02/507a9cbcf8d340398028b0b0a256cbf6.avif"></p><p>抓包历史，随意点开一个</p><p><img src="https://imgs.leshans.eu.org/2024/02/77a66920180f164d4b696a37a4fbdc5e.avif"></p><p>点开后的界面</p><p>10.点击右上角的《分享》—《编辑重放请求》—《下滑到最下端》—《请求体—JASON》–《原始数据》—删除所有的字段，替换为：</p><div class="code-wrapper"><pre><code class="hljs bash">&#123; <span class="hljs-string">&quot;Params&quot;</span>: [], <span class="hljs-string">&quot;MethodName&quot;</span>: <span class="hljs-string">&quot;GetTAPasswd&quot;</span>, <span class="hljs-string">&quot;RPCMethod&quot;</span>: <span class="hljs-string">&quot;CallMethod&quot;</span>, <span class="hljs-string">&quot;ObjectPath&quot;</span>: <span class="hljs-string">&quot;/com/ctc/igd1/Telecom/System&quot;</span>, <span class="hljs-string">&quot;InterfaceName&quot;</span>: <span class="hljs-string">&quot;com.ctc.igd1.SysCmd&quot;</span>, <span class="hljs-string">&quot;ServiceName&quot;</span>: <span class="hljs-string">&quot;com.ctc.igd1&quot;</span> &#125;</code></pre></div><p><img src="https://imgs.leshans.eu.org/2024/02/b693c9fb24fabad5041f065a6c8eeef9.avif"></p><p><img src="https://imgs.leshans.eu.org/2024/02/c27c9aa48a2a05f7f4742adcbe4f9cec.avif"></p><p>查看JSON请求体</p><p><img src="https://imgs.leshans.eu.org/2024/02/cd396ff1dc98c451ebd2f71c303f4c4b.avif"></p><p>点击原始数据</p><p><img src="https://imgs.leshans.eu.org/2024/02/bf775944a8c9de025df5a1bfde39eeb9.avif"></p><p>替换为本教程里的代码</p><p>11.替换完以后，点击《存储》—右上角的类似《播放》按钮—《响应体—点击Respond Body》即可看到一个telecomadmin+8位数字，它就是超级密码。</p><p><img src="https://imgs.leshans.eu.org/2024/02/d874147f3cea8969206523b1138ecdc8.avif"></p><p>点击右上角的播放按钮</p><p><img src="https://imgs.leshans.eu.org/2024/02/3c964a1d19760f1deb4f255a056aa0c5.avif"></p><p>点开响应体，即可看到超级密码</p><p><img src="https://imgs.leshans.eu.org/2024/02/4cdcf79cb1b35ef0c478bc2c5b168731.avif"></p><p>超级密码界面</p><p>12.登录光猫的管理地址：192.168.1.1，账户: telecomadmin，超级密码：telecomadmin+8位数字，即可进行后续的高端操作了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>超简单！一键永久激活Windows/Office</title>
    <link href="/posts/d528ac1a.html"/>
    <url>/posts/d528ac1a.html</url>
    
    <content type="html"><![CDATA[<p>使用管理员权限打开PowerShell,输入命令:</p><div class="code-wrapper"><pre><code class="hljs bash">irm https://massgrave.dev/get | iex</code></pre></div><p>中文版下载地址: </p><p><a href="https://www.123pan.com/s/cjqrVv-6rL9d.html">https://www.123pan.com/s/cjqrVv-6rL9d.html</a></p><p><code>打开地址,右上角点击下载按钮</code></p><div class="code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/woniu336/</span>open_shell<span class="hljs-regexp">/blob/m</span>ain/MAS中文版.cmd</code></pre></div><p>MAS脚本官网：<a href="https://massgrave.dev/">https://massgrave.dev/</a></p><p>MAS脚本Github：<a href="https://github.com/massgravel/Microsoft-Activation-Scripts">https://github.com/massgravel/Microsoft-Activation-Scripts</a></p><p>HEU KMS Activator：<a href="https://github.com/zbezj/HEU_KMS_Activator/releases">https://github.com/zbezj/HEU_KMS_Activator/releases</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu 桌面版20.04 开启SSH服务</title>
    <link href="/posts/ba044255.html"/>
    <url>/posts/ba044255.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>注意: 用户名不是<code>root</code>,是你的登录名</p></blockquote><p>更新软件下载源</p><div class="code-wrapper"><pre><code class="hljs bash">sudo apt update</code></pre></div><p>安装ssh服务</p><div class="code-wrapper"><pre><code class="hljs bash">sudo apt install openssh-server</code></pre></div><p>开启防火墙ssh的服务端口</p><div class="code-wrapper"><pre><code class="hljs bash">sudo ufw allow ssh</code></pre></div><p>附：还可以查看或更改ssh服务的状态</p><p>查看ssh服务状态</p><div class="code-wrapper"><pre><code class="hljs bash">systemctl status ssh</code></pre></div><p>关闭ssh服务</p><div class="code-wrapper"><pre><code class="hljs bash">systemctl stop ssh</code></pre></div><p>开启ssh服务</p><div class="code-wrapper"><pre><code class="hljs bash">systemctl start ssh</code></pre></div><p>重启ssh服务</p><div class="code-wrapper"><pre><code class="hljs bash">systemctl restart ssh</code></pre></div><p>设置开启自启</p><div class="code-wrapper"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">enable</span> ssh</code></pre></div><p>关闭开机自启</p><div class="code-wrapper"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">disable</span> ssh</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ubuntu</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>家用电脑搭建网站 - Xubuntu安装、宝塔面板和Cloudflare Tunnels</title>
    <link href="/posts/707b8836.html"/>
    <url>/posts/707b8836.html</url>
    
    <content type="html"><![CDATA[<h2 id="本文介绍了在家用电脑上搭建网站的简单步骤："><a href="#本文介绍了在家用电脑上搭建网站的简单步骤：" class="headerlink" title="本文介绍了在家用电脑上搭建网站的简单步骤："></a>本文介绍了在家用电脑上搭建网站的简单步骤：</h2><blockquote><ol><li>安装Xubuntu操作系统。</li><li>下载并安装宝塔面板，用于网站管理。</li><li>使用Cloudflare Tunnels实现内网穿透，以便从外部访问您的网站。</li></ol></blockquote><p><strong>前提: 你有域名在Cloudflare</strong></p><p>这些步骤可以帮助个人和小型企业轻松创建和托管自己的在线网站。</p><h3 id="1-安装Xubuntu操作系统"><a href="#1-安装Xubuntu操作系统" class="headerlink" title="1.安装Xubuntu操作系统"></a>1.安装Xubuntu操作系统</h3><p>下载地址: xubuntu-20.04.6-desktop-amd64.iso</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-cdimage/xubuntu/releases/20.04.6/release/xubuntu-20.04.6-desktop-amd64.iso" title="xubuntu-20.04.6-desktop-amd64.iso">xubuntu-20.04.6-desktop-amd64.iso</a></p><p>安装的方法很多,我这里使用的方法是:</p><p>在windows10 ltsc上面安装VMware-workstation虚拟机的方式安装</p><p><a href="https://www.123pan.com/s/cjqrVv-ZCL9d.html">https://www.123pan.com/s/cjqrVv-ZCL9d.html</a></p><p>使用vm虚拟机的时候注意版本选择<code>ubuntu</code></p><h3 id="2-换源"><a href="#2-换源" class="headerlink" title="2. 换源"></a>2. 换源</h3><h5 id="方法1"><a href="#方法1" class="headerlink" title="方法1:"></a>方法1:</h5><p>Xubuntu安装成功后,进入桌面,右键-应用程序-设置-软件和更新</p><p>勾选-选择中国服务器-其他</p><p><img src="https://imgs.leshans.eu.org/2024/02/84b9202c01360980f29b9702b05f9e73.png"></p><p>打开终端切换root权限,输入密码</p><div class="code-wrapper"><pre><code class="hljs bash">sudo -i</code></pre></div><p>然后:</p><div class="code-wrapper"><pre><code class="hljs bash">apt-get update</code></pre></div><p>接着:</p><div class="code-wrapper"><pre><code class="hljs bash">apt-get upgrade</code></pre></div><h5 id="方法2"><a href="#方法2" class="headerlink" title="方法2:"></a>方法2:</h5><p>一键换源脚本:</p><div class="code-wrapper"><pre><code class="hljs bash">bash &lt;(curl -sSL https://gitee.com/SuperManito/LinuxMirrors/raw/main/ChangeMirrors.sh)</code></pre></div><h5 id="方法3-不推荐"><a href="#方法3-不推荐" class="headerlink" title="方法3:(不推荐)"></a>方法3:(不推荐)</h5><p>手动换源:</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /etc/apt/sources.list old_sources.list</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">sudo vi /etc/apt/sources.list</code></pre></div><p>提示: 输入<code>%d</code>清除文本内容,然后复制以下代码:</p><div class="code-wrapper"><pre><code class="hljs bash">deb https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse</code></pre></div><p>按<code>esc</code>,然后<code>:wq</code>  保存退出</p><p>接着:</p><div class="code-wrapper"><pre><code class="hljs bash">sudo apt update</code></pre></div><p>常用的Ubuntu版本代号：</p><p>Ubuntu 22.04：<code>jammy</code></p><p>Ubuntu 20.04：<code>focal</code></p><p>登录ssh终端,开启ssh方法:</p><p><a href="https://blog.leshans.eu.org/p/163/">https://blog.leshans.eu.org/p/163/</a>   注意: 用户名不是<code>root</code>,是登录名</p><p>也可以在虚拟机的xubuntu终端敲命令</p><h3 id="3-安装宝塔面板"><a href="#3-安装宝塔面板" class="headerlink" title="3.安装宝塔面板"></a>3.安装宝塔面板</h3><blockquote><p>国内无法访问github,所以用到反代: <a href="https://mirror.ghproxy.com/">https://mirror.ghproxy.com</a></p></blockquote><p>安装curl:</p><div class="code-wrapper"><pre><code class="hljs bash">apt install -y curl</code></pre></div><p>一键脚本:</p><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://mirror.ghproxy.com/https://raw.githubusercontent.com/woniu336/open_shell/main/tb-localhost.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x tb-localhost.sh &amp;&amp; ./tb-localhost.sh</code></pre></div><p>去除宝塔面板强制绑定账号:</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -f /www/server/panel/data/bind.pl</code></pre></div><p>去后门:</p><div class="code-wrapper"><pre><code class="hljs bash">sudo <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; /www/server/panel/script/site_task.pysudo chattr +i /www/server/panel/script/site_task.pysudo <span class="hljs-built_in">rm</span> -rf /www/server/panel/logs/request/*sudo chattr +i -R /www/server/panel/logs/request</code></pre></div><p>手动破解:</p><div class="code-wrapper"><pre><code class="hljs bash">sed -i <span class="hljs-string">&#x27;s/&quot;endtime&quot;: -1/&quot;endtime&quot;: 999999999999/g&#x27;</span> /www/server/panel/data/plugin.json</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">chattr +i /www/server/panel/data/plugin.json</code></pre></div><p>优化脚本:</p><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://mirror.ghproxy.com/https://raw.githubusercontent.com/woniu336/open_shell/main/optimize.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x optimize.sh &amp;&amp; ./optimize.sh</code></pre></div><h3 id="4-安装Cloudflare-Tunnels实现内网穿透"><a href="#4-安装Cloudflare-Tunnels实现内网穿透" class="headerlink" title="4.安装Cloudflare Tunnels实现内网穿透"></a>4.安装Cloudflare Tunnels实现内网穿透</h3><p><img src="https://imgs.leshans.eu.org/2024/02/ab53e64dda3c805e4dee2edccb6e56f9.png"></p><p>选择debian,复制代码,注意:</p><div class="code-wrapper"><pre><code class="hljs awk">curl -L --output cloudflared.deb https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/cloudflare/</span>cloudflared<span class="hljs-regexp">/releases/</span>latest<span class="hljs-regexp">/download/</span>cloudflared-linux-amd64.deb</code></pre></div><p>改成:</p><div class="code-wrapper"><pre><code class="hljs bash">curl -L --output cloudflared.deb https://mirror.ghproxy.com/https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb</code></pre></div><p><img src="https://imgs.leshans.eu.org/2024/02/5d3d04861d98f9f6dd7ad29fd43f356d.png"></p><h3 id="5-最后"><a href="#5-最后" class="headerlink" title="5.最后"></a>5.最后</h3><p>宝塔面板正常安装所需服务,建站.域名解析不用管,cf会自动解析</p><p>查看ubuntu的版本号</p><div class="code-wrapper"><pre><code class="hljs text">lsb_release -a</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>ubuntu</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>宝塔面板Nginx编译pagespeed实现webp化</title>
    <link href="/posts/f80a1000.html"/>
    <url>/posts/f80a1000.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>网站优化之宝塔面板Nginx编译pagespeed实现webp化，目的为通过重写网页来减少延迟和带宽，从而帮助提高Web速度。Ngx_pagespeed是一个开源的Nginx模块，由Google创建，主要的功能是针对前端页面而进行服务器端的优化，对前端设计人员来说，可以省去优化css、js以及图片的过程。</p></blockquote><p>单核处理器不推荐使用此模块，推荐<code>Nginx fastcgi_cache</code></p><p>Nginx fastcgi_cache：<a href="https://blog.leshans.eu.org/p/159/">https://blog.leshans.eu.org/p/159/</a></p><h3 id="Ngx-pagespeed功能简介"><a href="#Ngx-pagespeed功能简介" class="headerlink" title="Ngx_pagespeed功能简介"></a>Ngx_pagespeed功能简介</h3><ol><li>图像优化：剥离元数据、动态调整，重新压缩</li><li>CSS和JavaScript压缩、合并、级联、内联</li><li>推迟图像和JavaScript加载</li><li>对HTML重写、压缩空格、去除注释等</li><li>提升缓存周期</li></ol><p>缺点：可能因为服务器端的优化而使系统增加负载，但从<code>减少客户请求数</code>的角度去看，牺牲部分服务器性能还是<code>值得的</code>。</p><p>pagespeed官网文档：<a href="https://www.modpagespeed.com/doc/configuration">https://www.modpagespeed.com/doc/configuration</a></p><p>项目：<a href="https://github.com/apache/incubator-pagespeed-ngx/">https://github.com/apache/incubator-pagespeed-ngx/</a></p><h3 id="1-宝塔面板编译Ngx-pagespeed"><a href="#1-宝塔面板编译Ngx-pagespeed" class="headerlink" title="1.宝塔面板编译Ngx_pagespeed"></a>1.宝塔面板编译Ngx_pagespeed</h3><h4 id="1）首先卸载原有Nginx，然后点击“编译安装”，点击添加自定义模块"><a href="#1）首先卸载原有Nginx，然后点击“编译安装”，点击添加自定义模块" class="headerlink" title="1）首先卸载原有Nginx，然后点击“编译安装”，点击添加自定义模块"></a>1）首先卸载原有Nginx，然后点击“编译安装”，点击添加自定义模块</h4><p><img src="https://imgs.leshans.eu.org/2024/02/d6b86dbd89f432251d46eb99eee3d1cd.webp" alt="Pasted image 20240213002542"></p><h4 id="2）添加自定义模块具体填写，具体看图："><a href="#2）添加自定义模块具体填写，具体看图：" class="headerlink" title="2）添加自定义模块具体填写，具体看图："></a>2）添加自定义模块具体填写，具体看图：</h4><p><img src="https://imgs.leshans.eu.org/2024/02/98074899246754b40a6ec96979640a4a.webp" alt="Pasted image 20240213002557"></p><div class="code-wrapper"><pre><code class="hljs bash">模块名称：pagespeed模块描述：pagespeed模块参数: --add-module=/www/server/ngx_pagespeed</code></pre></div><p>前置脚本：#具体ngx_pagespeed前置脚本代码如下：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /www/serverwget https://github.com/apache/incubator-pagespeed-ngx/archive/v1.13.35.2-stable.zipunzip v1.13.35.2-stable.zip<span class="hljs-built_in">rm</span> v1.13.35.2-stable.zipNPS_DIR=$(find . -name <span class="hljs-string">&quot;*pagespeed-ngx-1.13.35.2-stable&quot;</span> -<span class="hljs-built_in">type</span> d)<span class="hljs-built_in">mv</span> <span class="hljs-variable">$NPS_DIR</span> ngx_pagespeed<span class="hljs-built_in">cd</span> ngx_pagespeedNPS_RELEASE_NUMBER=<span class="hljs-variable">$&#123;1.13.35.2-stable/stable/&#125;</span>PSPL_URL=https://dl.google.com/dl/page-speed/psol/<span class="hljs-variable">$&#123;NPS_RELEASE_NUMBER&#125;</span>x64.tar.gz[ -e scripts/format_binary_url.sh ]PSPL_URL=$(scripts/format_binary_url.sh PSOL_BINARY_URL)wget <span class="hljs-variable">$&#123;PSPL_URL&#125;</span>tar -xzvf $(<span class="hljs-built_in">basename</span> <span class="hljs-variable">$&#123;PSPL_URL&#125;</span>)<span class="hljs-built_in">rm</span> $(<span class="hljs-built_in">basename</span> <span class="hljs-variable">$&#123;PSPL_URL&#125;</span>)</code></pre></div><h4 id="3）全部放置好后，勾选，提交"><a href="#3）全部放置好后，勾选，提交" class="headerlink" title="3）全部放置好后，勾选，提交"></a>3）全部放置好后，勾选，提交</h4><p><img src="https://imgs.leshans.eu.org/2024/02/54497a5654395939c6f4b525c1ce1898.webp" alt="Pasted image 20240213002749"></p><h4 id="4）安装好的效果如图："><a href="#4）安装好的效果如图：" class="headerlink" title="4）安装好的效果如图："></a>4）安装好的效果如图：</h4><p>编译安装速度有点慢，需要等待，安装好可以在ssh执行命令：<code>nginx -V</code></p><p><img src="https://imgs.leshans.eu.org/2024/02/3e451ff4c55a4f79e2f80de0146f2e1e.webp" alt="Pasted image 20240213002802"></p><p>看到红框的位置有pagespeed，说明已经顺利编译安装好了~</p><h3 id="2-网站Nginx-pagespeed优化配置"><a href="#2-网站Nginx-pagespeed优化配置" class="headerlink" title="2.网站Nginx_pagespeed优化配置"></a>2.网站Nginx_pagespeed优化配置</h3><h4 id="1）Nginx配置"><a href="#1）Nginx配置" class="headerlink" title="1）Nginx配置"></a>1）Nginx配置</h4><p>安装好之后，打开Nginx配置，加入以下代码（注意位置）</p><p><img src="https://imgs.leshans.eu.org/2024/02/6c60ad7519ec2d711c0a91bcfaf3f1b8.webp" alt="Pasted image 20240213002843"></p><p>下方中缓存文件位置请提前创建好：<code>/tmp/ngx_pagespeed_cache</code>（这里也可以<strong>放到内存</strong>里面，如果你的磁盘IO很慢的话建议采用此方式，毕竟内存的读写速度非常快）</p><p>代码如下：</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启用ngx_pagespeed 开始</span>pagespeed on;<span class="hljs-meta prompt_">#</span><span class="language-bash">路径请提前创建好，可以放在内存也可以放在临时文件夹中</span>pagespeed CreateSharedMemoryMetadataCache /tmp/ngx_pagespeed_cache 51200;pagespeed DefaultSharedMemoryCacheKB 51200;pagespeed FileCachePath /tmp/ngx_pagespeed_cache;pagespeed FileCacheSizeKb 2048000;pagespeed FileCacheCleanIntervalMs 43200000;pagespeed FileCacheInodeLimit 500000;<span class="hljs-meta prompt_"># </span><span class="language-bash">过滤器级别（自定义模式）</span>pagespeed RewriteLevel PassThrough;<span class="hljs-meta prompt_"># </span><span class="language-bash">一个标识而已（若在浏览器开发者响应标头看到此标识，则说明 PageSpeed 生效）</span>pagespeed XHeaderValue &quot;Powered By xcbtmw.com&quot;;<span class="hljs-meta prompt_"># </span><span class="language-bash">HTML页面链接转小写（SEO 优化，推荐）</span>pagespeed LowercaseHtmlNames on;<span class="hljs-meta prompt_">#</span><span class="language-bash">PageSpeed能够根据响应头中指定的任何内容安全策略调整其优化</span>pagespeed HonorCsp on;<span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">##########缓存 ##########</span></span><span class="hljs-meta prompt_">#</span><span class="language-bash">相当于同时使用了extend_cache_images, extend_cache_scripts和 extend_cache_css</span>pagespeed EnableFilters extend_cache;pagespeed EnableFilters extend_cache_pdfs;pagespeed EnableFilters local_storage_cache;<span class="hljs-meta prompt_">#</span><span class="language-bash">开启使用Redis（和memcached只能先其一）</span><span class="hljs-meta prompt_">#</span><span class="language-bash">pagespeed RedisServer <span class="hljs-string">&quot;127.0.0.1:6379&quot;</span>;</span><span class="hljs-meta prompt_"># </span><span class="language-bash">memcached优化,如果没有memcached优化请删去</span>pagespeed MemcachedThreads 1;pagespeed MemcachedServers &quot;127.0.0.1:11211&quot;;<span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####### 过滤规则 ########</span></span><span class="hljs-meta prompt_"># </span><span class="language-bash">过滤不需要启用的目录或文件</span>pagespeed Disallow &quot;*/wp-admin/*&quot;;pagespeed Disallow &quot;*/wp-login.php*&quot;;pagespeed Disallow &quot;*/vps-pingfen/&quot;;<span class="hljs-meta prompt_"># </span><span class="language-bash">启用压缩空白过滤器</span>pagespeed EnableFilters collapse_whitespace; <span class="hljs-meta prompt_"># </span><span class="language-bash">预解析DNS查询</span> pagespeed EnableFilters insert_dns_prefetch;<span class="hljs-meta prompt_"> </span><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#######JS和CSS########</span></span><span class="hljs-meta prompt_"># </span><span class="language-bash">删除带默认属性的标签</span> pagespeed EnableFilters elide_attributes;<span class="hljs-meta prompt_"># </span><span class="language-bash">更换被导入文件的@import，精简CSS文件</span> pagespeed EnableFilters flatten_css_imports; pagespeed CssFlattenMaxBytes 5120;<span class="hljs-meta prompt_"># </span><span class="language-bash">启用JavaScript缩小机制</span> pagespeed EnableFilters rewrite_javascript;<span class="hljs-meta prompt_"> </span><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">###### 图片########</span></span><span class="hljs-meta prompt_"># </span><span class="language-bash">延时加载图片</span> pagespeed EnableFilters lazyload_images;<span class="hljs-meta prompt_"># </span><span class="language-bash">不加载显示区域以外的图片，下方这个是延迟加载图片，如果没有就注释掉</span>pagespeed LazyloadImagesAfterOnload off;pagespeed LazyloadImagesBlankUrl &quot;https://www.xcbtmw.com/1.gif&quot;;<span class="hljs-meta prompt_"># </span><span class="language-bash">启用图片优化机制</span>pagespeed EnableFilters recompress_images;<span class="hljs-meta prompt_"># </span><span class="language-bash">将JPEG图片转化为webp格式</span> pagespeed EnableFilters convert_jpeg_to_webp;<span class="hljs-meta prompt_"># </span><span class="language-bash">将动画Gif图片转化为动画webp格式</span> pagespeed EnableFilters convert_to_webp_animated; pagespeed EnableFilters inline_preview_images;pagespeed EnableFilters resize_mobile_images;pagespeed EnableFilters responsive_images,resize_images;pagespeed EnableFilters insert_image_dimensions;pagespeed EnableFilters resize_rendered_image_dimensions;pagespeed EnableFilters strip_image_meta_data;pagespeed EnableFilters convert_jpeg_to_webp,convert_to_webp_lossless,convert_to_webp_animated;pagespeed EnableFilters sprite_images;pagespeed EnableFilters convert_png_to_jpeg,convert_jpeg_to_webp;<span class="hljs-meta prompt_">#</span><span class="language-bash">让JS里引用的图片也加入优化</span>pagespeed InPlaceResourceOptimization on;     pagespeed EnableFilters in_place_optimize_for_browser;           <span class="hljs-meta prompt_">  </span><span class="hljs-meta prompt_"># </span><span class="language-bash">启用ngx_pagespeed 结束</span></code></pre></div><h4 id="2）网站配置"><a href="#2）网站配置" class="headerlink" title="2）网站配置"></a>2）网站配置</h4><p>打开对应网站的配置文件，在如图位置输入以下代码:</p><p><img src="https://imgs.leshans.eu.org/2024/02/b1c7a1ae629562f4576ff364d4515785.webp" alt="Pasted image 20240213003504"></p><p>网站配置代码如下：</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启用ngx_pagespeed 开始</span> location ~ &quot;.pagespeed.([a-z].)?[a-z]&#123;2&#125;.[^.]&#123;10&#125;.[^.]+&quot; &#123; add_header &quot;&quot; &quot;&quot;; &#125;location ~ &quot;^/pagespeed_static/&quot; &#123; &#125;location ~ &quot;^/ngx_pagespeed_beacon$&quot; &#123; &#125;location /ngx_pagespeed_statistics &#123; allow 127.0.0.1; deny all; &#125;location /ngx_pagespeed_global_statistics &#123; allow 127.0.0.1; deny all; &#125;location /ngx_pagespeed_message &#123; allow 127.0.0.1; deny all; &#125;location /pagespeed_console &#123; allow 127.0.0.1; deny all; &#125;location ~ ^/pagespeed_admin &#123; allow 127.0.0.1; deny all; &#125;location ~ ^/pagespeed_global_admin &#123; allow 127.0.0.1; deny all; &#125;<span class="hljs-meta prompt_"># </span><span class="language-bash">启用ngx_pagespeed 结束</span></code></pre></div><h4 id="3）注意事项"><a href="#3）注意事项" class="headerlink" title="3）注意事项"></a>3）注意事项</h4><ul><li>memcached和redis没有的就注释掉</li><li>仔细阅读注释</li></ul><h3 id="4-Ngx-pagespeed加速效果"><a href="#4-Ngx-pagespeed加速效果" class="headerlink" title="4.Ngx_pagespeed加速效果"></a>4.Ngx_pagespeed加速效果</h3><p>开启后就可以看到图片被转成了webp格式，另外CSS和JS文件地址也会被重写</p><p><img src="https://imgs.leshans.eu.org/2024/02/75dda13c3a8e74b57d6ada7ad43bbd6a.webp" alt="Pasted image 20240213003620"></p><p>然后在咱们设置的缓存文件位置处也可以看到文件</p><p><img src="https://imgs.leshans.eu.org/2024/02/e5af4ba418bd25bbe3fe9d8a1677acbb.webp" alt="Pasted image 20240213003713"></p><h3 id="5-清除Ngx-pagespeed缓存"><a href="#5-清除Ngx-pagespeed缓存" class="headerlink" title="5.清除Ngx_pagespeed缓存"></a>5.清除Ngx_pagespeed缓存</h3><p>手动删除或者命令行</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#手动删除，该目录为你在nginx设置的缓存目录</span><span class="hljs-built_in">rm</span> -fr /tmp/ngx_pagespeed_cache/*<span class="hljs-comment">#或者由pagespeed清空缓存 5秒后开始</span>sudo <span class="hljs-built_in">touch</span> /tmp/ngx_pagespeed_cache/cache.flush</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>宝塔面板</tag>
      
      <tag>webp</tag>
      
      <tag>pagespeed</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>国内访问GitHub方法-修改hosts</title>
    <link href="/posts/d86affa7.html"/>
    <url>/posts/d86affa7.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>项目地址: <a href="https://github.com/521xueweihan/GitHub520">https://github.com/521xueweihan/GitHub520</a> (推荐)</p></blockquote><h3 id="复制下面的内容"><a href="#复制下面的内容" class="headerlink" title="复制下面的内容"></a>复制下面的内容</h3><div class="code-wrapper"><pre><code class="hljs accesslog"><span class="hljs-number">20.205.243.166</span> github.com<span class="hljs-number">185.199.108.133</span> raw.githubusercontent.com<span class="hljs-number">185.199.109.133</span> raw.githubusercontent.com<span class="hljs-number">185.199.110.133</span> raw.githubusercontent.com<span class="hljs-number">185.199.111.133</span> raw.githubusercontent.com</code></pre></div><h3 id="修改-hosts-文件"><a href="#修改-hosts-文件" class="headerlink" title="修改 hosts 文件"></a>修改 hosts 文件</h3><p>Windows 系统：C:\Windows\System32\drivers\etc\hosts</p><p>修改方法，把第一步的内容复制到文本末尾：</p><h3 id="激活生效-刷新-DNS："><a href="#激活生效-刷新-DNS：" class="headerlink" title="激活生效,刷新 DNS："></a>激活生效,刷新 DNS：</h3><p>Windows：在 CMD 窗口输入：ipconfig &#x2F;flushdns</p><p>以下是一个自动化的批处理脚本，保存为bat文件它会执行你描述的操作：</p><div class="code-wrapper"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<span class="hljs-built_in">set</span> hosts_path=C:\Windows\System32\drivers\etc\hosts<span class="hljs-built_in">echo</span> 复制内容到hosts文件...<span class="hljs-built_in">echo</span> 20.205.243.166 github.com&gt;&gt;<span class="hljs-string">&quot;%hosts_path%&quot;</span><span class="hljs-built_in">echo</span> 185.199.108.133 raw.githubusercontent.com&gt;&gt;<span class="hljs-string">&quot;%hosts_path%&quot;</span><span class="hljs-built_in">echo</span> 185.199.109.133 raw.githubusercontent.com&gt;&gt;<span class="hljs-string">&quot;%hosts_path%&quot;</span><span class="hljs-built_in">echo</span> 185.199.110.133 raw.githubusercontent.com&gt;&gt;<span class="hljs-string">&quot;%hosts_path%&quot;</span><span class="hljs-built_in">echo</span> 185.199.111.133 raw.githubusercontent.com&gt;&gt;<span class="hljs-string">&quot;%hosts_path%&quot;</span><span class="hljs-built_in">echo</span> 修改hosts文件完成。<span class="hljs-built_in">echo</span> 刷新 DNS...ipconfig /flushdns<span class="hljs-built_in">echo</span> 所有操作已完成。pause</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>宝塔面板开启Nginx缓存为网站提速</title>
    <link href="/posts/5da6513e.html"/>
    <url>/posts/5da6513e.html</url>
    
    <content type="html"><![CDATA[<h3 id="fastcgi-cache介绍"><a href="#fastcgi-cache介绍" class="headerlink" title="fastcgi_cache介绍"></a>fastcgi_cache介绍</h3><p>Nginx默认自带的<code>fastcgi_cache</code>模块能把动态页面缓存起来，提高网站<strong>速度</strong>和降低服务器负载。</p><p>当有用户请求相同的页面时，Nginx可以直接返回缓存的页面，而不需要再次访问后端服务器。</p><p>这个模块可以通过简单的配置实现,还支持缓存伪静态！效果比起传统的php缓存好得太多了.</p><h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><p>来到宝塔面板后台，找到Nginx，在<code>配置修改</code>中添加以下内容：</p><div class="code-wrapper"><pre><code class="hljs bash">fastcgi_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:20m max_size=512m inactive=8h;fastcgi_cache_key <span class="hljs-string">&quot;$scheme$request_method$host$request_uri<span class="hljs-variable">$arg_id</span>&quot;</span>;fastcgi_cache_use_stale error <span class="hljs-built_in">timeout</span> updating http_500;</code></pre></div><p><img src="https://imgs.leshans.eu.org/docs/1713962543.png"></p><p>这段配置用于 Nginx 的缓存设置：</p><ul><li><code>/var/cache/nginx</code>：缓存文件存储目录。</li><li><code>levels=1:2</code>：两层目录结构。</li><li><code>keys_zone=my_cache:20m</code>：创建 20MB 内存区域 <code>my_cache</code> 存储缓存键和元数据。</li><li><code>max_size=512m</code>：最大缓存大小为 512MB，达到后会删除旧缓存。</li><li><code>inactive=8h</code>：8小时后认为缓存条目不活跃，可能被清除。</li></ul><p>赋予权限：</p><div class="code-wrapper"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chown</span> -R www-data:www-data /var/cache/nginxsudo <span class="hljs-built_in">chmod</span> -R 755 /var/cache/nginx</code></pre></div><h2 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h2><p>在宝塔后台的网站列表中，找到你的网站，点击配置文件，将以下代码添加到配置文件中去：</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">启用fastcgi_cache 开始</span>location ~ \.php$ &#123;try_files $uri =404;fastcgi_pass unix:/tmp/php-cgi-74.sock;fastcgi_index index.php;fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;include fastcgi_params;fastcgi_buffers 16 16k;fastcgi_busy_buffers_size 64k;fastcgi_buffer_size 32k;fastcgi_keep_conn on;<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">新增的缓存规则</span>add_header X-Cache &quot;$upstream_cache_status From $host&quot;;fastcgi_cache my_cache;add_header Nginx-Cache &quot;$upstream_cache_status&quot;;add_header X-Frame-Options SAMEORIGIN; # 只允许本站用 frame 来嵌套add_header X-Content-Type-Options nosniff; # 禁止嗅探文件类型add_header X-XSS-Protection &quot;1; mode=block&quot;; # XSS 保护etag on;fastcgi_cache_valid 200 301 302 6h;&#125;<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash">启用fastcgi_cache 结束</span></code></pre></div><p><img src="https://imgs.leshans.eu.org/docs/1713962694.png"></p><p>注意: 假如你用的是php7.2版本，那么把</p><p><code>fastcgi_pass unix:/tmp/php-cgi-74.sock;</code></p><p>改成</p><p><code>fastcgi_pass unix:/tmp/php-cgi-72.sock;</code>   </p><p>全部配置好之后，别忘了重载Nginx设置生效，缓存就加好了</p><h2 id="判断缓存状态"><a href="#判断缓存状态" class="headerlink" title="判断缓存状态"></a>判断缓存状态</h2><p>按 <strong>F12</strong> 访问网站首页，查看文件头，</p><blockquote><p>如果出现<code>HIT</code>则是缓存了，<br><code>BYPASS</code> 则是因设置原因未缓存，<br><code>MISS</code>即这个页面还没被缓存，新发布或刚被删除的页面，首次访问将出现这个状态，如图所示：</p></blockquote><p><img src="https://imgs.leshans.eu.org/2024/02/b7cbd594296d92cc5303079f19e96eb0.webp"></p><h2 id="清理缓存"><a href="#清理缓存" class="headerlink" title="清理缓存"></a>清理缓存</h2><p>将以下代码添加到面板定时任务即可（shell脚本）</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-comment"># Path to the nginx cache directory</span>NGINX_CACHE_PATH=<span class="hljs-string">&quot;/var/cache/nginx&quot;</span><span class="hljs-comment"># Function to clear the nginx cache</span><span class="hljs-function"><span class="hljs-title">clear_cache</span></span>() &#123;    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Clearing nginx cache...&quot;</span>    sudo <span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$NGINX_CACHE_PATH</span>/*    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Nginx cache cleared.&quot;</span>&#125;<span class="hljs-comment"># Function to reload nginx</span><span class="hljs-function"><span class="hljs-title">reload_nginx</span></span>() &#123;    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Reloading Nginx...&quot;</span>    sudo /etc/init.d/nginx reload    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Nginx reloaded.&quot;</span>&#125;<span class="hljs-comment"># Clear the cache</span>clear_cache<span class="hljs-comment"># Reload Nginx</span>reload_nginx</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>debian11更换为cloud内核</title>
    <link href="/posts/bd56dc66.html"/>
    <url>/posts/bd56dc66.html</url>
    
    <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><blockquote><p><code>Cloud</code>内核相比于普通内核，去掉一些不必要的功能依赖与参数：如声卡打印机等功能，并专门为云计算进行优化，<code>减少了内核的体积与占用</code>。</p></blockquote><h3 id="教程：-以amd64架构、debian系统为例）"><a href="#教程：-以amd64架构、debian系统为例）" class="headerlink" title="教程：(以amd64架构、debian系统为例）"></a>教程：(以amd64架构、debian系统为例）</h3><ol><li>更新package</li></ol><div class="code-wrapper"><pre><code class="hljs shell">apt update &amp;&amp; apt dist-upgrade</code></pre></div><ol start="2"><li>确认当前的内核</li></ol> <div class="code-wrapper"><pre><code class="hljs bash">dpkg -l|grep linux-image</code></pre></div><p>若显示“linux-image-******-amd64”则为普通内核</p><p>若显示” linux-image-******-cloud-amd64”则为为云优化的内核</p><ul><li>“ii” 意味着软件包已经被安装。</li><li>“ic” 意味着软件包被安装，但是由于配置问题，没有安装成功。</li></ul><p>可以删除ic软件包</p><p><strong>一键安装：</strong></p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://deb.debian.org/debian buster-backports main&quot;</span> &gt; /etc/apt/sources.list.d/buster-backports.list apt updateapt -t buster-backports install linux-image-cloud-amd64 -y</code></pre></div><p><strong>手动安装</strong></p><p>查找可用内核</p><div class="code-wrapper"><pre><code class="hljs bash">apt-cache search linux-image | grep cloud</code></pre></div><p><strong>安装Cloud内核</strong></p><p><code>apt install linux-image-*****-cloud-amd64</code></p><p><code>apt install linux-headers-*****-cloud-amd64</code></p><p><code>apt install linux-image-cloud-amd64</code></p><p><strong>删除老内核：</strong></p><div class="code-wrapper"><pre><code class="hljs bash">dpkg --get-selections | grep linuxapt autoremove --purge linux-image-5.10.0-20-amd64 linux-image-5.10.0-26-amd64 -yapt autoremoveapt autoclean</code></pre></div><p>这里的<code>linux-image-5.10.0-20-amd64与linux-image-5.10.0-26-amd64</code> 可以通过前面的命令查看</p><p><strong>更新一下 grub：</strong></p><div class="code-wrapper"><pre><code class="hljs bash">sudo update-grub</code></pre></div><p><strong>重启：</strong></p><div class="code-wrapper"><pre><code class="hljs bash">reboot</code></pre></div><p><strong>验证是否成功</strong></p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -r</code></pre></div><p>带有“cloud”字样，即成功</p><p> <strong>卸载旧内核</strong><br> <br>请注意，请在确定安装内核成功后执行  </p><p><code>apt remove linux-image-******-amd64</code>  </p><p>此处选做，目的释放硬盘空间</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BestTrace：一款非常好用的VPS回程路由测试脚本</title>
    <link href="/posts/1384f6ad.html"/>
    <url>/posts/1384f6ad.html</url>
    
    <content type="html"><![CDATA[<h2 id="一、BestTrace使用方法"><a href="#一、BestTrace使用方法" class="headerlink" title="一、BestTrace使用方法"></a>一、BestTrace使用方法</h2><p>连上VPS服务器后直接使用脚本：</p><div class="code-wrapper"><pre><code class="hljs bash">wget -qO- git.io/autobesttrace | bash</code></pre></div><p>脚本自动测试VPS到中国电信、移动、联通和教育网四网的回程路由。</p><h2 id="磁盘真实性能读写测试"><a href="#磁盘真实性能读写测试" class="headerlink" title="磁盘真实性能读写测试"></a>磁盘真实性能读写测试</h2><p>一般数据在 大于20MB&#x2F;s 为合格，大于40MB&#x2F;s 为普通，大于80MB&#x2F;s 为优秀。</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span> bs=64k count=4k <span class="hljs-keyword">if</span>=/dev/zero of=<span class="hljs-built_in">test</span> oflag=dsync</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>定时任务目录</title>
    <link href="/posts/94372532.html"/>
    <url>/posts/94372532.html</url>
    
    <content type="html"><![CDATA[<p>定时任务目录</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/var/</span>spool<span class="hljs-regexp">/cron/</span>crontabs/</code></pre></div><p>在Ubuntu中，你可以使用<code>cron</code>来设置定时任务。定时任务的配置文件通常位于<code>/etc/crontab</code>，而用户特定的定时任务可以通过使用<code>crontab</code>命令进行管理。用户的个人crontab文件通常位于<code>/var/spool/cron/crontabs/</code>目录下，文件名是相应的用户名。例如，如果用户名是<code>root</code>，那么相应的crontab文件路径可能是 <code>/var/spool/cron/crontabs/root</code></p><div class="code-wrapper"><pre><code class="hljs bash">crontab -e</code></pre></div><p>这将打开一个文本编辑器，允许你编辑用户的crontab条目。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux buffer/cache 内存占用过高的原因以及解决办法</title>
    <link href="/posts/ed2c5880.html"/>
    <url>/posts/ed2c5880.html</url>
    
    <content type="html"><![CDATA[<p>我们可以使用下面这个文件来人工触发缓存清除的操作，Linux 提供了三种清空方式：</p><ol><li><code>echo 1 &gt; /proc/sys/vm/drop_caches</code> # 仅清除页面缓存</li><li><code>echo 2 &gt; /proc/sys/vm/drop_caches</code> # 清除目录项和inode</li><li><code>echo 3 &gt; /proc/sys/vm/drop_caches</code> # 清除页面缓存、目录项以及inode</li></ol><div class="code-wrapper"><pre><code class="hljs shell">syncecho 1 &gt; /proc/sys/vm/drop_cachesecho 2 &gt; /proc/sys/vm/drop_cachesecho 3 &gt; /proc/sys/vm/drop_caches</code></pre></div><p><em><strong>但是这种放时只能在执行的当时起作用，过一段时间之后又会发现内存被占满，怎么办呢？</strong></em></p><p>一键脚本调整：</p><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/adjust.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x adjust.sh &amp;&amp; ./adjust.sh</code></pre></div><p>查看当前 <code>vm.vfs_cache_pressure</code> 的值：</p><div class="code-wrapper"><pre><code class="hljs bash">sysctl vm.vfs_cache_pressure</code></pre></div><p>重新加载 sysctl 配置文件以使更改生效</p><div class="code-wrapper"><pre><code class="hljs bash">sudo sysctl -p</code></pre></div><p>在<code>Linux 2.6</code>之后Linux将他们统一合并到了<code>Page cache</code>作为文件层的缓存。而<code>buffer</code>则被用作<code>block</code>层的缓存。<br><code>block</code>层的缓存是什么意思呢，你可以认为一个<code>buffer</code>是一个<code>physical disk block</code>在内存的代表，用来将内存中的<code>pages</code>映射为<code>disk blocks</code>，这部分被使用的内存被叫做<code>buffer</code>。</p><blockquote><p><code>buffer</code>里面的<code>pages</code>，指的是<code>Page cache</code>中的<code>pages</code>，所以，<code>buffer</code>也可以被认为<code>Page cache</code>的一部分。</p></blockquote><p><strong>或者简单来说，<code>buffer</code>负责裸设备相关的缓存，<code>cache</code>负责文件系统的缓存。</strong></p><h3 id="Buffer-的具体职责"><a href="#Buffer-的具体职责" class="headerlink" title="Buffer 的具体职责"></a>Buffer 的具体职责</h3><p>在当前的系统实现里，<code>buffer</code>主要是设计用来在系统对块设备进行读写时作为缓存来使用。这意味着对块的操作会使用<code>buffer</code>进行缓存，比如我们在格式化文件系统的时候。</p><p>但是一般情况下两个缓存系统是一起配合使用的，比如当我们对一个文件进行写操作的时候，<code>cache</code>的内容会被改变，而<code>buffer</code>则用来将<code>cache</code>的<code>page</code>标记为不同的缓冲区，并记录是哪一个缓冲区被修改了。</p><p>这样，内核在后续执行脏数据的回写（<code>writeback</code>）时，就不用将整个<code>page</code>写回，而只需要写回修改的部分即可。</p><h3 id="Cache-的具体职责"><a href="#Cache-的具体职责" class="headerlink" title="Cache 的具体职责"></a>Cache 的具体职责</h3><p><code>cache</code>主要用来作为文件系统上的文件数据的缓存来用，当进程对文件有<code>read/write</code>操作的时候。包括将文件映射到内存的系统调用<code>mmap</code>，就会用到<code>cache</code>。</p><p>因为<code>cache</code>被作为文件类型的缓存来用，所以事实上也负责了大部分的块设备文件的缓存工作。</p><h2 id="怎么回收-buff-cache？"><a href="#怎么回收-buff-cache？" class="headerlink" title="怎么回收 buff&#x2F;cache？"></a>怎么回收 buff&#x2F;cache？</h2><p>Linux内核会在内存将要耗尽的时候，自动触发内存回收的工作，以便释放出内存给急需内存的进程使用。</p><p><em><strong>但是这种回收的工作也并不是没有成本。</strong></em></p><p>理解<code>cache</code>是干什么的就知道，<code>cache</code>中存在着一部分<code>write</code>操作的数据。所以必须保证<code>cache</code>中的数据跟对应文件中的数据一致，才能对<code>cache</code>进行释放。</p><p>于是伴随着<code>cache</code>清除的行为的，一般都是系统<code>IO</code>飙高。这是因为内核要将<code>cache</code>中缓存的<code>write</code>数据进行回写。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>网站被镜像如何解决？</title>
    <link href="/posts/8593c454.html"/>
    <url>/posts/8593c454.html</url>
    
    <content type="html"><![CDATA[<p>网站被镜像如何解决？</p><p>在应对镜像网站问题时，有一种非常有效的策略，可以帮助您恢复控制。直接在网页头部添加以下代码：(替换为你的域名)</p><div class="code-wrapper"><pre><code class="hljs text">&lt;script type=&quot;text/javascript&quot;&gt;    rthost = window.location.host;    if (rthost != &quot;www.yourwebsite.com&quot;) &#123;        top.location.href = &quot;https://www.yourwebsite.com&quot;;    &#125;&lt;/script&gt;</code></pre></div><p>如果您的脚本被屏蔽，您可以考虑添加以下备用代码：</p><div class="code-wrapper"><pre><code class="hljs text">&lt;script&gt;    proxy2021 = false;&lt;/script&gt;&lt;img src=&quot;&quot; onerror=&#x27;setTimeout(function()&#123;    if (typeof(proxy2021) == &quot;undefined&quot;)&#123;        window.location.host = &quot;www.yourwebsite.com&quot;;    &#125;&#125;, 500);&#x27;&gt;</code></pre></div><p>这两段代码将使镜像网站自动重定向到您的正版网站，从而有效打击镜像网站的不当行为。</p><p>这亲测有效的方法可以帮助您更好地保护您的网站和内容免受镜像网站的侵害。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>反爬虫蜘蛛攻略：Apache/Nginx/PHP禁止某些User Agent抓取网站</title>
    <link href="/posts/ff1b763d.html"/>
    <url>/posts/ff1b763d.html</url>
    
    <content type="html"><![CDATA[<p>昨晚打开宝塔面板后台查看，上行与下行几乎到了7000KB的速度，不到半小时，就10G流量了，开始以为是被黑了？重载系统，恢复数据后还是一样。</p><p>下载一个网站监控报表插件一看，好家伙，是谷歌蜘蛛和一些不明ip在搞我其中一个网站！！！最狠的就是谷歌蜘蛛了，疯狂在爬！</p><h3 id="方法一：cloudflare-cdn-防火墙阻止"><a href="#方法一：cloudflare-cdn-防火墙阻止" class="headerlink" title="方法一：cloudflare cdn 防火墙阻止"></a>方法一：cloudflare cdn 防火墙阻止</h3><p>表达式：</p><p>(http.user_agent contains “Googlebot”) or (http.user_agent contains “SemrushBot”) or (http.user_agent contains “AhrefsBot”) or (http.user_agent contains “DotBot”)</p><p><img src="https://imgs.leshans.eu.org/2024/02/d636b703c6b703dd95cbf3140ccb61f9.webp"></p><h3 id="方法二：禁止指定UA（用户代理）"><a href="#方法二：禁止指定UA（用户代理）" class="headerlink" title="方法二：禁止指定UA（用户代理）"></a>方法二：禁止指定UA（用户代理）</h3><p>宝塔面板下使用方法如下：</p><p>1、找到文件目录 <code>/www/server/nginx/conf</code> 文件夹下面，新建一个文件<code>agent_deny.conf</code></p><p>代码如下：</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">禁止Scrapy等工具的抓取</span>if ($http_user_agent ~* (Scrapy|Curl|HttpClient)) &#123;return 403;&#125;<span class="hljs-meta prompt_">#</span><span class="language-bash">禁止指定UA及UA为空的访问</span>if ($http_user_agent ~* &quot;FeedDemon|Indy Library|Alexa Toolbar|AskTbFXTV|AhrefsBot|DotBot|CrawlDaddy|CoolpadWebkit|Java|Feedly|UniversalFeedParser|ApacheBench|Microsoft URL Control|Swiftbot|ZmEu|oBot|jaunty|Python-urllib|lightDeckReports Bot|YYSpider|DigExt|HttpClient|MJ12bot|heritrix|Bytespider|Ezooms|Googlebot|JikeSpider|SemrushBot|^$&quot; ) &#123;return 403;&#125;<span class="hljs-meta prompt_">#</span><span class="language-bash">禁止非GET|HEAD|POST方式的抓取</span>if ($request_method !~ ^(GET|HEAD|POST)$) &#123;return 403;&#125;</code></pre></div><p>2、找到网站设置里面的第7行左右 写入代码：<code>include agent_deny.conf;</code></p><p><img src="https://imgs.leshans.eu.org/2024/02/a3993c684090031dc1e9298a25f4c422.webp"></p><p>如果你网站使用火车头采集发布，使用以上代码会返回403错误，发布不了的。如果想使用火车头采集发布，请使用下面的代码：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#禁止Scrapy等工具的抓取</span><span class="hljs-keyword">if</span> (<span class="hljs-variable">$http_user_agent</span> ~* (Scrapy|Curl|HttpClient)) &#123;<span class="hljs-built_in">return</span> 403;&#125;<span class="hljs-comment">#禁止指定UA访问。UA为空的可以访问，比如火车头可以正常发布。</span><span class="hljs-keyword">if</span> (<span class="hljs-variable">$http_user_agent</span> ~ <span class="hljs-string">&quot;FeedDemon|Indy Library|Alexa Toolbar|AskTbFXTV|AhrefsBot|CrawlDaddy|CoolpadWebkit|Java|Feedly|UniversalFeedParser|ApacheBench|Microsoft URL Control|Swiftbot|ZmEu|YandexBot|jaunty|Python-urllib|lightDeckReports Bot|YYSpider|DigExt|HttpClient|MJ12bot|heritrix|Bytespider|Ezooms|Googlebot|JikeSpider|SemrushBot&quot;</span> ) &#123;<span class="hljs-built_in">return</span> 403;&#125;<span class="hljs-comment">#禁止非GET|HEAD|POST方式的抓取</span><span class="hljs-keyword">if</span> (<span class="hljs-variable">$request_method</span> !~ ^(GET|HEAD|POST)$) &#123;<span class="hljs-built_in">return</span> 403;&#125;</code></pre></div><h3 id="三、测试效果"><a href="#三、测试效果" class="headerlink" title="三、测试效果"></a>三、测试效果</h3><p>如果是vps，那非常简单，使用curl -A 模拟抓取即可，比如： 模拟谷歌蜘蛛抓取：替换为你的域名</p><div class="code-wrapper"><pre><code class="hljs bash">curl -I -A <span class="hljs-string">&#x27;Googlebot&#x27;</span> xxx.com</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">curl -I -A <span class="hljs-string">&#x27;Baiduspider&#x27;</span> xxx.com</code></pre></div><p>谷歌蜘蛛和UA为空的返回是403禁止访问标识，而百度蜘蛛则成功返回200，说明生效！</p><h3 id="四、垃圾蜘蛛IP段"><a href="#四、垃圾蜘蛛IP段" class="headerlink" title="四、垃圾蜘蛛IP段"></a>四、垃圾蜘蛛IP段</h3><p>直接屏蔽：谷歌蜘蛛</p><div class="code-wrapper"><pre><code class="hljs bash">66.249.79.0/24</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">66.249.68.0/24</code></pre></div><p>屏蔽AhrefsBot蜘蛛：</p><div class="code-wrapper"><pre><code class="hljs accesslog"><span class="hljs-number">51.222.253.0</span>/<span class="hljs-number">24</span></code></pre></div><p>不明的IP：</p><div class="code-wrapper"><pre><code class="hljs bash">39.173.116.0/24</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">85.208.96.0/24</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">185.191.171.0/24</code></pre></div><p>居然还有华为蜘蛛！！！是否屏蔽思考中。。。</p><div class="code-wrapper"><pre><code class="hljs bash">114.119.130.102</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">114.119.135.32</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">114.119.0.0/16</code></pre></div><blockquote><p>robots.txt 屏蔽垃圾蜘蛛</p></blockquote><div class="code-wrapper"><pre><code class="hljs bash">User-agent: GooglebotDisallow: /User-agent: MJ12botDisallow: /User-agent: SemrushBotDisallow: /User-agent: SemrushBot-SADisallow: /User-agent: SemrushBot-BADisallow: /User-agent: SemrushBot-SIDisallow: /User-agent: SemrushBot-SWADisallow: /User-agent: SemrushBot-CTDisallow: /User-agent: SemrushBot-BMDisallow: /User-agent: SemrushBot-SEOABDisallow: /user-agent: AhrefsBotDisallow: /User-agent: DotBotDisallow: /User-agent: UptimebotDisallow: /User-agent: MegaIndex.ruDisallow: /User-agent: ZoominfoBotDisallow: /User-agent: Mail.RuDisallow: /User-agent: BLEXBotDisallow: /User-agent: ExtLinksBotDisallow: /User-agent: aiHitBotDisallow: /User-agent: ResearchscanDisallow: /User-agent: DnyzBotDisallow: /User-agent: spbotDisallow: /User-agent: YandexBotDisallow: /User-agent: SemrushBotDisallow: /User-agent: SemrushBot-SADisallow: /User-agent: SemrushBot-BADisallow: /User-agent: SemrushBot-SIDisallow: /User-agent: SemrushBot-SWADisallow: /User-agent: SemrushBot-CTDisallow: /User-agent: SemrushBot-BMDisallow: /User-agent: SemrushBot-SEOABDisallow: /User-agent: *Disallow:</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>蜘蛛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>宝塔面板7.7.0一键安装-优化-美化</title>
    <link href="/posts/fbdfc6c1.html"/>
    <url>/posts/fbdfc6c1.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>仅适用于ubuntu与 debian</p></blockquote><p>安装依赖：</p><div class="code-wrapper"><pre><code class="hljs bash">apt update -y</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">apt install -y curl</code></pre></div><p>一键脚本：</p><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/baota.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x baota.sh &amp;&amp; ./baota.sh</code></pre></div><p>完整代码：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-comment"># 安装宝塔面板 7.7</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;安装宝塔面板 7.7&quot;</span>curl -sSO https://raw.githubusercontent.com/woniu336/btpanel-v7.7.0/main/install/install_panel.sh &amp;&amp; bash install_panel.sh<span class="hljs-comment"># 一键破解</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;一键破解&quot;</span>curl -sSO https://raw.githubusercontent.com/woniu336/open_shell/main/one_key_happy.sh &amp;&amp; bash one_key_happy.sh<span class="hljs-comment"># 美化主题</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;美化主题&quot;</span>wget -O btpanel_theme.zip https://raw.githubusercontent.com/woniu336/open_shell/main/bt/BTPanel_theme_linux_770.zip &amp;&amp; unzip -o btpanel_theme.zip -d /www/server/ &amp;&amp; /etc/init.d/bt restart<span class="hljs-comment"># 去除网站默认文件</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;去除网站默认文件&quot;</span>sudo sed -i <span class="hljs-string">&quot;\|htaccess = self.sitePath+&#x27;/\.htaccess&#x27;|, \|public.ExecShell(&#x27;chown -R www:www &#x27; + htaccess)|d&quot;</span> /www/server/panel/class/panelSite.pysudo sed -i <span class="hljs-string">&quot;\|index = self.sitePath+&#x27;/index.html&#x27;|, \|public.ExecShell(&#x27;chown -R www:www &#x27; + index)|d&quot;</span> /www/server/panel/class/panelSite.pysudo sed -i <span class="hljs-string">&quot;\|doc404 = self.sitePath+&#x27;/404.html&#x27;|, \|public.ExecShell(&#x27;chown -R www:www &#x27; + doc404)|d&quot;</span> /www/server/panel/class/panelSite.py<span class="hljs-comment"># 关闭未绑定域名提示</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;关闭未绑定域名提示&quot;</span>sed -i <span class="hljs-string">&quot;s/root \/www\/server\/nginx\/html/return 400/&quot;</span> /www/server/panel/class/panelSite.pysed -i <span class="hljs-string">&quot;s/root \/www\/server\/nginx\/html/return 400/&quot;</span> /www/server/panel/vhost/nginx/0.default.conf<span class="hljs-comment"># 关闭安全入口提示</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;关闭安全入口提示&quot;</span>sed -i <span class="hljs-string">&quot;s/return render_template(&#x27;autherr.html&#x27;)/return abort(404)/&quot;</span> /www/server/panel/BTPanel/__init__.py<span class="hljs-comment"># 去除消息推送</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;去除消息推送&quot;</span>sed -i <span class="hljs-string">&quot;/p = threading.Thread(target=check_panel_msg)/, /p.start()/d&quot;</span> /www/server/panel/task.pysed -i <span class="hljs-string">&#x27;/\&quot;check_panel_msg\&quot;:/d&#x27;</span> /www/server/panel/task.py<span class="hljs-comment"># 去除文件校验</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;去除文件校验&quot;</span>sed -i <span class="hljs-string">&quot;/p = threading.Thread(target=check_files_panel)/, /p.start()/d&quot;</span> /www/server/panel/task.pysed -i <span class="hljs-string">&#x27;/\&quot;check_files_panel\&quot;:/d&#x27;</span> /www/server/panel/task.py<span class="hljs-built_in">rm</span> -f /www/server/panel/script/check_files.py<span class="hljs-comment"># 去除云端验证</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;去除云端验证&quot;</span>sed -i <span class="hljs-string">&quot;/p = threading.Thread(target=update_software_list)/, /p.start()/d&quot;</span> /www/server/panel/task.pysed -i <span class="hljs-string">&#x27;/\&quot;update_software_list\&quot;:/d&#x27;</span> /www/server/panel/task.pysed -i <span class="hljs-string">&#x27;/self.get_cloud_list_status/d&#x27;</span> /www/server/panel/class/panelPlugin.pysed -i <span class="hljs-string">&#x27;/PluginLoader.daemon_task()/d&#x27;</span> /www/server/panel/task.py<span class="hljs-comment"># 关闭活动推荐与在线客服</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;关闭活动推荐与在线客服&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;True&quot;</span> &gt; /www/server/panel/data/not_recommend.pl<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;True&quot;</span> &gt; /www/server/panel/data/not_workorder.pl<span class="hljs-comment"># 关闭首页软件推荐与广告</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;关闭首页软件推荐与广告&quot;</span>sed -i <span class="hljs-string">&#x27;/def get_pay_type(self,get):/a \ \ \ \ \ \ \ \ return [];&#x27;</span> /www/server/panel/class/ajax.py<span class="hljs-comment"># 关闭拉黑检测与提示</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;关闭拉黑检测与提示&quot;</span>sed -i <span class="hljs-string">&#x27;/self._check_url/d&#x27;</span> /www/server/panel/class/panelPlugin.py<span class="hljs-comment"># 关闭面板日志与绑定域名上报</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;关闭面板日志与绑定域名上报&quot;</span>sed -i <span class="hljs-string">&quot;/^logs_analysis()/d&quot;</span> /www/server/panel/script/site_task.pysed -i <span class="hljs-string">&quot;s/run_thread(cloud_check_domain,(domain,))/return/&quot;</span> /www/server/panel/class/public.py<span class="hljs-comment"># 关闭面板强制更新</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;关闭面板强制更新&quot;</span>sed -i <span class="hljs-string">&quot;/#是否执行升级程序/a \ \ \ \ \ \ \ \ \ \ \ \ updateInfo[\&#x27;force\&#x27;] = False;&quot;</span> /www/server/panel/class/ajax.py<span class="hljs-built_in">rm</span> -f /www/server/panel/data/autoUpdate.pl<span class="hljs-comment"># 关闭自动更新软件列表</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;关闭自动更新软件列表&quot;</span>sed -i <span class="hljs-string">&quot;/plugin_timeout = 86400/d&quot;</span> /www/server/panel/class/public.pysed -i <span class="hljs-string">&quot;/list_body = None/a \ \ \ \ \plugin_timeout = 0;&quot;</span> /www/server/panel/class/public.py<span class="hljs-comment"># 去后门</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;去后门&quot;</span>sudo <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; /www/server/panel/script/site_task.pysudo chattr +i /www/server/panel/script/site_task.pysudo <span class="hljs-built_in">rm</span> -rf /www/server/panel/logs/request/*sudo chattr +i -R /www/server/panel/logs/request<span class="hljs-comment"># 重启面板</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;重启面板&quot;</span>/etc/init.d/bt restart</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>宝塔面板-美化主题</title>
    <link href="/posts/2cec5a3c.html"/>
    <url>/posts/2cec5a3c.html</url>
    
    <content type="html"><![CDATA[<p>宝塔面板都是自己看的，一般不太需要使用模板。<br>但时间久了，就想换换风格，找了好多基本都是改背景图片那种。<br>也找到几个满意的无奈只支持旧版本，要么就是收费的。<br>考虑到服务器安全，方便审计代码，只修改了css、js文件，打包时只打包了改过的文件。<br>技术精力有限，有些细节问题未处理，后续慢慢更新吧。<br>目前linux、windows、aapanel的常用版本全都制作了，以方便用户使用。</p><blockquote><p>最后还需要手动清理浏览器缓存</p></blockquote><p><img src="https://imgs.leshans.eu.org/2024/02/814dc43e7c6cdf4e7057651e0d1a5947.webp"></p><p>宝塔linux面板7.9.10主题</p><div class="code-wrapper"><pre><code class="hljs bash">wget -O btpanel_theme.zip https://raw.githubusercontent.com/woniu336/open_shell/main/bt/BTPanel_theme_linux_7910.zip &amp;&amp; unzip -o btpanel_theme.zip -d /www/server/ &amp;&amp; /etc/init.d/bt restart</code></pre></div><p>宝塔linux面板7.9.9主题</p><div class="code-wrapper"><pre><code class="hljs bash">wget -O btpanel_theme.zip https://raw.githubusercontent.com/woniu336/open_shell/main/bt/BTPanel_theme_linux_799.zip &amp;&amp; unzip -o btpanel_theme.zip -d /www/server/ &amp;&amp; /etc/init.d/bt restart</code></pre></div><p>宝塔linux面板7.9.8主题</p><div class="code-wrapper"><pre><code class="hljs bash">wget -O btpanel_theme.zip https://raw.githubusercontent.com/woniu336/open_shell/main/bt/BTPanel_theme_linux_798.zip &amp;&amp; unzip -o btpanel_theme.zip -d /www/server/ &amp;&amp; /etc/init.d/bt restart</code></pre></div><p>宝塔linux面板7.7.0主题</p><div class="code-wrapper"><pre><code class="hljs bash">wget -O btpanel_theme.zip https://raw.githubusercontent.com/woniu336/open_shell/main/bt/BTPanel_theme_linux_770.zip &amp;&amp; unzip -o btpanel_theme.zip -d /www/server/ &amp;&amp; /etc/init.d/bt restart</code></pre></div><p>宝塔linux面板7.6.0主题</p><div class="code-wrapper"><pre><code class="hljs bash">wget -O btpanel_theme.zip https://raw.githubusercontent.com/woniu336/open_shell/main/bt/BTPanel_theme_linux_760.zip &amp;&amp; unzip -o btpanel_theme.zip -d /www/server/ &amp;&amp; /etc/init.d/bt restart</code></pre></div><p>宝塔海外aapanel6.8.27版主题</p><div class="code-wrapper"><pre><code class="hljs bash">wget -O btpanel_theme.zip https://raw.githubusercontent.com/woniu336/open_shell/main/bt/BTPanel_theme_aapanel_6827.zip &amp;&amp; unzip -o btpanel_theme.zip -d /www/server/ &amp;&amp; /etc/init.d/bt restart</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>宝塔面板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>宝塔Linux面板优化教程</title>
    <link href="/posts/c35dcc49.html"/>
    <url>/posts/c35dcc49.html</url>
    
    <content type="html"><![CDATA[<h3 id="教程说明"><a href="#教程说明" class="headerlink" title="教程说明"></a>教程说明</h3><p>本教程可以对宝塔部分文件功能进行优化处理，如果出错可以使用修复更新面板的命令恢复文件。</p><h3 id="去除网站默认文件"><a href="#去除网站默认文件" class="headerlink" title="去除网站默认文件"></a>去除网站默认文件</h3><div class="code-wrapper"><pre><code class="hljs shell-session">sudo sed -i &quot;\|htaccess = self.sitePath+&#x27;/\.htaccess&#x27;|, \|public.ExecShell(&#x27;chown -R www:www &#x27; + htaccess)|d&quot; /www/server/panel/class/panelSite.pysudo sed -i &quot;\|index = self.sitePath+&#x27;/index.html&#x27;|, \|public.ExecShell(&#x27;chown -R www:www &#x27; + index)|d&quot; /www/server/panel/class/panelSite.pysudo sed -i &quot;\|doc404 = self.sitePath+&#x27;/404.html&#x27;|, \|public.ExecShell(&#x27;chown -R www:www &#x27; + doc404)|d&quot; /www/server/panel/class/panelSite.py</code></pre></div><h3 id="关闭未绑定域名提示"><a href="#关闭未绑定域名提示" class="headerlink" title="关闭未绑定域名提示"></a>关闭未绑定域名提示</h3><div class="code-wrapper"><pre><code class="hljs shell-session">sed -i &quot;s/root \/www\/server\/nginx\/html/return 400/&quot; /www/server/panel/class/panelSite.pysed -i &quot;s/root \/www\/server\/nginx\/html/return 400/&quot; /www/server/panel/vhost/nginx/0.default.conf</code></pre></div><h3 id="关闭安全入口提示"><a href="#关闭安全入口提示" class="headerlink" title="关闭安全入口提示"></a>关闭安全入口提示</h3><div class="code-wrapper"><pre><code class="hljs shell-session">sed -i &quot;s/return render_template(&#x27;autherr.html&#x27;)/return abort(404)/&quot; /www/server/panel/BTPanel/__init__.py</code></pre></div><h3 id="去除消息推送"><a href="#去除消息推送" class="headerlink" title="去除消息推送"></a>去除消息推送</h3><div class="code-wrapper"><pre><code class="hljs shell-session">#目前还不清楚具体功能猜测广告，删掉也不影响。sed -i &quot;/p = threading.Thread(target=check_panel_msg)/, /p.start()/d&quot; /www/server/panel/task.pysed -i &#x27;/\&quot;check_panel_msg\&quot;:/d&#x27; /www/server/panel/task.py</code></pre></div><h3 id="去除文件校验"><a href="#去除文件校验" class="headerlink" title="去除文件校验"></a>去除文件校验</h3><div class="code-wrapper"><pre><code class="hljs shell-session">#这个功能会每隔10分钟执行一次，用途是获取新面板文件替换本地旧面板文件sed -i &quot;/p = threading.Thread(target=check_files_panel)/, /p.start()/d&quot; /www/server/panel/task.pysed -i &#x27;/\&quot;check_files_panel\&quot;:/d&#x27; /www/server/panel/task.py#删除接口文件防止其他加密文件调用（可能会改为内置）rm -f /www/server/panel/script/check_files.py</code></pre></div><h3 id="去除云端验证"><a href="#去除云端验证" class="headerlink" title="去除云端验证"></a>去除云端验证</h3><div class="code-wrapper"><pre><code class="hljs shell-session">sed -i &quot;/p = threading.Thread(target=update_software_list)/, /p.start()/d&quot; /www/server/panel/task.pysed -i &#x27;/\&quot;update_software_list\&quot;:/d&#x27; /www/server/panel/task.pysed -i &#x27;/self.get_cloud_list_status/d&#x27; /www/server/panel/class/panelPlugin.pysed -i &#x27;/PluginLoader.daemon_task()/d&#x27; /www/server/panel/task.py#sed -i &#x27;/PluginLoader.daemon_panel()/d&#x27; /www/server/panel/task.py</code></pre></div><h3 id="关闭活动推荐与在线客服"><a href="#关闭活动推荐与在线客服" class="headerlink" title="关闭活动推荐与在线客服"></a>关闭活动推荐与在线客服</h3><div class="code-wrapper"><pre><code class="hljs shell-session">echo &quot;True&quot; &gt; /www/server/panel/data/not_recommend.plecho &quot;True&quot; &gt; /www/server/panel/data/not_workorder.pl</code></pre></div><h3 id="关闭首页软件推荐与广告"><a href="#关闭首页软件推荐与广告" class="headerlink" title="关闭首页软件推荐与广告"></a>关闭首页软件推荐与广告</h3><div class="code-wrapper"><pre><code class="hljs shell-session">sed -i &#x27;/def get_pay_type(self,get):/a \ \ \ \ \ \ \ \ return [];&#x27; /www/server/panel/class/ajax.py</code></pre></div><h3 id="关闭拉黑检测与提示"><a href="#关闭拉黑检测与提示" class="headerlink" title="关闭拉黑检测与提示"></a>关闭拉黑检测与提示</h3><div class="code-wrapper"><pre><code class="hljs shell-session">#每隔10分钟执行一次，用于检测是不是破解版，该命令直接删除链接，使返回为空，输出False#该接口返回False 与True均不影响面板，返回True后续代码还会对返回的其他字段数据做处理。#直接返回False类似于无法访问宝塔的接口，因此不会执行后面的一大堆代码。#锁面板我记得是接口直接返回文本，然后代码输出文本提示锁面板。sed -i &#x27;/self._check_url/d&#x27; /www/server/panel/class/panelPlugin.py</code></pre></div><h3 id="关闭面板日志与绑定域名上报"><a href="#关闭面板日志与绑定域名上报" class="headerlink" title="关闭面板日志与绑定域名上报"></a>关闭面板日志与绑定域名上报</h3><div class="code-wrapper"><pre><code class="hljs shell-session">sed -i &quot;/^logs_analysis()/d&quot; /www/server/panel/script/site_task.pysed -i &quot;s/run_thread(cloud_check_domain,(domain,))/return/&quot; /www/server/panel/class/public.py</code></pre></div><h3 id="关闭面板强制更新"><a href="#关闭面板强制更新" class="headerlink" title="关闭面板强制更新"></a>关闭面板强制更新</h3><div class="code-wrapper"><pre><code class="hljs shell-session">#宝塔接口返回force = 1的时候会强制更新你的面板 7.7.0版本的用户推荐处理一下sed -i &quot;/#是否执行升级程序/a \ \ \ \ \ \ \ \ \ \ \ \ updateInfo[\&#x27;force\&#x27;] = False;&quot; /www/server/panel/class/ajax.pyrm -f /www/server/panel/data/autoUpdate.pl</code></pre></div><h3 id="关闭自动更新软件列表"><a href="#关闭自动更新软件列表" class="headerlink" title="关闭自动更新软件列表"></a>关闭自动更新软件列表</h3><div class="code-wrapper"><pre><code class="hljs shell-session">#宝塔调用get_plugin_bin公共函数判断本地列表文件是否过期，这里设置为0时强制输出本地文件#点击更新软件列表会绕过过期判断，因此并不会影响到手动更新。sed -i &quot;/plugin_timeout = 86400/d&quot; /www/server/panel/class/public.pysed -i &quot;/list_body = None/a \ \ \ \ \plugin_timeout = 0;&quot; /www/server/panel/class/public.py</code></pre></div><h3 id="去除计算验证（不推荐安装，会导致一键迁移不成功）"><a href="#去除计算验证（不推荐安装，会导致一键迁移不成功）" class="headerlink" title="去除计算验证（不推荐安装，会导致一键迁移不成功）"></a>去除计算验证（不推荐安装，会导致一键迁移不成功）</h3><div class="code-wrapper"><pre><code class="hljs shell-session">sed -i &#x27;/&#123;% block scripts %&#125; &#123;% endblock %&#125;/a &lt;script src=&quot;/static/bt.js&quot;&gt;&lt;/script&gt;&#x27; /www/server/panel/BTPanel/templates/default/layout.html#7.7.0面板以及一下版本执行这个wget http://f.cccyun.cc/bt/bt.js -O /www/server/panel/BTPanel/static/bt.js#7.8.0面板以及以上版本执行这个wget http://f.cccyun.cc/bt/bt_new.js -O /www/server/panel/BTPanel/static/bt.js</code></pre></div><h3 id="最后重启面板-以及清理浏览器缓存即可生效"><a href="#最后重启面板-以及清理浏览器缓存即可生效" class="headerlink" title="最后重启面板 以及清理浏览器缓存即可生效"></a>最后重启面板 以及清理浏览器缓存即可生效</h3><div class="code-wrapper"><pre><code class="hljs shell-session">#重启面板命令/etc/init.d/bt restart</code></pre></div><h3 id="如需要恢复使用以下命令，或面板内修复面板"><a href="#如需要恢复使用以下命令，或面板内修复面板" class="headerlink" title="如需要恢复使用以下命令，或面板内修复面板"></a>如需要恢复使用以下命令，或面板内修复面板</h3><div class="code-wrapper"><pre><code class="hljs shell-session">curl https://download.bt.cn/install/update_panel.sh|bash</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>简单一招提升nginx服务器性能</title>
    <link href="/posts/6ad2923b.html"/>
    <url>/posts/6ad2923b.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>当你服务器安装了nginx（推荐1.20版本以上）默认开启了gzip动态压缩，但没有开启静态压缩</p></blockquote><p>一句话总结就是如何开启<code>静态压缩</code>！！！</p><h2 id="为什么要开启静态压缩？"><a href="#为什么要开启静态压缩？" class="headerlink" title="为什么要开启静态压缩？"></a>为什么要开启静态压缩？</h2><p>先看一下gzip配置图：</p><p><img src="https://imgs.leshans.eu.org/2024/02/b43fb2cde7fb05f6b8ffbef048b3476b.webp"></p><p>默认是没有 <code>gzip_static on; </code></p><p><code>gzip_static on;</code> 就是开启静态压缩的意思，</p><h2 id="压缩模式"><a href="#压缩模式" class="headerlink" title="压缩模式"></a>压缩模式</h2><blockquote><p>一般来说， <code>Nginx</code>的 <code>gzip</code>分为两种模式：</p><ol><li>动态压缩</li><li>静态压缩</li></ol></blockquote><h3 id="动态压缩"><a href="#动态压缩" class="headerlink" title="动态压缩"></a>动态压缩</h3><p>动态压缩是指 <code>Nginx</code>服务器在发送前端产物时，消耗自身的资源进行实时压缩，这样即便产物中不存在 <code>.gz</code>结尾的文件，浏览器端也能拿到 <code>gzip</code>格式的前端产物。</p><h3 id="静态压缩"><a href="#静态压缩" class="headerlink" title="静态压缩"></a>静态压缩</h3><p>静态压缩会直接将产物中预先压缩过的 <code>.gz</code>文件发送给浏览器，而不再实时压缩文件，如果找不到 <code>.gz</code>文件，将会使用对应的原始文件。</p><blockquote><p>一句话总结就是：动态压缩消耗服务器资源，而静态压缩提前将压缩文件发送给浏览器</p></blockquote><h2 id="教程开始"><a href="#教程开始" class="headerlink" title="教程开始"></a>教程开始</h2><p>一：有个前提条件，要保证 <code>Nginx</code>存在 <code>ngx_http_gzip_static_module</code>模块，这个模块默认是开启的。</p><p>可以使用下面指令查看是否已经激活该模块：</p><div class="code-wrapper"><pre><code class="hljs bash">nginx -V 2&gt;&amp;1| grep -o http_gzip_static_module</code></pre></div><p>输出结果：</p><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">http_gzip_static_module</span></code></pre></div><p>说明已经开启。</p><p>二：然后打开你的网站目录，找到需要压缩的js和css文件，开启静态压缩，需要提前将文件压缩好，这里我提供一键压缩命令：</p><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/gzip.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x gzip.sh &amp;&amp; ./gzip.sh</code></pre></div><p>输入你要压缩的目录，然后在nginx配置文件里的 <code>gzip on;</code> 下面一行添加</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">gzip_static</span> <span class="hljs-literal">on</span>;</code></pre></div><p>重载和重启nginx生效，</p><p><img src="https://imgs.leshans.eu.org/2024/02/039d680b4b56bd32bed12854dfdde6ef.webp"></p><p><img src="https://imgs.leshans.eu.org/2024/02/b43fb2cde7fb05f6b8ffbef048b3476b.webp"></p><h2 id="检查是否生效"><a href="#检查是否生效" class="headerlink" title="检查是否生效"></a>检查是否生效</h2><p>Etag是没有<code>w/</code>符号的就是静态压缩</p><p><img src="https://imgs.leshans.eu.org/2024/02/553091e27b866fab6c160e3121d6ab6b.webp"></p><h3 id="动态压缩：有w-符号"><a href="#动态压缩：有w-符号" class="headerlink" title="动态压缩：有w&#x2F;符号"></a>动态压缩：有w&#x2F;符号</h3><p><img src="https://imgs.leshans.eu.org/2024/02/6e815fa8e21efb7be915e3d397b9beae.webp"></p>]]></content>
    
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网站建设优化</title>
    <link href="/posts/35c60706.html"/>
    <url>/posts/35c60706.html</url>
    
    <content type="html"><![CDATA[<h3 id="1-MySQL-5-7内存优化"><a href="#1-MySQL-5-7内存优化" class="headerlink" title="1.MySQL 5.7内存优化:"></a>1.MySQL 5.7内存优化:</h3><div class="code-wrapper"><pre><code class="hljs bash">performance_schema_max_table_instances=400  table_definition_cache=400    performance_schema=off  innodb_buffer_pool_chunk_size=64M    innodb_buffer_pool_size=64M</code></pre></div><h3 id="2-bbr"><a href="#2-bbr" class="headerlink" title="2.bbr:"></a>2.bbr:</h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.core.default_qdisc=fq&quot;</span>  &gt;&gt;  /etc/sysctl.conf<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.ipv4.tcp_congestion_control=bbr&quot;</span>  &gt;&gt;  /etc/sysctl.confsysctl -plsmod | grep bbr</code></pre></div><h3 id="3-swap的调整："><a href="#3-swap的调整：" class="headerlink" title="3.swap的调整："></a>3.swap的调整：</h3><p>临时调整vm.swappiness参数为5</p><div class="code-wrapper"><pre><code class="hljs bash">sudo sysctl vm.swappiness=5</code></pre></div><p>永久调整 vm.swappiness参数为1（优先使用物理内存，迫不得已使用swap）</p><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/vm.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x vm.sh &amp;&amp; ./vm.sh</code></pre></div><p>禁用：</p><div class="code-wrapper"><pre><code class="hljs bash">sudo swapoff -a</code></pre></div><h3 id="4-一键DD："><a href="#4-一键DD：" class="headerlink" title="4.一键DD："></a>4.一键DD：</h3><p>推荐萌咖脚本</p><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/vpsnew.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x vpsnew.sh &amp;&amp; ./vpsnew.sh</code></pre></div><h3 id="5-推荐脚本"><a href="#5-推荐脚本" class="headerlink" title="5.推荐脚本"></a>5.推荐脚本</h3><p>先安装依赖：</p><div class="code-wrapper"><pre><code class="hljs bash">apt update -y</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">apt install -y curl</code></pre></div><p>自用：</p><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/tool.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x tool.sh &amp;&amp; ./tool.sh</code></pre></div><p>来自科技lion：</p><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://raw.githubusercontent.com/kejilion/sh/main/kejilion.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x kejilion.sh &amp;&amp; ./kejilion.sh</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>建站环境的选择和调优-网站篇</title>
    <link href="/posts/e69ae760.html"/>
    <url>/posts/e69ae760.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>建站选择ubuntu20.04，不推荐debian，因为在生产环境中会涉及方方面面，ubuntu在复杂环境中是具备完善体制的，debian通常是高手使用，因为出问题了，他们知道怎么解决，普通用户推荐ubuntu，说人话就是，ubuntu不容易出错！</p></blockquote><blockquote><p>建站面板推荐宝塔，nginx1.20.2、mysql5.7、php7.4的最佳组合，nginx1.20之后的版本对ssl有优化，根据自己的情况</p></blockquote><p>系统重装：推荐萌咖脚本</p><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/vpsnew.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x vpsnew.sh &amp;&amp; ./vpsnew.sh</code></pre></div><p>mysql5.7内存大小优化：</p><div class="code-wrapper"><pre><code class="hljs bash">performance_schema_max_table_instances=400  table_definition_cache=400    performance_schema=off  innodb_buffer_pool_chunk_size=64M    innodb_buffer_pool_size=64M</code></pre></div><p>bbr:</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.core.default_qdisc=fq&quot;</span>  &gt;&gt;  /etc/sysctl.conf<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.ipv4.tcp_congestion_control=bbr&quot;</span>  &gt;&gt;  /etc/sysctl.confsysctl -plsmod | grep bbr</code></pre></div><p>swap的调整：内存大的话请关闭，swap和内存不是一个级别的，如果swap都能替内存干活了，要内存干啥！这东西只是内存不足时应急用的！会拖累性能，很多教程没提到这一点。</p><p>临时调整vm.swappiness参数为5</p><div class="code-wrapper"><pre><code class="hljs bash">sudo sysctl vm.swappiness=5</code></pre></div><p>永久调整 vm.swappiness参数为1（优先使用物理内存，迫不得已使用swap）</p><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/vm.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x vm.sh &amp;&amp; ./vm.sh</code></pre></div><p>禁用：</p><div class="code-wrapper"><pre><code class="hljs bash">sudo swapoff -a</code></pre></div><p>服务器的安全：</p><p>禁ping、改ssh端口、或者可以上雷池waf社区版，CF，。。。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>证书acme与rclone的操作记录</title>
    <link href="/posts/97ff04d8.html"/>
    <url>/posts/97ff04d8.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>基于ubuntu20.04</p></blockquote><h3 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h3><p>安装acme之后会自动续签，不用做其他操作，一条代码安装</p><div class="code-wrapper"><pre><code class="hljs bash">curl https://get.acme.sh | sh -s email=你的邮箱</code></pre></div><h3 id="rclone"><a href="#rclone" class="headerlink" title="rclone"></a>rclone</h3><p>安装之后，在编辑rclone.conf配置</p><div class="code-wrapper"><pre><code class="hljs bash">curl https://rclone.org/install.sh | bash<span class="hljs-built_in">mkdir</span> -p /root/.config/rclone/<span class="hljs-built_in">touch</span> /root/.config/rclone/rclone.conf</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>海洋cms新版伪静态规则</title>
    <link href="/posts/97387beb.html"/>
    <url>/posts/97387beb.html</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs bash">location / &#123;rewrite ^/type/(.+?)\.html$ /list/index.php?<span class="hljs-variable">$1</span> last;rewrite ^/video/(.+?)\.html$ /detail/index.php?<span class="hljs-variable">$1</span> last;rewrite ^/play/([0-9]+)-([0-9]+)-([0-9]+)\.html$ /video/index.php?<span class="hljs-variable">$1</span>-<span class="hljs-variable">$2</span>-<span class="hljs-variable">$3</span> last;rewrite ^/topic/index(.+?)\.html$ /topic/index.php?<span class="hljs-variable">$1</span> last;rewrite ^/topic/index\.html$ /topic/index.php?<span class="hljs-variable">$1</span> last;rewrite ^/topiclist/(.+?).html$ /topiclist/index.php?<span class="hljs-variable">$1</span> last;rewrite ^/index\.html$ index.php permanent;rewrite ^/news/index\.html$ /news/index.php?<span class="hljs-variable">$1</span> last;rewrite ^/html/part/index(.+?)\.html$ /articlelist/index.php?<span class="hljs-variable">$1</span> last;rewrite ^/html/article/index(.+?)\.html$ /article/index.php?<span class="hljs-variable">$1</span> last;&#125;</code></pre></div><p><img src="https://imgs.leshans.eu.org/2024/01/3ab9f21f9bbc1fd42f979dc814fedd15.webp"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>cloudflare R2作为图床的管理和同步</title>
    <link href="/posts/cd1fe453.html"/>
    <url>/posts/cd1fe453.html</url>
    
    <content type="html"><![CDATA[<p><img src="https://imgs.leshans.eu.org/2024/01/cf5659f258b6ee549a2b27829abfe725.webp"></p><blockquote><p>因为我把r2当图床，但是大量图片没有经过压缩处理，浪费带宽资源，所以有了这篇记录，</p><p>大致意思就是把r2的图片同步到电脑上，使用压缩工具批量压缩处理之后，在同步到r2</p><p>为什么不使用linux去搞，因为繁琐问题多，不稳定</p></blockquote><p>1：下载rclone: <a href="https://lzui.lanzv.com/iE6SN1mn693a">https://lzui.lanzv.com/iE6SN1mn693a</a></p><p>先创建存储桶，例如<code>imgs</code>是我的存储桶名称</p><p>2：把<code>rclone-v1.63.0-windows-amd64.zip</code>解压到D盘，进入目录，在<code>rclone.conf</code>文件配置r2，</p><p>只需要配置 <code>access_key_id，secret_access_key，endpoint</code>三个参数即可</p><p><img src="https://imgs.leshans.eu.org/2024/01/4d6e01dc7b2e47247f2138945ddabc82.webp"></p><p>3：新建文件，写入代码，将后缀改为<code>bat</code>（双击运行）</p><div class="code-wrapper"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<span class="hljs-built_in">cd</span> /d D:\rclone-v1.63.0-windows-amd64rclone <span class="hljs-built_in">sync</span> r2:imgs\2024 C:\Users\Administrator\Desktop\imgs\2024 --ignore-existing -u -v -P --transfers=20 --ignore-errors --buffer-size=128M --check-first --checkers=10 --drive-acknowledge-abusepause</code></pre></div><p>这条代码的意思是：</p><p>把我的<code>imgs存储桶</code>下的<code>2024</code>文件夹同步到</p><p>C:\Users\Administrator\Desktop\imgs\2024 目录，根据你的情况去修改目录</p><blockquote><p>rclone sync: 同步的意思，也可以把sync改成<code>copy</code></p><p>r2:imgs  <code> imgs</code>是我的存储同名称，r2不要改</p><p>D:\rclone-v1.63.0-windows-amd64 是rclone所在目录</p><p>–drive-acknowledge-abuse 是针对谷歌网盘，可去掉，因为谷歌容易把文件当敏感资源不给下载甚至报毒 谷歌的教程博客有</p></blockquote><p>反过来同步就是：本地同步到r2</p><div class="code-wrapper"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<span class="hljs-built_in">cd</span> /d D:\rclone-v1.63.0-windows-amd64rclone <span class="hljs-built_in">sync</span> C:\Users\Administrator\Desktop\imgs\2024 r2:imgs\2024 --ignore-existing -u -v -P --transfers=20 --ignore-errors --buffer-size=128M --check-first --checkers=10 --drive-acknowledge-abusepause</code></pre></div><p>图片批量压缩工具：</p><p>项目：<a href="https://github.com/meowtec/Imagine">https://github.com/meowtec/Imagine</a></p><p>下载地址：<a href="https://lzui.lanzv.com/i9Y6U1mn69wj">https://lzui.lanzv.com/i9Y6U1mn69wj</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>宝塔面板卸载原Nginx编译Brotli压缩</title>
    <link href="/posts/96c49808.html"/>
    <url>/posts/96c49808.html</url>
    
    <content type="html"><![CDATA[<h3 id="1-Brotli压缩优势"><a href="#1-Brotli压缩优势" class="headerlink" title="1.Brotli压缩优势"></a>1.Brotli压缩优势</h3><p>说明：Brotli是Google推出的开源压缩算法，通过变种的LZ77算法、Huffman编码以及二阶文本建模等方式进行数据压缩，与其他压缩算法相比，它有着更高的压缩效率</p><p><strong>性能也比我们目前常见的Gzip高17-25%</strong></p><p><img src="https://imgs.leshans.eu.org/2024/01/50adb0799280c2234490cae2c0a1faec.webp" alt="Pasted image 20240128161106"></p><p>可以帮我们更高效的压缩网页中的各类文件大小及脚本，从而提高加载速度，提升网页浏览体验。</p><h3 id="2-卸载原Nginx"><a href="#2-卸载原Nginx" class="headerlink" title="2.卸载原Nginx"></a>2.卸载原Nginx</h3><p>Brotli 其实支持动态加载，这里为了方便直接卸载旧版本重装。</p><p>卸载完成以后点击安装，选择编译安装，打开添加自定义模块窗口如下图。</p><p><img src="https://imgs.leshans.eu.org/2024/01/8190440222026d24666e91233ac7e873.webp" alt="Pasted image 20240128161146"></p><p>模块名称填写：<code>ngx_brotli</code></p><p>模块简介填写：<code>ngx_brotli</code></p><p>模块参数填写：<code>--add-module=/www/server/nginx/src/ngx_brotli</code></p><p>前置脚本粘贴如下内容：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 文件内各版本号为文章发布时最新，请按需要检查新版本并替换版本号</span>wget -O ngx_brotli.zip https://github.com/google/ngx_brotli/archive/v1.0.0rc.zipunzip ngx_brotli.zip<span class="hljs-built_in">mv</span> ngx_brotli-1.0.0rc ngx_brotli<span class="hljs-built_in">cd</span> ngx_brotli/deps<span class="hljs-built_in">rm</span> -rf brotliwget -O brotli.zip https://github.com/google/brotli/archive/v1.0.9.zipunzip brotli.zip<span class="hljs-built_in">mv</span> brotli-1.0.9 brotli<span class="hljs-built_in">cd</span> /www/server/nginx/src</code></pre></div><p>完成以后提交并打上勾，点击安装，等待完成即可。</p><h3 id="3-Brotli压缩-配置"><a href="#3-Brotli压缩-配置" class="headerlink" title="3.Brotli压缩 配置"></a>3.Brotli压缩 配置</h3><p>打开 Nginx 管理器，左侧菜单选择配置修改，在<code>52</code>行附近找到<code>gzip</code>部分，在其前面插入<code>brotli</code>的配置信息：</p><div class="code-wrapper"><pre><code class="hljs bash">brotli on;brotli_comp_level 6;brotli_min_length 10;brotli_window 1m;brotli_types *;brotli_static always;</code></pre></div><p>各个参数的具体作用可以在<a href="https://github.com/google/ngx_brotli">https://github.com/google/ngx_brotli</a>找到，这里提供通用版本。</p><p>保存以后如下图：</p><p><img src="https://imgs.leshans.eu.org/2024/01/56bf99b76dca6b2c62675b17899506c6.webp" alt="Pasted image 20240128161301"></p><h3 id="4-brotli效果检验"><a href="#4-brotli效果检验" class="headerlink" title="4.brotli效果检验"></a>4.brotli效果检验</h3><p>接下来使用支持<code>brotli</code>的浏览器访问即可看到效果。</p><p><img src="https://imgs.leshans.eu.org/2024/01/e53196a97c401b6697703219f20dbafb.webp" alt="Pasted image 20240128161315"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>宝塔海外版aapanel安装教程</title>
    <link href="/posts/3144f1cb.html"/>
    <url>/posts/3144f1cb.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>首先安装官网最新版，再降级为6.8.27版本，降级的目的是方便安装汉化包</p></blockquote><p>Ubuntu&#x2F;Deepin</p><div class="code-wrapper"><pre><code class="hljs bash">wget -O install.sh http://www.aapanel.com/script/install-ubuntu_6.0_en.sh &amp;&amp; sudo bash install.sh aapanel</code></pre></div><p>Debian</p><div class="code-wrapper"><pre><code class="hljs bash">wget -O install.sh http://www.aapanel.com/script/install-ubuntu_6.0_en.sh &amp;&amp; bash install.sh aapanel</code></pre></div><p>降级为aapanel6.8.27版本</p><div class="code-wrapper"><pre><code class="hljs bash">wget -O /root/update6_en.sh https://download.bt.cn/install/update6_en.sh &amp;&amp; sed -i <span class="hljs-string">&#x27;s/LinuxPanel_EN-$&#123;version&#125;.zip/LinuxPanel_EN-6.8.27.zip/g&#x27;</span> /root/update6_en.sh &amp;&amp; bash /root/update6_en.sh &amp;&amp; <span class="hljs-built_in">rm</span> -rf /root/update6_en.sh</code></pre></div><p>中文语言包</p><div class="code-wrapper"><pre><code class="hljs bash">wget -O aapanel_chinese.zip https://github.com/gacjie/aapanel_chinese/releases/download/6.8.27/aapanel_simplified_chinese_6827.zip &amp;&amp; unzip -o aapanel_chinese.zip -d /www/server/ &amp;&amp; /etc/init.d/bt restart</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>宝塔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux系统Swap一键脚本 添加/删除</title>
    <link href="/posts/847a71b9.html"/>
    <url>/posts/847a71b9.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>在Linux系统中，swap是为了<code>减少内存压力</code>而设立的一种<code>临时存储空间</code>，当系统内存不足时，会将一部分内存交换到swap分区中。但是，当系统运行多个程序或进程时，<code>swap会频繁的写入和读取数据</code>，对硬盘进行频繁的访问，从而<code>导致系统变慢</code>。</p></blockquote><p>如果你的系统内存足够并且感觉swap对系统性能没有多大帮助，可以考虑将swap关闭。</p><blockquote><p>建议禁止使用swap，除非你内存吃紧，或者调整vm.swappiness参数为10</p></blockquote><h2 id="一键添加删除swap脚本"><a href="#一键添加删除swap脚本" class="headerlink" title="一键添加删除swap脚本"></a>一键添加删除swap脚本</h2><p>1G或者2G内存，可以设置swap为1G，即1024Mb</p><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/swap.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x swap.sh &amp;&amp; ./swap.sh</code></pre></div><p>临时调整vm.swappiness参数为10</p><div class="code-wrapper"><pre><code class="hljs routeros">sudo sysctl vm.<span class="hljs-attribute">swappiness</span>=10</code></pre></div><p>永久调整 vm.swappiness参数为1（优先使用物理内存，迫不得已使用swap）</p><div class="code-wrapper"><pre><code class="hljs shell">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/vm.sh &amp;&amp; chmod +x vm.sh &amp;&amp; ./vm.sh</code></pre></div><h3 id="使用free命令查看swap的使用情况"><a href="#使用free命令查看swap的使用情况" class="headerlink" title="使用free命令查看swap的使用情况"></a>使用free命令查看swap的使用情况</h3><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo free -m</span></code></pre></div><h3 id="查询当前系统中启用了哪些交换分区"><a href="#查询当前系统中启用了哪些交换分区" class="headerlink" title="查询当前系统中启用了哪些交换分区"></a>查询当前系统中启用了哪些交换分区</h3><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo swapon -s</span></code></pre></div><h3 id="禁用命令"><a href="#禁用命令" class="headerlink" title="禁用命令"></a>禁用命令</h3><div class="code-wrapper"><pre><code class="hljs css">sudo swapoff -<span class="hljs-selector-tag">a</span></code></pre></div><h3 id="启用命令"><a href="#启用命令" class="headerlink" title="启用命令"></a>启用命令</h3><div class="code-wrapper"><pre><code class="hljs css">sudo swapon -<span class="hljs-selector-tag">a</span></code></pre></div><h3 id="永久关闭swap分区"><a href="#永久关闭swap分区" class="headerlink" title="永久关闭swap分区"></a>永久关闭swap分区</h3><div class="code-wrapper"><pre><code class="hljs awk">sed -ri <span class="hljs-string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> <span class="hljs-regexp">/etc/</span>fstab</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>swap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简洁，没有广告，能下载资源的看片追剧APP</title>
    <link href="/posts/69e1bee1.html"/>
    <url>/posts/69e1bee1.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>可能是最简洁干净的，能下载影视资源的APP了，能下载资源的APP才是好的看片追剧APP~~</p></blockquote><p><a href="https://gh.ddlc.top/https://github.com/jimugou/app/releases/download/v1.6.3/fanqie-v1.6.3.apk">https://gh.ddlc.top/https://github.com/jimugou/app/releases/download/v1.6.3/fanqie-v1.6.3.apk</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Lsky 图床 兰空图床</title>
    <link href="/posts/fa452e2b.html"/>
    <url>/posts/fa452e2b.html</url>
    
    <content type="html"><![CDATA[<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/lsky-org/lsky-pro">https://github.com/lsky-org/lsky-pro</a></p><blockquote><p>推荐安装1.6.4版本，没有php和mysql的要求</p></blockquote><p>下载地址：<a href="https://github.com/lsky-org/lsky-pro/archive/refs/tags/v1.6.4.zip">https://github.com/lsky-org/lsky-pro/archive/refs/tags/v1.6.4.zip</a></p><p>网盘：<a href="https://lzui.lanpw.com/iUrlR1mb4djg">https://lzui.lanpw.com/iUrlR1mb4djg</a></p><p>Lsky Pro 安装全程可视化页面，只需要下载程序解压到 web 站点目录，访问首页会自动跳转到安装页面，根据提示操作即可，具体步骤：</p><p>下载兰空，上传至 web 运行环境，解压。</p><p>设置运行目录为 public。</p><p>配置 Rewrite 规则：</p><p>Nginx：</p><div class="code-wrapper"><pre><code class="hljs bash">location / &#123;    <span class="hljs-keyword">if</span> (!-e <span class="hljs-variable">$request_filename</span>) &#123;        rewrite ^(.*)$ /index.php?s=<span class="hljs-variable">$1</span> last; <span class="hljs-built_in">break</span>;    &#125;&#125;</code></pre></div><p>Apache: Apache直接使用 .htaccess 即可。<br>访问首页，未安装自动跳转至安装页面，根据页面提示安装即可。</p><p>安装完成以后请设置runtime目录 0755 权限，如果你使用本地存储，public 目录也需要设置为 0755 权限。</p><ol><li>备份原系统</li><li>下载新版本安装包，解压。将旧版本系统中的根目录 <code>.env</code> 文件复制到新版本的根目录<ul><li>如果你的文件是储存在本地，你还需要将 <code>public</code> 目录中的文件移动的新版本的 <code>public</code> 目录下</li></ul></li><li>修改 .env 文件中的数据库配置，然后在 <code>application</code> 目录下新建 <code>install.lock</code> 文件</li><li>将新版本 <code>application/sql/update.sql</code> 导入到数据库，或直接复制文件内容执行</li><li>替换旧版本 (删除旧版本，粘贴新版本)</li></ol><p>如果在更新时出现 <code>更新失败, 请稍后重试</code> 的提示, 大概率是因为超时被中断, 如果出现这样的情况, 请手动通过 <code>https://github.com/wisp-x/lsky-pro/releases</code> 下载 zip 格式的完整包, 并重命名为 <code>upgrade.zip</code> 移动至系统 <code>runtime</code> 目录中, 然后在执行更新, 这时候兰空图床会跳过下载安装包的步骤, 直接通过解压 <code>upgrade.zip</code> 的方式进行安装.</p><p>宝塔php7.3版本默认没有开启 <code>ZipArchive</code> ，更新时会出现错误，切换其他版本即可。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>宝塔面板计划任务列表的迁移或导出</title>
    <link href="/posts/20903a72.html"/>
    <url>/posts/20903a72.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>注意：迁移成功后不代表就会自动运行了，还需要手动点编辑，再保存才会生效！！</p></blockquote><h4 id="步骤一：备份文件，然后迁移到新服务器对应目录下。"><a href="#步骤一：备份文件，然后迁移到新服务器对应目录下。" class="headerlink" title="步骤一：备份文件，然后迁移到新服务器对应目录下。"></a>步骤一：备份文件，然后迁移到新服务器对应目录下。</h4><p>备份cron下的所有文件</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server/cron</code></pre></div><h4 id="步骤二：数据库迁移"><a href="#步骤二：数据库迁移" class="headerlink" title="步骤二：数据库迁移"></a>步骤二：数据库迁移</h4><p>下载<code>default.db</code>文件，使用<code>SQLiteStudio</code>工具打开数据库。删除新站的crontab表，把老站的表复制进去。然后保存。</p><div class="code-wrapper"><pre><code class="hljs gradle"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel/</span>data/<span class="hljs-keyword">default</span>.db</code></pre></div><p>把新的default.db上传到新站<code>/www/server/panel/data/</code>目录下。即可看到新的计划任务内容</p><p><code>SQLiteStudio</code>下载地址：<a href="https://lzui.lanpw.com/iCoiL1mas1gj">https://lzui.lanpw.com/iCoiL1mas1gj</a></p><p><img src="https://imgs.leshans.eu.org/2024/01/12acab52576e8aa7295ba2e23e781f29.webp"></p>]]></content>
    
    
    
    <tags>
      
      <tag>宝塔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计划任务备份</title>
    <link href="/posts/4f6d4ca4.html"/>
    <url>/posts/4f6d4ca4.html</url>
    
    <content type="html"><![CDATA[<h3 id="海洋CMS-自用采集"><a href="#海洋CMS-自用采集" class="headerlink" title="海洋CMS-自用采集###"></a>海洋CMS-自用采集###</h3><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-comment">#!/bin/bash</span><span class="hljs-comment">########################################################</span><span class="hljs-comment"># 程序名称: 海洋CMS自动采集脚本</span><span class="hljs-comment"># 版本信息：seacmsbot/ v2.0</span><span class="hljs-comment"># 发布链接: https://www.seacms.net/</span><span class="hljs-comment"># 使用方法：直接复制代码到宝塔计划任务shell脚本内容里添加每小时任务使用</span><span class="hljs-comment"># 更新时间：2019.9.26</span><span class="hljs-comment">##########################################################</span><span class="hljs-comment">#①请修改下面的网站域名及管理目录</span><span class="hljs-attribute">web_site</span>=<span class="hljs-string">&quot;http://xxx.xxx.eu.org/xxx/admin_reslib2.php&quot;</span>  <span class="hljs-comment">#②请修改下面项内容为&quot;admin_reslib2.php&quot;里设置的访问密码(默认为系统设置的cookie密码)</span><span class="hljs-attribute">web_pwd</span>=<span class="hljs-string">&quot;xxx&quot;</span>  <span class="hljs-comment">#③下面项内容为资源站每日采集链接地址列表，请自行修改,每行一条,可添加多个，前后需添加引号。</span><span class="hljs-comment">#每日采集链接获取方法:选择&quot;后台-采集-资源库列表&quot;,复制资源站右边的&quot;采集每天&quot;的链接地址,去掉?前面的内容。</span>web_api=(   <span class="hljs-string">&#x27;?ac=day&amp;rid=2&amp;url=https://ikunzyapi.com/api.php/seaxml/vod/at/xml&#x27;</span><span class="hljs-string">&#x27;?ac=day&amp;rid=3&amp;url=https://taopianapi.com/cjapi/sea/vod/xml/m3u8.html&#x27;</span><span class="hljs-string">&#x27;?ac=day&amp;rid=6&amp;url=https://api.xinlangapi.com/xinlangapi.php/provide/vod/from/xlm3u8/at/xmlsea/&#x27;</span><span class="hljs-string">&#x27;?ac=day&amp;rid=7&amp;url=http://cj.ffzyapi.com/api.php/seacms/vod/from/ffm3u8/at/xml/&#x27;</span><span class="hljs-string">&#x27;?ac=day&amp;rid=8&amp;url=https://api.1080zyku.com/inc/ldg_api.php&#x27;</span><span class="hljs-string">&#x27;?ac=day&amp;rid=9&amp;url=https://api.guangsuapi.com/api.php/provide/vod/from/gsm3u8/at/xmlsea/&#x27;</span><span class="hljs-string">&#x27;?ac=day&amp;rid=10&amp;url=https://api.tiankongapi.com/api.php/provide/vod/from/tkm3u8/at/xmlsea&#x27;</span>)<span class="hljs-comment">#模拟用户浏览器ua,请勿随意修改，以免被目标防火墙拦截!</span><span class="hljs-attribute">web_ua</span>=<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)</span><span class="hljs-string">Chrome/76.0.3809.100 Safari/537.36 seacmsbot/1.2;&quot;</span>  <span class="hljs-comment">#采集单页</span>function get_content() &#123;  echo  <span class="hljs-string">&quot;正在采集第<span class="hljs-variable">$page</span>页...&quot;</span>  #echo  <span class="hljs-string">&quot; get_content: ---&gt;url:---&gt;<span class="hljs-variable">$1</span>&quot;</span>  <span class="hljs-attribute">cResult</span>=$(curl  --connect-timeout 10 -m 20  -k -s   -L -A <span class="hljs-string">&quot;<span class="hljs-variable">$web_ua</span>&quot;</span>  <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> )  echo <span class="hljs-variable">$cResult</span> | grep -q <span class="hljs-string">&quot;采集&quot;</span>  #echo  -e  <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>\n<span class="hljs-variable">$cResult</span>&quot;</span> <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;$?&quot;</span> = <span class="hljs-string">&quot;0&quot;</span> ]; then     next_content <span class="hljs-string">&quot;<span class="hljs-variable">$cResult</span>&quot;</span><span class="hljs-keyword">else</span>    echo  -e <span class="hljs-string">&quot;采集失败,请检查设置!\n失败链接--&gt;<span class="hljs-variable">$1</span>\n返回信息--&gt;<span class="hljs-variable">$cResult</span>\n采集结束，共0页&quot;</span>fi&#125;<span class="hljs-comment">#采集下页</span>function next_content() &#123;    #统计数据     <span class="hljs-attribute">Result</span>=$(echo <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> | tr <span class="hljs-string">&quot;</span><span class="hljs-string">&quot;</span> <span class="hljs-string">&quot;\n&quot;</span>)     <span class="hljs-attribute">a</span>=$(echo <span class="hljs-string">&quot;<span class="hljs-variable">$Result</span>&quot;</span> | grep -c  <span class="hljs-string">&quot;采集成功&quot;</span>)     <span class="hljs-attribute">b</span>=$(echo <span class="hljs-string">&quot;<span class="hljs-variable">$Result</span>&quot;</span> | grep -c  <span class="hljs-string">&quot;更新数据&quot;</span>)     <span class="hljs-attribute">c</span>=$(echo <span class="hljs-string">&quot;<span class="hljs-variable">$Result</span>&quot;</span> | grep -c  <span class="hljs-string">&quot;无需更新&quot;</span>)     <span class="hljs-attribute">d</span>=$(echo <span class="hljs-string">&quot;<span class="hljs-variable">$Result</span>&quot;</span> | grep -c  <span class="hljs-string">&quot;跳过&quot;</span>)     echo <span class="hljs-string">&quot;采集成功--&gt;已更<span class="hljs-variable">$c</span>部,新增<span class="hljs-variable">$a</span>部,更新<span class="hljs-variable">$b</span>部,跳过<span class="hljs-variable">$d</span>部&quot;</span>     let add+=<span class="hljs-variable">$a</span>     let update+=<span class="hljs-variable">$b</span>     let none+=<span class="hljs-variable">$c</span>     let jmp+=<span class="hljs-variable">$d</span>    #检测并采集下页     <span class="hljs-attribute">next_url</span>=<span class="hljs-variable">$&#123;1##*location.href=\&#x27;&#125;</span>     <span class="hljs-attribute">next_url</span>=<span class="hljs-variable">$&#123;next_url%%\&#x27;*&#125;</span>      #echo <span class="hljs-variable">$next_url</span>      <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;next_url:0:1&#125;</span>&quot;</span> = <span class="hljs-string">&quot;?&quot;</span> ]          then          let page++          get_content <span class="hljs-string">&quot;<span class="hljs-variable">$web_site</span><span class="hljs-variable">$next_url</span>&quot;</span>    <span class="hljs-keyword">else</span>         echo <span class="hljs-string">&quot;采集结束，共<span class="hljs-variable">$page</span>页&quot;</span>       fi  &#125;<span class="hljs-comment">#脚本入口</span>echo <span class="hljs-string">&quot;海洋CMS自动采集脚本开始执行 版本：v1.2&quot;</span><span class="hljs-attribute">starttime</span>=$(date +%s)<span class="hljs-attribute">update</span>=0  #更新<span class="hljs-attribute">add</span>=0     #新增<span class="hljs-attribute">none</span>=0  #无变化<span class="hljs-attribute">jmp</span>=0  # 跳过<span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;web_api[@]&#125;</span>;<span class="hljs-keyword">do</span>  <span class="hljs-keyword">if</span> [[ ! -z <span class="hljs-variable">$url</span> ]]     then           <span class="hljs-attribute">web_param</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$web_site</span><span class="hljs-variable">$url</span>&amp;password=<span class="hljs-variable">$web_pwd</span>&quot;</span>           <span class="hljs-attribute">page</span>=1           echo <span class="hljs-string">&quot;开始采集：<span class="hljs-variable">$url</span>&quot;</span>           get_content <span class="hljs-variable">$web_param</span>  fidone<span class="hljs-attribute">endtime</span>=$(date +%s)echo <span class="hljs-string">&quot;============================&quot;</span>echo <span class="hljs-string">&quot;入库--&gt;<span class="hljs-variable">$add</span>部&quot;</span>echo <span class="hljs-string">&quot;更新--&gt;<span class="hljs-variable">$update</span>部&quot;</span>echo <span class="hljs-string">&quot;跳过--&gt;<span class="hljs-variable">$jmp</span>部(未绑定分类或链接错误)&quot;</span>echo <span class="hljs-string">&quot;今日--&gt;$[none+add+update]部&quot;</span>echo <span class="hljs-string">&quot;============================&quot;</span>echo  <span class="hljs-string">&quot;全部采集结束,耗时$[endtime - starttime]秒&quot;</span></code></pre></div><h3 id="其他备份"><a href="#其他备份" class="headerlink" title="其他备份"></a>其他备份</h3><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-comment">#!/bin/bash</span><span class="hljs-comment">########################################################</span><span class="hljs-comment"># 程序名称: 海洋CMS自动采集脚本</span><span class="hljs-comment"># 版本信息：seacmsbot/ v2.0</span><span class="hljs-comment"># 发布链接: https://www.seacms.net/</span><span class="hljs-comment"># 使用方法：直接复制代码到宝塔计划任务shell脚本内容里添加每小时任务使用</span><span class="hljs-comment"># 更新时间：2019.9.26</span><span class="hljs-comment">##########################################################</span><span class="hljs-comment">#①请修改下面的网站域名及管理目录</span><span class="hljs-attribute">web_site</span>=<span class="hljs-string">&quot;http://xxx/xxx/admin_reslib2.php&quot;</span>  <span class="hljs-comment">#②请修改下面项内容为&quot;admin_reslib2.php&quot;里设置的访问密码(默认为系统设置的cookie密码)</span><span class="hljs-attribute">web_pwd</span>=<span class="hljs-string">&quot;xxx&quot;</span>  <span class="hljs-comment">#③下面项内容为资源站每日采集链接地址列表，请自行修改,每行一条,可添加多个，前后需添加引号。</span><span class="hljs-comment">#每日采集链接获取方法:选择&quot;后台-采集-资源库列表&quot;,复制资源站右边的&quot;采集每天&quot;的链接地址,去掉?前面的内容。</span>web_api=(         <span class="hljs-string">&#x27;?ac=day&amp;rid=5&amp;url=https://xxx/xxx.php/provide/vod/at/xml&#x27;</span> )<span class="hljs-comment">#模拟用户浏览器ua,请勿随意修改，以免被目标防火墙拦截!</span><span class="hljs-attribute">web_ua</span>=<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)</span><span class="hljs-string">Chrome/76.0.3809.100 Safari/537.36 seacmsbot/1.2;&quot;</span>  <span class="hljs-comment">#采集单页</span>function get_content() &#123;  echo  <span class="hljs-string">&quot;正在采集第<span class="hljs-variable">$page</span>页...&quot;</span>  #echo  <span class="hljs-string">&quot; get_content: ---&gt;url:---&gt;<span class="hljs-variable">$1</span>&quot;</span>  <span class="hljs-attribute">cResult</span>=$(curl  --connect-timeout 10 -m 20  -k -s   -L -A <span class="hljs-string">&quot;<span class="hljs-variable">$web_ua</span>&quot;</span>  <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> )  echo <span class="hljs-variable">$cResult</span> | grep -q <span class="hljs-string">&quot;采集&quot;</span>  #echo  -e  <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>\n<span class="hljs-variable">$cResult</span>&quot;</span> <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;$?&quot;</span> = <span class="hljs-string">&quot;0&quot;</span> ]; then     next_content <span class="hljs-string">&quot;<span class="hljs-variable">$cResult</span>&quot;</span><span class="hljs-keyword">else</span>    echo  -e <span class="hljs-string">&quot;采集失败,请检查设置!\n失败链接--&gt;<span class="hljs-variable">$1</span>\n返回信息--&gt;<span class="hljs-variable">$cResult</span>\n采集结束，共0页&quot;</span>fi&#125;<span class="hljs-comment">#采集下页</span>function next_content() &#123;    #统计数据     <span class="hljs-attribute">Result</span>=$(echo <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> | tr <span class="hljs-string">&quot;</span><span class="hljs-string">&quot;</span> <span class="hljs-string">&quot;\n&quot;</span>)     <span class="hljs-attribute">a</span>=$(echo <span class="hljs-string">&quot;<span class="hljs-variable">$Result</span>&quot;</span> | grep -c  <span class="hljs-string">&quot;采集成功&quot;</span>)     <span class="hljs-attribute">b</span>=$(echo <span class="hljs-string">&quot;<span class="hljs-variable">$Result</span>&quot;</span> | grep -c  <span class="hljs-string">&quot;更新数据&quot;</span>)     <span class="hljs-attribute">c</span>=$(echo <span class="hljs-string">&quot;<span class="hljs-variable">$Result</span>&quot;</span> | grep -c  <span class="hljs-string">&quot;无需更新&quot;</span>)     <span class="hljs-attribute">d</span>=$(echo <span class="hljs-string">&quot;<span class="hljs-variable">$Result</span>&quot;</span> | grep -c  <span class="hljs-string">&quot;跳过&quot;</span>)     echo <span class="hljs-string">&quot;采集成功--&gt;已更<span class="hljs-variable">$c</span>部,新增<span class="hljs-variable">$a</span>部,更新<span class="hljs-variable">$b</span>部,跳过<span class="hljs-variable">$d</span>部&quot;</span>     let add+=<span class="hljs-variable">$a</span>     let update+=<span class="hljs-variable">$b</span>     let none+=<span class="hljs-variable">$c</span>     let jmp+=<span class="hljs-variable">$d</span>    #检测并采集下页     <span class="hljs-attribute">next_url</span>=<span class="hljs-variable">$&#123;1##*location.href=\&#x27;&#125;</span>     <span class="hljs-attribute">next_url</span>=<span class="hljs-variable">$&#123;next_url%%\&#x27;*&#125;</span>      #echo <span class="hljs-variable">$next_url</span>      <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;next_url:0:1&#125;</span>&quot;</span> = <span class="hljs-string">&quot;?&quot;</span> ]          then          let page++          get_content <span class="hljs-string">&quot;<span class="hljs-variable">$web_site</span><span class="hljs-variable">$next_url</span>&quot;</span>    <span class="hljs-keyword">else</span>         echo <span class="hljs-string">&quot;采集结束，共<span class="hljs-variable">$page</span>页&quot;</span>       fi  &#125;<span class="hljs-comment">#脚本入口</span>echo <span class="hljs-string">&quot;海洋CMS自动采集脚本开始执行 版本：v1.2&quot;</span><span class="hljs-attribute">starttime</span>=$(date +%s)<span class="hljs-attribute">update</span>=0  #更新<span class="hljs-attribute">add</span>=0     #新增<span class="hljs-attribute">none</span>=0  #无变化<span class="hljs-attribute">jmp</span>=0  # 跳过<span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;web_api[@]&#125;</span>;<span class="hljs-keyword">do</span>  <span class="hljs-keyword">if</span> [[ ! -z <span class="hljs-variable">$url</span> ]]     then           <span class="hljs-attribute">web_param</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$web_site</span><span class="hljs-variable">$url</span>&amp;password=<span class="hljs-variable">$web_pwd</span>&quot;</span>           <span class="hljs-attribute">page</span>=1           echo <span class="hljs-string">&quot;开始采集：<span class="hljs-variable">$url</span>&quot;</span>           get_content <span class="hljs-variable">$web_param</span>  fidone<span class="hljs-attribute">endtime</span>=$(date +%s)echo <span class="hljs-string">&quot;============================&quot;</span>echo <span class="hljs-string">&quot;入库--&gt;<span class="hljs-variable">$add</span>部&quot;</span>echo <span class="hljs-string">&quot;更新--&gt;<span class="hljs-variable">$update</span>部&quot;</span>echo <span class="hljs-string">&quot;跳过--&gt;<span class="hljs-variable">$jmp</span>部(未绑定分类或链接错误)&quot;</span>echo <span class="hljs-string">&quot;今日--&gt;$[none+add+update]部&quot;</span>echo <span class="hljs-string">&quot;============================&quot;</span>echo  <span class="hljs-string">&quot;全部采集结束,耗时$[endtime - starttime]秒&quot;</span></code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>acme自制脚本快速申请免费证书</title>
    <link href="/posts/f8d32b04.html"/>
    <url>/posts/f8d32b04.html</url>
    
    <content type="html"><![CDATA[<h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/ssl.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x ssl.sh &amp;&amp; ./ssl.sh</code></pre></div><blockquote><p>步骤：选择你的操作系统 – 输入邮箱 – 选择证书 – 输入域名 – 输入网站路径</p></blockquote><blockquote><p>注意：如果你的网站启动目录指向的是二级目录，请改回根目录，否者申请出问题</p></blockquote><p>证书申请成功后目录：&#x2F;root&#x2F;.acme.sh&#x2F;你的域名&#x2F;</p><p>打开目录：</p><p>xxxx.key为密钥  </p><p>fullchain.cer为证书</p>]]></content>
    
    
    
    <tags>
      
      <tag>ssl</tag>
      
      <tag>证书</tag>
      
      <tag>acme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux vps重装系统，dd</title>
    <link href="/posts/820e885c.html"/>
    <url>/posts/820e885c.html</url>
    
    <content type="html"><![CDATA[<h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><p><a href="https://github.com/leitbogioro/Tools">https://github.com/leitbogioro/Tools</a></p><p>Debian系列(Debian &#x2F; Ubuntu &#x2F; Kali):</p><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">apt update -y</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">apt install wget -y</code></pre></div><h2 id="下载："><a href="#下载：" class="headerlink" title="下载："></a>下载：</h2><div class="code-wrapper"><pre><code class="hljs vim">wget --<span class="hljs-keyword">no</span>-check-certificate -qO InstallNET.<span class="hljs-keyword">sh</span> <span class="hljs-string">&#x27;https://raw.githubusercontent.com/leitbogioro/Tools/master/Linux_reinstall/InstallNET.sh&#x27;</span> &amp;&amp; chmod <span class="hljs-keyword">a</span>+<span class="hljs-keyword">x</span> InstallNET.<span class="hljs-keyword">sh</span></code></pre></div><h3 id="默认用户名和密码"><a href="#默认用户名和密码" class="headerlink" title="默认用户名和密码"></a>默认用户名和密码</h3><p>用户名：root  </p><p>密码：<code>LeitboGi0ro</code> </p><h3 id="Debian-12"><a href="#Debian-12" class="headerlink" title="Debian 12"></a>Debian 12</h3><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bash </span><span class="hljs-keyword">InstallNET.sh </span>-debian</code></pre></div><h3 id="Debian-11"><a href="#Debian-11" class="headerlink" title="Debian 11"></a>Debian 11</h3><div class="code-wrapper"><pre><code class="hljs bash">bash InstallNET.sh -debian 11</code></pre></div><h3 id="ubuntu-22-04"><a href="#ubuntu-22-04" class="headerlink" title="ubuntu 22.04"></a>ubuntu 22.04</h3><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bash </span><span class="hljs-keyword">InstallNET.sh </span>-ubuntu</code></pre></div><h3 id="ubuntu-20-04"><a href="#ubuntu-20-04" class="headerlink" title="ubuntu 20.04"></a>ubuntu 20.04</h3><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> InstallNET.sh -ubuntu <span class="hljs-number">20</span>.<span class="hljs-number">04</span></code></pre></div><h3 id="启用BBR"><a href="#启用BBR" class="headerlink" title="启用BBR"></a>启用BBR</h3><blockquote><p>通过向 &#x2F;etc&#x2F;sysctl.d&#x2F;99-sysctl.conf 添加参数和值来为当前内核启用 BBR</p></blockquote><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/enable_bbr.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x enable_bbr.sh &amp;&amp; ./enable_bbr.sh</code></pre></div><h3 id="检查-BBR-是否启动"><a href="#检查-BBR-是否启动" class="headerlink" title="检查 BBR 是否启动"></a>检查 BBR 是否启动</h3><div class="code-wrapper"><pre><code class="hljs bash">lsmod | grep bbr</code></pre></div><h3 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h3><div class="code-wrapper"><pre><code class="hljs bash">apt update -y</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">apt install -y curl</code></pre></div><h3 id="推荐脚本"><a href="#推荐脚本" class="headerlink" title="推荐脚本"></a>推荐脚本</h3><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://raw.githubusercontent.com/kejilion/sh/main/kejilion.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x kejilion.sh &amp;&amp; ./kejilion.sh</code></pre></div><h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><div class="code-wrapper"><pre><code class="hljs bash">curl -fsSL https://get.docker.com | sh &amp;&amp; <span class="hljs-built_in">ln</span> -s /usr/libexec/docker/cli-plugins/docker-compose /usr/local/bin</code></pre></div><h3 id="地区自选，重装Debian-11（推荐大陆以外的服务器）"><a href="#地区自选，重装Debian-11（推荐大陆以外的服务器）" class="headerlink" title="地区自选，重装Debian 11（推荐大陆以外的服务器）"></a>地区自选，重装Debian 11（推荐大陆以外的服务器）</h3><h4 id="日本："><a href="#日本：" class="headerlink" title="日本："></a>日本：</h4><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bash </span><span class="hljs-keyword">InstallNET.sh </span>-debian <span class="hljs-number">11</span> -mirror <span class="hljs-string">&quot;http://ftp.riken.jp/Linux/debian/debian/&quot;</span></code></pre></div><h4 id="香港："><a href="#香港：" class="headerlink" title="香港："></a>香港：</h4><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bash </span><span class="hljs-keyword">InstallNET.sh </span>-debian <span class="hljs-number">11</span> -mirror <span class="hljs-string">&quot;http://ftp.hk.debian.org/debian/&quot;</span></code></pre></div><h4 id="新加坡："><a href="#新加坡：" class="headerlink" title="新加坡："></a>新加坡：</h4><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bash </span><span class="hljs-keyword">InstallNET.sh </span>-debian <span class="hljs-number">11</span> -mirror <span class="hljs-string">&quot;http://ftp.sg.debian.org/debian/&quot;</span></code></pre></div><h4 id="韩国："><a href="#韩国：" class="headerlink" title="韩国："></a>韩国：</h4><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bash </span><span class="hljs-keyword">InstallNET.sh </span>-debian <span class="hljs-number">11</span> -mirror <span class="hljs-string">&quot;http://ftp.kaist.ac.kr/debian/&quot;</span></code></pre></div><h4 id="台湾："><a href="#台湾：" class="headerlink" title="台湾："></a>台湾：</h4><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bash </span><span class="hljs-keyword">InstallNET.sh </span>-debian <span class="hljs-number">11</span> -mirror <span class="hljs-string">&quot;http://ftp.tw.debian.org/debian/&quot;</span></code></pre></div><h4 id="美国："><a href="#美国：" class="headerlink" title="美国："></a>美国：</h4><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bash </span><span class="hljs-keyword">InstallNET.sh </span>-debian <span class="hljs-number">11</span> -mirror <span class="hljs-string">&quot;https://mirrors.ocf.berkeley.edu/debian/&quot;</span></code></pre></div><h4 id="加拿大："><a href="#加拿大：" class="headerlink" title="加拿大："></a>加拿大：</h4><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bash </span><span class="hljs-keyword">InstallNET.sh </span>-debian <span class="hljs-number">11</span> -mirror <span class="hljs-string">&quot;http://ftp.ca.debian.org/debian/&quot;</span></code></pre></div><h4 id="英国："><a href="#英国：" class="headerlink" title="英国："></a>英国：</h4><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bash </span><span class="hljs-keyword">InstallNET.sh </span>-debian <span class="hljs-number">11</span> -mirror <span class="hljs-string">&quot;http://ftp.uk.debian.org/debian/&quot;</span></code></pre></div><h4 id="德国："><a href="#德国：" class="headerlink" title="德国："></a>德国：</h4><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bash </span><span class="hljs-keyword">InstallNET.sh </span>-debian <span class="hljs-number">11</span> -mirror <span class="hljs-string">&quot;http://ftp.de.debian.org/debian/&quot;</span></code></pre></div><h4 id="法国："><a href="#法国：" class="headerlink" title="法国："></a>法国：</h4><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bash </span><span class="hljs-keyword">InstallNET.sh </span>-debian <span class="hljs-number">11</span> -mirror <span class="hljs-string">&quot;http://ftp.fr.debian.org/debian/&quot;</span></code></pre></div><h4 id="荷兰："><a href="#荷兰：" class="headerlink" title="荷兰："></a>荷兰：</h4><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bash </span><span class="hljs-keyword">InstallNET.sh </span>-debian <span class="hljs-number">11</span> -mirror <span class="hljs-string">&quot;http://ftp.nl.debian.org/debian/&quot;</span></code></pre></div><h4 id="瑞士："><a href="#瑞士：" class="headerlink" title="瑞士："></a>瑞士：</h4><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bash </span><span class="hljs-keyword">InstallNET.sh </span>-debian <span class="hljs-number">11</span> -mirror <span class="hljs-string">&quot;http://ftp.ch.debian.org/debian/&quot;</span></code></pre></div><h4 id="俄罗斯："><a href="#俄罗斯：" class="headerlink" title="俄罗斯："></a>俄罗斯：</h4><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bash </span><span class="hljs-keyword">InstallNET.sh </span>-debian <span class="hljs-number">11</span> -mirror <span class="hljs-string">&quot;http://ftp.ru.debian.org/debian/&quot;</span></code></pre></div><h4 id="澳大利亚："><a href="#澳大利亚：" class="headerlink" title="澳大利亚："></a>澳大利亚：</h4><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bash </span><span class="hljs-keyword">InstallNET.sh </span>-debian <span class="hljs-number">11</span> -mirror <span class="hljs-string">&quot;http://ftp.au.debian.org/debian/&quot;</span></code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>域名有效期监控的最佳方案</title>
    <link href="/posts/6935a4a3.html"/>
    <url>/posts/6935a4a3.html</url>
    
    <content type="html"><![CDATA[<h3 id="不喜欢开场白，还是直接上干货…"><a href="#不喜欢开场白，还是直接上干货…" class="headerlink" title="不喜欢开场白，还是直接上干货…"></a>不喜欢开场白，还是直接上干货…</h3><blockquote><p>使用方法: </p><ol><li><p><code>for d in baidu.com bing.com</code>   修改为你的域名，多个用空格隔开</p></li><li><p>登录<a href="https://slack.com/get-started">https://slack.com/get-started</a> 获取<code>Webhook URL</code> 教程在后面</p></li><li><p><a href="https://hooks.slack.com/services/xxx/xxx/xxx">https://hooks.slack.com/services/xxx/xxx/xxx</a> 修改为你的<code>Webhook URL</code></p></li></ol></blockquote><ol start="4"><li>测试要点：修改参数<code>n=129600000</code>将改好的脚本放到宝塔面板计划任务测试，运行，就会收到消息，测试收到消息再改回来2592000(单位秒)，也就是30天到期提醒</li></ol><p>5.微信接收消息技巧: 将你的邮件转发到QQ邮箱，打开微信，设置–通用–辅助功能–QQ邮箱提醒<br>slack默认15分钟发送一次新的消息</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-comment">#检测域名是否过期</span><span class="hljs-comment">#博客：blog.leshans.eu.org</span><span class="hljs-comment">#日期：20240123</span><span class="hljs-comment">#版本：v0.1</span><span class="hljs-comment">#当前日期时间戳，用于和域名的到期时间做比较</span>currentTimestamp=`<span class="hljs-built_in">date</span> +%s`<span class="hljs-comment">#检测whois命令是否存在，不存在则安装whois包</span><span class="hljs-function"><span class="hljs-title">isInstallWhois</span></span>()&#123;    <span class="hljs-built_in">which</span> whois &gt;/dev/null 2&gt;/dev/null    <span class="hljs-keyword">if</span> [ $? -ne 0 ]    <span class="hljs-keyword">then</span>        yum install -y whois || apt-get install whois -y    <span class="hljs-keyword">fi</span>&#125;<span class="hljs-function"><span class="hljs-title">notify</span></span>()&#123;    expiredate=`whois <span class="hljs-variable">$1</span> |grep <span class="hljs-string">&#x27;Registry Expiry Date&#x27;</span> |awk <span class="hljs-string">&#x27;&#123;print $4&#125;&#x27;</span> |<span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27;T&#x27;</span> -f 1`    <span class="hljs-comment">#上面的$1代表域名，遍历循环出来的。</span>    <span class="hljs-comment">#如果e_d的值为空，则过滤关键词&#x27;Expiration Time&#x27;</span>    <span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$expiredate</span>&quot;</span> ]    <span class="hljs-keyword">then</span>        expiredate=`whois <span class="hljs-variable">$1</span>|grep <span class="hljs-string">&#x27;Expiration Time&#x27;</span> |awk <span class="hljs-string">&#x27;&#123;print $3&#125;&#x27;</span>`    <span class="hljs-keyword">fi</span>    <span class="hljs-comment">#将域名过期的日期转化为时间戳</span>    expiredatestamp=`<span class="hljs-built_in">date</span> -d <span class="hljs-variable">$expiredate</span> +%s`    <span class="hljs-comment">#计算半个月一共有多少秒</span>    <span class="hljs-comment"># 15d 1296000  30d 2592000 35d 3024000 40d 3456000</span>    n=2592000    timeBeforce=$[<span class="hljs-variable">$expiredatestamp</span> - <span class="hljs-variable">$n</span>] <span class="hljs-comment">#过期时间30d以前的时间戳</span>    timeAfter=$[<span class="hljs-variable">$expiredatestamp</span> + <span class="hljs-variable">$n</span>] <span class="hljs-comment">#过期时间30d以后的时间戳</span>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$currentTimestamp</span> -ge <span class="hljs-variable">$timeBeforce</span> ] &amp;&amp; [ <span class="hljs-variable">$currentTimestamp</span> -lt <span class="hljs-variable">$expiredatestamp</span> ]    <span class="hljs-keyword">then</span>        curl -X POST \            -H <span class="hljs-string">&#x27;Content-type: application/json&#x27;</span> \            --data <span class="hljs-string">&#x27;&#123;&quot;text&quot;:&quot;:warning:域名 &#x27;</span><span class="hljs-variable">$1</span><span class="hljs-string">&#x27; 将在30天内过期. 域名 &#x27;</span><span class="hljs-variable">$1</span><span class="hljs-string">&#x27; 到期日是 &#x27;</span><span class="hljs-variable">$expiredate</span><span class="hljs-string">&#x27; @xuexiaobai&quot;&#125;&#x27;</span> \            https://hooks.slack.com/services/xxx/xxx/xxx    <span class="hljs-keyword">fi</span>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$currentTimestamp</span> -ge <span class="hljs-variable">$expiredatestamp</span> ]     <span class="hljs-keyword">then</span>        curl -X POST \            -H <span class="hljs-string">&#x27;Content-type: application/json&#x27;</span> \            --data <span class="hljs-string">&#x27;&#123;</span><span class="hljs-string">                &quot;text&quot;:&quot;:interrobang:域名 &#x27;</span><span class="hljs-variable">$1</span><span class="hljs-string">&#x27; 已过期. 域名 &#x27;</span><span class="hljs-variable">$1</span><span class="hljs-string">&#x27; 到期日是 &#x27;</span><span class="hljs-variable">$expiredate</span><span class="hljs-string">&#x27; @xuexiaobai&quot;&#125;&#x27;</span> \            https://hooks.slack.com/services/xxx/xxx/xxx    <span class="hljs-keyword">fi</span>&#125;<span class="hljs-comment">#检测上次运行的whois查询进程是否存在</span><span class="hljs-comment">#若存在，需要杀死进程，以免影响本次脚本执行</span><span class="hljs-keyword">if</span> pgrep whois &amp;&gt;/dev/null<span class="hljs-keyword">then</span>    killall -9 whois<span class="hljs-keyword">fi</span>isInstallWhois<span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> baidu.com bing.com<span class="hljs-keyword">do</span>  notify <span class="hljs-variable">$d</span><span class="hljs-keyword">done</span></code></pre></div><h3 id="获取Webhook-URL教程"><a href="#获取Webhook-URL教程" class="headerlink" title="获取Webhook URL教程"></a>获取<code>Webhook URL</code>教程</h3><ol><li><p><strong>创建 Slack 团队：</strong></p><ul><li>如果你还没有 Slack 团队，可以在 <a href="https://slack.com/get-started">Slack 官方网站</a>上创建一个免费的团队账户。</li></ul></li><li><p><strong>创建工作区：</strong></p><ul><li>一旦你的团队创建好，你可以创建一个工作区，用于组织你的团队成员和频道。</li></ul></li><li><p><strong>创建频道：</strong></p><ul><li>频道是 Slack 中组织和分类消息的方式。你可以创建不同的频道，例如项目频道、团队频道等。</li><li>在 Slack 的左侧导航栏中，点击加号（+）按钮，然后选择 “创建频道”。</li></ul></li><li><p><strong>添加团队成员：</strong></p><ul><li>在 Slack 中邀请团队成员加入工作区，以便他们能够参与到你的工作和讨论中。</li></ul></li><li><p><strong>获取 Incoming Webhook URL：</strong></p><ul><li>如果你想使用脚本中的 Slack 通知功能，你需要创建一个 Incoming Webhook。</li><li>在 Slack 中，进入你想要接收通知的频道，点击频道名称，然后选择 “集成”。</li><li>在 “集成” 页面中，找到 “Incoming Webhooks” 并点击 “添加到此频道”。</li><li>配置 Incoming Webhook，并获取 Webhook URL。</li></ul></li><li><p><strong>使用 Slack Webhook URL：</strong></p><ul><li>在脚本中，你需要将 Slack Webhook URL 替换为你的 Incoming Webhook URL。这个 URL 用于向 Slack 发送通知消息。</li></ul></li><li><p><strong>运行脚本：</strong></p><ul><li>通过终端或脚本执行环境运行你的脚本，以开始监控域名有效期并发送通知到 Slack。</li></ul></li><li><p><strong>查看通知：</strong></p><ul><li>前提是域名过期或接近过期，Slack 将会收到相应的通知消息。</li></ul></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>github反代列表</title>
    <link href="/posts/6797718d.html"/>
    <url>/posts/6797718d.html</url>
    
    <content type="html"><![CDATA[<h1 id="反代列表"><a href="#反代列表" class="headerlink" title="反代列表"></a>反代列表</h1><table><thead><tr><th>站源</th><th>地址</th><th>缓存</th></tr></thead><tbody><tr><td>github.com</td><td>hub.fgit.cf</td><td>无</td></tr><tr><td>raw.githubusercontent.com</td><td>raw.fgit.cf</td><td>无</td></tr><tr><td>github.githubassets.com</td><td>assets.fgit.cf</td><td>无</td></tr></tbody></table><p>官方地址：<a href="https://doc.fastgit.org/zh-cn/node.html">https://doc.fastgit.org/zh-cn/node.html</a></p><blockquote><p>替换：<a href="https://raw.fgit.cf/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D/%E5%88%86%E6%94%AF/%E6%96%87%E4%BB%B6">https://raw.fgit.cf/用户名/仓库名/分支/文件</a>…</p></blockquote><p>例如</p><div class="code-wrapper"><pre><code class="hljs shell">https://raw.githubusercontent.com/kejilion/sh/main/kejilion.sh</code></pre></div><p>替换成：</p><div class="code-wrapper"><pre><code class="hljs shell">https://raw.fgit.cf/kejilion/sh/main/kejilion.sh</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>动漫资源更新中。。</title>
    <link href="/posts/67e9f126.html"/>
    <url>/posts/67e9f126.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>切片资源</p></blockquote><p>高清 <a href="https://1080zyk1.com/">https://1080zyk1.com/</a></p><p>淘片 <a href="https://www.taopianzy.com/index.html">https://www.taopianzy.com/index.html</a></p><p>iKun资源   <a href="https://www.ikunzy.com/">https://www.ikunzy.com/</a></p><p>非凡资源 <a href="http://ffzy1.tv/">http://ffzy1.tv/</a></p><p>光速资源 <a href="https://guangsuzy.com/">https://guangsuzy.com/</a></p><blockquote><p>在线动漫</p></blockquote><p>NyaFun动漫  <a href="https://www.nyafun.net/">https://www.nyafun.net/</a></p><p>喵物次元  <a href="https://catw.moe/">https://catw.moe/</a></p><p>次元城 <a href="https://www.cycdm01.top/">https://www.cycdm01.top/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>RackNerd优惠码和促销活动整理 (2024最新版) 年付10美元vps</title>
    <link href="/posts/7bbe6ffb.html"/>
    <url>/posts/7bbe6ffb.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>线路测试：<a href="https://lg-lax02.racknerd.com/">https://lg-lax02.racknerd.com/</a></p></blockquote><p><a href="https://walixz.com/go/racknerd">RackNerd</a>是美国一家基础架构即服务IaaS云服务供应商，由云计算行业资深人士成立。这家公司主要提供虚拟主机、<a href="https://walixz.com/cheap-vps.html" title="便宜VPS">便宜VPS</a>服务器和独立服务器等产品，以及经营代托管业务。由于价格实惠性价比高，所以RackNerd可以作为个人建站极好的选择。</p><p>在这篇文章中，瓦力箱子整理下RackNerd优惠码和最新的促销活动分享，有需要可以购买。</p><p><img src="https://imgs.leshans.eu.org/2024/01/f9b91566c3bdb66d72b949de05bc7788.webp" alt="RackNerd优惠码"></p><h2 id="1-RackNerd-VPS最新优惠"><a href="#1-RackNerd-VPS最新优惠" class="headerlink" title="1. RackNerd VPS最新优惠"></a>1. RackNerd VPS最新优惠</h2><p>2024年1月更新：过完圣诞节，2024年新年马上就要来临。RackNerd为大家准备了4款便宜VPS套餐，来庆祝元旦的到来，最低配置只需要11美元&#x2F;年。</p><table><thead><tr><th>CPU</th><th>内存</th><th>SSD</th><th>月流量</th><th>价格</th><th>详情</th></tr></thead><tbody><tr><td>1核心</td><td>1G</td><td>21G</td><td>1500G</td><td>$11&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1338&pid=826">查看详情</a></strong></td></tr><tr><td>1核心</td><td>2G</td><td>35G</td><td>2500G</td><td>$17&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1338&pid=827">查看详情</a></strong></td></tr><tr><td>2核心</td><td>3G</td><td>45G</td><td>5000G</td><td>$27&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1338&pid=828">查看详情</a></strong></td></tr><tr><td>2核心</td><td>4G</td><td>60G</td><td>8000G</td><td>$37&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1338&pid=829">查看详情</a></strong></td></tr></tbody></table><p>所有VPS方案均配置1Gbps大带宽，提供一个独立IP地址和具有完全的root权限，可以根据自己的实际需求选择。共有9个机房可以选择，推荐速度较快的美国西海岸的洛杉矶、圣何塞或西雅图机房。不过这次的RackNerd促销没有512M内存方案，有需要的可以查看往期活动。</p><h2 id="2-RackNerd便宜VPS整理-往期活动"><a href="#2-RackNerd便宜VPS整理-往期活动" class="headerlink" title="2. RackNerd便宜VPS整理(往期活动)"></a>2. RackNerd便宜VPS整理(往期活动)</h2><p>瓦力箱子发现不久以前的RackNerd往期优惠活动还有部分机型可选，合适的可以入手。加起来还有十来款性价比较高的VPS主机可选，价格最低的VPS年付只需要$10美元左右。</p><h3 id="黑色星期五和网络星期一活动"><a href="#黑色星期五和网络星期一活动" class="headerlink" title="黑色星期五和网络星期一活动"></a>黑色星期五和网络星期一活动</h3><table><thead><tr><th>CPU</th><th>内存</th><th>SSD</th><th>月流量</th><th>价格</th><th>详情</th></tr></thead><tbody><tr><td>1核心</td><td>768M</td><td>15G</td><td>1000G</td><td>$10.18&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1338&pid=792">查看详情</a></strong></td></tr><tr><td>1核心</td><td>2G</td><td>30G</td><td>2500G</td><td>$16.98&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1338&pid=793">查看详情</a></strong></td></tr><tr><td>2核心</td><td>2.5G</td><td>50G</td><td>5000G</td><td>$25.49&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1338&pid=794">查看详情</a></strong></td></tr><tr><td>2核心</td><td>4G</td><td>80G</td><td>8000G</td><td>$38.88&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1338&pid=795">查看详情</a></strong></td></tr><tr><td>4核心</td><td>4.5G</td><td>115G</td><td>10000G</td><td>$52.49&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1338&pid=796">查看详情</a></strong></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>vps</tag>
      
      <tag>RackNerd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>宝塔 Linux Java 环境安装教程</title>
    <link href="/posts/291da3a.html"/>
    <url>/posts/291da3a.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本教程将帮助你如何在linux系统下的宝塔面板上，快速的安装和配置Java环境 。</p><h2 id="1-打开终端"><a href="#1-打开终端" class="headerlink" title="#1 打开终端"></a>#1 打开终端</h2><p>打开宝塔的终端并输入以下命令</p><p>PS：一行一个，不要多次输入 。</p><p>第一步，创建 java 路径 。</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /usr/lib/jvm</code></pre></div><p>第二步，移动到，上一步创建的文件夹 。</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/lib/jvm</code></pre></div><p>第三步，在此文件夹下下载 java sdk ，耐心等待，国内服务器可能需要 2-10 分钟 。</p><p>PS: 该版本的 sdk 版本为 17</p><div class="code-wrapper"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>download.oracle.com<span class="hljs-regexp">/java/</span><span class="hljs-number">17</span><span class="hljs-regexp">/latest/</span>jdk-<span class="hljs-number">17</span>_linux-x64_bin.tar.gz</code></pre></div><p>第四步，解压上一步下载的 sdk 。</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxvf jdk-<span class="hljs-number">17</span>_linux-x64_bin.tar.gz</code></pre></div><p>第五步，重命名解压后的文件夹 为 jdk17  注意版本号</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">mv</span> jdk-<span class="hljs-number">17</span>.<span class="hljs-number">0</span>.<span class="hljs-number">10</span> jdk17</code></pre></div><p>至此，java 17安装完成，现在开始配置 Java sdk的环境变量 。</p><h2 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="#2 配置环境变量"></a>#2 配置环境变量</h2><p>打开宝塔文件根目录的以下路径 &#x3D;&#x3D;&#x2F;etc&#x2F;profile&#x3D;&#x3D;</p><p>并在 profile 文件的末尾添加以下环境变量</p><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">JAVA_HOME</span>=/usr/lib/jvm/jdk17<span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$JAVA_HOME</span>/bin:$PATH</code></pre></div><p><img src="https://imgs.leshans.eu.org/2024/01/9b201ba416eafce85648312f23174f18.webp"></p><p>返回终端，输入以下命令，刷新配置文件</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile</code></pre></div><p>再输入以下命令，如果出现 java 版本即代表环境配置成功 。</p><div class="code-wrapper"><pre><code class="hljs applescript">java -<span class="hljs-built_in">version</span></code></pre></div><p><img src="https://imgs.leshans.eu.org/2024/01/9750070fe7df93ec71020759bdd974c8.webp"></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>paypal转账手续费</title>
    <link href="/posts/3fd8830d.html"/>
    <url>/posts/3fd8830d.html</url>
    
    <content type="html"><![CDATA[<p>收款：4.4%+0.3USD</p><p>比如我转30给你，你实际收到的是：30 -（30*4.4%+0.3）&#x3D;28.38</p><p>中国paypal转账到香港paypal，损耗5.5%</p><p>包括：2%交易总额+3.5%交易汇率&#x3D;5.5%</p><p>假设中国paypal转50美金到香港paypal,如果香港paypal要到账50美金，则需要：</p><p>50*（1+5.5%）&#x3D;52.75</p><p>汇率换算地址：<a href="https://wise.com/zh-cn/currency-converter/usd-to-cny-rate?amount=1">https://wise.com/zh-cn/currency-converter/usd-to-cny-rate?amount=1</a></p><p>中国大陆手续费：【<a href="https://www.paypal.com/c2/webapps/mpp/merchant-fees">点击进入</a>】 香港地区手续费：【<a href="https://www.paypal.com/hk/webapps/mpp/merchant-fees#additional-percentage">点击进入</a>】</p>]]></content>
    
    
    
    <tags>
      
      <tag>paypal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>套cf后 站点WAF防火墙规则设定</title>
    <link href="/posts/7a865a86.html"/>
    <url>/posts/7a865a86.html</url>
    
    <content type="html"><![CDATA[<h3 id="添加防火墙规则表达式-复制代码即可"><a href="#添加防火墙规则表达式-复制代码即可" class="headerlink" title="添加防火墙规则表达式 复制代码即可"></a>添加防火墙规则表达式 复制代码即可</h3><h5 id="第一：恶意流量阻止"><a href="#第一：恶意流量阻止" class="headerlink" title="第一：恶意流量阻止"></a>第一：恶意流量阻止</h5><p>操作：托管质询</p><div class="code-wrapper"><pre><code class="hljs stylus">(cf<span class="hljs-selector-class">.threat_score</span> ge <span class="hljs-number">5</span> and not cf<span class="hljs-selector-class">.client</span>.bot) or (not http<span class="hljs-selector-class">.request</span><span class="hljs-selector-class">.version</span> <span class="hljs-keyword">in</span> &#123;<span class="hljs-string">&quot;HTTP/1.2&quot;</span> <span class="hljs-string">&quot;HTTP/2&quot;</span> <span class="hljs-string">&quot;HTTP/3&quot;</span> <span class="hljs-string">&quot;SPDY/3.1&quot;</span>&#125;) or (not http<span class="hljs-selector-class">.user_agent</span> contains <span class="hljs-string">&quot;Mozilla/&quot;</span>)</code></pre></div><h5 id="第二：放行爬虫（seo）"><a href="#第二：放行爬虫（seo）" class="headerlink" title="第二：放行爬虫（seo）"></a>第二：放行爬虫（seo）</h5><p>操作：跳过</p><div class="code-wrapper"><pre><code class="hljs bash">(cf.client.bot) or (http.user_agent contains <span class="hljs-string">&quot;duckduckgo&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;facebookexternalhit&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;Feedfetcher-Google&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;LinkedInBot&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;Mediapartners-Google&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;msnbot&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;Slackbot&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;TwitterBot&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;ia_archive&quot;</span>) or (http.user_agent contains <span class="hljs-string">&quot;yahoo&quot;</span>)</code></pre></div><h5 id="第三：其他"><a href="#第三：其他" class="headerlink" title="第三：其他"></a>第三：其他</h5><p>跳过源站IP、区域或国家阻止</p><h3 id="CF的WAF的防火墙规则！"><a href="#CF的WAF的防火墙规则！" class="headerlink" title="CF的WAF的防火墙规则！"></a>CF的WAF的防火墙规则！</h3><p><img src="https://imgs.leshans.eu.org/2024/01/b443160daf498dfe9cacfc1a70d9724d.webp"></p><p><img src="https://imgs.leshans.eu.org/2024/01/6722fbdd4feb910ff8d8a41efec0a1d9.webp"></p><p><img src="https://imgs.leshans.eu.org/2024/01/4439083cfcccf86591fa458165383ec7.webp"></p><p><img src="https://imgs.leshans.eu.org/2024/01/d109af2b05d1ea0a25ffaad7298cad07.webp"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Cloudflare</tag>
      
      <tag>cdn</tag>
      
      <tag>攻击</tag>
      
      <tag>防火墙</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自建CDN-GoEdge CDN - 制作自己专属的CDN</title>
    <link href="/posts/6a8f59a7.html"/>
    <url>/posts/6a8f59a7.html</url>
    
    <content type="html"><![CDATA[<h2 id="系统需求"><a href="#系统需求" class="headerlink" title="系统需求"></a>系统需求</h2><p>最小需求：</p><ul><li>操作系统：Linux<ul><li>包括CentOS、RHEL、Debian、Ubuntu、RockyLinux、AlpineLinux及其他各种发行版本</li></ul></li><li>CPU不少于1核心</li><li>可用内存不少于1G</li><li>可用硬盘空间不小于10G</li></ul><p>对于每日千万访问以上的CDN系统推荐配置如下：</p><ul><li>CPU不少于8核心</li><li>可用内存不少于16G</li><li>可用硬盘空间不小于200G</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在安装GoEdge之前，需要你做以下准备工作：</p><ul><li>安装一个或者使用现有的 MySQL 5.7.8&#x2F;MySQL 8.0&#x2F;MySQL 8.1&#x2F;MySQL 8.2&#x2F;TiDB 3.0 以上版本；如果你会一些Linux基本命令，但是不知道怎么安装MySQL，可以参考这里 <a href="https://goedge.cn/docs/Appendix/MySQL/Install.md">安装MySQL</a>；另外请注意：<ul><li>安装使用的MySQL用户密码不能为空</li><li>当前只支持通过端口连接MySQL，不能使用Sock文件连接</li></ul></li><li>手动安装时，Linux服务器需要确认有 <code>unzip</code> 命令，用来解压压缩包，可以使用：</li></ul><blockquote><p>推荐系统： ubuntu 22.04 或者 20.04, debian安装有些问题</p></blockquote><p>先安装依赖：ubuntu系统可以跳过安装依赖</p><div class="code-wrapper"><pre><code class="hljs shell">apt install wget -y</code></pre></div><div class="code-wrapper"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> unzip</code></pre></div><div class="code-wrapper"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install xz-utils</code></pre></div><div class="code-wrapper"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> updatesudo apt-<span class="hljs-built_in">get</span> install libnuma1</code></pre></div><p>在Linux下可以尝试使用以下命令自动执行上述的安装步骤（前提是系统已经安装了 <code>wget</code> 命令）：</p><h2 id="一、安装MySQL"><a href="#一、安装MySQL" class="headerlink" title="一、安装MySQL"></a>一、安装MySQL</h2><div class="code-wrapper"><pre><code class="hljs bash">sudo sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(wget https://goedge.cn/install-mysql.sh -O -)</span>&quot;</span></code></pre></div><p>安装成功后，控制台会输出类似以下内容：</p><div class="code-wrapper"><pre><code class="hljs asciidoc">2022/11/03 11:45:08 finished<span class="hljs-section">installed successfully</span><span class="hljs-section">=======</span>user: rootpassword: ccdc61ea4dd0934bf3bfd4310517c41cdir: /usr/local/mysql</code></pre></div><p>请将这段内容保存起来，防止丢失，其中：</p><ul><li><code>user</code> - 用户名</li><li><code>password</code> - 密码</li><li><code>dir</code> - 安装位置</li></ul><h2 id="二、安装程序"><a href="#二、安装程序" class="headerlink" title="二、安装程序"></a>二、安装程序</h2><p>可以使用<code>install.sh</code>快速安装GoEdge管理平台，目前仅限于Linux系统；在你的系统上运行以下命令：</p><div class="code-wrapper"><pre><code class="hljs bash">sudo sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(wget https://goedge.cn/install.sh -O -)</span>&quot;</span></code></pre></div><p>运行后，如果遇到域名解析或者网络问题，请再次尝试执行；如果出现：</p><div class="code-wrapper"><pre><code class="hljs livecodeserver">started okplease <span class="hljs-built_in">open</span> <span class="hljs-keyword">the</span> url <span class="hljs-keyword">http</span>://SERVER_IP:<span class="hljs-number">7788</span> <span class="hljs-keyword">on</span> <span class="hljs-title">your</span> <span class="hljs-title">browser</span></code></pre></div><p>这样的提示，说明已经安装成功；默认的安装目录为<code>/usr/local/goedge/edge-admin</code>；安装后，在浏览器上访问：</p><div class="code-wrapper"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//IP地址:7788/</span></code></pre></div><p>即可进入安装界面，其中<code>IP地址</code>是你服务器的IP地址；如果服务器有安全策略或者防火墙，需要放行<code>7788</code>端口。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><code>edge-admin</code> 通常是在EdgeAdmin安装目录下的 <code>bin/</code> 目录下，在执行命令的时候请使用完整的路径或者使用相对路径，如：</p><div class="code-wrapper"><pre><code class="hljs bash">/<span class="hljs-variable">$EdgeAdmin</span>安装目录/bin/edge-admin -v</code></pre></div><p>或者：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /<span class="hljs-variable">$EdgeAdmin</span>安装目录bin/edge-admin -v</code></pre></div><blockquote><p>注意：如果提示命令找不到 <code>Unknown command: edge-admin</code>，说明你没有指定命令所在目录，请在命令执行时使用完整的路径或者使用相对路径，参考本文开始说明。</p></blockquote><h3 id="打印帮助信息"><a href="#打印帮助信息" class="headerlink" title="打印帮助信息"></a>打印帮助信息</h3><div class="code-wrapper"><pre><code class="hljs bash">edge-admin -h</code></pre></div><h3 id="打印版本信息"><a href="#打印版本信息" class="headerlink" title="打印版本信息"></a>打印版本信息</h3><div class="code-wrapper"><pre><code class="hljs bash">edge-admin -v</code></pre></div><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>启动服务并在后台运行：</p><div class="code-wrapper"><pre><code class="hljs bash">edge-admin start</code></pre></div><p>如果要在前端启动服务，并阻塞当前进程，可以使用：</p><div class="code-wrapper"><pre><code class="hljs bash">edge-admin</code></pre></div><h3 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h3><div class="code-wrapper"><pre><code class="hljs bash">edge-admin stop</code></pre></div><h3 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h3><div class="code-wrapper"><pre><code class="hljs bash">edge-admin restart</code></pre></div><h3 id="查看服务状态"><a href="#查看服务状态" class="headerlink" title="查看服务状态"></a>查看服务状态</h3><div class="code-wrapper"><pre><code class="hljs bash">edge-admin status</code></pre></div><h3 id="安装systemd系统服务"><a href="#安装systemd系统服务" class="headerlink" title="安装systemd系统服务"></a>安装systemd系统服务</h3><div class="code-wrapper"><pre><code class="hljs bash">edge-admin service</code></pre></div><h3 id="使用守护进程启动服务"><a href="#使用守护进程启动服务" class="headerlink" title="使用守护进程启动服务"></a>使用守护进程启动服务</h3><div class="code-wrapper"><pre><code class="hljs bash">edge-admin daemon</code></pre></div><h3 id="重置配置"><a href="#重置配置" class="headerlink" title="重置配置"></a>重置配置</h3><p>需要重装之前，你需要重置配置：</p><div class="code-wrapper"><pre><code class="hljs bash">edge-admin reset</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>萌芽采集插件启用提示“发现冲突文件”解决办法</title>
    <link href="/posts/e3bf55e6.html"/>
    <url>/posts/e3bf55e6.html</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>重复安装启用插件，或之前有过旧文件，再次启用插件可能会提示“发现冲突文件”，而导致无法启用插件</p><h1 id="下载地址-："><a href="#下载地址-：" class="headerlink" title="下载地址 ："></a>下载地址 ：</h1><p><a href="https://lzui.lanzouj.com/iTHdz1kx36mb">https://lzui.lanzouj.com/iTHdz1kx36mb</a></p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>在你程序内去检查以下插件文件，并删除</p><p>1、 先找到下方这个路径的文件夹，将这个文件夹删除</p><div class="code-wrapper"><pre><code class="hljs actionscript">/<span class="hljs-keyword">static</span>/mycj/</code></pre></div><p>2、再找到以下路径的文件并删除</p><div class="code-wrapper"><pre><code class="hljs applescript">/<span class="hljs-built_in">application</span>/extra/cjuser.php/<span class="hljs-built_in">application</span>/extra/cjfaves.php /<span class="hljs-built_in">application</span>/extra/cjversion.php</code></pre></div><p>3、然后再删除下面这个路径的文件</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/application/</span>admin<span class="hljs-regexp">/controller/</span>Mycj.php</code></pre></div><p>4、最后删除这个路径的文件夹即可</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/application/</span>admin<span class="hljs-regexp">/view/my</span>cj/</code></pre></div><p>将以上几个地方的文件删除，再重新上传插件，并启用试试看。</p><p>若提示启用成功，后台快捷菜单处没有显示快捷菜单，那么手动添加一下快捷菜单即可</p><div class="code-wrapper"><pre><code class="hljs arcade">萌芽采集资源,mycj/<span class="hljs-built_in">union</span></code></pre></div><p>复制上方快捷菜单代码，添加到快捷菜单里面并保存即可</p><p><img src="https://imgs.leshans.eu.org/2024/01/30c1ac6daef2b01604cedb562b962657.webp"></p>]]></content>
    
    
    
    <tags>
      
      <tag>苹果cms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>苹果cms通用清理php后门自动脚本</title>
    <link href="/posts/fdba35f2.html"/>
    <url>/posts/fdba35f2.html</url>
    
    <content type="html"><![CDATA[<h3 id="一键清理挂马脚本："><a href="#一键清理挂马脚本：" class="headerlink" title="一键清理挂马脚本："></a>一键清理挂马脚本：</h3><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/xiu.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x xiu.sh &amp;&amp; ./xiu.sh</code></pre></div><p>1：脚本会把网站配置文件备份到<code>/home/back</code>目录</p><p>2：&#x2F;template 以及 &#x2F;upload目录内的所有 .php 文件删除</p><p>3：检查并处理 template 和 upload 文件夹内的文件</p><p>4：删除 template 和 upload 文件夹内包含 &lt;?php 或 {php 代码段的文件</p><p>5：将删除的文件备份到<code>/home/back</code>目录</p><p>这样的好处是，在你查看<code>/home/back</code>，你会看到哪些文件是添加了&lt;?php 或 {php 代码的，</p><p>除了配置文件本身存在一个&lt;?php内是一个return array返回数组,如果还有其他&lt;?php块就是后门</p><p>剩下的html文件请仔细检查</p><h3 id="注意：为了安全起见-每次发现被挂马后应该用以下方法来处理！！！"><a href="#注意：为了安全起见-每次发现被挂马后应该用以下方法来处理！！！" class="headerlink" title="注意：为了安全起见 每次发现被挂马后应该用以下方法来处理！！！"></a>注意：为了安全起见 每次发现被挂马后应该用以下方法来处理！！！</h3><p>黑客入侵后可能在数据库挂js，可能在网站目录任何角落留下php后门，用以下方法可以快速清理干净php后门，不用一个一个文件去分析。</p><p>1，备份原网站配置文件 ，并检查里边是否有后门代码，正常情况下&lt;?php内是一个return array返回数组，如果还有其他&lt;?php块就是后门。<br>\application\database.php<br>\application\route.php<br>\application\extra\maccms.php<br>\application\extra\bind.php<br>\application\extra\timming.php<br>\application\extra\vodplayer.php<br>\application\extra\voddowner.php<br>\application\extra\vodserver.php</p><p>2，检查以下目录搜索 *.php ，删除所有;并检查模板文件内是否有&lt;?php或{php代码段删除。<br>\template\<br>\upload\</p><p>3，删除原有目录及所有文件，并下载最新程序包，覆盖<br>\addons\<br>\application\<br>\extend\<br>\static\<br>\runtime\<br>\thinkphp\<br>\vendor\<br>\说明文档\<br>\admin.php 自定义后台入口文件<br>\api.php 自定义api入口文件<br>\index.php<br>\install.php</p><p>4，把刚才备份的配置文件覆盖到application下即可</p><p>5，修改后台入口文件名；登录后台检查管理员账号并修改密码，删除多余被黑客创建的账号；</p>]]></content>
    
    
    
    <tags>
      
      <tag>苹果cms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>海洋cms自动采集之宝塔面板定时任务</title>
    <link href="/posts/8d60a0fd.html"/>
    <url>/posts/8d60a0fd.html</url>
    
    <content type="html"><![CDATA[<p><strong>第一步：获取脚本代码</strong><br>下面是自动采集脚本代码</p><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-comment">#!/bin/bash</span><span class="hljs-comment">########################################################</span><span class="hljs-comment"># 程序名称: 海洋CMS自动采集脚本</span><span class="hljs-comment"># 版本信息：seacmsbot/ v2.0</span><span class="hljs-comment"># 发布链接: https://www.seacms.net/</span><span class="hljs-comment"># 使用方法：直接复制代码到宝塔计划任务shell脚本内容里添加每小时任务使用</span><span class="hljs-comment"># 更新时间：2019.9.26</span><span class="hljs-comment">##########################################################</span><span class="hljs-comment">#①请修改下面的网站域名及管理目录</span><span class="hljs-attribute">web_site</span>=<span class="hljs-string">&quot;http://你的域名/管理目录/admin_reslib2.php&quot;</span>  <span class="hljs-comment">#②请修改下面项内容为&quot;admin_reslib2.php&quot;里设置的访问密码(默认为系统设置的cookie密码)</span><span class="hljs-attribute">web_pwd</span>=<span class="hljs-string">&quot;111111111111111111&quot;</span>  <span class="hljs-comment">#③下面项内容为资源站每日采集链接地址列表，请自行修改,每行一条,可添加多个，前后需添加引号。</span><span class="hljs-comment">#每日采集链接获取方法:选择&quot;后台-采集-资源库列表&quot;,复制资源站右边的&quot;采集每天&quot;的链接地址,去掉?前面的内容。</span>web_api=(         <span class="hljs-string">&#x27;?ac=day&amp;rid=2&amp;url=https://ikunzyapi.com/api.php/seaxml/vod/at/xml&#x27;</span>     <span class="hljs-string">&#x27;?ac=day&amp;rid=3&amp;url=https://taopianapi.com/cjapi/sea/vod/xml/m3u8.html&#x27;</span> )<span class="hljs-comment">#模拟用户浏览器ua,请勿随意修改，以免被目标防火墙拦截!</span><span class="hljs-attribute">web_ua</span>=<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)</span><span class="hljs-string">Chrome/76.0.3809.100 Safari/537.36 seacmsbot/1.2;&quot;</span>  <span class="hljs-comment">#采集单页</span>function get_content() &#123;  echo  <span class="hljs-string">&quot;正在采集第<span class="hljs-variable">$page</span>页...&quot;</span>  #echo  <span class="hljs-string">&quot; get_content: ---&gt;url:---&gt;<span class="hljs-variable">$1</span>&quot;</span>  <span class="hljs-attribute">cResult</span>=$(curl  --connect-timeout 10 -m 20  -k -s   -L -A <span class="hljs-string">&quot;<span class="hljs-variable">$web_ua</span>&quot;</span>  <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> )  echo <span class="hljs-variable">$cResult</span> | grep -q <span class="hljs-string">&quot;采集&quot;</span>  #echo  -e  <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>\n<span class="hljs-variable">$cResult</span>&quot;</span> <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;$?&quot;</span> = <span class="hljs-string">&quot;0&quot;</span> ]; then     next_content <span class="hljs-string">&quot;<span class="hljs-variable">$cResult</span>&quot;</span><span class="hljs-keyword">else</span>    echo  -e <span class="hljs-string">&quot;采集失败,请检查设置!\n失败链接--&gt;<span class="hljs-variable">$1</span>\n返回信息--&gt;<span class="hljs-variable">$cResult</span>\n采集结束，共0页&quot;</span>fi&#125;<span class="hljs-comment">#采集下页</span>function next_content() &#123;    #统计数据     <span class="hljs-attribute">Result</span>=$(echo <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> | tr <span class="hljs-string">&quot;</span><span class="hljs-string">&quot;</span> <span class="hljs-string">&quot;\n&quot;</span>)     <span class="hljs-attribute">a</span>=$(echo <span class="hljs-string">&quot;<span class="hljs-variable">$Result</span>&quot;</span> | grep -c  <span class="hljs-string">&quot;采集成功&quot;</span>)     <span class="hljs-attribute">b</span>=$(echo <span class="hljs-string">&quot;<span class="hljs-variable">$Result</span>&quot;</span> | grep -c  <span class="hljs-string">&quot;更新数据&quot;</span>)     <span class="hljs-attribute">c</span>=$(echo <span class="hljs-string">&quot;<span class="hljs-variable">$Result</span>&quot;</span> | grep -c  <span class="hljs-string">&quot;无需更新&quot;</span>)     <span class="hljs-attribute">d</span>=$(echo <span class="hljs-string">&quot;<span class="hljs-variable">$Result</span>&quot;</span> | grep -c  <span class="hljs-string">&quot;跳过&quot;</span>)     echo <span class="hljs-string">&quot;采集成功--&gt;已更<span class="hljs-variable">$c</span>部,新增<span class="hljs-variable">$a</span>部,更新<span class="hljs-variable">$b</span>部,跳过<span class="hljs-variable">$d</span>部&quot;</span>     let add+=<span class="hljs-variable">$a</span>     let update+=<span class="hljs-variable">$b</span>     let none+=<span class="hljs-variable">$c</span>     let jmp+=<span class="hljs-variable">$d</span>    #检测并采集下页     <span class="hljs-attribute">next_url</span>=<span class="hljs-variable">$&#123;1##*location.href=\&#x27;&#125;</span>     <span class="hljs-attribute">next_url</span>=<span class="hljs-variable">$&#123;next_url%%\&#x27;*&#125;</span>      #echo <span class="hljs-variable">$next_url</span>      <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;next_url:0:1&#125;</span>&quot;</span> = <span class="hljs-string">&quot;?&quot;</span> ]          then          let page++          get_content <span class="hljs-string">&quot;<span class="hljs-variable">$web_site</span><span class="hljs-variable">$next_url</span>&quot;</span>    <span class="hljs-keyword">else</span>         echo <span class="hljs-string">&quot;采集结束，共<span class="hljs-variable">$page</span>页&quot;</span>       fi  &#125;<span class="hljs-comment">#脚本入口</span>echo <span class="hljs-string">&quot;海洋CMS自动采集脚本开始执行 版本：v1.2&quot;</span><span class="hljs-attribute">starttime</span>=$(date +%s)<span class="hljs-attribute">update</span>=0  #更新<span class="hljs-attribute">add</span>=0     #新增<span class="hljs-attribute">none</span>=0  #无变化<span class="hljs-attribute">jmp</span>=0  # 跳过<span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;web_api[@]&#125;</span>;<span class="hljs-keyword">do</span>  <span class="hljs-keyword">if</span> [[ ! -z <span class="hljs-variable">$url</span> ]]     then           <span class="hljs-attribute">web_param</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$web_site</span><span class="hljs-variable">$url</span>&amp;password=<span class="hljs-variable">$web_pwd</span>&quot;</span>           <span class="hljs-attribute">page</span>=1           echo <span class="hljs-string">&quot;开始采集：<span class="hljs-variable">$url</span>&quot;</span>           get_content <span class="hljs-variable">$web_param</span>  fidone<span class="hljs-attribute">endtime</span>=$(date +%s)echo <span class="hljs-string">&quot;============================&quot;</span>echo <span class="hljs-string">&quot;入库--&gt;<span class="hljs-variable">$add</span>部&quot;</span>echo <span class="hljs-string">&quot;更新--&gt;<span class="hljs-variable">$update</span>部&quot;</span>echo <span class="hljs-string">&quot;跳过--&gt;<span class="hljs-variable">$jmp</span>部(未绑定分类或链接错误)&quot;</span>echo <span class="hljs-string">&quot;今日--&gt;$[none+add+update]部&quot;</span>echo <span class="hljs-string">&quot;============================&quot;</span>echo  <span class="hljs-string">&quot;全部采集结束,耗时$[endtime - starttime]秒&quot;</span></code></pre></div><p><strong>第二步：修改脚本</strong><br>需要修改脚本里面的3项内容：</p><div class="code-wrapper"><pre><code class="hljs jboss-cli"><span class="hljs-comment">#①请修改下面的网站域名及管理目录</span>web_site=<span class="hljs-string">&quot;http://网站域名/管理目录/admin_reslib2.php&quot;</span>这个是需要修改成你的“网站域名”和“海洋cms后台的管理目录”。域名大家都能理解，后台的管理目录这个对于新手来说需要多讲两句，首先你要能登录你的后台才可以知道你的后台目录。举例说明：假如我的后台登录地址是 mytheme.cn/xxxx/那么这里的“xxxx”就是后台的管理目录，得到了管理目录我们直接填写到代码里即可。<span class="hljs-comment">#②请修改下面项内容为&quot;admin_reslib2.php&quot;里设置的访问密码(默认为系统设置的cookie密码)</span>web_<span class="hljs-keyword">pwd</span>=<span class="hljs-string">&quot;8888e82e85bd4540f0defa3fb7a8e888&quot;</span>这个修改需要到海洋cms系统后台得到我们的cookie密码进行替换才可以，具体步骤：系统-网站设置-cookie密码。得到自己网站的cookie密码后替换即可。<span class="hljs-comment">#③下面项内容为资源站每日采集链接地址列表，请自行修改,每行一条,可添加多个，前后需添加引号。</span><span class="hljs-comment">#每日采集链接获取方法:选择&quot;后台-采集-资源库列表&quot;,复制资源站右边的&quot;采集每天&quot;的链接地址,去掉?前面的内容。</span>web_api=<span class="hljs-params">(   </span><span class="hljs-params">      &#x27;?<span class="hljs-attr">ac</span>=day&amp;<span class="hljs-attr">rid</span>=1&amp;<span class="hljs-attr">url</span>=https://api.iokzy.com/inc/ldg_seackm3u8s.php&#x27;</span><span class="hljs-params">     &#x27;?<span class="hljs-attr">ac</span>=day&amp;<span class="hljs-attr">rid</span>=2&amp;<span class="hljs-attr">url</span>=http://www.zdziyuan.com/inc/s_ldgm3u8_sea.php&#x27;  </span><span class="hljs-params">)</span>这个是代码里需要修改的最后一项，里面是代码里默认提供的2个采集链接地址，我们需要获取自己的采集链接API地址添加到里面。</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023年最新可采集CMS视频资源站网址合集</title>
    <link href="/posts/8a1cf1d5.html"/>
    <url>/posts/8a1cf1d5.html</url>
    
    <content type="html"><![CDATA[<ol><li>飞速资源 <a href="https://help.feisuzyapi.com/">https://help.feisuzyapi.com/</a></li><li>闪电资源 <a href="http://shan04.com/">http://shan04.com/</a></li><li>樱花资源 <a href="https://yhzy.cc/">https://yhzy.cc/</a></li><li>百度资源 <a href="http://bdzy.com/">http://bdzy.com/</a></li><li>无尽资源 <a href="https://www.wujinzy.com/">https://www.wujinzy.com/</a></li><li>酷点资网 <a href="https://www.kudian20.com/">https://www.kudian20.com/</a></li><li>红牛资源 <a href="https://www.hongniuziyuan.com/">https://www.hongniuziyuan.com/</a></li><li>云解析资源 <a href="https://www.yparse.com/help">https://www.yparse.com/help</a></li><li>天空资源 <a href="http://help.tiankongapi.com/">http://help.tiankongapi.com/</a></li><li>天堂官方资源 <a href="http://vipmv.cc/help/">http://vipmv.cc/help/</a></li><li>1080zyk优质资源 <a href="https://1080zyk2.com/">https://1080zyk2.com/</a></li><li>卧龙影视资源 <a href="http://wolongzyw.com/">http://wolongzyw.com/</a></li><li>全网影视资源 <a href="http://hao123.daicuo.cc/">http://hao123.daicuo.cc/</a></li><li>fox资源 <a href="https://help.foxzyapi.com/">https://help.foxzyapi.com/</a></li><li>金鹰资源 <a href="https://jinyingzy.net/">https://jinyingzy.net/</a></li><li>新浪资源 <a href="https://xinlangzy.com/">https://xinlangzy.com/</a></li><li>光速影视资源 <a href="https://guangsuzy.com/">https://guangsuzy.com/</a></li><li>奥斯卡资源 <a href="https://aosikazy.com/static/help/index.html">https://aosikazy.com/static/help/index.html</a></li><li>快车资源 <a href="https://www.kuaichezy.com/">https://www.kuaichezy.com/</a></li><li>淘片资源 (需VPN) <a href="https://www.taopianzy.com/">https://www.taopianzy.com/</a></li><li>量子资源 <a href="http://lzizy.net/">http://lzizy.net/</a></li><li>诺讯资源 <a href="https://caiji.nxflv.com/">https://caiji.nxflv.com/</a></li><li>tom资源 <a href="https://www.tomziyuan.com/">https://www.tomziyuan.com/</a></li><li>三零资源 <a href="http://www.000zy.com/">http://www.000zy.com/</a></li><li>麒麟资源(需要授权) <a href="https://www.qilinzyz.com/">https://www.qilinzyz.com/</a></li><li>鱼乐资源 <a href="https://www.ylzy1.com/">https://www.ylzy1.com/</a></li><li>ikun资源 <a href="https://www.ikunzy.com/">https://www.ikunzy.com/</a></li><li>阳光资源 <a href="https://www.xxzy.org/">https://www.xxzy.org/</a></li><li>U酷资源 <a href="https://ukuzy.com/">https://ukuzy.com/</a></li><li>非凡资源 <a href="http://ffzy.tv/">http://ffzy.tv/</a></li><li>伊人资源 <a href="https://yrzyz9.com/">https://yrzyz9.com/</a></li><li>天猫资源 <a href="https://tianmaozy.com/">https://tianmaozy.com/</a></li><li>快车资源 <a href="https://www.kuaichezy.com/">https://www.kuaichezy.com/</a></li><li>海外看资源(需VPN) <a href="https://haiwaikan.com/">https://haiwaikan.com/</a></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>利用谷歌邮箱别名获取无限Gmail邮箱</title>
    <link href="/posts/1e1411d2.html"/>
    <url>/posts/1e1411d2.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们注册有些国外的服务时，是不能用国内邮箱注册的，这时一个Gmail邮箱就显得很有必要。而有时候我们会需要注册多个账号，当然你可以用多个Gmail邮箱来注册。但多个Gmail邮箱又不好管理，而且现在Gmail邮箱也不是那么好注册了，这时你就会需要下面我要介绍的内容了，利用Gmail邮箱的别名功能来实现同一邮箱获取无限多个Gmail邮箱号。</p><p>在这之前你需要有一个谷歌账号（Gmail邮箱）。没有的话去到这里注册：<a href="http://mail.google.com/">http://mail.google.com</a>（目前注册可能需要特殊方法，请自行搜索解决）。</p><h2 id="Gmail邮箱别名设置"><a href="#Gmail邮箱别名设置" class="headerlink" title="Gmail邮箱别名设置"></a>Gmail邮箱别名设置</h2><p>这里我们假设你的Gmail邮箱为：<code>abcdef@gmail.com</code> ，那就可以通过以下办法得到无限的谷歌邮箱别名。</p><h3 id="1-用户名之间加-（英文半角）"><a href="#1-用户名之间加-（英文半角）" class="headerlink" title="1.用户名之间加 . （英文半角）"></a>1.用户名之间加 <code>.</code> （英文半角）</h3><blockquote><p><strong>例如：</strong> <code>abc.def@gmail.com</code></p><p>因为Gmail的用户名是不区分 <code>.</code> 符号的，所以下面其实都是同一个用户名</p></blockquote><ul><li>abcde.f</li><li>a.bcdef</li><li>ab.cdef</li><li>a.b.cdef</li><li>abc.d.ef</li></ul><h3 id="2-用户名后面加-任意字符"><a href="#2-用户名后面加-任意字符" class="headerlink" title="2.用户名后面加 +任意字符"></a>2.用户名后面加 <code>+任意字符</code></h3><blockquote><p><strong>例如：</strong> <code>abcdef+dev@gmail.com</code></p><p><code>+</code> 号后面可以是任意字符，例如：</p></blockquote><ul><li>+dev</li><li>+my</li><li>+sub</li><li>……</li></ul><p><strong>PS：</strong>使用“+”号法，在许多网站注册时候，并不识别邮箱地址中的“+”，会提示你邮箱错误。</p><h3 id="3-改变用户名中任意字符的大小写"><a href="#3-改变用户名中任意字符的大小写" class="headerlink" title="3.改变用户名中任意字符的大小写"></a>3.改变用户名中任意字符的大小写</h3><blockquote><p><strong>例如：</strong> <code>aBCdef@gmail.com</code></p><p>可以是用户名里的某个或多个字符，</p></blockquote><ul><li><a href="mailto:Abcdef@gmail.com">Abcdef@gmail.com</a></li><li><a href="mailto:AbcDeF@gmail.com">AbcDeF@gmail.com</a></li><li><a href="mailto:abcdEf@gmail.com">abcdEf@gmail.com</a></li></ul><h3 id="4-把后缀变为-googlemail-com"><a href="#4-把后缀变为-googlemail-com" class="headerlink" title="4. 把后缀变为 googlemail.com"></a>4. 把后缀变为 <code>googlemail.com</code></h3><blockquote><p>因为之前Gmail在某些国家的商标没有谈好，不能使用Gmail商标，只好用googlemail，这个很好理解。（貌似现在全球的商标都已经谈妥了）</p></blockquote><p><strong>例如：</strong> <code>abcdef@googlemail.com</code></p><h3 id="５-以上４种方法的结合"><a href="#５-以上４种方法的结合" class="headerlink" title="５.以上４种方法的结合"></a>５.以上４种方法的结合</h3><blockquote><p>可以结合上面的4种方法来实现理论上的无限别名。例如：</p></blockquote><ul><li><a href="mailto:aBcdef+dev@googlemail.com">aBcdef+dev@googlemail.com</a></li><li><a href="mailto:AbcDEf+sub@googlemail.com">AbcDEf+sub@googlemail.com</a></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>了解了上面的Gmail别名设置的方法后，当你要注册一些服务的时候，只要在填写Gmail邮箱的时候填写通过上述的方法得到的别名邮箱就可以了。无需到Gmail设置，所有的别名邮箱的邮件都会发送到你原来的邮箱 <code>abcdef@gmail.com</code> 中。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Cloudflare 页面缓存（Page Rules）优化WordPress全站缓存配置规则</title>
    <link href="/posts/c12b80db.html"/>
    <url>/posts/c12b80db.html</url>
    
    <content type="html"><![CDATA[<h3 id="为什么要设置Cloudflare的页面规则-（Page-Rules）进行全站缓存？"><a href="#为什么要设置Cloudflare的页面规则-（Page-Rules）进行全站缓存？" class="headerlink" title="为什么要设置Cloudflare的页面规则 （Page Rules）进行全站缓存？"></a>为什么要设置Cloudflare的页面规则 （Page Rules）进行全站缓存？</h3><p>当你接入Cloudflare的CDN，并点亮小云朵之后。你的网站就已经通过Cloudflare的CDN节点进行中转了。默认情况下，Cloudflare 会对你网站中的图片、JS、CSS文件等静态文件进行缓存。</p><p>当访客访问你网站页面的时候，所有的静态文件都是由Cloudflare的节点直接给到访客的，但是HTML文件是默认不缓存的。也就意味着访客访问你的某一页面的时候。仍然会<strong>回源你的</strong><a href="https://cloud.tencent.com/act/pro/promotion-cvm?from_column=20065&from=20065"><strong>服务器</strong></a>。</p><p>所以，本篇文章就是教你如何使用Cloudflare的页面规则（Page Rules）把整个HTML页面给缓存。 使访客访问被缓存的页面的时候，直接交由Cloudflare进行服务，甚至你的源服务器不会收到任何GET请求。</p><p><strong>这样做的好处是，可以大大减少源服务器的负载开支，使得你的站点能够承载更多的访客及流量。</strong></p><p><em>下面两张演示图片就是使用了Cloudflare页面规则之后，节省的源站服务器的请求及流量。</em></p><p><img src="https://r2.leshans.eu.org/2023/12/ef3ec775cc2e7f873aebe2446daff8bc.webp"></p><p><img src="https://r2.leshans.eu.org/2023/12/a6e19dd394d7a2881a752be9cc7e9721.webp"></p><h3 id="如何通过浏览器判断某个页面是否被Cloudflare的CDN进行缓存？"><a href="#如何通过浏览器判断某个页面是否被Cloudflare的CDN进行缓存？" class="headerlink" title="如何通过浏览器判断某个页面是否被Cloudflare的CDN进行缓存？"></a>如何通过浏览器判断某个页面是否被Cloudflare的CDN进行缓存？</h3><p>在学会如何判断之前，我们要先熟悉一个CDN中常见的术语：<strong>“HIT”</strong>，中文叫做<strong>“命中”</strong>。我们先看下面这样演示的图片：</p><p><img src="https://r2.leshans.eu.org/2023/12/a051176bbae607346c8c0d0016292e11.webp"></p><p>可见，图中对过往24小时之内的所有请求有一个统计，统计分为：<strong>命中</strong>、<strong>未命中</strong>、<strong>动态</strong>、<strong>绕过</strong>……等等状态。</p><ul><li>【命中】<em>状态就表示已经整网页完全被Cloudflare的CDN提供了服务；</em></li><li>【绕过】<em>状态则表示直接绕过Cloudflare的CDN由源站进行服务；</em></li><li>【动态】<em>状态则表示部分资源被Cloudflare的CDN缓存并服务，但混合了一些源站的请求；</em></li><li>【未命中】<em>因为命中与否是一个概率问题。Cloudflare 也并不能保证在缓存规则中的所有资源都完整的命中。</em></li></ul><p><strong>注：如果你开启了小云朵，但并未配置页面规则。</strong>那么你的绝大多数状态都是【<strong>动态</strong>】，因为访客访问页面中的静态资源交由Cloudflare进行提供，还是有一些请求是通过源站来服务的。</p><p>接下来，我们以Chrome为示范。教大家判断一个网页在开启Cloudflare CDN之后的缓存状态到底是<strong>【命中】</strong>亦或是<strong>【动态】</strong></p><blockquote><p>打开接入Cloudflare的网站页面，这里以陌涛小站首页示范。 “F12” 进入“<a href="https://cloud.tencent.com/product/cclid?from_column=20065&from=20065">开发者工具</a>”，点击“Network”选项卡。 “Control + F5” 刷新该页面（苹果系统请使用 Command + R），并在“Name”栏中选择“网址”。</p></blockquote><p><img src="https://r2.leshans.eu.org/2023/12/d47c2de2c5124340260ab60a3245817a.webp"></p><p><strong>从上图中可以看到 cf-cache-status 的值为 “HIT”，则说明该页面已经完全缓存。</strong></p><h3 id="其他状态解释如下："><a href="#其他状态解释如下：" class="headerlink" title="其他状态解释如下："></a>其他状态解释如下：</h3><p><strong>cf-cache-status:DYNAMIC （动态）</strong> 如果是“DYNAMIC”则说明，该站可能只开启了小云朵，并没有配置整站完全缓存。 <strong>cf-cache-status:BYPASS （绕过）</strong> 如果是“BYPASS”则说明，该站针对这个页面设置了绕过，不允许缓存。</p><h3 id="Cloudflare的缓存机制"><a href="#Cloudflare的缓存机制" class="headerlink" title="Cloudflare的缓存机制"></a>Cloudflare的缓存机制</h3><p>假设你的站点有 <a href="http://www.renao.org/1.html">www.renao.org/1.html</a> 和 <a href="http://www.renao.org/2.html">www.renao.org/2.html</a> 两个页面。</p><p><strong>当访客A 访问1.html这个页面的时候，首先会经由Cloudflare，这个时候你的页面规则就起作用了。</strong> Cloudflare会发现，吼吼，这个站有个1.html 我给它缓存下来，并且转发给A。</p><p><strong>当访客B 在Edge Cache过期时间之前，重复访问1.html的时候。</strong> Cloudflare会思考一下。哈哈哈，这个1.html我有。不用麻烦源站了。我直接给到B就可以了。</p><p>这就是所谓的命中率，如果这个页面被完全命中，那么B访问1.html虽然得到了网页，但是是由Cloudflare直接提供的。你的源站甚至连客户的IP都统计不到。</p><p>但是，2.html 这个页面在你的规则建立开始时从未有任何访客访问过。那么Cloudflare也不知道这个页面的存在，也不会缓存。除非等到真的有人访问过，Cloudflare才会发现，并对其进行缓存。</p><p><strong>好了，冗长的理论知识讲完了，我们来进行实战。</strong> <strong>这里以Wordpress源站举例，来详细讲解如何设置页面规则才能够进行全站缓存。</strong></p><h3 id="一、Cloudflare-页面规则-免费版3条规则配置"><a href="#一、Cloudflare-页面规则-免费版3条规则配置" class="headerlink" title="一、Cloudflare 页面规则 免费版3条规则配置"></a>一、Cloudflare 页面规则 免费版3条规则配置</h3><p>由于Cloudflare<strong>免费版只提供了三条免费的规则</strong>，所以我们的想法有很多，但是真正实现起来肯定要有所取舍。下面提供了三种陌涛小站测试过的方法。根据你网站的具体情况选择即可。</p><p><em>在所有的规则配置中，“*”代表通配符，另外，规则注意上下排序。默认从第一条规则顺延到第二条规则，然后才是第三条规则。具体请参照以下【三种方法】的详细配置说明。</em></p><h4 id="方法一、常规无人值守方法（网上流传配置方法）"><a href="#方法一、常规无人值守方法（网上流传配置方法）" class="headerlink" title="方法一、常规无人值守方法（网上流传配置方法）"></a>方法一、常规无人值守方法（网上流传配置方法）</h4><ul><li><em>.imotao.xyz&#x2F;wp-login</em></li><li><em>.imotao.xyz&#x2F;wp-admin</em></li><li><em>.imotao.xyz&#x2F;</em></li></ul><p><img src="https://r2.leshans.eu.org/2023/12/f2cf9aedd914b1efccaa125464e1184a.webp"></p><p><strong>第一条和第二条：</strong> 研究Wordpress后台目录，我们发现：wp-login 和 wp-admin 两个页面或目录分别是Wordpress后台的登陆页面和后台管理目录。为了让Cloudflare不缓存这些内容。我们在第一条和第二条中。建立的规则是<strong>Bypass</strong>，也就是绕过。</p><p><strong>第三条：</strong> 此条规则很简单，也很容易理解。就是告诉Cloudflare 进行全局缓存。无论是图片、html、js、css、等等统统给我缓存。当然，按照上面提到的排序规则。Cloudflare会过滤掉以上我们不想要缓存的第一条、第二条。</p><h3 id="方法二、常规无人值守方法"><a href="#方法二、常规无人值守方法" class="headerlink" title="方法二、常规无人值守方法"></a>方法二、常规无人值守方法</h3><ul><li>*.imotao.xyz&#x2F;<em>preview&#x3D;true</em></li><li><em>.imotao.xyz&#x2F;</em>.php*</li><li><em>.imotao.xyz&#x2F;</em></li></ul><p><img src="https://r2.leshans.eu.org/2023/12/e6e716c806f051b67082655879d4eded.webp"></p><p><strong>第一条：</strong> 由于Wordpress 提供了预览页面，我们研究Wordpress 的预览页面URL可以发现一个特征，预览页面的URL都含有<strong>“preview&#x3D;ture”</strong>这个字段，所以通过第一条规则，可以限制Cloudflare 缓存我们的<strong>预览页面</strong>。如果没有此条规则，Cloudflare会缓存我们预览的页面。但实际缓存了<strong>预览页面</strong>对网站本身的影响并不大。</p><p><strong>第二条：</strong> 这条规则可以说是十分重要了。如果不设置此条规则，那么我们的<strong>后台页面</strong>、甚至包括<strong>登陆页面</strong>也都会被Cloudflare给缓存进去。曾经有小伙伴的wp-login页面（Wordpress默认登陆页面）连带着登陆账号密码统统被缓存了。访客直接可以通过缓存的账号密码进入Wordpress的后台，你说恐怖不恐怖？ <strong>此条规则是我们为了防止Cloudflare缓存我们的动态页面（登陆页、后台页）。这条简单粗暴的直接将所有带有“.php”的页面请求全部Bypass 也就是不缓存。</strong></p><p><strong>第三条：</strong> 同【方法一】的第三条</p><h3 id="方法三、常规无人值守（并为针对“搜索功能的CC攻击”单独开启5秒盾）"><a href="#方法三、常规无人值守（并为针对“搜索功能的CC攻击”单独开启5秒盾）" class="headerlink" title="方法三、常规无人值守（并为针对“搜索功能的CC攻击”单独开启5秒盾）"></a>方法三、常规无人值守（并为针对“搜索功能的CC攻击”单独开启5秒盾）</h3><ul><li><em>.imotao.xyz&#x2F;?s&#x3D;</em></li><li><em>.imotao.xyz&#x2F;</em>.php*</li><li><em>.imotao.xyz&#x2F;</em></li></ul><p><img src="https://r2.leshans.eu.org/2023/12/849d93d720510f97438d02b8c6973fe3.webp"></p><p><strong>第一条：</strong> 将所有在Wordpress站内搜索的用户开启5秒盾。一般针对Wordpress的CC攻击都是通过随机UA、随机搜索内容来创建数千、数万的URL。并通过大量的代理IP来模拟真实用户访问。毕竟搜索在Wordpress这个系统中是需要调用<a href="https://cloud.tencent.com/solution/database?from_column=20065&from=20065">数据库</a>，很消耗服务器资源的。 如果攻击者不清楚你的Page Rules 的配置规则，通过站内搜索对你的站点进行CC攻击的时候，此规则就能够很好的帮助你缓解攻击。除非他技术高超可以穿<strong>5秒盾</strong>。</p><p><strong>第二条：</strong> 同【方法二】的第二条</p><p><strong>第三条：</strong> 同【方法二】的第三条</p><p><strong>使用此种方法，将会舍弃上面方法二提到的【文章预览】功能不缓存，影响并不大。</strong></p><h4 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h4><p>如果你留意到了上面提到的缓存机制的时候，一定要注意一件事情。就是若作为管理着的你登陆在Cloudflare的后台。有些主题在登陆状态下浏览文章是有“登陆条”的。所以尴尬的事情会发生。就是Cloudflare会无差别的把你的登陆条给缓存上去。真正的访客登陆到页面的时候，能看到你的用户名、留言数、等等关键信息。 所以，你需要<strong>在Wordpress的设置中关掉显示登陆条的功能</strong>。</p><h3 id="二、Cloudflare-Pro-页面规则-20或30条规则配置"><a href="#二、Cloudflare-Pro-页面规则-20或30条规则配置" class="headerlink" title="二、Cloudflare Pro 页面规则 20或30条规则配置"></a>二、Cloudflare Pro 页面规则 20或30条规则配置</h3><p>如果你有<strong>Cloudflare Pro的付费版本</strong>，那么恭喜你可以配置<strong>20条</strong>页面规则。</p><p>这里贴出一个配置的示范。</p><p><img src="https://r2.leshans.eu.org/2023/12/2bb554c9fd849698bdae26d159c51c65.webp"></p><p><strong>这里的第6条，设置之后，所有的动态页面（php）的请求全部301重定向到了陌涛小站的首页。也就意味着我自己也不能登陆后台进行编辑了。当我需要写文章的时候，将此条规则临时关闭,并清楚本地浏览器缓存就可以了。</strong></p><h2 id="三、其他Cloudflare-常见功能"><a href="#三、其他Cloudflare-常见功能" class="headerlink" title="三、其他Cloudflare 常见功能"></a>三、其他Cloudflare 常见功能</h2><p><strong>清除缓存：</strong>当我们的页面已经被完全缓存之后，更新页面需要单独删除此链接的缓存，以便Cloudflare重新从源站抓取。</p><p><strong>I’m In Attack：</strong>开启5秒盾模式</p><p><strong>调试模式：</strong>开启之后默认绕过所有缓存，以便我们进行调试。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Cloudflare</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新版 CloudFlare CDN 防攻击设置</title>
    <link href="/posts/3a7df0bf.html"/>
    <url>/posts/3a7df0bf.html</url>
    
    <content type="html"><![CDATA[<p>前段时间网站一直被攻击，然后博主扛不住了搬去了 CloudFlare 。初期因为设置问题，攻击还是透过了CloudFlare 打到了源站。后面经过多次的设置后已经可以完全阻止攻击请求了。下面给大家分享下我的设置，如果你的网站被攻击了，可以根据自己的实际情况微调修改下。</p><h2 id="1-设置前说明"><a href="#1-设置前说明" class="headerlink" title="1.设置前说明"></a>1.设置前说明</h2><p>网站程序为WordPress，不同程序可能需要微调下策略。</p><p>CloudFlare免费版默认设置是针对整个域名的，如果你有其他二级域名站点，需要注意下这个策略对你其他站点有没有影响。</p><p>在你使用CloudFlare前确保你的源站IP没有暴露，否则对方可以直接指定hosts到你的源站IP，CloudFlare就形同虚设。</p><p>如果源站IP已经暴露，先把数据备份出来。开一台新服务器创建站点。</p><p>关于CloudFlare接入的基础操作这里就不讲了，比如SSL设置之类。</p><p>下面的规则自己实际使用后一定不要暴露出来，否则攻击者会针对性的进行攻击。建议自己进行规则微调。</p><h2 id="2-策略详情"><a href="#2-策略详情" class="headerlink" title="2.策略详情"></a>2.策略详情</h2><p>策略设置有优先级，排名靠前的优先级大于后方策略。所以说针对搜索引擎蜘蛛的策略，一定放在第一个！</p><h3 id="2-1-waf设置"><a href="#2-1-waf设置" class="headerlink" title="2.1 waf设置"></a>2.1 waf设置</h3><p><img src="https://r2.leshans.eu.org/2023/12/3dba1fc4f195038aef6c62f81de194a5.webp"></p><p>WAF策略总览</p><p><img src="https://r2.leshans.eu.org/2023/12/d5a8a08c755bbb71c08db7d7da82cca1.webp" alt="Pasted image 20231223195734"></p><h4 id="2-1-1搜索引擎蜘蛛策略"><a href="#2-1-1搜索引擎蜘蛛策略" class="headerlink" title="2.1.1搜索引擎蜘蛛策略"></a>2.1.1搜索引擎蜘蛛策略</h4><p><img src="https://r2.leshans.eu.org/2023/12/64d67ae80d5db08b92a66bfe9e704d74.webp" alt="Pasted image 20231223195823"></p><p>表达式：(cf.client.bot)</p><p>主要作用：CloudFlare 对于常见搜索引擎蜘蛛IP有自己的一份数据库，符合此要求的请求将会直接访问网站数据。不会经过 CloudFlare 的 WAF 策略等。避免正常蜘蛛访问被拦截。</p><h4 id="2-1-2登录页策略"><a href="#2-1-2登录页策略" class="headerlink" title="2.1.2登录页策略"></a>2.1.2登录页策略</h4><p><img src="https://r2.leshans.eu.org/2023/12/983e7100f57fc0161d0dce271ae8a0b3.webp" alt="Pasted image 20231223195859"></p><p>网站我们正常运行必然有访客进行注册登录，针对我们的登录页以及常见被扫描的地址，我们可以单独设置一下人机验证。</p><p>主要作用：本站是WordPress程序，所以设置了xmlrpc.php和wp-login.php地址。其他程序根据自己实际情况设置。优先级低于蜘蛛，放到第二也是为了防止有些访客挂着代理被后续的策略阻止。</p><h4 id="2-1-3威胁分数策略"><a href="#2-1-3威胁分数策略" class="headerlink" title="2.1.3威胁分数策略"></a>2.1.3威胁分数策略</h4><p>此策略是防攻击的主力策略，这一项可以阻挡90%的攻击。</p><p>[<img src="https://r2.leshans.eu.org/2023/12/796fe0d9b6d6e8272990da11d76d706c.webp"></p><p>主要作用：威胁分数大于等于2，可以阻挡90%的恶意IP。CloudFlare 默认推荐分数5实测基本给攻击全漏了进来，设置3同样有漏IP。所以根据2023年9月目前的网络来说这里建议设置为2！</p><p>rss是因为站点有很多人通过RSS进行订阅，所以针对此类请求我们不要对他进行人机验证。</p><p>这里针对RSS策略比较简单，如果攻击者知道了你的策略可能会针对性攻击，我们实际使用时可以适当变通一下。</p><h4 id="2-1-4细化攻击策略"><a href="#2-1-4细化攻击策略" class="headerlink" title="2.1.4细化攻击策略"></a>2.1.4细化攻击策略</h4><p>上一个策略是简单的通过威胁分数判断，现在这个策略则是针对漏进来的攻击IP进行针对性的过滤。</p><p>[<img src="https://r2.leshans.eu.org/2023/12/af351b2c645362a9f7e1e35c3ae78519.webp"></p><p>主要作用：首先过滤国家不等于china，因为来自国内的攻击IP极少。我们的访客绝大多数也来自china所以直接略过国家。</p><p>&#x2F;feed是我们的RSS订阅地址，我们同样略过此地址。</p><p>IP源地址是我们的源站IP，针对源站IP来的请求数据我们同样略过。</p><p>URL不包含.html是因为本次攻击地址都不是.html地址，所以略过了。我网闸对于.html地址也有缓存。大家自己设置时候这一个可以删掉。</p><p>UA字段WellKnownBot，这个是当时翻策略拦截日志发现的一个UA，好像是个正常请求。所以给他过滤了。</p><p>威胁分数大于3，这里是保证整个策略不至于过于严格，只针对威胁分数大于 3 的 IP 生效。</p><h4 id="2-1-5地区策略"><a href="#2-1-5地区策略" class="headerlink" title="2.1.5地区策略"></a>2.1.5地区策略</h4><p>[<img src="https://r2.leshans.eu.org/2023/12/a368e1e69eb1e394d4ff91e062487370.webp"></p><p>这里一般不需要设置，我是看攻击IP有大量来自印尼的IP，网站基本也没印尼的访客，所以来自印尼的IP全部进行CAPTCHA交互式人机验证。</p><h3 id="2-2-DDOS策略"><a href="#2-2-DDOS策略" class="headerlink" title="2.2 DDOS策略"></a>2.2 DDOS策略</h3><p>CloudFlare针对DDOS有自己的分析策略可供我们使用。</p><p>这里CloudFlare的DDOS实际是包含我们常说的CC攻击的，七层和四层区别。</p><p>[<img src="https://r2.leshans.eu.org/2023/12/623ca365716f31312d53777313bab8df.webp"></p><p>[<img src="https://r2.leshans.eu.org/2023/12/80cc3f724ed4f14b427b64102a542778.webp"></p><p>CloudFlare会分析请求是否是DDOS，对于符合的请求我们可以选择进行验证。另外规则集敏感度也可以进行调整。</p><p>这里如果你正在被攻击，可以将敏感度设置为高。实测误比较少，如果网站长期套CloudFlare，我们可以设置为中。</p><h3 id="2-3-其他WAF设置"><a href="#2-3-其他WAF设置" class="headerlink" title="2.3 其他WAF设置"></a>2.3 其他WAF设置</h3><p>[<img src="https://r2.leshans.eu.org/2023/12/cd5768beb7f4737dfe4fef8bb06b9fa7.webp"></p><h3 id="2-4-缓存设置"><a href="#2-4-缓存设置" class="headerlink" title="2.4 缓存设置"></a>2.4 缓存设置</h3><p>缓存设置好也可以帮助我们抵挡巨量的CC攻击。有些CC是很多IP随即攻击一个地址，如果我们的安全策略没有拦截到攻击。但是我们设置了缓存，那这些请求则会在CloudFlare边缘节点直接将缓存内容返回给请求。也达到了抗攻击的效果。</p><p>缓存设置是在多个位置进行的。下面大家看截图就好。</p><p>[<img src="https://r2.leshans.eu.org/2023/12/49e69d9ac882e0c7062d903b66e9971f.webp"></p><p>创建一个静态文件的缓存规则。</p><p>[<img src="https://r2.leshans.eu.org/2023/12/42d62b8007da050d26a6969fe2415723.webp"></p><p>[<img src="https://r2.leshans.eu.org/2023/12/6aece4369ee5b5085ef270633796d8a3.webp"></p><p>[<img src="https://r2.leshans.eu.org/2023/12/dc0a76d8ef331938a885e9d9571cf938.webp"></p><p>上面的是基础缓存，对于页面的缓存我们使用下面的规则。</p><h4 id="2-4-1-页面规则"><a href="#2-4-1-页面规则" class="headerlink" title="2.4.1 页面规则"></a>2.4.1 页面规则</h4><p>[<img src="https://r2.leshans.eu.org/2023/12/65ed589edffc9425952eaf6acbe5d9ea.webp"></p><p>[<img src="https://r2.leshans.eu.org/2023/12/9bd2660918d3519f86c1ab64e4b260e3.webp"></p><p>下面这个是我针对RSS地址的缓存设置。实际可以不设置这个规则。</p><p>[<img src="https://r2.leshans.eu.org/2023/12/d5f30dc0e4d52516161c82b7a48c369f.webp"></p><p>[<img src="https://r2.leshans.eu.org/2023/12/aaa6398af125b8d113969a8a664861c0.webp"></p><h3 id="2-5-其他杂项"><a href="#2-5-其他杂项" class="headerlink" title="2.5 其他杂项"></a>2.5 其他杂项</h3><p>一些设置比较散乱，这里给大家列出来。</p><p>Tor洋葱路由关闭，否则攻击可能穿进源服务器。</p><p><img src="https://r2.leshans.eu.org/2023/12/aaa6398af125b8d113969a8a664861c0.webp"></p><h3 id="2-6-最终防御5秒盾"><a href="#2-6-最终防御5秒盾" class="headerlink" title="2.6 最终防御5秒盾"></a>2.6 最终防御5秒盾</h3><p>目前本站遇到的攻击无需开启五秒盾。</p><p>如果你的攻击比较大，而且依靠上面规则无法抵挡的话，就开启这个吧。开启后所有请求都会进行人机验证，影响较大。</p><p><img src="https://r2.leshans.eu.org/2023/12/190e53d2717d62f9ec3712b234ae7cb0.webp"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Cloudflare</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>全网最新的Python爬虫教程+实战项目案例，超适合小白练手的实战项目！</title>
    <link href="/posts/76c7c809.html"/>
    <url>/posts/76c7c809.html</url>
    
    <content type="html"><![CDATA[<p>Python项目源码、教程、工具合集，由于经常私信受限，或者回复大家不及时，耽误大家时间，所以up主把内部链接放这里了，需要的点击自行拿走。</p><p>（需要各类安装包和秒杀源码的宝子可以添加文章下方哦）</p><p>（链接直接复制到百度&#x2F;夸克网盘打开就可以获取了）</p><p>1.音乐源码</p><p>链接：<a href="https://pan.baidu.com/s/1QwEFWLGxp-PSn1E_ajaHjg?pwd=386d">https://pan.baidu.com/s/1QwEFWLGxp-PSn1E_ajaHjg?pwd=386d</a> </p><p>提取码：386d </p><p>复制这段内容打开「百度网盘APP 即可获取」</p><p>2.小说</p><p>链接：<a href="https://pan.baidu.com/s/17_r-A95tt-FF2kvcr46-fA?pwd=g1x7">https://pan.baidu.com/s/17_r-A95tt-FF2kvcr46-fA?pwd=g1x7</a> </p><p>提取码：g1x7 </p><p>复制这段内容打开「百度网盘APP 即可获取」</p><p>3.WiFi密码获取</p><p>链接：<a href="https://pan.baidu.com/s/1EG44DeW20YYclrcIkfiSzQ?pwd=T94p">https://pan.baidu.com/s/1EG44DeW20YYclrcIkfiSzQ?pwd=T94p</a> </p><p>提取码：T94p </p><p>复制这段内容打开「百度网盘APP 即可获取」</p><p>4.Python大麦抢票</p><p>链接：<a href="https://pan.baidu.com/s/19xq7wdPb327GISXUgrmSNw?pwd=32jb">https://pan.baidu.com/s/19xq7wdPb327GISXUgrmSNw?pwd=32jb</a> </p><p>提取码：32jb </p><p>复制这段内容打开「百度网盘APP 即可获取」</p><p> </p><p>5.Python百度文库</p><p>链接：<a href="https://pan.baidu.com/s/1b-IpYM9H8LYQs55T23LDhg?pwd=649w">https://pan.baidu.com/s/1b-IpYM9H8LYQs55T23LDhg?pwd=649w</a> </p><p>提取码：649w </p><p>复制这段内容打开「百度网盘APP 即可获取」</p><p>6.鲜花</p><p>链接：<a href="https://pan.baidu.com/s/1KPextm2UPF4rEQLzh6dtfA?pwd=7tcL">https://pan.baidu.com/s/1KPextm2UPF4rEQLzh6dtfA?pwd=7tcL</a> </p><p>提取码：7tcL </p><p>复制这段内容打开「百度网盘APP 即可获取」</p><p>7.爱心代码</p><p>链接：<a href="https://pan.baidu.com/s/1HhpFZVWV7im1HBQxJ6SB1w?pwd=7ow1">https://pan.baidu.com/s/1HhpFZVWV7im1HBQxJ6SB1w?pwd=7ow1</a> </p><p>提取码：7ow1 </p><p>8.VIP视频</p><p>链接：<a href="https://pan.baidu.com/s/16t82q9llmOwtzYqa6OFN1A?pwd=1Ta4">https://pan.baidu.com/s/16t82q9llmOwtzYqa6OFN1A?pwd=1Ta4</a> </p><p>提取码：1Ta4 </p><p>9.短信源码</p><p>复制整段内容，打开最新版「夸克APP」即可获取。</p><p>链接：<a href="https://pan.quark.cn/s/b3282faf09c3">https://pan.quark.cn/s/b3282faf09c3</a></p><p>10.爬取b站视频</p><p><a href="https://pan.baidu.com/s/1uLvILTSIkDYYIOkcQLSlpw?pwd=2hpd">https://pan.baidu.com/s/1uLvILTSIkDYYIOkcQLSlpw?pwd=2hpd</a> </p><p>提取码：2hpd </p><p>复制这段内容打开「百度网盘APP 即可获取」</p><p>11.微博爬虫</p><p>链接：<a href="https://pan.baidu.com/s/1F3Stg49dy-LX1i-rUYlGYw?pwd=y138">https://pan.baidu.com/s/1F3Stg49dy-LX1i-rUYlGYw?pwd=y138</a> </p><p>提取码：y138 </p><p>复制这段内容打开「百度网盘APP 即可获取」</p><p>12.视频素材下载</p><p>链接：<a href="https://pan.baidu.com/s/1W_jjbTMWsEpLFDT35GrCMQ?pwd=MyC9">https://pan.baidu.com/s/1W_jjbTMWsEpLFDT35GrCMQ?pwd=MyC9</a> </p><p>提取码：MyC9 </p><p>复制这段内容打开「百度网盘APP 即可获取」</p><p>13.MySQL安装包</p><p>链接：<a href="https://pan.baidu.com/s/1BobuIRyqkWW_cDImFcbf5w?pwd=g356">https://pan.baidu.com/s/1BobuIRyqkWW_cDImFcbf5w?pwd=g356</a> </p><p>提取码：g356 </p><p>复制这段内容打开「百度网盘APP 即可获取」</p><p>14.anaconda安装包</p><p>链接：<a href="https://pan.baidu.com/s/1TLOnDZmVV5crxi4Fqy8W4A?pwd=a61m">https://pan.baidu.com/s/1TLOnDZmVV5crxi4Fqy8W4A?pwd=a61m</a> </p><p>提取码：a61m </p><p>复制这段内容打开「百度网盘APP 即可获取」</p><p>15.Vmware安装包</p><p>链接：<a href="https://pan.baidu.com/s/1ag2EaRz68fjXTFlXh2EC5A?pwd=fnc9">https://pan.baidu.com/s/1ag2EaRz68fjXTFlXh2EC5A?pwd=fnc9</a> </p><p>提取码：fnc9 </p><p>复制这段内容打开「百度网盘APP 即可获取」</p><p>16.vscode安装包</p><p>链接：<a href="https://pan.baidu.com/s/1eJvCGArOmzsV0zjGjekG4w?pwd=Btp2">https://pan.baidu.com/s/1eJvCGArOmzsV0zjGjekG4w?pwd=Btp2</a> </p><p>提取码：Btp2 </p><p>复制这段内容打开「百度网盘APP 即可获取」</p><p>17.MATLAB安装包</p><p>链接：<a href="https://pan.baidu.com/s/1vj_gYYIBTJgcnunwGiPb8A?pwd=53MF">https://pan.baidu.com/s/1vj_gYYIBTJgcnunwGiPb8A?pwd=53MF</a> </p><p>提取码：53MF </p><p>复制这段内容打开「百度网盘APP 即可获取」</p><p>18.navicat安装包</p><p>链接：<a href="https://pan.baidu.com/s/1uUtKM-s5GgDGAeLq3eJoAg?pwd=qzxq">https://pan.baidu.com/s/1uUtKM-s5GgDGAeLq3eJoAg?pwd=qzxq</a> </p><p>提取码：qzxq </p><p>复制这段内容打开「百度网盘APP 即可获取」</p><p>19.unity安装包</p><p>链接：<a href="https://pan.baidu.com/s/1tSQM1YGoK5MY4A_IdwFqQQ?pwd=6B7u">https://pan.baidu.com/s/1tSQM1YGoK5MY4A_IdwFqQQ?pwd=6B7u</a> </p><p>提取码：6B7u </p><p>复制这段内容打开「百度网盘APP 即可获取」</p><p>20.clion安装包</p><p>链接：<a href="https://pan.baidu.com/s/1DpETVEqRFonrW4sgWABjJQ?pwd=4Ds1">https://pan.baidu.com/s/1DpETVEqRFonrW4sgWABjJQ?pwd=4Ds1</a> </p><p>提取码：4Ds1 </p><p>复制这段内容打开「百度网盘APP 即可获取」</p><p>21.eclipse安装包</p><p>链接：<a href="https://pan.baidu.com/s/1JHsEYIHkzd44KaUO_iRJNg?pwd=H4g6">https://pan.baidu.com/s/1JHsEYIHkzd44KaUO_iRJNg?pwd=H4g6</a> </p><p>提取码：H4g6 </p><p>复制这段内容打开「百度网盘APP 即可获取」 作者：山寨静香 <a href="https://www.bilibili.com/read/cv27611437/">https://www.bilibili.com/read/cv27611437/</a> 出处：bilibili</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>微力同步</title>
    <link href="/posts/6e603f73.html"/>
    <url>/posts/6e603f73.html</url>
    
    <content type="html"><![CDATA[<p>微力同步是一款可让您在多个设备上同步文件的应用程序，在您自己的机器组成的私有云上，在其中一台机器上创建，修改或删除文件会自动复制同步到其他设备。微力同步不会将您的数据上传到公有云端，而是在您自己的机器组成的私有云上互相同步交换数据。</p><p>微力同步可在台式机，笔记本电脑，智能手机，平板电脑和网络连接的外围设备之间提供安全的点对点数据同步交换。 没有中心节点存储数据文件，所有数据的传输通过AES加密传送，确保数据的安全性，所有数据都存在自己管理的机器硬盘上，安全性有了更高的保障。</p><h2 id="Linux-自动化安装脚本"><a href="#Linux-自动化安装脚本" class="headerlink" title="Linux 自动化安装脚本"></a>Linux 自动化安装脚本</h2><p>该自动安装器目前适配Centos&#x2F;Debian&#x2F;Ubuntu 3大主流系统，其它的使用systemd的系统应该也可以使用，暂未测试</p><p>快速安装</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">(如果需要指定索引存放位置请在最后面添加-d 路径 如 -d /data/verysync)</span>curl http://www.verysync.com/shell/verysync-linux-installer/go-installer.sh &gt; go-installer.shchmod +x go-installer.sh./go-installer.sh</code></pre></div><p>安装完成后就可以用浏览器打开 <a href="http://你的ip地址:8886/">http:&#x2F;&#x2F;你的IP地址:8886</a> 管理微力内容了</p><p>安装器参数说明</p><div class="code-wrapper"><pre><code class="hljs shell">./go-installer.sh [-h] [-c] [--remove] [-p proxy] [-f] [--version vx.y.z] [-l file] [-d index location]  -h, --help            显示帮助  -p, --proxy           指定代理服务器 -p socks5://127.0.0.1:1080 or -p http://127.0.0.1:3128 etc  -f, --force           强制安装      --version         安装特定版本 例如 --version v0.15.11-rc2  -l, --local           从本地下载好的文件安装 需要使用绝对路径如 -l /root/verysync-linux-amd64-v0.15.12-rc1.tar.gz      --remove          卸载微力同步  -c, --check           检查更新  -d  --home            指定微力索引存放位置, 默认 ~/.config/verysync  -u  --user            指定运行微力服务的用户 默认 root</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>阿里云如何完全卸载阿里云盾（安骑士）并屏蔽阿里云盾IP</title>
    <link href="/posts/f0fa5135.html"/>
    <url>/posts/f0fa5135.html</url>
    
    <content type="html"><![CDATA[<h2 id="什么是阿里云盾"><a href="#什么是阿里云盾" class="headerlink" title="什么是阿里云盾"></a><strong>什么是阿里云盾</strong></h2><p>阿里云盾（AliYunDun），又名安骑士，是购买阿里云云产品后自带的监控云服务器&#x2F;轻量应用服务器安全的产品，能够自动化实时入侵威胁检测、病毒查杀、漏洞智能修复、基线一键核查等功能，但是同时也会监控你的服务器是否有违规进程，然后就会收到阿里云警告邮件。</p><p>阿里云盾主要包括3个进程：AliYunDun、aliyun-service和AliYunDunUpdate。</p><h2 id="如何完全卸载阿里云盾"><a href="#如何完全卸载阿里云盾" class="headerlink" title="如何完全卸载阿里云盾"></a><strong>如何完全卸载阿里云盾</strong></h2><h3 id="卸载阿里云盾"><a href="#卸载阿里云盾" class="headerlink" title="卸载阿里云盾"></a><strong>卸载阿里云盾</strong></h3><p>远程连接到阿里云云服务器或者轻量应用服务器后，执行以下代码卸载阿里云盾：</p><div class="code-wrapper"><pre><code class="hljs shell">wget http://update.aegis.aliyun.com/download/uninstall.shchmod +x uninstall.sh./uninstall.shwget http://update.aegis.aliyun.com/download/quartz_uninstall.shchmod +x quartz_uninstall.sh./quartz_uninstall.sh</code></pre></div><h3 id="删除阿里云盾文件残留"><a href="#删除阿里云盾文件残留" class="headerlink" title="删除阿里云盾文件残留"></a><strong>删除阿里云盾文件残留</strong></h3><p>卸载阿里云盾后，执行如下代码删除阿里云盾文件残留：</p><div class="code-wrapper"><pre><code class="hljs shell">pkill aliyun-servicerm -fr /etc/init.d/agentwatch /usr/sbin/aliyun-servicerm -rf /usr/local/aegis*</code></pre></div><h3 id="屏蔽阿里云盾IP"><a href="#屏蔽阿里云盾IP" class="headerlink" title="屏蔽阿里云盾IP"></a><strong>屏蔽阿里云盾IP</strong></h3><p>最后就是屏蔽阿里云盾的IP：</p><div class="code-wrapper"><pre><code class="hljs shell">iptables -I INPUT -s 140.205.201.0/28 -j DROPiptables -I INPUT -s 140.205.201.16/29 -j DROPiptables -I INPUT -s 140.205.201.32/28 -j DROPiptables -I INPUT -s 140.205.225.192/29 -j DROPiptables -I INPUT -s 140.205.225.200/30 -j DROPiptables -I INPUT -s 140.205.225.184/29 -j DROPiptables -I INPUT -s 140.205.225.183/32 -j DROPiptables -I INPUT -s 140.205.225.206/32 -j DROPiptables -I INPUT -s 140.205.225.205/32 -j DROPiptables -I INPUT -s 140.205.225.195/32 -j DROPiptables -I INPUT -s 140.205.225.204/32 -j DROP</code></pre></div><h2 id="检查阿里云盾是否卸载干净"><a href="#检查阿里云盾是否卸载干净" class="headerlink" title="检查阿里云盾是否卸载干净"></a><strong>检查阿里云盾是否卸载干净</strong></h2><p>最后检查下自己服务器上的阿里云盾是否卸载干净了，主要就是看进程里有没有阿里云盾的相关进程了（AliYunDun、aliyun-service和AliYunDunUpdate），可以通过<code>ps -aux | grep -E &#39;aliyun|AliYunDun&#39;</code>来检查，如果没有相关进程则说明阿里云盾已经卸载干净了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>实用网站合集</title>
    <link href="/posts/7db44c5b.html"/>
    <url>/posts/7db44c5b.html</url>
    
    <content type="html"><![CDATA[<p>静态资源 CDN</p><p>全球都有节点</p><p>字节 cdn：<a href="https://cdn.bytedance.com/">https://cdn.bytedance.com</a> 支持搜索。</p><p>七牛 cdn：<a href="https://www.staticfile.org/">https://www.staticfile.org</a> 支持搜索。</p><p>知乎 unpkg 镜像：<a href="https://unpkg.zhimg.com/">https://unpkg.zhimg.com</a> 不全，不支持搜索。</p><p>360cdn：<a href="https://cdn.baomitu.com/">https://cdn.baomitu.com</a></p><p>仅中国大陆有节点</p><p>bootcdn：<a href="https://www.bootcdn.cn/">https://www.bootcdn.cn</a></p><p>75cdn：<a href="https://cdn.baomitu.com/">https://cdn.baomitu.com</a></p><p>中国大陆使用国外节点</p><p>jsDelivr：</p><p><a href="http://fastly.jsdelivr.net/">http://fastly.jsdelivr.net</a></p><p><a href="http://cdn.jsdelivr.net/">http://cdn.jsdelivr.net</a></p><p><a href="http://gcore.jsdelivr.net/">http://gcore.jsdelivr.net</a></p><p>CDNJS：<a href="http://www.cdnjs.com/">http://www.cdnjs.com</a></p><p>unpkg：<a href="https://www.unpkg.com/">https://www.unpkg.com</a></p><p>Logo 生成网站</p><p><a href="https://www.designevo.com/">https://www.designevo.com</a> 可以免费下载低画质的 logo，支持自定义。</p><p><a href="http://yeelogo.com/">http://yeelogo.com</a> 纯免费</p><p>去除图片背景网站<br><a href="https://www.remove.bg/">https://www.remove.bg</a> 免费下载，抠图效果很好。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>纯代码免插件优化WordPress6.3实现0sql-强化拓展</title>
    <link href="/posts/fccab38b.html"/>
    <url>/posts/fccab38b.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>在WordPress各种优化插件、各种手段层出不穷的时代，各方大佬均在推荐各类插件，比如super cache、cache master和litespeed cache等。不过对于老白博客个人而言，就想图个清净，不喜欢插件太多，设置一大堆，复杂！所以呢，今天就掏出一个“无代码版”优化WordPress（强化拓展），再结合最新版本的WordPress6.3，轻松实现首页0sql，网站毫秒级加载。</p></blockquote><p><img src="https://r2.leshans.eu.org/2023/12/7d1e1e7e82ddc7ea6952ee65acb369b3.webp" alt="纯代码免插件优化WordPress6.3实现0sql-强化拓展"></p><h3 id="1-batcache效果演示"><a href="#1-batcache效果演示" class="headerlink" title="1.batcache效果演示"></a>1.batcache效果演示</h3><p>演示网站：<a href="https://test.xcbtmw.com/">https://test.xcbtmw.com/</a></p><p>网站底部就能看到（未使用前首页查询次数为63）：</p><p><img src="https://r2.leshans.eu.org/2023/12/b50dff4746c68d6be01a6227ac656fdb.webp" alt="纯代码免插件优化WordPress6.3实现0sql-强化拓展"></p><p>附带一个显示查询次数和时间的代码</p><div class="code-wrapper"><pre><code class="hljs markup">&lt;?php echo get_num_queries().&#x27;次查询，耗时&#x27;.timer_stop(0).&#x27;秒。&#x27;; ?&gt;</code></pre></div><h3 id="2-什么是WordPress强化拓展"><a href="#2-什么是WordPress强化拓展" class="headerlink" title="2.什么是WordPress强化拓展"></a>2.什么是WordPress强化拓展</h3><p>在本文的教程中，老白使用的是“强化拓展”，而非<a href="https://www.xcbtmw.com/tag/wordpress%e6%8f%92%e4%bb%b6" title="查看所有文章关于 WordPress插件">WordPress插件</a>，他们二者区别如下：</p><ol><li>强化拓展（Enhancements）：强化拓展是一种广义的术语，用于描述对系统或应用程序功能进行增强、扩展或改进的方法。它可以包括各种形式的修改、添加、优化或增强，以提供更多功能、性能或用户体验的改善。在WordPress中，强化拓展可以指代各种方法，如代码片段、自定义功能、主题模板修改等，用于对WordPress进行定制和增强。</li><li>插件（Plugins）：插件是一种特定的软件组件，用于在现有系统或应用程序中添加额外的功能或特性。在WordPress中，插件通常是以独立的文件形式存在的，可以通过后台管理界面直接安装和启用。插件提供了一种简单的方式来扩展WordPress的功能，而无需直接修改核心代码。它们可以实现各种功能，如社交媒体分享、SEO优化、表单创建、安全增强等。</li></ol><p>强化拓展是一个更宽泛的概念，可以包括各种形式的增强和定制，而<strong>插件则是一种特定的软件组件</strong>，通过添加额外的功能来扩展现有系统。<strong>插件是实现强化拓展的一种常见方式</strong>。</p><h3 id="3-batcache-mem强化拓展"><a href="#3-batcache-mem强化拓展" class="headerlink" title="3.batcache+mem强化拓展"></a>3.batcache+mem强化拓展</h3><p>此处借用果酱大佬的原话介绍batcache和memcached的关系</p><blockquote><p>WordPress 启用 Memcached 这样的内存缓存之后，每次访问 WordPress 页面，都要从内存中获取多个缓存对象。</p><p>而 Batcache 主要就是解决这个问题，它是基于 Memcached 的 WordPress 缓存插件，它的工作原理是：把当前整个页面作为一个对象缓存到内存中，这样再次访问 WordPress 页面的时候，直接获从内存中获取这个对象即可，速度极快。</p></blockquote><p><img src="https://r2.leshans.eu.org/2023/12/46e10abc6d3ec0c29cfa214478a3183f.webp" alt="纯代码免插件优化WordPress6.3实现0sql-强化拓展"></p><p>从果酱大佬的描述中我们可以发现：batcache+memcached是一种非常不错的<a href="https://www.xcbtmw.com/tag/wordpress_optimization" title="查看所有文章关于 WordPress优化">WordPress优化</a>手段，接下来老白跟大家分享下如何无插件开启</p><h3 id="3-1-PHP安装memcached拓展"><a href="#3-1-PHP安装memcached拓展" class="headerlink" title="3.1 PHP安装memcached拓展"></a>3.1 PHP安装memcached拓展</h3><p>以<a href="https://www.xcbtmw.com/tag/bt_panel" title="查看所有文章关于 宝塔面板">宝塔面板</a>为例，打开软件商店，PHP安装拓展，勾选即可（老白推荐安装opcache+memcached）</p><p><img src="https://r2.leshans.eu.org/2023/12/61a0b46e011a24ec5c32544723d87838.webp" alt="纯代码免插件优化WordPress6.3实现0sql-强化拓展"></p><h3 id="3-2-batcache-mem强化拓展下载"><a href="#3-2-batcache-mem强化拓展下载" class="headerlink" title="3.2 batcache+mem强化拓展下载"></a>3.2 batcache+mem强化拓展下载</h3><p>下载文件（batcache和memcached均来自于官方插件，大家也可以自行下载）</p><p>batcache+mem下载：<a href="https://qtrj.lanzoul.com/i6nSD18cy6eb">https://qtrj.lanzoul.com/i6nSD18cy6eb</a></p><p>然后放到WordPress的&#x2F;wp-content目录下，比如老白博客的：</p><div class="code-wrapper"><pre><code class="hljs php">/www.xcbtmw.com/wp-content</code></pre></div><h3 id="3-3-激活使用batcache-mem"><a href="#3-3-激活使用batcache-mem" class="headerlink" title="3.3 激活使用batcache+mem"></a>3.3 激活使用batcache+mem</h3><p>把上述文件放到对应目录后，还需要在WordPress根目录的wp-config.php进行下面的设置，不然会报错 </p><div class="code-wrapper"><pre><code class="hljs shell">//设置缓存头，这里testxcbtmw可以随意设置-https://www.xcbtmw.com/29717.htmldefine(&#x27;WP_CACHE_KEY_SALT&#x27;, &#x27;testxcbtmw&#x27;);//激活memcacheddefine(&#x27;ENABLE_CACHE&#x27;, true);//激活batcachedefine(&#x27;WP_CACHE&#x27;, true);</code></pre></div><h3 id="3-4-batcache缓存设置"><a href="#3-4-batcache缓存设置" class="headerlink" title="3.4 batcache缓存设置"></a>3.4 batcache缓存设置</h3><p>编辑batcache的advanced-cache.php文件进行设置</p><div class="code-wrapper"><pre><code class="hljs shell">var $max_age = 300; // 缓存过期时间(0表示禁用batcache)var $remote = 0; // 禁止向远程数据中心发送缓冲区(从不发送req/sec)var $times = 2; // 一个页面被访问了多少次之后进行缓存(两个或两个以上)var $seconds = 0; // …在这么多秒内(0表示忽略它，立即使用batcache)var $group = &#x27;batcache&#x27;; // memcached组的名称。您可以通过更改此选项来模拟缓存刷新。var $unique = array(); // 如果您有条件地提供不同的内容，请将变量值放在这里。var $vary = array(); // 函数数组，用于create_function。返回值被添加到上面的$unique中。var $headers = array(); // 在这里添加头作为name=&gt;值或name=&gt;数组(值)。这些将与缓存中的每个响应一起发送。var $cache_redirects = false; // 设置true启用重定向缓存。var $redirect_status = false; // 这将在重定向期间设置为响应代码。var $redirect_location = false; // 这被设置为重定向位置。var $use_stale = true; // 更新缓存时是否可以返回过期的缓存响应?var $uncached_headers = array(&#x27;transfer-encoding&#x27;); // 这些头将永远不会缓存。应用函数。var $debug = true; // 设置false以隐藏batcache信息 &lt;!-- comment --&gt;var $cache_control = true; // 将false设置为禁用Last-Modified和Cache-Control头var $cancel = false; // 更改此选项以取消输出缓冲区。使用batcache_cancel ();var $noskip_cookies = array( &#x27;wordpress_test_cookie&#x27; ); // cookie的名称——如果它们存在并且缓存通常会被绕过，那么不要绕过它。</code></pre></div><p>这里大家不作修改也行，老白已经设置好了，保持默认也可</p><h3 id="3-5-batcache缓存清除"><a href="#3-5-batcache缓存清除" class="headerlink" title="3.5 batcache缓存清除"></a>3.5 batcache缓存清除</h3><p>关于缓存文件的生成，batcache<strong>不生成物理文件来存储缓存</strong>的页面。相反，它使用内存缓存（例如Memcached或APCu）来存储页面的副本。这种方式比将页面保存为静态HTML文件更为高效，因为读取内存缓存比读取磁盘上的文件要快得多。</p><p>内存缓存只是临时存储数据的一种方式，并不持久化保存数据。</p><p>因此，在重启服务器或清除缓存时，存储在内存缓存中的页面副本将会被清空，并重新生成，<strong>强硬的刷新缓存方案就是重启下memcached</strong></p>]]></content>
    
    
    <categories>
      
      <category>wordpress</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>WordPress</tag>
      
      <tag>缓存</tag>
      
      <tag>加速</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wordpress无需插件实现页面缓存静态化，提效显著</title>
    <link href="/posts/5130dbad.html"/>
    <url>/posts/5130dbad.html</url>
    
    <content type="html"><![CDATA[<p> wordpress使用了大量插件，发表了很多文章图片以后速度直线下降，就像蜗牛爬一样慢！</p><p>各位wordpress站长普遍采用的是wordpress缓存插件，如<code>WP Super Cache</code>或者<code>Hyper Cache</code>之类的，这些插件对wordpress有着非常明显的加速优化效果，该插件的Mod_rewrite加速模式加速效果非常好，因为这种模式是直接将网站的页面生成静态的html页面，然后使用Mod_rewrite将请求转发到静态文件，这样就跳过了php解析这一步直接将页面吐出到浏览器，从而达到加速的效果。但是这是使用插件实现缓存效果，那么可否<code>无插件</code>实现wordpress<code>页面静态化</code>呢？</p><p>答案是能，下面将告诉大家操作方法，首先复制以下代码：</p><div class="code-wrapper"><pre><code class="hljs shell">&lt;?phpdefine(&#x27;CACHE_ROOT&#x27;, dirname(__FILE__).&#x27;/cache&#x27;);define(&#x27;CACHE_LIFE&#x27;, 86400);                   //缓存文件的生命期，单位秒，86400秒是一天define(&#x27;CACHE_SUFFIX&#x27;,&#x27;.html&#x27;);             //缓存文件的扩展名，千万别用 .php .asp .jsp .pl 等等<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">$</span><span class="language-bash">file_name  = md5(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>]).CACHE_SUFFIX;    //缓存文件名</span>//缓存目录，根据md5的前两位把缓存文件分散开。避免文件过多。如果有必要，可以用第三四位为名，再加一层目录。//256个目录每个目录1000个文件的话，就是25万个页面。两层目录的话就是65536*1000=六千五百万。//不要让单个目录多于1000，以免影响性能。<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">$</span><span class="language-bash">cache_dir  = CACHE_ROOT.<span class="hljs-string">&#x27;/&#x27;</span>.substr(<span class="hljs-variable">$file_name</span>,0,2);</span><span class="hljs-meta prompt_">$</span><span class="language-bash">cache_file = <span class="hljs-variable">$cache_dir</span>.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;    //缓存文件存放路径</span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">if($</span><span class="language-bash">_SERVER[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>]==<span class="hljs-string">&#x27;GET&#x27;</span>)&#123;      //GET方式请求才缓存，POST之后一般都希望看到最新的结果</span>    if(file_exists($cache_file) &amp;&amp; time() - filemtime($cache_file) &lt; CACHE_LIFE)&#123;   //如果缓存文件存在，并且没有过期，就把它读出来。        $fp = fopen($cache_file,&#x27;rb&#x27;);        fpassthru($fp);        fclose($fp);        exit();    &#125;    elseif(!file_exists($cache_dir))&#123;        if(!file_exists(CACHE_ROOT))&#123;            mkdir(CACHE_ROOT,0777);            chmod(CACHE_ROOT,0777);        &#125;        mkdir($cache_dir,0777);        chmod($cache_dir,0777);    &#125;    function auto_cache($contents)&#123;         //回调函数，当程序结束时自动调用此函数        global $cache_file;        $fp = fopen($cache_file,&#x27;wb&#x27;);        fwrite($fp,$contents);        fclose($fp);        chmod($cache_file,0777);        clean_old_cache();                  //生成新缓存的同时，自动删除所有的老缓存。以节约空间。        return $contents;    &#125;    function clean_old_cache()&#123;        chdir(CACHE_ROOT);        foreach (glob(&quot;*/*&quot;.CACHE_SUFFIX) as $file)&#123;           if(time()-filemtime($file)&gt;CACHE_LIFE)&#123;               unlink($file);           &#125;        &#125;    &#125;    ob_start(&#x27;auto_cache&#x27;);                 //回调函数 auto_cache&#125;else&#123;    if(file_exists($cache_file))&#123;           //file_exists() 函数检查文件或目录是否存在。        unlink($cache_file);                //不是GET的请求就删除缓存文件。    &#125;&#125;?&gt;</code></pre></div><p>将以上代码保存为<code>cache.php</code>文件然后放置到网站根目录，然后在根目录下新建一个名为cache的目录，权限更改为777（修改权限可写，写入缓存文件用的）</p><p>然后在index.php的 <code>&lt;?php</code>之后加上以下代码：</p><p><code>require(&#39;cache.php&#39;);</code></p><p>一定要保证缓存目录的可写。</p><p>一定要加到文件的最上方，不然等页面完全加载完了才吐出缓存页面那就等于没缓存一样。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>日主题绕过授权破解</title>
    <link href="/posts/624ef9d3.html"/>
    <url>/posts/624ef9d3.html</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>步骤</th><th>操作</th></tr></thead><tbody><tr><td>1.</td><td>创建一个网站，绑定 <code>ritheme.com</code> 域名，并开启 <code>SSL</code>（随便找个域名的证书就行），上传以下源码：</td></tr><tr><td></td><td><a href="https://wwsj.lanzout.com/b028fzepa">https://wwsj.lanzout.com/b028fzepa</a></td></tr><tr><td></td><td>密码: <code>bx7r</code></td></tr><tr><td>2.</td><td>刚才源码中的 <code>keygen.php</code> 上传到任意地方，访问后，生成授权码和 <code>token</code>。</td></tr><tr><td>3.</td><td>在 <code>wp</code> 服务器修改 <code>hosts</code> 指向该授权服务器 IP。如果是在同一个服务器搭建的，修改 <code>/etc/hosts</code>，加上这一行：</td></tr><tr><td></td><td>127.0.0.1 ritheme.com</td></tr><tr><td>4.</td><td>使用生成的授权码激活。</td></tr><tr><td>注</td><td>资源来自于网上，与本站无关，本站只做收集。</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>免翻墙注册chatgpt账号,国内直连chatgpt一站式解决方案</title>
    <link href="/posts/fe882608.html"/>
    <url>/posts/fe882608.html</url>
    
    <content type="html"><![CDATA[<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>项目地址：<a href="https://github.com/pandora-next/deploy">https://github.com/pandora-next/deploy</a></p><p>项目文档：<a href="https://fakeopen.org/PandoraNext">https://fakeopen.org/PandoraNext</a></p><p>官方获取Access Token和Session Token：<a href="https://chat.openai.com/api/auth/session">https://chat.openai.com/api/auth/session</a></p><p>获取Access Token和Session Token：<a href="https://ai.fakeopen.com/auth">https://ai.fakeopen.com/auth</a></p><p>生成Share Token：<a href="https://ai.fakeopen.com/token">https://ai.fakeopen.com/token</a></p><p>生成Pool Token：<a href="https://ai.fakeopen.com/pool">https://ai.fakeopen.com/pool</a></p><p>第三方WebUI：<a href="https://github.com/Yidadaa/ChatGPT-Next-Web">https://github.com/Yidadaa/ChatGPT-Next-Web</a></p><h2 id="使用Web模式"><a href="#使用Web模式" class="headerlink" title="使用Web模式"></a>使用Web模式</h2><p>免费账号共享池：<a href="https://baipiao.io/chatgpt">https://baipiao.io/chatgpt</a></p><p>官方演示地址一：<a href="https://chat.oaifree.com/">https://chat.oaifree.com</a></p><p>官方演示地址二：<a href="https://chat1.zhile.io/">https://chat1.zhile.io</a></p><p>别人搭建的网址：<a href="https://fofa.info/result?qbase64=Ym9keT0iQ29udGludWUgd2l0aCBBY2Nlc3MgVG9rZW4iICYmIHRpdGxlPSJQYW5kb3JhTmV4dCIgJiYgY291bnRyeT0iQ04i">https://fofa.info/result?qbase64=Ym9keT0iQ29udGludWUgd2l0aCBBY2Nlc3MgVG9rZW4iICYmIHRpdGxlPSJQYW5kb3JhTmV4dCIgJiYgY291bnRyeT0iQ04i</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PayPal 注册与提现以及万里汇虚拟外币卡</title>
    <link href="/posts/7c41dbbf.html"/>
    <url>/posts/7c41dbbf.html</url>
    
    <content type="html"><![CDATA[<p><img src="https://jsd.cdn.zzko.cn/gh/woniu336/blog-image@main/img/202312112233021.png"></p><p>准备工作：一张国内四大行的I类卡（一个银行一个人只能办一张）或者申请一张外币信用卡（建议招行），**&#x3D;&#x3D;本次以招行为例作为演示&#x3D;&#x3D;**</p><p>中国大陆手续费：【<a href="https://www.paypal.com/c2/webapps/mpp/merchant-fees">点击进入</a>】 香港地区手续费：【<a href="https://www.paypal.com/hk/webapps/mpp/merchant-fees#additional-percentage">点击进入</a>】</p><p>1、注册香港paypal账户，参考视频：【<a href="https://www.paypal.com/c2/webapps/mpp/account-selection">点击进入</a>】</p><ul><li><p>记录下PayPal商家号</p></li><li><p>后续国外的款项用此账户作为收款账号</p></li></ul><p>2、注册并设置万里汇账户：【<a href="https://www.worldfirst.com.cn/cn/">点击进入</a>】（**&#x3D;&#x3D;注：如果要删除店铺收款账号，提供需要关闭的货币账户币种以及收款账号（或尾号）到此邮箱，进行人工删除：<a href="mailto:&#109;&#115;&#99;&#110;&#64;&#x73;&#101;&#114;&#118;&#105;&#x63;&#x65;&#46;&#119;&#x6f;&#x72;&#108;&#100;&#x66;&#105;&#x72;&#115;&#116;&#46;&#99;&#x6f;&#109;">&#109;&#115;&#99;&#110;&#64;&#x73;&#101;&#114;&#118;&#105;&#x63;&#x65;&#46;&#119;&#x6f;&#x72;&#108;&#100;&#x66;&#105;&#x72;&#115;&#116;&#46;&#99;&#x6f;&#109;</a>&#x3D;&#x3D;**&#x3D;&#x3D;）&#x3D;&#x3D;</p><ul><li><p>设置收款人管理——搜索招行——点击客服——点击个人业务——输入：境外汇入路径——把对应的BIC、收款行、前面准备好的卡号填写进来</p></li><li><p>设置店铺&#x2F;收款管理——新增店铺收款账户——选择其他电商平台——选择Google Shopping——自定义一个店铺名称——点击申请——申请完成后，不要直接添加信息——再次点击店铺&#x2F;收款管理——点击补充信息——填写完成后保存</p></li><li><p>再次点击店铺&#x2F;收款管理——找到刚添加的账号，点击进去——点击查看账户详情——回到paypal——点击关联卡或银行账户——点击关联银行账户——点击关联美国或中国香港特别行政区的银行账户——选择香港——点击下一页——然后把账户详情里面的相关信息添加进来——完成后，点击关联您的银行账户</p></li></ul><p>3、前面的流程操作完成后，具体收款流程如下：</p><ul><li><p>用paypal账户进行收款——paypal收到款项后——然后把款项提现到万里汇支票账户——万里汇的支票账户收到后（一般要几个工作日）——在万里汇首页点击提款——选择前面添加的美元账户——银行收到钱后——在手机APP掌上生活上搜索：溢缴款领回——选择美元——输入领回金额——选择收款账户&#x2F;借记卡</p></li><li><p>这里有三个情况需要注意的：1、如果是自己在APP上操作是不需要手续费的，如果需要人工帮忙划转，是需要收取一定的手续费的；2、如果是外币信用卡需要人工划转；3、目前了解到I类卡是支持全币种的，收款是没问题的（招行）</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>paypal</tag>
      
      <tag>万里汇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免费 FRP 内网穿透服务</title>
    <link href="/posts/a28d08d2.html"/>
    <url>/posts/a28d08d2.html</url>
    
    <content type="html"><![CDATA[<p>建议访问官方 Github 项目来查阅文档,可以使用更多本文没有提到的参数来提高穿透服务器的安全性和效率.</p><p>地址：<a href="https://freefrp.net/">https://freefrp.net/</a></p><p><img src="https://jsd.cdn.zzko.cn/gh/woniu336/blog-image@main/img/202312101519995.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>内网穿透</tag>
      
      <tag>frp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小雅网盘</title>
    <link href="/posts/fb112b06.html"/>
    <url>/posts/fb112b06.html</url>
    
    <content type="html"><![CDATA[<h3 id="小雅网盘（基于alist）"><a href="#小雅网盘（基于alist）" class="headerlink" title="小雅网盘（基于alist）"></a>小雅网盘（基于alist）</h3><p>网址：<a href="https://alist.xiaoya.pro/">https://alist.xiaoya.pro/</a></p><p>alist文档：<a href="https://alist.nn.ci/zh/">https://alist.nn.ci/zh//</a></p><p>小雅文档： <a href="https://xiaoyaliu.notion.site/xiaoya-docker-69404af849504fa5bcf9f2dd5ecaa75f">https://xiaoyaliu.notion.site/xiaoya-docker-69404af849504fa5bcf9f2dd5ecaa75f</a></p><p>终端安装命令，端口 <code>5678</code></p><div class="code-wrapper"><pre><code class="hljs shell">bash -c &quot;$(curl http://docker.xiaoya.pro/update_new.sh)&quot;</code></pre></div><p>或者 端口 <code>6789</code></p><div class="code-wrapper"><pre><code class="hljs bash">bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl http://docker.xiaoya.pro/update_new.sh)</span>&quot;</span> -s host</code></pre></div><p>阿里token获取地址：<a href="https://aliyuntoken.vercel.app/">https://aliyuntoken.vercel.app/</a></p><p>阿里opentoken地址：<a href="https://alist.nn.ci/tool/aliyundrive/request.html">https://alist.nn.ci/tool/aliyundrive/request.html</a></p><p>转存文件夹ID：网页版阿里云，进转存文件夹，地址栏内最后64开头的数字</p><p>创建一个名为 xiaoyakeeper 的docker定时运行小雅转存清理并升级小雅镜像</p><h3 id="定时清理缓存"><a href="#定时清理缓存" class="headerlink" title="定时清理缓存"></a>定时清理缓存</h3><p><code>可以不加-tg</code>  </p><p>模式3：创建一个名为 xiaoyakeeper 的docker定时运行小雅转存清理并升级小雅镜像</p><div class="code-wrapper"><pre><code class="hljs shell">bash -c &quot;$(curl -s https://xiaoyahelper.zengge99.eu.org/aliyun_clear.sh | tail -n +2)&quot; -s 3 -tg</code></pre></div><p>模式5：与模式3的区别是实时清理，只要产生了播放缓存一分钟内立即清理。签到和定时升级同模式3</p><div class="code-wrapper"><pre><code class="hljs shell">bash -c &quot;$(curl -s https://xiaoyahelper.zengge99.eu.org/aliyun_clear.sh | tail -n +2)&quot; -s 5 -tg</code></pre></div><h3 id="套娃挂载："><a href="#套娃挂载：" class="headerlink" title="套娃挂载："></a>套娃挂载：</h3><p>输入命令，获取<code>令牌</code></p><div class="code-wrapper"><pre><code class="hljs shell">docker exec -i xiaoya sqlite3 data/data.db &lt;&lt;EOFselect value from x_setting_items where key = &quot;token&quot;;EOF</code></pre></div><blockquote><p>挂载 ：alist v3 <code>输入令牌</code> <code>输入链接</code> 注意<code>docker</code>名称</p></blockquote><h3 id="同步小雅网盘"><a href="#同步小雅网盘" class="headerlink" title="同步小雅网盘"></a>同步小雅网盘</h3><p>如果你是基于Linux系统的（包括openwrt），可以用以下方法设置定时更新，终端执行</p><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">crontab -e</span></code></pre></div><p>添加一条记录</p><div class="code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">6</span> * * * docker restart xiaoya</code></pre></div><ol><li>按 <code>o</code> 插入一行</li><li>然后把这堆文字输入进去</li><li>然后按键盘左上角 ESC键退出编辑模式</li><li>输入 <code>:wq</code> 保存退出</li></ol><p>就是每天凌晨6点自动重启xiaoya docker去同步数据，你把6改成13，那就是下午1点</p><h3 id="小雅CF反代"><a href="#小雅CF反代" class="headerlink" title="小雅CF反代"></a>小雅CF反代</h3><p>登录cloudflare，创建<code>Worker</code> 代码如下,修改<code>const upstream_url = &quot;alist地址&quot;; </code> </p><p>免费地址寻找：<a href="https://www.zoomeye.org/searchResult?q=title:%22alist%22">网络空间雷达</a> 复制ip</p><p>我的:  <a href="https://xiaoya.taoshuge.eu.org/">xiaoya.taoshuge.eu.org</a></p><div class="code-wrapper"><pre><code class="hljs shell">import &#123; connect &#125; from &#x27;cloudflare:sockets&#x27;;  const upstream_url = &quot;http://183.134.157.38:5678&quot;;  const proxyList = [&quot;mypikpak&quot;, &quot;sharepoint&quot;];  const replace_dict = &#123;  &#x27;$up_url&#x27;: &#x27;$cust_url&#x27;,  &#x27;$upstream&#x27;: &#x27;$custom_domain&#x27;&#125;  let up_scheme = upstream_url.split(&quot;://&quot;)[0]let upstream = upstream_url.split(&quot;://&quot;)[1].split(&quot;:&quot;)[0];let port_string = upstream_url.split(&quot;://&quot;)[1].split(&quot;:&quot;)[1];if (!port_string) &#123;  port_string = up_scheme === &quot;http&quot; ? &quot;80&quot; : &quot;443&quot;;&#125;let port = parseInt(port_string);const timeoutDuration = 5000;const chunkSize = 1024 * 4;  export default &#123;  async fetch(request, env, ctx) &#123;    let url = new URL(request.url);    let cust_url = new URL(request.url);    url.port = port.toString();    let original_url_hostname = url.hostname;    url.hostname = upstream;    url.protocol = up_scheme + &quot;:&quot;;      if (url.pathname.startsWith(&quot;/proxy/&quot;)) &#123;      let proxyUrl = new URL(&quot;https://&quot; + url.pathname.replace(/\/proxy\//g, &quot;&quot;) + url.search);      let proxyReq = new Request(proxyUrl, request);      let proxyResponse = await fetchOverTcp(proxyReq, 443);      return proxyResponse;    &#125;      let new_request = new Request(url, request);    let original_response = await fetchOverTcp(new_request);    let response_headers = original_response.headers;    let new_response_headers = new Headers(response_headers);      if (original_response.status === 302) &#123;      const locationHeader = new_response_headers.get(&#x27;location&#x27;);      if (locationHeader &amp;&amp; isReplace(locationHeader)) &#123;        const modifiedLocation = locationHeader.replace(/https:\/\/+/g, &quot;https://&quot; + original_url_hostname + &quot;/proxy/&quot;);        new_response_headers.set(&#x27;location&#x27;, modifiedLocation);      &#125;    &#125;      const content_type = new_response_headers.get(&#x27;content-type&#x27;);      if (url.pathname.includes(&quot;tvbox&quot;) || (content_type != null &amp;&amp; (content_type.includes(&#x27;text/html&#x27;) || content_type.includes(&#x27;json&#x27;)) &amp;&amp; (content_type.includes(&#x27;UTF-8&#x27;) || content_type.includes(&#x27;utf-8&#x27;)))) &#123;      let dic_def = &#123;&#125;;      dic_def[&quot;$upstream&quot;] = upstream;      dic_def[&quot;$custom_domain&quot;] = original_url_hostname;      dic_def[&quot;$cust_url&quot;] = `$&#123;cust_url.protocol&#125;//$&#123;cust_url.hostname&#125;`;      dic_def[&quot;$up_url&quot;] = `$&#123;upstream_url&#125;`;      let original_text = replace_response_text(await original_response.text(), dic_def);      let status = original_response.status;      return new Response(original_text, &#123;        status,        headers: new_response_headers      &#125;);    &#125;    else &#123;      return original_response;    &#125;  &#125;,&#125;;  async function fetchOverTcp(request, cust_port = null) &#123;  let url = new URL(request.url);  let req = new Request(url, request);  let out_port = cust_port ? cust_port : port  if ((url.protocol === &quot;https:&quot; &amp;&amp; out_port === 443) || (url.protocol === &quot;http:&quot; &amp;&amp; out_port === 80)) &#123;    return await fetch(req);  &#125;     let tcpSocket = connect(&#123;    hostname: url.hostname,    port: out_port,  &#125;, &#123; secureTransport: &quot;starttls&quot; &#125;);    if (url.protocol === &quot;https:&quot;) &#123;    tcpSocket = tcpSocket.startTls();  &#125;    try &#123;    const writer = tcpSocket.writable.getWriter();          let headersString = &#x27;&#x27;;    let bodyString = &#x27;&#x27;;      for (let [name, value] of req.headers) &#123;      if (name === &quot;host&quot; || name === &quot;x-forwarded-proto&quot; || name === &quot;x-real-ip&quot; || name === &quot;accept-encoding&quot;) &#123;        continue;      &#125;      if (name === &quot;connection&quot;) &#123;        value = &quot;close&quot;;      &#125;      headersString += `$&#123;name&#125;: $&#123;value&#125;\r\n`;    &#125;      let fullpath = url.pathname;         if (url.search) &#123;      fullpath += url.search.replace(/%3F/g, &quot;?&quot;);    &#125;         if (req.method === &quot;POST&quot;) &#123;      const body = await req.text();      bodyString = `$&#123;body&#125;`;    &#125;         await writer.write(new TextEncoder().encode(`$&#123;req.method&#125; $&#123;fullpath&#125; HTTP/1.0\r\nHost: $&#123;url.hostname&#125;:$&#123;port&#125;\r\n$&#123;headersString&#125;\r\n$&#123;bodyString&#125;`));    writer.releaseLock();         const response = await constructHttpResponse(tcpSocket, timeoutDuration);      return response;  &#125; catch (error) &#123;    tcpSocket.close();    return new Response(&#x27;Internal Server Error&#x27;, &#123; status: 500 &#125;);  &#125;&#125;  async function constructHttpResponse(tcpSocket, timeout) &#123;  const reader = tcpSocket.readable.getReader();  let remainingData = new Uint8Array(0);  try &#123;       while (true) &#123;      const &#123; value, done &#125; = await raceWithTimeout(reader.read(chunkSize), timeout);      const newData = new Uint8Array(remainingData.length + value.length);      newData.set(remainingData);      newData.set(value, remainingData.length);      remainingData = newData;      const index = indexOfDoubleCRLF(remainingData);      if (index !== -1) &#123;        const headerBytes = remainingData.subarray(0, index);        const bodyBytes = remainingData.subarray(index + 4);          const header = new TextDecoder().decode(headerBytes);        const [statusLine, ...headers] = header.split(&#x27;\r\n&#x27;);        const [httpVersion, statusCode, statusText] = statusLine.split(&#x27; &#x27;);                  const responseHeaders = &#123;&#125;;        headers.forEach((header) =&gt; &#123;          const [name, value] = header.split(&#x27;: &#x27;);          responseHeaders[name.toLowerCase()] = value;        &#125;);          responseHeaders[&#x27;content-encoding&#x27;] = &#x27;identity&#x27;;          const responseInit = &#123;          status: parseInt(statusCode),          statusText,          headers: new Headers(responseHeaders),        &#125;;                  const bodyStream = new ReadableStream(&#123;          async start(controller) &#123;            controller.enqueue(bodyBytes);          &#125;,          async pull(controller) &#123;            while (true) &#123;              try &#123;                const &#123; value, done &#125; = await raceWithTimeout(reader.read(chunkSize), timeout);                if (value) &#123;                  controller.enqueue(value);                &#125;                if (done) &#123;                  controller.close();                  tcpSocket.close();                  break;                &#125;              &#125; catch (e) &#123;                controller.close();                tcpSocket.close();                return;              &#125;            &#125;          &#125;,        &#125;);          return new Response(bodyStream, responseInit);      &#125;      if (done) &#123;        tcpSocket.close();        break;      &#125;    &#125;      return new Response();  &#125; catch (error) &#123;    tcpSocket.close();  &#125;&#125;  function raceWithTimeout(promise, timeout) &#123;  return Promise.race([    promise,    new Promise((_, reject) =&gt; setTimeout(() =&gt; reject(new Error(&#x27;Timeout-1&#x27;)), timeout))  ]);&#125;  function indexOfDoubleCRLF(data) &#123;  if (data.length &lt; 4) &#123;    return -1;  &#125;  for (let i = 0; i &lt; data.length - 3; i++) &#123;    if (data[i] === 13 &amp;&amp; data[i + 1] === 10 &amp;&amp; data[i + 2] === 13 &amp;&amp; data[i + 3] === 10) &#123;      return i;    &#125;  &#125;  return -1;&#125;  function replace_response_text(text, dic_def) &#123;  var i, j;  let new_replace_dict = &#123;&#125;;  for (i in replace_dict) &#123;    j = replace_dict[i]    i = dic_def[i] ? dic_def[i] : i;    j = dic_def[j] ? dic_def[j] : j;    new_replace_dict[i] = j;  &#125;    for (i in new_replace_dict) &#123;    j = new_replace_dict[i]    let re = new RegExp(i, &#x27;g&#x27;)    text = text.replace(re, j);  &#125;    let host_name = dic_def[&quot;$custom_domain&quot;];  if (isReplace(text) &amp;&amp; host_name) &#123;    text = text.replace(/https:\/\/+/g, &quot;https://&quot; + host_name + &quot;/proxy/&quot;);  &#125;    return text;&#125;  function isReplace(urlString) &#123;  for (let i = 0; i &lt; proxyList.length; i++) &#123;    if (urlString.includes(proxyList[i])) &#123;      return true;    &#125;  &#125;  return false;&#125;</code></pre></div><h3 id="其他内容扩充"><a href="#其他内容扩充" class="headerlink" title="其他内容扩充"></a>其他内容扩充</h3><ul><li><p>执行时机和清理缓存的操作是完全相同的。</p></li><li><p>可以通过手动创建<code>/etc/xiaoya/mycheckintoken.txt</code>文件来定义多个网盘签到的32位refresh token，每行一个。若不添加文件，则使用默认小雅转存的网盘签到。</p></li><li><p>自动刷新<code>/etc/xiaoya/mycheckintoken.txt</code>和<code>/etc/xiaoya/mytoken.txt</code>文件，这有可能延长refresh token的时效，具体效果需要观察。</p></li><li><p>定时运行模式包括：</p><ul><li>默认每天从运行脚本的下一分钟开始执行。</li><li>运行时间可以通过手动创建<code>/etc/xiaoya/myruntime.txt</code>文件进行修改，例如06:00和18:00表示每天早晚6点各运行一次。</li></ul></li><li><p>自动升级的说明：</p><ul><li>定时升级的命令保存在<code>/etc/xiaoya/mycmd.txt</code>中。删除该文件将变成定时重启小雅。</li><li>完成清理和签到后，脚本会自动执行<code>/etc/xiaoya/mycmd.txt</code>中的命令。该文件默认包含升级小雅镜像的命令，不建议修改。</li></ul></li><li><p>关于TG推送：</p><ul><li>所有模式加上<code>-tg</code>功能均可绑定消息推送的TG账号，只有第一次运行需要加上<code>-tg</code>参数。</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>alist</tag>
      
      <tag>网盘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>宝塔面板v7.7.0 Github纯净版 优化脚本 手动解锁插件</title>
    <link href="/posts/69ed0463.html"/>
    <url>/posts/69ed0463.html</url>
    
    <content type="html"><![CDATA[<p><img src="https://jsd.cdn.zzko.cn/gh/woniu336/blog-image@main/img/202312100312630.png"></p><h3 id="相关介绍"><a href="#相关介绍" class="headerlink" title="相关介绍"></a>相关介绍</h3><p>目前最实用的宝塔7.7.0系列，本地安装纯净版本，并去除了强制绑定帐号、自动创建垃圾文件、活动推荐、在线客服，去除面板日志与网站绑定域名、手动解锁所有付费插件等等。</p><h3 id="一、宝塔面板7-7原版"><a href="#一、宝塔面板7-7原版" class="headerlink" title="一、宝塔面板7.7原版"></a>一、宝塔面板7.7原版</h3><div class="code-wrapper"><pre><code class="hljs shell">curl -sSO https://raw.githubusercontent.com/zhucaidan/btpanel-v7.7.0/main/install/install_panel.sh &amp;&amp; bash install_panel.sh</code></pre></div><h3 id="二、一键破解脚本"><a href="#二、一键破解脚本" class="headerlink" title="二、一键破解脚本"></a>二、一键破解脚本</h3><div class="code-wrapper"><pre><code class="hljs shell">curl -sSO https://raw.githubusercontent.com/ztkink/bthappy/main/one_key_happy.sh &amp;&amp; bash one_key_happy.sh</code></pre></div><h3 id="三、彩虹优化补丁-（不建议安装）"><a href="#三、彩虹优化补丁-（不建议安装）" class="headerlink" title="三、彩虹优化补丁 （不建议安装）"></a>三、彩虹优化补丁 （不建议安装）</h3><p>（不建议安装，可能在使用一键迁移的时候出错）</p><div class="code-wrapper"><pre><code class="hljs shell">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/optimize.sh &amp;&amp; chmod +x optimize.sh &amp;&amp; ./optimize.sh</code></pre></div><p>1.去除宝塔面板强制绑定账号；<br>2.去除各种删除操作时的计算题与延时等待；<br>3.去除创建网站自动创建的垃圾文件（index.html、404.html、.htaccess）<br>4.关闭未绑定域名提示页面，防止有人访问未绑定域名直接看出来是用的宝塔面板；<br>5.关闭活动推荐与在线客服；<br>6.去除自动校验文件与上报信息定时任务；<br>7.去除面板日志与网站绑定域名上报。</p><h3 id="四、去后门"><a href="#四、去后门" class="headerlink" title="四、去后门"></a>四、去后门</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; /www/server/panel/script/site_task.pysudo chattr +i /www/server/panel/script/site_task.pysudo <span class="hljs-built_in">rm</span> -rf /www/server/panel/logs/request/*sudo chattr +i -R /www/server/panel/logs/request</code></pre></div><h3 id="宝塔面板linux版修改底部版权"><a href="#宝塔面板linux版修改底部版权" class="headerlink" title="宝塔面板linux版修改底部版权"></a>宝塔面板linux版修改底部版权</h3><p>第一步：登录宝塔面板<br>第二步：点击左边的文件菜单<br>第三步：在www目录下查找layout.html文件<br>第四步：编辑layout.html文件的第85行，用自定义的名字替换‘’这个字符串。<br>第五步：修改后，重启面板。</p><h3 id="手动破解"><a href="#手动破解" class="headerlink" title="手动破解"></a>手动破解</h3><p><code>先登录面板，然后破解</code>，去除登陆需要绑定账号：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -f /www/server/panel/data/bind.pl</code></pre></div><p>手动解锁宝塔所有付费插件为永不过期</p><div class="code-wrapper"><pre><code class="hljs bash">sed -i <span class="hljs-string">&#x27;s/&quot;endtime&quot;: -1/&quot;endtime&quot;: 999999999999/g&#x27;</span> /www/server/panel/data/plugin.json</code></pre></div><p> 给plugin.json文件上锁防止自动修复为免费版</p><div class="code-wrapper"><pre><code class="hljs bash">chattr +i /www/server/panel/data/plugin.json</code></pre></div><h3 id="净化面板"><a href="#净化面板" class="headerlink" title="净化面板"></a>净化面板</h3><p>下载文件</p><div class="code-wrapper"><pre><code class="hljs bash">wget -O /tmp/bt.zip https://github.com/woniu336/btpanel-v7.7.0/raw/main/bt/bt.zip</code></pre></div><p>解压文件并合并到目标目录</p><div class="code-wrapper"><pre><code class="hljs bash">unzip -uo /tmp/bt.zip -d /www/server/panel/BTPanel/templates/default</code></pre></div><p>删除下载的压缩文件</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> /tmp/bt.zip</code></pre></div><p>重启宝塔面板</p><div class="code-wrapper"><pre><code class="hljs bash">bt restart</code></pre></div><p>echo “操作完成”</p>]]></content>
    
    
    
    <tags>
      
      <tag>宝塔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub图床加速</title>
    <link href="/posts/8cd75860.html"/>
    <url>/posts/8cd75860.html</url>
    
    <content type="html"><![CDATA[<h1 id="Github图床使用"><a href="#Github图床使用" class="headerlink" title="Github图床使用"></a>Github图床使用</h1><p>网络上关于<code>GitHub+Jsdelivr</code>实现<code>图床加速</code>的文章很多，但是年代久远，加上Jsdelivr早就被和谐了，所以本人重新整理一下，目前还能使用，无需科学上网的就能加速图片的方法。</p><blockquote><p>方法1：Jsdelivr镜像站 <a href="https://jsd.cdn.zzko.cn/">https://jsd.cdn.zzko.cn</a>  （公益）</p></blockquote><blockquote><p>方法2：通过<code>Cloudflare Workers</code>实现反代</p></blockquote><blockquote><p>即使镜像站点跑路了，Cloudflare还在，速度慢点</p></blockquote><p>以上方法都要配合PicGo或者PicList使用，本人使用的是PicList</p><p>配合图床工具: <a href="https://github.com/Kuingsmile/PicList">PicList</a></p><p><code>PicList</code> 是一款基于<code>PicGo</code> 深度二次开发,云储存&#x2F;图床管理和文件上传客户端工具</p><p>完美兼容PicGo</p><p>官网: <a href="https://piclist.cn/">https://piclist.cn</a></p><h3 id="1-通过Cloudflare-Workers实现反代"><a href="#1-通过Cloudflare-Workers实现反代" class="headerlink" title="1.通过Cloudflare Workers实现反代"></a>1.通过Cloudflare Workers实现反代</h3><div class="code-wrapper"><pre><code class="hljs java">addEventListener(  <span class="hljs-string">&quot;fetch&quot;</span>,event =&gt; &#123;     let url=<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(event.request.url);     url.hostname=<span class="hljs-string">&quot;raw.githubusercontent.com&quot;</span>;  <span class="hljs-comment">//反代github域名</span>     let request=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>(url,event.request);     event. respondWith(       fetch(request)     )  &#125;)</code></pre></div><p>具体教程网上很多，需要你在Cloudflare有域名</p><h3 id="2-配合PicList"><a href="#2-配合PicList" class="headerlink" title="2.配合PicList"></a>2.配合PicList</h3><p>请替换为你自己的<code>仓库名</code> 以及分支，准备好<code>token</code></p><p>反代图</p><p><img src="https://github.leshans.eu.org/woniu336/blog-image/main/img/2023-12-07_212014.png"></p><p>下图为镜像站<br><br><img src="https://jsd.cdn.zzko.cn/gh/woniu336/blog-image@main/img/2023-12-07_212014.png"></p><blockquote><ul><li>仓库名: <code>woniu336/blog-image</code></li></ul></blockquote><blockquote><ul><li>分支: <code>main</code></li></ul></blockquote><blockquote><ul><li>存储路径: <code>img/</code></li></ul></blockquote><blockquote><ul><li>自定义域名1(镜像站) :  <a href="https://jsd.cdn.zzko.cn/gh/woniu336/blog-image@main">https://jsd.cdn.zzko.cn/gh/woniu336/blog-image@main</a></li></ul></blockquote><blockquote><ul><li>自定义域名2(CF反代)<br>: <a href="https://github.leshans.eu.org/woniu336/blog-image/main">https://github.leshans.eu.org/woniu336/blog-image/main</a></li></ul></blockquote><blockquote><ul><li>自定义域名格式: <a href="https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D@%E5%88%86%E6%94%AF">https://cdn.jsdelivr.net/gh/用户名/仓库名@分支</a></li></ul></blockquote><p>图片测试:</p><p><img src="https://github.leshans.eu.org/woniu336/blog-image/main/img/202310061243776.jpg"></p>]]></content>
    
    
    
    <tags>
      
      <tag>图床</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WordPress网站更改后台登录地址保姆级图文教程</title>
    <link href="/posts/3d682836.html"/>
    <url>/posts/3d682836.html</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p> WordPress系统默认的<code>后台地址</code>是 域名<code>/wp-admin</code> 或域名<code>/wp-login.php</code></p><p>这就意味着所有用WordPress的人都可以用这个地址打开你的后台登录页面，很明显谁都知道这很不安全。那么如何更改Wordpress的后台登录地址呢？</p><p>引入<br>       搜了好多帖子，方式主要有两种，一种是使用插件，这种方法比较快。但是网上提供插件居多，我安装测试的插件没几个是最后成功的。第二种是直接修改代码文件，最后决定用这种方式。这里以宝塔面板为例，把图文过程写下来，大家参考下。</p><h3 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h3><ol><li><p>打开WordPress所在的目录，找到 WordPress 目录下的 <code>wp-login.php</code>，这个文件是我们后台登录的地址，把它重命名成别的，例如：<code>admin.php</code> ，这就意味着你可以通过 http:&#x2F;&#x2F;域名&#x2F;admin.php 的方式来访问后台。<br><img src="https://r2.leshans.eu.org/2023/12/a7978211df683a9c44f8647bce38a7ee.png"></p></li><li><p>但是这还不够，我们打开刚才重命名的文件，把里面所有的 <code>wp-login</code> 替换成 <code>admin</code> ，这样第一步完成。</p></li></ol><p><img src="https://r2.leshans.eu.org/2023/12/0f6da20e2ebfac71616fc7ea369cc96f.png"></p><h3 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h3><p>打开 WordPress 目录下 <code>wp-includes</code> ，找到其目录内的 <code>general-template.php</code> 文件，打开文件，把里面所有的 <code>wp-login</code> 全部替换成 <code>admin </code></p><p><img src="https://r2.leshans.eu.org/2023/12/7d39bff7da60672e54f6b30c486ed6fa.png"></p><p><img src="https://r2.leshans.eu.org/2023/12/f671d4040afb36d5363ebf3f9379370c.png"></p><p><img src="https://r2.leshans.eu.org/2023/12/85447ecaff32bad7847cc6300118eac0.png"></p><h3 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h3><p>打开文件 <code>general-template.php</code> ，点击搜索变量 <code>$login_url</code></p><p>$login_url<br>将site_url 里面第一个参数改成<code> index.php</code> ，如下</p><p><code>$login_url = site_url( &#39;index.php&#39;, &#39;login&#39; );</code></p><p>其中 index.php 可以换成别的，保存默认的 wp-login 也可以，这行的意思是定义当有人通过 http:&#x2F;&#x2F; 域名 &#x2F;wp-admin&#x2F; 地址访问网站时或者直接访问后台某个地址时进行跳转到 site_url() 设置的地址内，所以防止别人探索你的地址。</p><p><img src="https://r2.leshans.eu.org/2023/12/8b812e1c278259b89de21413bae68219.png"></p><p>END<br>以后要登录后台，就可以通过 <code>http://域名/admin.php </code>访问了。</p><p>一键脚本：</p><div class="code-wrapper"><pre><code class="hljs shell">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/wp.sh &amp;&amp; chmod +x wp.sh &amp;&amp; ./wp.sh</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>WordPress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebShell扫描检测查杀工具</title>
    <link href="/posts/f82fbfb9.html"/>
    <url>/posts/f82fbfb9.html</url>
    
    <content type="html"><![CDATA[<p><code>webshell</code>是一种可以在web服务器上执行后台脚本或者命令的后门，黑客通过入侵网站上传webshell后获得服务器的执行操作权限，比如执行系统命令、窃取用户数据、删除web页面、修改主页等，其危害不言而喻。而WebShell扫描检测工具可辅助查出该后门。</p><p><code>WebShell</code>扫描工具适用</p><ul><li>网上下载的源码</li><li>特定文件检测是否是木马</li><li>检测目标程序或文件是否存在后门</li><li>免杀检测识别率测试</li></ul><h3 id="1-河马查杀"><a href="#1-河马查杀" class="headerlink" title="1.河马查杀"></a>1.河马查杀</h3><p>在线查杀地址：<a href="https://n.shellpub.com/">https://n.shellpub.com/</a></p><p><strong>windows版：</strong></p><p><a href="https://dl.shellpub.com/hm-ui/latest/HmSetup.zip?version=1.8.2">https://dl.shellpub.com/hm-ui/latest/HmSetup.zip?version=1.8.2</a></p><p><strong>linux-amd64版：</strong></p><p><a href="https://dl.shellpub.com/hm/latest/hm-linux-amd64.tgz?version=1.8.3">https://dl.shellpub.com/hm/latest/hm-linux-amd64.tgz?version=1.8.3</a></p><p><strong>linux-386版：</strong></p><p><a href="https://dl.shellpub.com/hm/latest/hm-linux-386.tgz?version=1.8.3">https://dl.shellpub.com/hm/latest/hm-linux-386.tgz?version=1.8.3</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>玩客云刷Openwrt</title>
    <link href="/posts/a859a0e7.html"/>
    <url>/posts/a859a0e7.html</url>
    
    <content type="html"><![CDATA[<h1 id="玩客云Openwrt固件"><a href="#玩客云Openwrt固件" class="headerlink" title="玩客云Openwrt固件"></a>玩客云Openwrt固件</h1><p>玩客云固件：链接: <a href="https://pan.baidu.com/s/1q3gVWrsVoRiS2m3VKoqgoQ?pwd=p8ic">https://pan.baidu.com/s/1q3gVWrsVoRiS2m3VKoqgoQ?pwd=p8ic</a> 提取码: p8ic </p><p><code>ip:10.0.0.1密码:root</code></p><h2 id="小雅网盘（基于alist）"><a href="#小雅网盘（基于alist）" class="headerlink" title="小雅网盘（基于alist）"></a>小雅网盘（基于alist）</h2><p>网址：<a href="https://alist.xiaoya.pro/">https://alist.xiaoya.pro/</a></p><p>文档： <a href="https://xiaoyaliu.notion.site/xiaoya-docker-69404af849504fa5bcf9f2dd5ecaa75f">https://xiaoyaliu.notion.site/xiaoya-docker-69404af849504fa5bcf9f2dd5ecaa75f</a></p><p>终端安装命令，端口 <code>5678</code></p><div class="code-wrapper"><pre><code class="hljs shell">bash -c &quot;$(curl http://docker.xiaoya.pro/update_new.sh)&quot;</code></pre></div><p>或者 端口 <code>6789</code></p><div class="code-wrapper"><pre><code class="hljs bash">bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl http://docker.xiaoya.pro/update_new.sh)</span>&quot;</span> -s host</code></pre></div><p>阿里token获取地址：<a href="https://aliyuntoken.vercel.app/">https://aliyuntoken.vercel.app/</a></p><p>阿里opentoken地址：<a href="https://alist.nn.ci/tool/aliyundrive/request.html">https://alist.nn.ci/tool/aliyundrive/request.html</a></p><p>转存文件夹ID：网页版阿里云，进转存文件夹，地址栏内最后64开头的数字</p><p>创建一个名为 xiaoyakeeper 的docker定时运行小雅转存清理并升级小雅镜像</p><h2 id="定时清理缓存"><a href="#定时清理缓存" class="headerlink" title="定时清理缓存"></a>定时清理缓存</h2><p>模式3：创建一个名为 xiaoyakeeper 的docker定时运行小雅转存清理并升级小雅镜像</p><div class="code-wrapper"><pre><code class="hljs shell">bash -c &quot;$(curl -s https://xiaoyahelper.zengge99.eu.org/aliyun_clear.sh | tail -n +2)&quot; -s 3 -tg</code></pre></div><p>模式5：与模式3的区别是实时清理，只要产生了播放缓存一分钟内立即清理。签到和定时升级同模式3</p><div class="code-wrapper"><pre><code class="hljs shell">bash -c &quot;$(curl -s https://xiaoyahelper.zengge99.eu.org/aliyun_clear.sh | tail -n +2)&quot; -s 5 -tg</code></pre></div><p><strong>内容描述：</strong></p><ul><li><p>执行时机和清理缓存的操作是完全相同的。</p></li><li><p>可以通过手动创建<code>/etc/xiaoya/mycheckintoken.txt</code>文件来定义多个网盘签到的32位refresh token，每行一个。若不添加文件，则使用默认小雅转存的网盘签到。</p></li><li><p>自动刷新<code>/etc/xiaoya/mycheckintoken.txt</code>和<code>/etc/xiaoya/mytoken.txt</code>文件，这有可能延长refresh token的时效，具体效果需要观察。</p></li><li><p>定时运行模式包括：</p><ul><li>默认每天从运行脚本的下一分钟开始执行。</li><li>运行时间可以通过手动创建<code>/etc/xiaoya/myruntime.txt</code>文件进行修改，例如06:00和18:00表示每天早晚6点各运行一次。</li></ul></li><li><p>自动升级的说明：</p><ul><li>定时升级的命令保存在<code>/etc/xiaoya/mycmd.txt</code>中。删除该文件将变成定时重启小雅。</li><li>完成清理和签到后，脚本会自动执行<code>/etc/xiaoya/mycmd.txt</code>中的命令。该文件默认包含升级小雅镜像的命令，不建议修改。</li></ul></li><li><p>关于TG推送：</p><ul><li>所有模式加上<code>-tg</code>功能均可绑定消息推送的TG账号，只有第一次运行需要加上<code>-tg</code>参数。</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>alist</tag>
      
      <tag>openwrt</tag>
      
      <tag>玩客云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XShell 7和XFTP 7 家庭或学校免费版移除标签限制</title>
    <link href="/posts/b581da6b.html"/>
    <url>/posts/b581da6b.html</url>
    
    <content type="html"><![CDATA[<p><img src="https://r2.leshans.eu.org/2023/11/5eeb4732db8fb1954fc7c01b17ca32f1.png"></p><p>更新：<code>从 2022/02/16 开始，我们的免费许可证的标签限制已被删除</code>。所有免费用户现在都可以通过下载下面的最新版本来访问无限的标签。当前用户必须下载最新版本并在现有安装上进行安装。</p><p>申请地址：<a href="https://www.xshell.com/zh/free-for-home-school/">https://www.xshell.com/zh/free-for-home-school/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>xshell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>X99一键鸡血工具更新了!!</title>
    <link href="/posts/ef2e6016.html"/>
    <url>/posts/ef2e6016.html</url>
    
    <content type="html"><![CDATA[<p>提取bios出错？鸡血后不开机？亲测鸡血后巨稳定有想法的可以壮胆冲啊…至强万岁E5万岁</p><p><a href="https://wwcb.lanzouw.com/i5YWS1e0pcmf">https://wwcb.lanzouw.com/i5YWS1e0pcmf</a><br>密码:TLDGJ</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PandoraNext项目私有化部署教程</title>
    <link href="/posts/904a6984.html"/>
    <url>/posts/904a6984.html</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>项目地址: <a href="https://github.com/pandora-next/deploy">https://github.com/pandora-next/deploy</a></p><p>由于之前的潘多拉项目已经凉凉了，所以今天给大家出个PandoraNext项目的搭建教程  </p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><code>Pandora Cloud + Pandora Server + Shared Chat = PandoraNext </code> </p><p>支持GPTs，最新UI , 支持多种登录方式：（相当于Pandora Cloud）</p><p>可内置tokens，支持设置密码。（相当于Pandora Server）  </p><h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><p><a href="https://pdn.ywsj.gq/">https://pdn.ywsj.gq/</a>  </p><p>准备条件<br>1）一台服务器<br>需要便宜VPS的可以参考这个<br><a href="https://www.zhujiceping.com/vps">https://www.zhujiceping.com/vps</a><br>2）此项目的github<br><a href="https://github.com/pandora-next/deploy">https://github.com/pandora-next/deploy</a><br>3）获取license_id</p><p>这里需要一个github账号<br>这个账号注册天数需要大于180天用来授权</p><h3 id="教程开始"><a href="#教程开始" class="headerlink" title="教程开始"></a>教程开始</h3><p>前提是要安装docker,一键安装docker脚本:</p><div class="code-wrapper"><pre><code class="hljs shell">curl -fsSL https://get.docker.com | shcurl -L &quot;https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-compose</code></pre></div><p>PandoraNext一键脚本: </p><div class="code-wrapper"><pre><code class="hljs shell">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/pandoranext.sh &amp;&amp; chmod +x pandoranext.sh &amp;&amp; ./pandoranext.sh</code></pre></div><ol><li><p>访问这个网页<code>https://dash.pandoranext.com</code></p></li><li><p>登录github账号获取<code>license_id</code></p></li></ol><p><img src="https://r2.leshans.eu.org/2023/11/c4af2df94c38d45dd020901af0f7eceb.jpg"></p><h4 id="安装成功以后ip加端口进入web页面"><a href="#安装成功以后ip加端口进入web页面" class="headerlink" title="安装成功以后ip加端口进入web页面"></a>安装成功以后ip加端口进入web页面</h4><p><code>http://ip:8181   端口: 8181</code></p><p>可以用<code>账号密码</code>登录或者用<code>Access Token</code>登录  </p><p><code>如果你是gpt4.0也是可以直接使用的  </code></p><p>五、更新网站<br>docker-compose down #停止容器<br>docker-compose pull #拉取最新镜像<br>docker-compose up -d #启动新容器  </p><h3 id="附：Access-Token获取方法"><a href="#附：Access-Token获取方法" class="headerlink" title="附：Access Token获取方法"></a>附：Access Token获取方法</h3><p>官方登录，然后访问<a href="https://chat.openai.com/api/auth/session">这里</a> 拿 <code>Access Token</code><br>当然可以访问 <a href="https://ai.fakeopen.com/auth">这里</a>拿 Access Token<br>Access Token <code>有效期 14</code> 天，期间访问<code>不需要魔法</code>。这意味着你在手机上也可使用。</p>]]></content>
    
    
    
    <tags>
      
      <tag>ai</tag>
      
      <tag>chatgpt</tag>
      
      <tag>PandoraNext</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>amh7.0安装苹果cms的一些坑和注意事项</title>
    <link href="/posts/94cae65e.html"/>
    <url>/posts/94cae65e.html</url>
    
    <content type="html"><![CDATA[<p><code>1.数据库导入的问题 </code></p><p> ①先上传到备份目录，在解压，然后在导入 </p><p> ②数据库设置那里要<code>启用远程开启 </code></p><p><code> 2.任务计划 </code></p><p> ①注意时区 </p><p><code> 3.数据库同步 </code></p><p> ①记得打开数据库二进制 </p><p><code> 4.一键还原 </code></p><p>① 注意需要相同的环境组件</p><p><code>5.安装memcached注意事项</code></p><p>php需安装 <code>bcmath</code> 扩展</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><table><thead><tr><th>操作</th><th>注意事项</th></tr></thead><tbody><tr><td>数据库导入</td><td>上传备份至目标目录并解压，启用远程访问。</td></tr><tr><td>任务计划</td><td>注意时区设置。</td></tr><tr><td>数据库同步</td><td>打开数据库的二进制日志功能。</td></tr><tr><td>一键还原</td><td>确保还原环境具有相同的组件。</td></tr><tr><td>安装 Memcached</td><td>PHP需安装bcmath扩展。</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>amh</tag>
      
      <tag>苹果</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>靠谱的国外短信接收平台</title>
    <link href="/posts/5659e059.html"/>
    <url>/posts/5659e059.html</url>
    
    <content type="html"><![CDATA[<p>国外短信接收平台: <a href="https://sms-activate.org/cn">https://sms-activate.org/cn</a></p><p>优点</p><ul><li><p><strong>180 多个国家&#x2F;地区</strong> — 我们不断扩大我们的地理范围</p></li><li><p><strong>700 多个站点和应用程序的编号</strong>，以及其他服务的“任何其他”选项  </p></li><li><p><strong>通过 SMS、</strong> 号码或来自机器人的电话验证帐户</p></li><li><p><strong>通过电子钱包方便地充值，</strong><br>  通过银行卡或加密货币</p></li><li><p>老客户<strong>折扣和批发价</strong></p></li><li><p><strong>Favorable affiliate program</strong>—邀请短信激活并赚取</p></li><li><p>开发注册软件？我们将提供 API 和良好的条件！</p></li><li><p>通过电子邮件验证。临时邮寄地址从 0.03 卢布起。用于快速、安全的注册。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>短信</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逆天！AI 的下一个爆款项目，不想失业一定要提前知道！！</title>
    <link href="/posts/d900a72e.html"/>
    <url>/posts/d900a72e.html</url>
    
    <content type="html"><![CDATA[<h2 id="1-Stable-Video-Diffusion-：GPT4-后的下一个曝款AI视频项目"><a href="#1-Stable-Video-Diffusion-：GPT4-后的下一个曝款AI视频项目" class="headerlink" title="1: Stable Video Diffusion ：GPT4 后的下一个曝款AI视频项目"></a>1: Stable Video Diffusion ：GPT4 后的下一个曝款AI视频项目</h2><p><img src="https://r2.leshans.eu.org/2023/11/a0d15546f046e95208c67cd6e295b48f.jpg"></p><p><strong>加入等候名单：【<a href="https://stability.ai/contact">点击前往</a>】</strong></p><p><strong>开源项目：【<a href="https://github.com/Stability-AI/generative-models">链接地址</a>】</strong></p><p>现在，你可以基于原有的静止图像来生成一段几秒钟的视频。</p><p>基于 Stability AI 原有的 Stable Diffusion 文生图模型，Stable Video Diffusion 成为了开源或已商业行列中为数不多的&#x3D;&#x3D;视频生成&#x3D;&#x3D;模型之一。</p><p><img src="https://r2.leshans.eu.org/2023/11/87444a144947172e6189ef9f565f0360.jpg"></p><h2 id="2-像魔法一样的AI图像升级、增强器！提升图片画质只需1秒"><a href="#2-像魔法一样的AI图像升级、增强器！提升图片画质只需1秒" class="headerlink" title="2.像魔法一样的AI图像升级、增强器！提升图片画质只需1秒"></a>2.像魔法一样的AI图像升级、增强器！提升图片画质只需1秒</h2><p>最先进的人工智能技术可实现疯狂的高分辨率升级。不仅高档，更提升！Magnific 可以在您自己的提示和参数的指导下，产生幻觉并重新想象尽可能多的细节！</p><p><img src="https://r2.leshans.eu.org/2023/11/1b1768220114e69f20f7b91e333c783d.jpg"></p><p><strong>加入等候名单：【<a href="https://magnific.substack.com/">点击前往</a>】</strong></p><h2 id="3-Claude-2-1-升级后，可轻松处理20W指令，-准确率提升30"><a href="#3-Claude-2-1-升级后，可轻松处理20W指令，-准确率提升30" class="headerlink" title="3.Claude 2.1 升级后，可轻松处理20W指令， 准确率提升30%"></a>3.Claude 2.1 升级后，可轻松处理20W指令， 准确率提升30%</h2><p>Claude 2.1 升级后，可轻松处理20W指令。虽然很高兴能够将这一强大的新功能交到用户手中，但通常需要几个小时的人力才能完成的任务可能需要 Claude 几分钟的时间。我们预计随着技术的进步，延迟将大幅减少。  </p><p>幻觉率降低 2 倍</p><p>Claude 2.1 在诚实方面也取得了显着进步，与我们之前的 Claude 2.0 模型相比，虚假陈述减少了 2 倍。这使企业能够构建高性能的人工智能应用程序，解决具体的业务问题，并以更高的信任度和可靠性在其运营中部署人工智能。</p><p>我们通过设计大量复杂的事实问题来探究当前模型中已知的弱点，从而测试了 Claude 2.1 的诚实性。使用区分错误说法（“玻利维亚人口第五多的城市是蒙特罗”）和承认不确定性（“我不确定玻利维亚人口第五多的城市是什么”）的标题，Claude 2.1 更有可能提出异议而不是提供不正确的信息。</p><p>官方链接：<a href="https://www.anthropic.com/index/claude-2-1">https://www.anthropic.com/index/claude-2-1</a></p><p>主页: <a href="https://claude.ai/chats">https://claude.ai/chats</a></p><p>国外短信接收平台:  <a href="https://sms-activate.org/cn">https://sms-activate.org/cn</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>ai</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>portainer-ce中文纯净版</title>
    <link href="/posts/6a03af19.html"/>
    <url>/posts/6a03af19.html</url>
    
    <content type="html"><![CDATA[<p>源码仓库 <a href="https://github.com/eysp/portainer-ce">https://github.com/eysp/portainer-ce</a></p><h1 id="portainer-ce中文版"><a href="#portainer-ce中文版" class="headerlink" title="portainer-ce中文版"></a>portainer-ce中文版</h1><p><img src="https://r2.leshans.eu.org/2023/11/e00632772fde1afb994b9b2aea480fe4.jpg"></p><p><strong>其中arm和ppc64le架构没有设备测试，反馈bug 到GitHub issues</strong></p><p>已更新到<code>2.19.1</code>，新版删除左上角升级企业版的广告，删除首次登录弹出英文提示的公告，汉化的广告也隐藏，总之这是一个<code>纯净版</code></p><p>如果汉化对你有帮助请往下拉支持我，另外欢迎大家进q群交流，群号<code>758648462</code>（备注portainer）</p><h1 id="感谢群里-我不是矿神-指导js精简-52Fancy-提供编译脚本"><a href="#感谢群里-我不是矿神-指导js精简-52Fancy-提供编译脚本" class="headerlink" title="感谢群里@我不是矿神 指导js精简 | @52Fancy 提供编译脚本"></a>感谢群里@我不是矿神 指导js精简 | @52Fancy 提供编译脚本</h1><p><em>一键安装代码</em></p><div class="code-wrapper"><pre><code class="hljs shell">docker run -d --restart=always --name=&quot;portainer&quot; -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock 6053537/portainer-ce</code></pre></div><p>163镜像安装，portainer-ce中文，访问dockerhub网速不好的尝试</p><div class="code-wrapper"><pre><code class="hljs shell">docker run -d --restart=always --name=&quot;portainer&quot; -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock hub-mirror.c.163.com/6053537/portainer-ce</code></pre></div><p><strong>访问hub.docker.com网络慢，或者以上代码都无法安装成功尝试以下代码</strong></p><div class="code-wrapper"><pre><code class="hljs shell">docker pull hub-mirror.c.163.com/6053537/portainer-cedocker run -d --restart=always --name=&quot;portainer&quot; -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data 6053537/portainer-ce</code></pre></div><p><em>如果你要启用ssl访问，远程主机建议启用，端口443和证书路径&#x2F;certs请自行更改</em></p><div class="code-wrapper"><pre><code class="hljs shell">docker run -d -p 443:9000 --name portainer --restart always -v      ~/local-certs:/certs -v portainer_data:/data 6053537/portainer-ce -v /var/run/docker.sock:/var/run/docker.sock --ssl      --sslcert /certs/portainer.crt --sslkey /certs/portainer.key</code></pre></div><p><em>或者你也可以启用Nginx反代，下面是代码</em></p><div class="code-wrapper"><pre><code class="hljs shell">location / &#123;  proxy_pass http://127.0.0.1:9000;  proxy_set_header Host $host;  proxy_set_header X-Real-IP $remote_addr;  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  proxy_read_timeout 300s;  proxy_http_version 1.1;  proxy_set_header Upgrade $http_upgrade;  proxy_set_header Connection &quot;upgrade&quot;;&#125;</code></pre></div><p><em>如果你只想要访问youname.com&#x2F;portainer这样的子目录也可以</em></p><div class="code-wrapper"><pre><code class="hljs shell">location ^~ /portainer/ &#123;  proxy_pass http://127.0.0.1:9000/;  proxy_set_header Host $host;  proxy_set_header X-Real-IP $remote_addr;  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  proxy_read_timeout 300s;  proxy_http_version 1.1;  proxy_set_header Upgrade $http_upgrade;  proxy_set_header Connection &quot;upgrade&quot;;&#125;</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>portainer中文汉化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哪吒探针美化</title>
    <link href="/posts/c2a1a6fa.html"/>
    <url>/posts/c2a1a6fa.html</url>
    
    <content type="html"><![CDATA[<p>哪吒探针文档: <a href="https://nezha.wiki/guide/dashboard.html">https://nezha.wiki/guide/dashboard.html</a></p><h3 id="截图预览"><a href="#截图预览" class="headerlink" title="截图预览"></a>截图预览</h3><p><img src="https://r2.leshans.eu.org/2023/11/b2932ac72373a815b04e6cfba2feddf5.jpg"></p><p><img src="https://r2.leshans.eu.org/2023/11/b90ba894557c351b187dec8d2d132e7b.jpg"></p><h3 id="特性-以下均为基于官方默认主题的更改"><a href="#特性-以下均为基于官方默认主题的更改" class="headerlink" title="特性(以下均为基于官方默认主题的更改)"></a>特性(以下均为基于官方默认主题的更改)</h3><p>1.基于官方原版主题重新排版</p><p>2.解决移动端卡片列表点击最后两个卡片右上角的图标时，发生的页面位置跳转问题</p><p>3.固定卡片宽度，栅格化(若剩余宽度不足以容下一个卡片，则换行显示)解决原版主题页面宽度变小后仍然制一行显示4个导致布局错误</p><p>4.解决弹出看卡片位置不合适导致被顶部菜单栏遮挡问题</p><p>5.增加一些我常用的主机信息显示在卡片上，方便查看（不爱喜欢可以自行修改哈）</p><p>6.底部版权信息可以在template文件夹里的footer.html里更改</p><p>7.swap未开启显示提示</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>1.template里面的文件解压出来放到服务端模板目录里面</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/opt/</span>nezha<span class="hljs-regexp">/dashboard/</span>theme-custom/template</code></pre></div><p>2.重启哪吒面板服务</p><p>3.在哪吒面板后台主题选择<code>Custom(local)</code></p><p>4.将<code>css.txt</code>里面的CSS样式代码复制到哪吒面板后台的“自定义代码”文本框里</p><h3 id="一些信息的修改地址"><a href="#一些信息的修改地址" class="headerlink" title="一些信息的修改地址"></a>一些信息的修改地址</h3><p>1.站点图标 <code>header.html</code> 文件的第17行，替换掉<code>https://cdn.amzayo.top/static/public/luban/luban_head.png</code></p><p>2.页面左上角 <code>logomenu.html</code> 文件的第5行，替换掉<code>https://cdn.amzayo.top/static/public/luban/test_head.e7b54515.png</code></p><p>3.底部版权信息<code> footer.html</code> 文件的第4到8行，依照demo底部的文字按需替换</p><h2 id="下载地址–-点我下载"><a href="#下载地址–-点我下载" class="headerlink" title="下载地址–&gt;点我下载"></a>下载地址–&gt;<a href="https://github.com/woniu336/open_shell/blob/main/amzayo_template_fin_2.91.zip">点我下载</a></h2><h2 id="其他CSS样式"><a href="#其他CSS样式" class="headerlink" title="其他CSS样式"></a>其他CSS样式</h2><div class="code-wrapper"><pre><code class="hljs shell">&lt;style&gt;/* 屏幕适配 */@media only screen and (min-width: 1200px) &#123;    .ui.container &#123;    width: 80% !important;&#125;&#125;@media only screen and (max-width: 767px) &#123;    .ui.card&gt;.content&gt;.header:not(.ui), .ui.cards&gt;.card&gt;.content&gt;.header:not(.ui) &#123;        margin-top: 0.4em !important;    &#125;&#125;/* 整体图标 */i.icon &#123;    color: #000;    width: 1em !important;&#125;/* 背景图片 */body &#123;    content: &quot; &quot; !important;    background: fixed !important;    z-index: -1 !important;    top: 0 !important;    right: 0 !important;    bottom: 0 !important;    left: 0 !important;    background-position: top !important;    background-repeat: no-repeat !important;    background-size: cover !important;    background-category_bar: true url(https://gitee.com/darki/img/raw/master/1631081013043.webp) !important;    font-family: Arial,Helvetica,sans-serif !important;&#125;/* 进度条 */.ui.progress &#123;    border-radius: 0.5rem !important;&#125;.ui.progress .bar &#123;    min-width: 1.8em !important;    border-radius: 0.5rem !important;    line-height: 1.65em !important;&#125;.ui.fine.progress&gt; .bar &#123;    &#125;.ui.progress&gt; .bar &#123;   &#125;.ui.progress.fine .bar &#123;    &#125;.ui.progress.warning .bar &#123;    &#125;.ui.progress.error .bar &#123;    &#125;.ui.progress.offline .bar &#123;    &#125;/* 导航栏 */.ui.large.menu &#123;    border: 0 !important;    border-radius: 0rem !important;    background-color: rgba(255, 255, 255, 55%) !important;&#125;/* 首页按钮 */.ui.menu .active.item &#123;    background-color: transparent !important;&#125;/* 导航栏下拉框 */.ui.dropdown .menu &#123;    border: 0 !important;    border-radius: 1rem !important;    background-color: rgba(255, 255, 255, 80%) !important;&#125;/* 登陆按钮 */.nezha-primary-btn &#123;    background-color: transparent !important;    color: #000 !important;&#125;/* 大卡片 */<span class="hljs-meta prompt_">#</span><span class="language-bash">app .ui.fluid.accordion &#123;</span>    background-color: #fbfbfb26 !important;    border-radius: 1rem !important;&#125;/* 小卡片 */.ui.four.cards&gt;.card &#123;    background-color: #fafafaa3 !important;    border-radius: 1rem !important;&#125;.status.cards .wide.column &#123;    padding-top: 0 !important;    padding-bottom: 0 !important;&#125;.status.cards .three.wide.column &#123;&#125;.status.cards .wide.column:nth-child(1) &#123;&#125;.status.cards .wide.column:nth-child(2) &#123;&#125;.status.cards .description &#123;&#125;/* 小鸡名 */.status.cards .flag &#123;    margin-right: 0.5rem !important;&#125;/* 上传下载 */.status.cards .outline.icon &#123;    margin-right: 1px !important;&#125;i.arrow.alternate.circle.down.outline.icon &#123;    color: #21ba45 !important;&#125;i.arrow.alternate.circle.up.outline.icon &#123;    color: red !important;&#125;/* 弹出卡片小箭头 */.ui.right.center.popup &#123;    margin: -3px 0 0 0.914286em !important;    -webkit-transform-origin: left 50% !important;    transform-origin: left 50% !important;&#125;.ui.bottom.left.popup &#123;    margin-left: 1px !important;    margin-top: 3px !important;&#125;.ui.top.left.popup &#123;    margin-left: 0 !important;    margin-bottom: 10px !important;&#125;.ui.top.right.popup &#123;    margin-right: 0 !important;    margin-bottom: 8px !important;&#125;.ui.left.center.popup &#123;    margin: -3px .91428571em 0 0 !important;    -webkit-transform-origin: right 50% !important;    transform-origin: right 50% !important;&#125;.ui.right.center.popup:before,.ui.left.center.popup:before &#123;    border: 0px solid #fafafaeb !important;    background: #fafafaeb !important;&#125;.ui.top.popup:before &#123;    border-color: #fafafaeb transparent transparent !important;&#125;.ui.popup:before &#123;    border-color: #fafafaeb transparent transparent !important;&#125;.ui.bottom.left.popup:before &#123;    border-radius: 0 !important;    border: 1px solid transparent !important;    border-color: #fafafaeb transparent transparent !important;    background: #fafafaeb !important;    -webkit-box-shadow: 0px 0px 0 0 #fafafaeb !important;    box-shadow: 0px 0px 0 0 #fafafaeb !important;    -webkit-tap-highlight-color: rgba(0,0,0,0) !important;&#125;.ui.bottom.right.popup:before &#123;    border-radius: 0 !important;    border: 1px solid transparent !important;    border-color: #fafafaeb transparent transparent !important;    background: #fafafaeb !important    -webkit-box-shadow: 0px 0px 0 0 #fafafaeb !important;    box-shadow: 0px 0px 0 0 #fafafaeb !important;    -webkit-tap-highlight-color: rgba(0,0,0,0) !important;&#125;.ui.top.left.popup:before &#123;    border-radius: 0 !important;    border: 1px solid transparent !important;    border-color: #fafafaeb transparent transparent !important;    background: #fafafaeb !important;    -webkit-box-shadow: 0px 0px 0 0 #fafafaeb !important;    box-shadow: 0px 0px 0 0 #fafafaeb !important;    -webkit-tap-highlight-color: rgba(0,0,0,0) !important;&#125;.ui.top.right.popup:before &#123;    border-radius: 0 !important;    border: 1px solid transparent !important;    border-color: #fafafaeb transparent transparent !important;    background: #fafafaeb !important;    -webkit-box-shadow: 0px 0px 0 0 #fafafaeb !important;    box-shadow: 0px 0px 0 0 #fafafaeb !important;    -webkit-tap-highlight-color: rgba(0,0,0,0) !important;&#125;.ui.left.center.popup:before &#123;    border-radius: 0 !important;    border: 1px solid transparent !important;    border-color: #fafafaeb transparent transparent !important;    background: #fafafaeb !important;    -webkit-box-shadow: 0px 0px 0 0 #fafafaeb !important;    box-shadow: 0px 0px 0 0 #fafafaeb !important;    -webkit-tap-highlight-color: rgba(0,0,0,0) !important;&#125;/* 弹出卡片 */.status.cards .ui.content.popup &#123;    min-width: 20rem !important;    line-height: 2rem !important;    border-radius: 1rem !important;    border: 1px solid transparent !important;    background-color: #fafafaeb !important;    font-family: Arial,Helvetica,sans-serif !important;&#125;.ui.content &#123;    margin: 0 !important;    padding: 1em !important;&#125;/* 服务页 */.ui.table &#123;    background: RGB(225,225,225,0.6) !important;    border-radius: 1rem !important;&#125;.ui.table thead th &#123;    background: transparent !important;&#125;/* 服务页进度条 */.service-status .good &#123;    &#125;.service-status .danger &#123;    &#125;.service-status .warning &#123;    &#125;/* 版权 */.ui.inverted.segment, .ui.primary.inverted.segment &#123;    color: #000 !important;    font-weight: bold !important;    background-color: #fafafaa3 !important;&#125;&lt;/style&gt;&lt;!--Logo和版权--&gt;&lt;script&gt;window.onload = function()&#123;var avatar=document.querySelector(&quot;.item img&quot;)var footer=document.querySelector(&quot;div.is-size-7&quot;)footer.innerHTML=&quot;Powered by 路飞博客&quot;footer.style.visibility=&quot;visible&quot;avatar.src=&quot;https://gravatar.loli.net/avatar/6969d9446ac73edbace44fe66cbae6fc?d=mm&amp;s=50&quot;avatar.style.visibility=&quot;visible&quot;&#125;&lt;/script&gt;</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>哪吒</tag>
      
      <tag>探针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>雷池waf社区版反代上高防</title>
    <link href="/posts/6e0b6017.html"/>
    <url>/posts/6e0b6017.html</url>
    
    <content type="html"><![CDATA[<p><img src="https://r2.leshans.eu.org/2023/11/585052f90362007594fe1b25e707eb86.jpg"></p><p>我们经常用<code>NPM可视化面板</code>反代服务到域名上，我发现一个更加强大的面板，<code>雷池</code>是个web防火墙面板，基于nginx，反向代理只是基础，重点是还能防御站点，拦截网络恶意攻击。你可以理解为反代加高防的存在，</p><p><img src="https://r2.leshans.eu.org/2023/11/0def04e0ccd10ef58ad357b00811846e.jpg"></p><p><strong>使用方法</strong></p><p>Debian&#x2F;Ubuntu安装下载工具</p><div class="code-wrapper"><pre><code class="hljs shell">apt update -y  &amp;&amp; apt install -y curl</code></pre></div><p>CentOS安装下载工具</p><div class="code-wrapper"><pre><code class="hljs shell">yum update &amp;&amp; yum install curl</code></pre></div><p>官网版一键脚本</p><div class="code-wrapper"><pre><code class="hljs shell">curl -sS -O https://kejilion.pro/kejilion.sh &amp;&amp; chmod +x kejilion.sh &amp;&amp; ./kejilion.sh</code></pre></div><p>GitHub版一键脚本 部分小伙伴会遇到官网版出现大段乱码！就用GitHub版本吧！</p><div class="code-wrapper"><pre><code class="hljs shell">curl -sS -O https://raw.githubusercontent.com/kejilion/sh/main/kejilion.sh &amp;&amp; chmod +x kejilion.sh &amp;&amp; ./kejilion.sh</code></pre></div><p><img src="https://r2.leshans.eu.org/2023/11/5bce8bb79e908a876d894ca385c8a59d.jpg"></p>]]></content>
    
    
    
    <tags>
      
      <tag>雷池waf</tag>
      
      <tag>高防</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>V.PS高端线路的WordPress演示网站</title>
    <link href="/posts/3c4d0aa4.html"/>
    <url>/posts/3c4d0aa4.html</url>
    
    <content type="html"><![CDATA[<p>V.PS高端线路的WordPress演示网站：</p><p>中国-香港（移动CMI）：<a href="http://v.ps1.zhujiceping.net/">http://v.ps1.zhujiceping.net/</a></p><p>日本-大阪（IIJ）：<a href="http://v.ps2.zhujiceping.net/">http://v.ps2.zhujiceping.net/</a></p><p>日本-东京（软银）：<a href="http://v.ps3.zhujiceping.net/">http://v.ps3.zhujiceping.net/</a></p><p>澳大利亚-悉尼（联通AS9929）：<a href="http://v.ps4.zhujiceping.net/">http://v.ps4.zhujiceping.net/</a></p><p>美国-圣何塞（电信CN2+联通AS9929+移动CMIN2）：<a href="http://v.ps5.zhujiceping.net/">http://v.ps5.zhujiceping.net/</a></p><p>英国-伦敦（联通AS9929）：<a href="http://v.ps6.zhujiceping.net/">http://v.ps6.zhujiceping.net</a></p><p>德国-法兰克福（联通AS9929）：<a href="http://v.ps7.zhujiceping.net/">http://v.ps7.zhujiceping.net</a></p><p>荷兰-阿姆斯特丹（电信CN2+联通AS9929+移动CMI）：<a href="http://v.ps8.zhujiceping.net/">http://v.ps8.zhujiceping.net/</a></p><p>官网测试： <a href="https://v.ps/speedtest/">https://v.ps/speedtest/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>amh搭建海洋cms注意事项</title>
    <link href="/posts/abd8b6c7.html"/>
    <url>/posts/abd8b6c7.html</url>
    
    <content type="html"><![CDATA[<p>海洋CMS又名SEACMS，完全开源免费，自适应电脑、手机、平板、APP多终端，无加密、更安全，是您最佳的建站工具!</p><p>爬滚打多年，海洋CMS有着丰富的经验和技术积累，并且能够随着流行趋势加入更多当下流行的功能。</p><h2 id="注意几点"><a href="#注意几点" class="headerlink" title="注意几点"></a>注意几点</h2><ol><li>根目录删除<code>.user.ini</code> 文件</li><li>data目录设置<code>权限为777</code>,其余<code>555</code></li><li>如果导入数据库文件后缀为<code>sql.gz</code>,先解压为<code>sql</code></li><li>修改<code>common.inc.php</code>数据库信息</li><li>数据库设置那里要<code>启用远程开启 </code></li><li>伪静态规则</li></ol><p><strong>伪静态规则</strong></p><div class="code-wrapper"><pre><code class="hljs shell">location / &#123;rewrite ^/frim/index(.+?)\.html$ /list/index.php?$1 last;rewrite ^/movie/index(.+?)\.html$ /detail/index.php?$1 last;rewrite ^/play/([0-9]+)-([0-9]+)-([0-9]+)\.html$ /video/index.php?$1-$2-$3 last;rewrite ^/topic/index(.+?)\.html$ /topic/index.php?$1 last;rewrite ^/topiclist/index(.+?).html$ /topiclist/index.php?$1 last;rewrite ^/index\.html$ index.php permanent;rewrite ^/news\.html$ news/ permanent;rewrite ^/part/index(.+?)\.html$ /articlelist/index.php?$1 last;rewrite ^/article/index(.+?)\.html$ /article/index.php?$1 last;&#125;</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>海洋</tag>
      
      <tag>amh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用代理设置 Git 克隆</title>
    <link href="/posts/6ff9006f.html"/>
    <url>/posts/6ff9006f.html</url>
    
    <content type="html"><![CDATA[<h3 id="git-clone-ssh-走代理"><a href="#git-clone-ssh-走代理" class="headerlink" title="git clone ssh 走代理"></a>git clone ssh 走代理</h3><p>新建一个 <code>C:\Users\你的用户名\.ssh\config</code> 文件（没有扩展名，如果已存在此文件则不用新建），编辑此文件增加以下内容：</p><div class="code-wrapper"><pre><code class="hljs shell">Host github.com *.github.com      User git      ProxyCommand connect -S 127.0.0.1:7890 %h %p</code></pre></div><p>其中 <code>Host</code> 右边为需要走代理的域名列表，<code>127.0.0.1:7890</code> 替换为自己的代理服务器地址。</p><h3 id="git-clone-http-s-走代理"><a href="#git-clone-http-s-走代理" class="headerlink" title="git clone http(s) 走代理"></a>git clone http(s) 走代理</h3><div class="code-wrapper"><pre><code class="hljs shell">git config --global http.proxy &quot;http://127.0.0.1:7890&quot;  git config --global https.proxy &quot;http://127.0.0.1:7890&quot;</code></pre></div><p>其中 <code>127.0.0.1:7890</code> 替换为自己的代理服务器地址。</p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谷歌云注册细节</title>
    <link href="/posts/7e32457b.html"/>
    <url>/posts/7e32457b.html</url>
    
    <content type="html"><![CDATA[<h3 id="准备东西"><a href="#准备东西" class="headerlink" title="准备东西:"></a>准备东西:</h3><ol><li>香港节点(科学上网)</li><li>打开edge浏览器- 隐私窗口</li><li>香港地址: 香港岛-大坑- 香港南区大潭水塘道624号</li><li>香港电话号码(无忧行)</li><li>信用卡(万里汇)</li></ol><p>注册地址: <a href="https://cloud.google.com/free?hl=zh-cn">https://cloud.google.com/free?hl=zh-cn</a></p><p>老账号续期教程:</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>cloudflared Tunnels 内网穿透</title>
    <link href="/posts/50106c9.html"/>
    <url>/posts/50106c9.html</url>
    
    <content type="html"><![CDATA[<p><code>Cloudflared Tunnels</code>是Cloudflare提供的<code>内网穿透</code>工具，可安全地将<code>公网流量</code>转发到内部网络服务。通过加密隧道连接全球网络，它提供安全性和性能优化，方便访问内部服务。</p><blockquote><p>部署环境: windows10</p></blockquote><h3 id="一-下载程序"><a href="#一-下载程序" class="headerlink" title="一: 下载程序"></a>一: 下载程序</h3><p>将<code>cloudflared-windows-amd64.exe</code> 重命名为将<code>cloudflared.exe</code></p><p><a href="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe">https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe</a></p><h3 id="二-拷贝项目"><a href="#二-拷贝项目" class="headerlink" title="二: 拷贝项目"></a>二: 拷贝项目</h3><p>拷贝项目文件到本地任意目录:</p><p>地址 : <a href="https://github.com/woniu336/cloudflared">https://github.com/woniu336/cloudflared</a></p><h3 id="三-启动服务"><a href="#三-启动服务" class="headerlink" title="三: 启动服务"></a>三: 启动服务</h3><p>将<code>cloudflared.exe</code>和项目文件放在同一个文件夹,</p><p>然后双击 <code>menu.bat</code> 开启你的穿透之旅吧</p><br>]]></content>
    
    
    
    <tags>
      
      <tag>内网穿透</tag>
      
      <tag>cloudflared</tag>
      
      <tag>Tunnels</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>路飞工具箱</title>
    <link href="/posts/294a6d68.html"/>
    <url>/posts/294a6d68.html</url>
    
    <content type="html"><![CDATA[<h2 id="海外服务器用"><a href="#海外服务器用" class="headerlink" title="海外服务器用"></a>海外服务器用</h2><div class="note note-success">            <p>脚本推荐一</p>          </div><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/tp.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x tp.sh &amp;&amp; ./tp.sh</code></pre></div><div class="note note-success">            <p>脚本推荐二</p>          </div><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/tool.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x tool.sh &amp;&amp; ./tool.sh</code></pre></div><div class="note note-success">            <p>脚本推荐三</p>          </div><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://raw.githubusercontent.com/kejilion/sh/main/kejilion.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x kejilion.sh &amp;&amp; ./kejilion.sh</code></pre></div><h2 id="其他教程"><a href="#其他教程" class="headerlink" title="其他教程"></a>其他教程</h2><table><thead><tr><th>项目</th><th>链接</th><th></th></tr></thead><tbody><tr><td>## 推荐脚本</td><td><a href="https://blog.leshans.eu.org/p/tool/#5%E6%8E%A8%E8%8D%90%E8%84%9A%E6%9C%AC">https://blog.leshans.eu.org/p/tool/#5推荐脚本</a></td><td></td></tr><tr><td>## 建站选择</td><td>推荐ubuntu20.04，在复杂环境中，Ubuntu具备完善体制</td><td></td></tr><tr><td>## 一键重装系统</td><td><a href="https://blog.leshans.eu.org/p/tool/#4%E4%B8%80%E9%94%AEdd">https://blog.leshans.eu.org/p/tool/#4一键dd</a> 或 <a href="https://blog.leshans.eu.org/p/133/">https://blog.leshans.eu.org/p/133/</a></td><td></td></tr><tr><td>## 安装宝塔面板7.7原版</td><td><a href="https://blog.leshans.eu.org/p/bt/">https://blog.leshans.eu.org/p/bt/</a></td><td></td></tr><tr><td>宝塔面板计划任务迁移</td><td><a href="https://blog.leshans.eu.org/p/136/">https://blog.leshans.eu.org/p/136/</a></td><td></td></tr><tr><td>宝塔海外版aapanel安装教程</td><td><a href="https://blog.leshans.eu.org/p/141/">https://blog.leshans.eu.org/p/141/</a></td><td></td></tr><tr><td>docker应用</td><td><a href="https://blog.leshans.eu.org/p/11/">https://blog.leshans.eu.org/p/11/</a></td><td></td></tr><tr><td>MySQL 5.7内存优化</td><td><a href="https://blog.leshans.eu.org/p/tool/#1mysql-57%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96">https://blog.leshans.eu.org/p/tool/#1mysql-57内存优化</a></td><td></td></tr><tr><td>开启BBR</td><td><a href="https://blog.leshans.eu.org/p/tool/#2bbr">https://blog.leshans.eu.org/p/tool/#2bbr</a></td><td></td></tr><tr><td>swap的调整</td><td><a href="https://blog.leshans.eu.org/p/tool/#3swap%E7%9A%84%E8%B0%83%E6%95%B4">https://blog.leshans.eu.org/p/tool/#3swap的调整</a></td><td></td></tr><tr><td>证书申请</td><td><a href="https://blog.leshans.eu.org/p/ssl/">https://blog.leshans.eu.org/p/ssl/</a></td><td></td></tr><tr><td>rclone工具</td><td><a href="https://blog.leshans.eu.org/p/rclone/">https://blog.leshans.eu.org/p/rclone/</a></td><td></td></tr><tr><td>兰空图床</td><td><a href="https://blog.leshans.eu.org/p/137/">https://blog.leshans.eu.org/p/137/</a></td><td></td></tr><tr><td>监控域名有效期</td><td><a href="https://blog.leshans.eu.org/p/132/">https://blog.leshans.eu.org/p/132/</a></td><td></td></tr><tr><td>Cloudflare R2作为图床的管理和同步</td><td><a href="https://blog.leshans.eu.org/p/143/">https://blog.leshans.eu.org/p/143/</a></td><td></td></tr><tr><td>Cloudflare防火墙的设置</td><td><a href="https://blog.leshans.eu.org/p/126/">https://blog.leshans.eu.org/p/126/</a></td><td></td></tr><tr><td>制作自己专属的CDN</td><td><a href="https://blog.leshans.eu.org/p/125/">https://blog.leshans.eu.org/p/125/</a></td><td></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>路飞工具箱</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>强大的网盘同步工具--rclone工具箱</title>
    <link href="/posts/24527baa.html"/>
    <url>/posts/24527baa.html</url>
    
    <content type="html"><![CDATA[<p>如果你在寻找专业且易用的网盘拷贝与同步工具，那就让<code>Rclone</code>成为你的云端合作伙伴吧。它虽然不会说笑话，但它绝对会在云端任务中<code>带来欢笑</code>。</p><p>一键安装rclone工具箱</p><div class="code-wrapper"><pre><code class="hljs bash">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/rclone.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x rclone.sh &amp;&amp; ./rclone.sh</code></pre></div><p>当谈到强大的<code>网盘拷贝与同步</code>工具时，<code>Rclone</code>绝对是那位总是低调却又非常值得注意的明星。它就像是那个坐在后排的天才学生，总是默默地在背后完成任务，而不是在台前卖弄自己。</p><p>首先，<code>Rclone</code>是一名真正的变身专家。它可以从一个网盘变成另一个网盘，仿佛是魔术师一样。无论你是想从<code>Google Drive</code>变身为<code>Dropbox</code>，还是从<code>OneDrive</code>蜕变为<code>Amazon S3</code>，Rclone都能帮你完成。这就像是在玩一场云端变装派对，而Rclone是你的变装专家，总是能帮你换上最适合的服装。</p><p>而且，Rclone也是一个<code>同步</code>的奇才。它可以确保你的文件在不同的云存储之间保持同步，就像是一个精密的交响乐团指挥家，确保每个乐器都在正确的时刻奏响。无论你是在办公室工作还是在沙滩度假，Rclone都能确保你的文件不会在云端丢失节奏。</p><p>但是，尽管<code>Rclone</code>是一位技术高手，但它并不是那种自恋自大的软件。它没有花哨的用户界面，也不会在社交媒体上炫耀自己的成就。它只是<code>默默地坚守在后台</code>，为你完成工作，就像是那位永远不会抢镜的配角演员，但却是整个剧组的支持力量。</p>]]></content>
    
    
    
    <tags>
      
      <tag>rclone</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rclone Browser代理设置</title>
    <link href="/posts/c936fc11.html"/>
    <url>/posts/c936fc11.html</url>
    
    <content type="html"><![CDATA[<p>假设你已经安装了<code>rclone</code>,并配置好了各大网盘</p><p>那么在<code>Rclone Browser</code>查看谷歌硬盘内容,是看不了的,但是如果你已经开启了<code>科学上网</code>,则按照下面的方法</p><div class="code-wrapper"><pre><code class="hljs bash">socks5://127.0.0.1:10808</code></pre></div><p><code>10808</code>端口是v2ray的代理端口</p><p>如果是小狐狸则是 <code>7890</code></p><div class="code-wrapper"><pre><code class="hljs bash">socks5://127.0.0.1:7890</code></pre></div><p><img src="https://r2.leshans.eu.org/2023/09/a7a2b0af127a3a1e82a8b4ea2bf67582.webp" alt="Pasted image 20230914213555"></p><p>下载的时候要加上参数,避免有些文件被误认为病毒无法下载:</p><div class="code-wrapper"><pre><code class="hljs ada"><span class="hljs-comment">--drive-acknowledge-abuse</span></code></pre></div><p><img src="https://r2.leshans.eu.org/2023/09/3f3048d9fc55b43d561e0eeef6a12186.webp" alt="Pasted image 20230914221303"></p><p>cmd终端开启代理:</p><p>小狐狸:</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> http_proxy=socks5://127.0.0.1:7890<span class="hljs-built_in">set</span> https_proxy=socks5://127.0.0.1:7890</code></pre></div><p>v2ray:</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> http_proxy=socks5://127.0.0.1:10808<span class="hljs-built_in">set</span> https_proxy=socks5://127.0.0.1:10808</code></pre></div><p>取消代理:</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> http_proxy=<span class="hljs-built_in">set</span> https_proxy=</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>rclone</tag>
      
      <tag>代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Openwrt安装alist和阿里云盘webdav</title>
    <link href="/posts/18ba738d.html"/>
    <url>/posts/18ba738d.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>以下插件只适用于斐讯 N1,其他没测试过</p></blockquote><h3 id="一-使用方法"><a href="#一-使用方法" class="headerlink" title="一: 使用方法"></a>一: 使用方法</h3><p>下载插件,然后进入软路由: <code>系统</code>–<code>文件上传</code>–<code>安装</code></p><p><code>例如: 斐讯 N1 盒子软路由</code></p><h3 id="二-阿里云盘webdav插件"><a href="#二-阿里云盘webdav插件" class="headerlink" title="二: 阿里云盘webdav插件"></a>二: 阿里云盘webdav插件</h3><p>插件下载:</p><p><a href="https://github.com/woniu336/openwrt-ipk/tree/master/N1%E5%AE%89%E8%A3%85%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98webdav">https://github.com/woniu336/openwrt-ipk/tree/master/N1安装阿里云盘webdav</a></p><p>项目地址 : <a href="https://github.com/messense/aliyundrive-webdav">https://github.com/messense/aliyundrive-webdav</a></p><h3 id="三-Alist插件"><a href="#三-Alist插件" class="headerlink" title="三:Alist插件"></a>三:Alist插件</h3><p>OpenWrt 查看CPU架构命令：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/os-release |grep ARCH</code></pre></div><p>插件下载:</p><p><a href="https://github.com/woniu336/openwrt-ipk/tree/master/N1%E8%BD%AF%E8%B7%AF%E7%94%B1%E5%AE%89%E8%A3%85alist">https://github.com/woniu336/openwrt-ipk/tree/master/N1软路由安装alist</a></p><p>项目地址 : <a href="https://github.com/sbwml/luci-app-alist">https://github.com/sbwml/luci-app-alist</a></p><p>AList文档：<a href="https://alist.nn.ci/zh/guide/">https://alist.nn.ci/zh/guide/</a></p><h3 id="四-Docker-安装阿里云盘webdav"><a href="#四-Docker-安装阿里云盘webdav" class="headerlink" title="四: Docker 安装阿里云盘webdav"></a>四: Docker 安装阿里云盘webdav</h3><div class="code-wrapper"><pre><code class="hljs bash">docker run -d --name=aliyundrive-webdav --restart=unless-stopped -p 8080:8080 \  -v /etc/aliyundrive-webdav/:/etc/aliyundrive-webdav/ \  -e REFRESH_TOKEN=<span class="hljs-string">&#x27;your refresh token&#x27;</span> \  -e WEBDAV_AUTH_USER=admin \  -e WEBDAV_AUTH_PASSWORD=admin \  messense/aliyundrive-webdav</code></pre></div><p>其中，<code>REFRESH_TOKEN</code> 环境变量为你的阿里云盘 <code>refresh_token</code>，<code>WEBDAV_AUTH_USER</code> 和 <code>WEBDAV_AUTH_PASSWORD</code> 为连接 WebDAV 服务的用户名和密码。</p>]]></content>
    
    
    
    <tags>
      
      <tag>openwrt</tag>
      
      <tag>阿里云盘</tag>
      
      <tag>webdav</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Openwrt安装阿里云盘 WebDAV</title>
    <link href="/posts/49a1c62a.html"/>
    <url>/posts/49a1c62a.html</url>
    
    <content type="html"><![CDATA[<p>阿里云盘 WebDAV 服务，主要使用场景为配合支持 WebDAV 协议的客户端 App 如 <a href="https://firecore.com/infuse">Infuse</a>、<a href="https://nplayer.com/">nPlayer</a><br>等实现在电视上直接观看云盘视频内容， 支持客户端 App 直接从阿里云盘获取文件播放而不经过运行本应用的服务器中转, 支持上传文件，但受限于 WebDAV 协议不支持文件秒传。</p><p><strong>请注意：V2 版本基于阿里云盘开放平台接口实现，不再支持阿里云盘 Web 和 App 版本获取的 refresh token。</strong><br><strong>由于本项目作者不再使用梅林固件，V2 版本不再免费支持 Koolshare 梅林固件系统，如有需要请考虑<a href="https://github.com/messense/aliyundrive-webdav/discussions/778">付费支持</a>。</strong></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>可以从 <a href="https://github.com/messense/aliyundrive-webdav/releases">GitHub Releases</a> 页面下载预先构建的二进制包， 也可以使用 pip 从 PyPI 下载:</p><div class="code-wrapper"><pre><code class="hljs bash">pip install aliyundrive-webdav</code></pre></div><p>如果系统支持 <a href="https://snapcraft.io/">Snapcraft</a> 比如 Ubuntu、Debian 等，也可以使用 snap 安装：</p><div class="code-wrapper"><pre><code class="hljs bash">sudo snap install aliyundrive-webdav</code></pre></div><h3 id="OpenWrt-路由器"><a href="#OpenWrt-路由器" class="headerlink" title="OpenWrt 路由器"></a>OpenWrt 路由器</h3><p><a href="https://github.com/messense/aliyundrive-webdav/releases">GitHub Releases</a> 中有预编译的 ipk 文件， 目前提供了<br>aarch64&#x2F;arm&#x2F;mipsel&#x2F;x86_64&#x2F;i686 等架构的版本，可以下载后使用 opkg 安装，以 nanopi r4s 为例：</p><div class="code-wrapper"><pre><code class="hljs bash">wget https://github.com/messense/aliyundrive-webdav/releases/download/v2.3.2/aliyundrive-webdav_2.3.2-1_aarch64_generic.ipkwget https://github.com/messense/aliyundrive-webdav/releases/download/v2.3.2/luci-app-aliyundrive-webdav_2.3.2_all.ipkwget https://github.com/messense/aliyundrive-webdav/releases/download/v2.3.2/luci-i18n-aliyundrive-webdav-zh-cn_2.3.2-1_all.ipkopkg install aliyundrive-webdav_2.3.2-1_aarch64_generic.ipkopkg install luci-app-aliyundrive-webdav_2.3.2_all.ipkopkg install luci-i18n-aliyundrive-webdav-zh-cn_2.3.2-1_all.ipk</code></pre></div><p>其它 CPU 架构的路由器可在 <a href="https://github.com/messense/aliyundrive-webdav/releases">GitHub Releases</a> 页面中查找对应的架构的主程序 ipk 文件下载安装， 常见<br>OpenWrt 路由器 CPU 架构如下表（欢迎补充）：</p><table><thead><tr><th>路由器</th><th>CPU 架构</th></tr></thead><tbody><tr><td>nanopi r4s</td><td>aarch64_generic</td></tr><tr><td>小米 AX3600</td><td>aarch64_cortex-a53</td></tr><tr><td>斐讯 N1 盒子</td><td>aarch64_cortex-a53</td></tr><tr><td>Newifi D2</td><td>mipsel_24kc</td></tr><tr><td>Pogoplug</td><td>arm_mpcore</td></tr></tbody></table><blockquote><p>Tips: 不清楚 CPU 架构类型可通过运行 <code>opkg print-architecture</code> 命令查询。</p></blockquote><p><img src="https://r2.leshans.eu.org/2023/09/ab37d11644e919f925437a1008c2a593.webp" alt="Pasted image 20230914182516"></p><h2 id="Docker-运行"><a href="#Docker-运行" class="headerlink" title="Docker 运行"></a>Docker 运行</h2><div class="code-wrapper"><pre><code class="hljs bash">docker run -d --name=aliyundrive-webdav --restart=unless-stopped -p 8080:8080 \  -v /etc/aliyundrive-webdav/:/etc/aliyundrive-webdav/ \  -e REFRESH_TOKEN=<span class="hljs-string">&#x27;your refresh token&#x27;</span> \  -e WEBDAV_AUTH_USER=admin \  -e WEBDAV_AUTH_PASSWORD=admin \  messense/aliyundrive-webdav</code></pre></div><p>其中，<code>REFRESH_TOKEN</code> 环境变量为你的阿里云盘 <code>refresh_token</code>，<code>WEBDAV_AUTH_USER</code><br>和 <code>WEBDAV_AUTH_PASSWORD</code> 为连接 WebDAV 服务的用户名和密码。</p><h3 id="QNAP-威联通-NAS"><a href="#QNAP-威联通-NAS" class="headerlink" title="QNAP 威联通 NAS"></a>QNAP 威联通 NAS</h3><h4 id="QNAP-插件"><a href="#QNAP-插件" class="headerlink" title="QNAP 插件"></a>QNAP 插件</h4><p><a href="https://github.com/iranee/qnap-aliyunpan-webdav">qnap-aliyunpan-webdav</a> by<br><a href="https://github.com/iranee">@iranee</a>.</p><h4 id="ContainerStation-Docker"><a href="#ContainerStation-Docker" class="headerlink" title="ContainerStation (Docker)"></a>ContainerStation (Docker)</h4><p>管理员登陆 NAS 后安装 ContainerStation 并启动服务，在 Management (管理) 标签中 Create Application (新建应用)，配置如下</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.3&#x27;</span><span class="hljs-attr">services:</span>  <span class="hljs-attr">aliyundrive-webdav:</span>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">aliyundrive-webdav</span>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;8080:8080&#x27;</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;REFRESH_TOKEN=mytoken...&#x27;</span>    <span class="hljs-attr">category_bar:</span> <span class="hljs-literal">true</span> <span class="hljs-string">messense/aliyundrive-webdav</span></code></pre></div><p>其中 <code>REFRESH_TOKEN</code> 文档最下面说明；<code>:8080</code> 网盘访问映射端口，可以按需改为其他的。</p><p>点击 Create (创建)后启动，访问 <a href="http://nas地址:8080/">http://nas地址:8080/</a> 即可看到你网盘的自动生成索引网页文件。</p><p>参考文档</p><ul><li><a href="https://docs.docker.com/compose/">https://docs.docker.com/compose/</a></li><li><a href="https://www.composerize.com/">https://www.composerize.com/</a></li></ul><h2 id="rclone"><a href="#rclone" class="headerlink" title="rclone"></a>rclone</h2><p>为了避免重复上传文件，使用 rclone 时推荐使用 <a href="https://rclone.org/webdav/#nextcloud">Nextcloud WebDAV</a> 模式，可以支持 sha1 checksums.<br>另外需要配合 <code>--no-update-modtime</code> 参数，否则 rclone 为了更新文件修改时间还是会强制重新上传。</p><p>举个例子：</p><div class="code-wrapper"><pre><code class="hljs bash">rclone --no-update-modtime copy abc.pdf aliyundrive-nc://docs/</code></pre></div><h2 id="获取-refresh-token"><a href="#获取-refresh-token" class="headerlink" title="获取 refresh token"></a>获取 refresh token</h2><ul><li><a href="https://messense-aliyundrive-webdav-backendrefresh-token-ucs0wn.streamlit.app/">通过在线工具获取 refresh token</a></li><li>命令行运行 <code>aliyundrive-webdav qr login</code> 扫码授权后会输出 refresh token</li></ul><p><img src="https://r2.leshans.eu.org/2023/09/967aba8993fb3956185f8f9ae808cc68.webp" alt="Pasted image 20230914182724"></p><h2 id="命令行用法"><a href="#命令行用法" class="headerlink" title="命令行用法"></a>命令行用法</h2><div class="code-wrapper"><pre><code class="hljs bash">$ aliyundrive-webdav --<span class="hljs-built_in">help</span>WebDAV server <span class="hljs-keyword">for</span> AliyunDriveUsage: aliyundrive-webdav [OPTIONS]       aliyundrive-webdav &lt;COMMAND&gt;Commands:  qr    Scan QRCode  <span class="hljs-built_in">help</span>  Print this message or the <span class="hljs-built_in">help</span> of the given subcommand(s)Options:      --host &lt;HOST&gt;          Listen host          [<span class="hljs-built_in">env</span>: HOST=]          [default: 0.0.0.0]  -p, --port &lt;PORT&gt;          Listen port          [<span class="hljs-built_in">env</span>: PORT=]          [default: 8080]      --client-id &lt;CLIENT_ID&gt;          Aliyun drive client_id          [<span class="hljs-built_in">env</span>: CLIENT_ID=]      --client-secret &lt;CLIENT_SECRET&gt;          Aliyun drive client_secret          [<span class="hljs-built_in">env</span>: CLIENT_SECRET=]      --drive-type &lt;DRIVE_TYPE&gt;          Aliyun drive <span class="hljs-built_in">type</span>          [<span class="hljs-built_in">env</span>: DRIVE_TYPE=]          Possible values:          - resource: Resource drive          - backup:   Backup drive          - default:  Default drive  -r, --refresh-token &lt;REFRESH_TOKEN&gt;          Aliyun drive refresh token          [<span class="hljs-built_in">env</span>: REFRESH_TOKEN=]  -U, --auth-user &lt;AUTH_USER&gt;          WebDAV authentication username          [<span class="hljs-built_in">env</span>: WEBDAV_AUTH_USER=]  -W, --auth-password &lt;AUTH_PASSWORD&gt;          WebDAV authentication password          [<span class="hljs-built_in">env</span>: WEBDAV_AUTH_PASSWORD=]  -I, --auto-index          Automatically generate index.html  -S, --read-buffer-size &lt;READ_BUFFER_SIZE&gt;          Read/download buffer size <span class="hljs-keyword">in</span> bytes, defaults to 10MB          [default: 10485760]      --upload-buffer-size &lt;UPLOAD_BUFFER_SIZE&gt;          Upload buffer size <span class="hljs-keyword">in</span> bytes, defaults to 16MB          [default: 16777216]      --cache-size &lt;CACHE_SIZE&gt;          Directory entries cache size          [default: 1000]      --cache-ttl &lt;CACHE_TTL&gt;          Directory entries cache expiration time <span class="hljs-keyword">in</span> seconds          [default: 600]      --root &lt;ROOT&gt;          Root directory path          [default: /]  -w, --workdir &lt;WORKDIR&gt;          Working directory, refresh_token will be stored <span class="hljs-keyword">in</span> there <span class="hljs-keyword">if</span> specified      --no-trash          Delete file permanently instead of trashing it      --read-only          Enable <span class="hljs-built_in">read</span> only mode      --tls-cert &lt;TLS_CERT&gt;          TLS certificate file path          [<span class="hljs-built_in">env</span>: TLS_CERT=]      --tls-key &lt;TLS_KEY&gt;          TLS private key file path          [<span class="hljs-built_in">env</span>: TLS_KEY=]      --strip-prefix &lt;STRIP_PREFIX&gt;          Prefix to be stripped off when handling request          [<span class="hljs-built_in">env</span>: WEBDAV_STRIP_PREFIX=]      --debug          Enable debug <span class="hljs-built_in">log</span>      --no-self-upgrade          Disable self auto upgrade      --skip-upload-same-size          Skip uploading same size file      --prefer-http-download          Prefer downloading using HTTP protocol      --redirect          Enable 302 redirect when possible  -h, --<span class="hljs-built_in">help</span>          Print <span class="hljs-built_in">help</span> (see a summary with <span class="hljs-string">&#x27;-h&#x27;</span>)  -V, --version          Print version</code></pre></div><blockquote><p><strong>Note</strong></p><p>注意：TLS&#x2F;HTTPS 暂不支持 MIPS 架构。</p></blockquote><blockquote><p><strong>Note</strong></p><p>注意：启用 <code>--skip-upload-same-size</code> 选项虽然能加速上传但可能会导致修改过的同样大小的文件不会被上传</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>openwrt</tag>
      
      <tag>阿里云盘</tag>
      
      <tag>webdav</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用nvm管理多版本node.js</title>
    <link href="/posts/fdab726a.html"/>
    <url>/posts/fdab726a.html</url>
    
    <content type="html"><![CDATA[<p>使用<code>nvm</code>（Node Version Manager）安装Node.js是一个非常方便的方法，因为它允许你在同一台机器上管理多个Node.js版本。以下是使用nvm安装Node.js的基本步骤：</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ol><li><p><strong>安装nvm</strong></p><p>根据你的操作系统，安装命令可能会有所不同。以下是在Linux上安装nvm的命令：</p><div class="code-wrapper"><pre><code class="hljs bash">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash</code></pre></div><p>或者使用wget：</p><div class="code-wrapper"><pre><code class="hljs bash">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash</code></pre></div><p>确保 <code>nvm</code> 生效</p></li></ol><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc</code></pre></div><ol start="2"><li><p><strong>验证nvm安装</strong></p><p>安装完成后，你可以通过运行以下命令来验证nvm是否正确安装：</p></li></ol><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">command</span> -v nvm</code></pre></div><p> 如果安装成功，这个命令应该会输出<code>nvm</code>。</p><p>查看nvm版本</p><div class="code-wrapper"><pre><code class="hljs bash">nvm --version</code></pre></div><ol start="3"><li><strong>安装Node.js</strong></li></ol><p>如果您想看看有哪些版本可以安装：</p><div class="code-wrapper"><pre><code class="hljs bash">nvm ls-remote</code></pre></div><p>这个命令会列出所有可用的Node.js版本，包括最新的稳定版、LTS（长期支持）版本以及旧版本。列表通常会很长，包含了从Node.js 0.1到最新版本的每一个版本。</p><p>如果你只想查看LTS版本，可以使用：</p><div class="code-wrapper"><pre><code class="hljs bash">nvm ls-remote --lts</code></pre></div><p>   使用nvm安装Node.js，你可以运行以下命令来安装特定版本的Node.js（例如，v18.16.0）：</p>   <div class="code-wrapper"><pre><code class="hljs bash">nvm install 18.16.0</code></pre></div><ol start="4"><li><p><strong>使用特定版本的Node.js</strong></p><p>安装完成后，你可以使用以下命令来切换到你刚刚安装的版本：</p><div class="code-wrapper"><pre><code class="hljs bash">nvm use 18.16.0</code></pre></div></li><li><p><strong>验证Node.js安装</strong></p><p>最后，你可以通过运行以下命令来验证Node.js是否正确安装：</p><div class="code-wrapper"><pre><code class="hljs bash">node -v</code></pre></div><p>这个命令应该会输出你刚刚安装的Node.js版本号。</p></li></ol><p>如果您想查看已安装的版本</p><div class="code-wrapper"><pre><code class="hljs bash">nvm <span class="hljs-built_in">ls</span></code></pre></div><p>请注意，nvm的安装和使用可能会因为你的操作系统和shell的不同而有所差异。确保按照nvm的官方文档进行操作，以获得最准确的信息。</p><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p><strong>windows下安装nvm</strong></p><p>项目: <a href="https://github.com/coreybutler/nvm-windows">https://github.com/coreybutler/nvm-windows</a></p><p>下载nvm <a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></p><p>安装后,以管理员方式打开cmd确认安装正确:</p><div class="code-wrapper"><pre><code class="hljs bash">nvm version</code></pre></div><p>查看可用的Node.js版本列表</p><div class="code-wrapper"><pre><code class="hljs bash">nvm list available</code></pre></div><p>安装指定版本</p><div class="code-wrapper"><pre><code class="hljs bash">nvm install 18.16.0</code></pre></div><p>切换版本</p><div class="code-wrapper"><pre><code class="hljs bash">nvm use 18.16.0</code></pre></div><p>确认版本</p> <div class="code-wrapper"><pre><code class="hljs bash">node -v</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>定时将R2图床同步到腾讯云对象存储</title>
    <link href="/posts/7404031d.html"/>
    <url>/posts/7404031d.html</url>
    
    <content type="html"><![CDATA[<p>请确保您的系统上已经<code>安装了 rclone</code>，并且命令的路径正确。</p><p>要将定时任务添加到您的系统中，您可以按照以下步骤进行操作：</p><p>打开<code>终端</code>或命令提示符，登录到您的系统。</p><blockquote><p><code>r2</code>为cloudflare r2 , <code>cos</code>是腾讯云cos</p></blockquote><h2 id="在linux中"><a href="#在linux中" class="headerlink" title="在linux中"></a>在linux中</h2><div class="code-wrapper"><pre><code class="hljs shell">crontab -e</code></pre></div><p>在打开的定时任务配置文件中，添加以下内容：</p>   <div class="code-wrapper"><pre><code class="hljs bash">0 2 * * * rclone <span class="hljs-built_in">sync</span> r2:blog cos:shenma-1253486782/blog --ignore-existing -u -v -P --transfers=20 --ignore-errors --buffer-size=128M --check-first --checkers=10</code></pre></div><p> 保存并关闭文件。</p><p> 系统将自动加载新的定时任务配置。</p><p>现在，您的系统将在<code>每天的凌晨2点</code>执行指定的命令。请注意，这是基于<code>系统的时区</code>设置，如果您的系统时区设置为东八区，那么任务将在东八区的凌晨2点执行。</p><p>查看任务</p><div class="code-wrapper"><pre><code class="hljs shell">crontab -l</code></pre></div><p>调整时区:</p><div class="code-wrapper"><pre><code class="hljs bash">timedatectl set-timezone Asia/Shanghai &amp;&amp; hwclock --systohc</code></pre></div><h2 id="在-Windows-系统中"><a href="#在-Windows-系统中" class="headerlink" title="在 Windows 系统中"></a>在 Windows 系统中</h2><p>您可以使用任务计划程序（Task Scheduler）来创建定时任务。以下是在 Windows 上创建定时任务的具体步骤：</p><ol><li><p>打开“任务计划程序”。您可以通过按下 Win + R 键，在运行对话框中输入 <code>taskschd.msc</code>，然后按下 Enter 键来打开它。</p></li><li><p>在任务计划程序窗口中，点击左侧的 “创建任务”。</p></li><li><p>在 “常规” 选项卡中，输入任务的名称和描述。</p></li><li><p>切换到 “触发器” 选项卡，点击 “新建” 来创建一个新的触发器。</p></li><li><p>在触发器设置中，选择 “每天”，并设置执行任务的时间为 16:40。</p></li><li><p>切换到 “操作” 选项卡，点击 “新建” 来创建一个新的操作。</p></li><li><p>在操作设置中，选择 “启动程序”，然后在程序&#x2F;脚本字段中输入 <code>rclone</code>。</p></li><li><p>在 “添加参数” 字段中输入 <code>sync r2:blog cos:shenma-1253486782/blog --ignore-existing -u -v -P --transfers=20 --ignore-errors --buffer-size=128M --check-first --checkers=10</code></p></li><li><p>配置其他可选设置，如 “条件”、”设置” 等。</p></li><li><p>点击 “确定” 保存任务。</p></li></ol><p>现在，您已经成功创建了一个在每天的16点40分执行指定命令的定时任务。请确保您的系统上已经安装了 rclone，并且命令的路径正确。您可以根据需要进行进一步的调整和修改。</p><h2 id="bat一键运行"><a href="#bat一键运行" class="headerlink" title="bat一键运行"></a>bat一键运行</h2><p>将以下内容保存为<code>bat文件</code></p><div class="code-wrapper"><pre><code class="hljs shell">@echo offcd /d D:\rclone-v1.63.0-windows-amd64rclone sync r2:blog cos:shenma-1253486782/blog --ignore-existing -u -v -P --transfers=20 --ignore-errors --buffer-size=128M --check-first --checkers=10pause</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>图床</tag>
      
      <tag>腾讯云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Debian/ubuntu服务器更改时区为中国</title>
    <link href="/posts/d8af692c.html"/>
    <url>/posts/d8af692c.html</url>
    
    <content type="html"><![CDATA[<p>有时候我们安装服务器会用默认的UTC( Universal Time Coordinated)时区，造成后继一些软件记录时间上显示的不够直观，所以需要手动更改为中国&#x2F;上海时区。<br>更改很简单，如下2条命令即可：</p><div class="code-wrapper"><pre><code class="hljs bash">sudo <span class="hljs-built_in">rm</span> /etc/localtimesudo <span class="hljs-built_in">ln</span> -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></pre></div><p>或者</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">设置上海时区</span>sudo timedatectl set-timezone Asia/Shanghai</code></pre></div><p>使用 <code>timedatectl</code>命令可以查看时区</p><div class="code-wrapper"><pre><code class="hljs shell">timedatectl</code></pre></div><p>启用 NTP 时间同步</p><div class="code-wrapper"><pre><code class="hljs shell">sudo timedatectl set-ntp on</code></pre></div><p>使用<code>hwclock --systohc</code>可以将系统时间同步到硬件时间。</p><div class="code-wrapper"><pre><code class="hljs shell">sudo hwclock --systohc</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>时区</tag>
      
      <tag>时间</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从网页视频到MP4：轻松使用M3U8下载器保存你喜爱的视频</title>
    <link href="/posts/effb803f.html"/>
    <url>/posts/effb803f.html</url>
    
    <content type="html"><![CDATA[<h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><h3 id="猫抓："><a href="#猫抓：" class="headerlink" title="猫抓："></a>猫抓：</h3><p><a href="https://github.com/xifangczy/cat-catch/releases">https://github.com/xifangczy/cat-catch/releases</a></p><p>安装地址: <a href="https://o2bmm.gitbook.io/cat-catch/docs/install">https://o2bmm.gitbook.io/cat-catch/docs/install</a></p><p>文档: <a href="https://o2bmm.gitbook.io/cat-catch/">https://o2bmm.gitbook.io/cat-catch/</a></p><h3 id="m3u8下载器："><a href="#m3u8下载器：" class="headerlink" title="m3u8下载器："></a>m3u8下载器：</h3><p><a href="https://github.com/nilaoda/N_m3u8DL-CLI/releases">https://github.com/nilaoda/N_m3u8DL-CLI/releases</a></p><p>下载解压,cmd命令</p><div class="code-wrapper"><pre><code class="hljs bash">N_m3u8DL-CLI_v3.0.2.exe --registerUrlProtocol</code></pre></div><p>打开浏览器: 进入需要下载的播放页面</p><p><img src="https://r2.leshans.eu.org/2023/09/bb12786f973e177337ecfe68a9f2928b.webp" alt="Pasted image 20230911144224"></p><p><img src="https://r2.leshans.eu.org/2023/09/8ed2be91d6de5b83d6432d25d40d77f6.webp" alt="Pasted image 20230911144302"></p>]]></content>
    
    
    
    <tags>
      
      <tag>m3u8</tag>
      
      <tag>mp4</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>openwrt n1 安装alist</title>
    <link href="/posts/f9c4728c.html"/>
    <url>/posts/f9c4728c.html</url>
    
    <content type="html"><![CDATA[<p>项目地址 : <a href="https://github.com/sbwml/luci-app-alist">https://github.com/sbwml/luci-app-alist</a></p><p>OpenWrt 查看CPU架构命令：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/os-release |grep ARCH</code></pre></div><p>AList文档：<a href="https://alist.nn.ci/zh/">https://alist.nn.ci/zh/</a></p><p>下载插件:  <a href="https://github.com/sbwml/luci-app-alist/releases/download/v3.27.0/openwrt-21.02-aarch64_cortex-a53.tar.gz">点击下载</a></p><p><code>视频教程</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>alist</tag>
      
      <tag>openwrt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免费白嫖Office 365 E5，5TB onedrive空间！</title>
    <link href="/posts/ab0b8296.html"/>
    <url>/posts/ab0b8296.html</url>
    
    <content type="html"><![CDATA[<p>注册入口</p><p><a href="https://developer.microsoft.com/zh-cn/microsoft-365/dev-program">https://developer.microsoft.com/zh-cn/microsoft-365/dev-program</a></p><p>1T改成5T</p><p><a href="https://admin.onedrive.com/?v=StorageSettings">https://admin.onedrive.com/?v=StorageSettings</a></p><p>添加新用户</p><p><a href="https://admin.microsoft.com/">https://admin.microsoft.com/</a></p><p>续签API设置</p><p><a href="https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredApps">https://portal.azure.com/#blade/Microsoft_AAD_IAM&#x2F;ActiveDirectoryMenuBlade&#x2F;RegisteredApps</a></p><p>E5续签软件下载</p><p><a href="https://e5renew.com/">https://e5renew.com/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>onedrive</tag>
      
      <tag>Office</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vps使用rclone挂载Google Drive详细记录</title>
    <link href="/posts/483a785e.html"/>
    <url>/posts/483a785e.html</url>
    
    <content type="html"><![CDATA[<p>其实 <code>rclone</code> 挂载 <code>Google Drive</code> 网上的教程已经很多了，但是大多数的教程都有一点点过时，与现在的实际操作有一点出入，故整理了当前的挂载操作，以防忘记。</p><h2 id="一、-安装并配置-rclone"><a href="#一、-安装并配置-rclone" class="headerlink" title="一、 安装并配置 rclone"></a>一、 安装并配置 rclone</h2><p>首先在 vps 上一键安装 rclone：</p><div class="code-wrapper"><pre><code class="hljs bash">curl https://rclone.org/install.sh | sudo bash</code></pre></div><p>接下来在本地电脑上下载命令行操作的 rclone：</p><p>访问 <a href="https://rclone.org/downloads/">rclone 下载地址</a>，选择您的操作系统下载相应的 zip 包并解压。一会需要用得着。</p><p>软件准备好中，在 vps 上开始配置，执行：</p><div class="code-wrapper"><pre><code class="hljs bash">rclone config</code></pre></div><p><code>选择 n</code>，新建配置：</p><p>此时 <code>rclone</code> 会要你选择要挂载什么网盘，找到 <code>google drive</code> 并选择。</p><p>注意是 google drive，不是 google cloud 或 google photos。</p><blockquote><p>选择后 rclone 会要求输入 api token，如果留空会使用 rclone 默认的 api，但是据官方说明官方的目前使用人数过多，由于 google 本身的限制可能会出现需要等待时间过长的问题，因此推荐自己去申请一个 api。</p></blockquote><p>非常推荐使用自己的 API，可以大幅提升稳定性。</p><h2 id="申请-api"><a href="#申请-api" class="headerlink" title="申请 api"></a>申请 api</h2><p>申请 api 并不复杂，也不一定要是需要被挂载的 google 账户操作，随意一个正常的 google 账户就可以。下面是申请的简单步骤：</p><ol><li>首先登录到 <a href="https://console.developers.google.com/">Google API console</a>，创建一个应用，点击 “启用 API 和服务”，找到 Google Drive 并启用</li></ol><p><img src="https://r2.leshans.eu.org/2023/09/c146931fae3335bbe2b6b98c9b59c69f.webp"></p><p>启用 Google Drive API</p><ol start="2"><li><p>点击 OAuth 同意屏幕，用户类型选择外部，应用名称随便填写，比如 “rclone” 就可以。用户支持电子邮件和开发者联系邮箱都填写您自己的就可以，点击保存并继续，剩下的参数都是用默认就可以了。</p></li><li><p>点击凭据，屏幕上方点击创建凭据，选择 OAuth 客户端 ID</p></li></ol><p><img src="https://r2.leshans.eu.org/2023/09/0448d20490053057dc0885454f265bcd.webp"></p><p>创建凭据选择</p><p>应用类型选择桌面应用。</p><p><img src="https://r2.leshans.eu.org/2023/09/61d656c89d21680f5d533d21efd06157.webp"></p><p>应用类型选择</p><p>名称随便填，点击创建。创建后会向您提供您的<code>客户端 ID 和客户端密码</code>，务必记下这些数据，并且填写到 rclone 中。</p><p>最后选择 OAuth 同意屏幕，选择发布应用。此时应该能看到发布状态变为了正式版。</p><p><img src="https://r2.leshans.eu.org/2023/09/0c488c24a67d7cae11cd392229e74fda.webp"></p><p>发布状态</p><p>至此 Google API 就申请完成了，继续返回到 rclone 中进行配置。</p><p>填写 Google API 后，应该会看到如下显示：</p><p><code>Scope that rclone should use when requesting access from drive.Choose a number from below, or type in your own value.Press Enter to leave empty. 1 / Full access all files, excluding Application Data Folder.   \ (drive) 2 / Read-only access to file metadata and file contents.   \ (drive.readonly)   / Access to files created by rclone only. 3 | These are visible in the drive website.   | File authorization is revoked when the user deauthorizes the app.   \ (drive.file)   / Allows read and write access to the Application Data folder. 4 | This is not visible in the drive website.   \ (drive.appfolder)   / Allows read-only access to file metadata but 5 | does not allow any access to read or download file content.   \ (drive.metadata.readonly)</code></p><p>这个可以根据需求选择，比如我要完整的访问权限，就选择 1。</p><p>接下来</p><p><code>root_folder_id</code> 为空，<code>service_account_file</code> 也为空，直接回车即可。</p><p><code>Edit advanced config</code> 输入 n，不需要进行额外的高级配置。</p><p><code>Use auto config</code> 因为是要在 vps 上挂载，vps 没有桌面环境，因此必须选择 <code>n</code>，进行远程配置。</p><p>选择后会看见如下显示：</p><p><code>Option config_token.For this to work, you will need rclone available on a machine that hasa web browser available.For more help and alternate methods see: https://rclone.org/remote_setup/Execute the following on the machine with the web browser (same rcloneversion recommended):        rclone authorize &quot;drive&quot; &quot;Your Token Code&quot;Then paste the result.Enter a value.</code></p><p>注意，接下来要在本地执行，前面下载在本地的 rclone 压缩包解压后，你应该能看到一个 <code>rclone.exe</code>，类似下图</p><p><img src="https://r2.leshans.eu.org/2023/09/aecb3cb51ee21df5e8754c021d9bd8ef.webp"></p><p>rclone 解压后</p><p>打开终端，进入到此目录后执行 <code>rclone authorize “drive”</code> 这一行。</p><p>如果不出意外，会自动打开浏览器进入到谷歌账号登录界面，此时一定要登录被挂载的谷歌账号，并选择同意授权。由于是新申请的 API，没有经过的谷歌的验证，所以谷歌会提醒该应用未经验证。但是左下角有一行小灰字，点击选择继续就能授权。</p><p>授权成功浏览器会提示 success：</p><p><img src="https://r2.leshans.eu.org/2023/09/9fb706ce4d086fc3a92a52393247ec6e.webp"></p><p>授权成功</p><p>此时返回命令行，等待几秒就能看见授权的 code 了。</p><p><img src="https://r2.leshans.eu.org/2023/09/ef9ff70bca686bdbb9bba83d0c3574ec.webp"></p><p><code>获取授权 code</code></p><p>复制授权 code，输入到<code> rclone</code> 中。</p><p>接下来 rclone 会询问是否为团队盘：</p><div class="code-wrapper"><pre><code class="hljs bash">Configure this as a Shared Drive (Team Drive)? y) Yesn) No (default)</code></pre></div><p>如果您要挂载的就是团队盘，那么选择 y，不是的话就选择 n</p><p>此时配置就已经结束了，退出 clone，开始挂载。</p><h2 id="二、-挂载-Google-Drive"><a href="#二、-挂载-Google-Drive" class="headerlink" title="二、 挂载 Google Drive"></a>二、 挂载 Google Drive</h2><p>首先新建一个文件夹用于挂载：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /home/google</code></pre></div><p>开始挂载：</p><div class="code-wrapper"><pre><code class="hljs bash">rclone mount gdrive: /home/google --allow-other --vfs-cache-mode writes --allow-non-empty --no-modtime &amp;</code></pre></div><p>其中 <code>gdrive</code> 是 rclone 配置时输入的<code>配置名称</code>，<code>/home/google</code> 是挂载目录，<code>&amp;</code> 是指后台运行。</p><p>此时可能会报错：</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">Fatal</span> <span class="hljs-literal">error</span>: mount not ready</code></pre></div><p>一般是因为缺少依赖导致的，我们选择安装</p><p>centos 系使用：</p><div class="code-wrapper"><pre><code class="hljs bash">yum install -y fuse fuse3</code></pre></div><p>debian 系使用：</p><div class="code-wrapper"><pre><code class="hljs bash">apt install -y fuse fuse3</code></pre></div><p>再次执行挂载命令，如果没有报错，就是挂载成功了。</p><p>检查挂载：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h</code></pre></div><p>应该看到：</p><p><img src="https://r2.leshans.eu.org/2023/09/2ebbd4ed56fee9f093f9b88c5e71cb49.webp"></p><p>挂载成功显示</p><p>可以看到 &#x2F;google 已经成功挂载了</p><p>接下来进入 &#x2F;google 进行一些简单的测试</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /google<span class="hljs-built_in">ls</span><span class="hljs-built_in">mkdir</span> <span class="hljs-built_in">test</span><span class="hljs-built_in">rm</span> -rf <span class="hljs-built_in">test</span></code></pre></div><p>如果能够顺利执行，则说明挂载没有问题。</p>]]></content>
    
    
    
    <tags>
      
      <tag>rclone</tag>
      
      <tag>Google Drive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VPS利剑！全面解析如何用rclone挂载OneDrive</title>
    <link href="/posts/2f16d4ac.html"/>
    <url>/posts/2f16d4ac.html</url>
    
    <content type="html"><![CDATA[<p>之前写过一篇使用 <code>rclone</code> 挂载 <code>Google Drive</code>的记录，这次来补上挂载 <code>onedrive</code> 的坑。挂载方法其实大同小异，网上也有许多文章进行介绍。</p><p>不过有些介绍实在是太简略了，甚至只是简单的复制了官方的示例，导致依旧看的一头雾水，所以我对 <code>rclone</code> 挂载 <code>onedrive</code> 的流程进行了整理和记录，希望能对大家有所帮助，能一次解决问题。</p><h2 id="1-创建-OneDrive-API"><a href="#1-创建-OneDrive-API" class="headerlink" title="1. 创建 OneDrive API"></a>1. 创建 OneDrive API</h2><p><em>为了实际使用中更稳定的体验，避免因为共享 API 达到使用限制而引发错误，绝对推荐创建自己的 API。</em></p><p><em>若要创建自己的 API，务必确保你的账号拥有 API 权限！</em></p><h3 id="1-1-获取-client-id"><a href="#1-1-获取-client-id" class="headerlink" title="1.1 获取 client_id"></a>1.1 获取 client_id</h3><p>首先访问 <a href="https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredApps">Microsoft Azur</a><a href="https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredApps">e 应用注册</a>，登录账号后点击<strong>应用注册</strong></p><p><img src="https://r2.leshans.eu.org/2023/09/dcb8a72dfdad00b4f98aeb6324ec41fa.webp"></p><p>应用注册</p><p>点击左上角的<strong>新注册</strong></p><p><img src="https://r2.leshans.eu.org/2023/09/c77eb0cad25a852bcde2020c94bea4ae.webp"></p><p>新注册</p><p>如图所示进行配置，名称可以随便写，账户类型选择第三项</p><p><img src="https://r2.leshans.eu.org/2023/09/3f1cdbb403f98fc91f8cb284927dabb6.webp"></p><p>注册应用程序</p><p>点击注册后可以看到你的应用的相关信息，复制好 应用程序 (客户端) ID ，这个就是 client_id</p><p><img src="https://r2.leshans.eu.org/2023/09/d7a132861c1e91b2abbab93f1c20c802.webp"></p><p>获取 client_id</p><h3 id="1-2-获取-client-secret"><a href="#1-2-获取-client-secret" class="headerlink" title="1.2 获取 client_secret"></a>1.2 获取 client_secret</h3><p>依次点击<strong>证书和密码</strong>，<strong>新客户端密码</strong>，在截止期限中将时间选择为最长（即两年）</p><p><img src="https://r2.leshans.eu.org/2023/09/928cbd118607fec1f2603a73c69bce73.webp"></p><p>创建新客户端密码</p><p>然后就可以看见值和机密 ID，我们只需要记录下 值 就可以，这个就是 client_secret 。</p><p><img src="https://r2.leshans.eu.org/2023/09/48ffac8b3c907b3f836f8138f30e0bae.webp"></p><p>获取 client_secret</p><h3 id="1-3-添加-API-权限"><a href="#1-3-添加-API-权限" class="headerlink" title="1.3 添加 API 权限"></a>1.3 添加 API 权限</h3><p>依次点击 <strong>API 权限</strong>，<strong>添加权限</strong>，<strong>Microsoft Graph</strong>，在右边栏搜索并添加权限。</p><p><code>Files.Read</code>,<code>Files.ReadWrite</code>,<code>Files.Read.All</code>,<code>Files.ReadWrite.All</code>,<code>offline_access</code>,<code>User.Read</code>这几项</p><p><img src="https://r2.leshans.eu.org/2023/09/c421c592df0809fe62cdba55117252c9.webp"></p><p>添加权限</p><p>添加完成后应该是这样</p><p><img src="https://r2.leshans.eu.org/2023/09/53136b466330aeb7d18e921db51611ad.webp"></p><p>API 权限展示</p><h3 id="1-4-添加身份验证"><a href="#1-4-添加身份验证" class="headerlink" title="1.4 添加身份验证"></a>1.4 添加身份验证</h3><p>依次点击<strong>身份验证</strong>，<strong>添加平台</strong>，<strong>Web</strong></p><p><img src="https://r2.leshans.eu.org/2023/09/9bd5081f6aa45690320c04d290292944.webp"></p><p>添加身份验证, 在重定向 URI 中输入 </p><div class="code-wrapper"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//localhost</span></code></pre></div><p><img src="https://r2.leshans.eu.org/2023/09/f180ee860062e528227d36317a5c0c25.webp"></p><p>设置重定向</p><p>至此，OneDrive API 创建完成</p><h2 id="2-添加-rclone-配置"><a href="#2-添加-rclone-配置" class="headerlink" title="2. 添加 rclone 配置"></a>2. 添加 rclone 配置</h2><p><em>注：由于 OneDrive 的授权 key 可能会很长导致 rclone 远程配置中无法接受 key，目前 rclone 没有解决这个问题，因此可能挂载过程中会出现问题，如果出现了下文描述的问题，请参考第三部分来解决。</em></p><h3 id="2-1-安装-rclone"><a href="#2-1-安装-rclone" class="headerlink" title="2.1 安装 rclone"></a>2.1 安装 rclone</h3><p>由于 vps 中没有桌面环境，无法独立完成配置，所以 vps 和本地电脑都要安装 rclone。</p><p>vps 中执行</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">curl</span> https://rclone.org/install.sh | sudo bash</code></pre></div><p>即可成功安装</p><p>本地电脑请<a href="https://rclone.org/downloads/">点此下载 rclone</a> 并解压</p><h3 id="2-2-在-rclone-中配置-OneDrive"><a href="#2-2-在-rclone-中配置-OneDrive" class="headerlink" title="2.2 在 rclone 中配置 OneDrive"></a>2.2 在 rclone 中配置 OneDrive</h3><p>首先在 vps 中执行</p><div class="code-wrapper"><pre><code class="hljs arduino">rclone config</code></pre></div><p>初始状态下什么配置都没有，点击 n 创建一个新配置</p><p><img src="https://r2.leshans.eu.org/2023/09/a5a77da141d2f7a250b34716d1a19b9b.webp"></p><p>添加配置</p><p>接着会让你填写一个名称，这个随意填，例如 <code>od</code></p><p>然后会要求选择要挂载的网盘，找到 <code>Microsoft OneDrive</code> 并输入其前面的<code>序号31</code></p><p>接下来会要求输入 <code>client_id </code>和 <code>client_secret</code> ，将第一步中获取的值依次输入。</p><p>地区按照你的账号选择，比如我的就是普通的全球账户，就选择 1</p><p><img src="https://r2.leshans.eu.org/2023/09/32537f14f449c2fae797c0e6bacd1f30.webp"></p><p>填写信息</p><p>接下来会让你选择你是否有桌面环境，因为 vps 环境下没有桌面环境，因此选择 N 。</p><p>输入后会看到一段提示，将红框内这段命令复制到本地的电脑执行。</p><p><img src="https://r2.leshans.eu.org/2023/09/6e85e40e589c3b7717edfa4971d77d54.webp"></p><p>填写信息 2</p><p>现在在本地打开命令行，进入到 rclone 所在的文件夹内，粘贴上面的命令并执行</p><p>不出意外的话，会弹出浏览器窗口让你登录并授权，按要求操作即可。</p><p>操作完成后，会看到成功的提示</p><p><img src="https://r2.leshans.eu.org/2023/09/864d67bb29a587fbca27f718ce70bc66.webp"></p><p>成功授权</p><p>此时回到本地的命令行查看，会发现出现了一段授权 code，复制这段 code 并粘贴回 vps。</p><p><em>注：如果成功看到下一步操作，请忽略第三节并继续配置，如果出现以下错误，不要担心，请按照第三节的方法操作。</em></p><p>如果遇到类似下图的错误：</p><div class="code-wrapper"><pre><code class="hljs bash">Couldn<span class="hljs-string">&#x27;t decode response - try again (make sure you are using a matching version of rclone on both sides: invalid character &#x27;</span>e<span class="hljs-string">&#x27; looking for beginning of value</span></code></pre></div><p><img src="https://r2.leshans.eu.org/2023/09/65701738b7890cc457e70adb04ba4577.webp"></p><p>rclone 的 bug</p><p>则按照第三节的处理。</p><p>接下来会选择使用哪种类型的账户，我使用的是 OneDrive，故选择 1</p><p><img src="https://r2.leshans.eu.org/2023/09/ff68ee3a2817cbeb5ea0041cf7feaeb0.webp"></p><p>选择账户类型</p><p>选择 drive</p><p><img src="https://r2.leshans.eu.org/2023/09/a4684065fc4c26453ee9f9aaf8a9abed.webp"></p><p>选择 drive</p><p>结束！请看第四节挂载。</p><h2 id="3-挂载失败的解决方法"><a href="#3-挂载失败的解决方法" class="headerlink" title="3. 挂载失败的解决方法"></a>3. 挂载失败的解决方法</h2><p>其实解决这个问题我们要使用的就是最简单粗暴的方式，没错：在本地配置好，把配置文件复制过去！</p><p>打开本地命令行并进入 rclone 目录下，按照类似于第二节的方式重新配置，只不过这次选择是否有桌面环境时选择 Y ，这样子登录账户授权后就会直接成功，不会出现之前的问题了。</p><p>在本地成功添加配置后，在本地 rclone 目录下和远程 vps 分别执行</p><div class="code-wrapper"><pre><code class="hljs applescript">rclone config <span class="hljs-built_in">file</span></code></pre></div><p>这个获取到的是 rclone 配置文件的目录。现在，直接把本地配置完成的配置文件复制到 vps 上去！</p><p>放心，这个配置文件在 vps 上也是能直接用的，复制完成后，在 vps 上执行</p><div class="code-wrapper"><pre><code class="hljs arduino">rclone config</code></pre></div><p>嗯，能看到你在本地添加的 OneDrive 配置就是没问题了。</p><h2 id="4-挂载到-vps"><a href="#4-挂载到-vps" class="headerlink" title="4. 挂载到 vps"></a>4. 挂载到 vps</h2><p>首先新建一个文件夹用于挂载：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /home/onedrive</code></pre></div><p>开始挂载：</p><div class="code-wrapper"><pre><code class="hljs bash">rclone mount <span class="hljs-built_in">od</span>: /home/onedrive --allow-other --vfs-cache-mode writes --allow-non-empty --no-modtime &amp;</code></pre></div><p>其中 <code>od</code> 是 rclone 配置时输入的<code>配置名称</code>，<code>/home/onedrive</code> 是挂载目录，<code>&amp;</code> 是指后台运行。</p><p>此时可能会报错：</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">Fatal</span> <span class="hljs-literal">error</span>: mount not ready</code></pre></div><p>这是因为缺少依赖，我们选择安装</p><p>centos 系使用：</p><div class="code-wrapper"><pre><code class="hljs bash">yum install -y fuse3</code></pre></div><p>debian 系使用：</p><div class="code-wrapper"><pre><code class="hljs bash">apt install -y fuse3</code></pre></div><p>再次执行挂载命令，如果没有报错，就是挂载成功了。</p><p>检查挂载：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h</code></pre></div><p>应该看到（我这里是用挂载名 song，挂载目录 &#x2F;music 进行的测试截图）：</p><p><img src="https://r2.leshans.eu.org/2023/09/18ec1bf4ba0819c90008c401c482619d.webp"></p><p>挂载成功</p><p>接下来可以进行一些测试，如果能正常读写文件，证明挂载没有问题。</p>]]></content>
    
    
    
    <tags>
      
      <tag>rclone</tag>
      
      <tag>onedrive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>极速上手：精通rclone云盘同步工具</title>
    <link href="/posts/ac3ae326.html"/>
    <url>/posts/ac3ae326.html</url>
    
    <content type="html"><![CDATA[<p>Rclone 是一款的命令行工具，支持在不同对象存储、网盘间同步、上传、下载数据。</p><p>官网网址：<a href="https://rclone.org/">https://rclone.org/</a></p><p>Github 项目：<a href="https://github.com/rclone/rclone">https://github.com/rclone/rclone</a></p><h2 id="安装rclone"><a href="#安装rclone" class="headerlink" title="安装rclone"></a>安装rclone</h2><p><code>安装依赖</code>如果你需要挂载使用</p><div class="code-wrapper"><pre><code class="hljs bash">sudo apt-get updatesudo apt-get install curl unzip</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">apt-get install fuse3</code></pre></div><h3 id="下载源码安装"><a href="#下载源码安装" class="headerlink" title="下载源码安装"></a>下载源码安装</h3><div class="code-wrapper"><pre><code class="hljs bash">wget --no-check-certificate <span class="hljs-string">&#x27;https://downloads.rclone.org/v1.52.3/rclone-v1.52.3-linux-amd64.zip&#x27;</span>unzip rclone-v1.52.3-linux-amd64.zip<span class="hljs-built_in">cp</span> ./rclone-*/rclone /usr/local/bin<span class="hljs-built_in">rm</span> -rf ./rclone-*</code></pre></div><h3 id="官网脚本安装"><a href="#官网脚本安装" class="headerlink" title="官网脚本安装"></a>官网脚本安装</h3><div class="code-wrapper"><pre><code class="hljs bash">curl https://rclone.org/install.sh | bash</code></pre></div><h2 id="配置rclone"><a href="#配置rclone" class="headerlink" title="配置rclone"></a>配置rclone</h2><p>在Linux或者Mac上完成安装之后，rclone会默认从配置文件<code>~/.config/rclone/rclone.conf</code>中获取rclone的配置。我们既可以通过<code>rclone config</code>命令来交互式修改这个配置，也可以直接编辑这个配置文件。</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /root/.config/rclone/</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> /root/.config/rclone/rclone.conf</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">vim /root/.config/rclone/rclone.conf</code></pre></div><p>AWS S3的rclone配置</p><div class="code-wrapper"><pre><code class="hljs bash">[s3-overseas]<span class="hljs-built_in">type</span> = s3provider = AWSenv_auth = <span class="hljs-literal">false</span>access_key_id = &lt;your-aws-access-key-id&gt;secret_access_key = &lt;your-aws-secret-access-key&gt;region = &lt;your-region-id&gt;acl = public-readendpoint = https://s3.&lt;your-region-id&gt;.amazonaws.com</code></pre></div><p>配置参数详解</p><ul><li><code>[s3-overseas]</code>: 定义该S3在本地的一个别名，后续执行命令时方便调用</li><li><code>type</code>: 指定该配置的类型</li><li><code>provider</code>: 存储的提供商，具体可参照<a href="https://rclone.org/#providers">官方文档</a></li><li><code>env_auth</code>: 是否从环境变量中读取</li><li><code>access_key_id</code>: 有权限操作bucket的 AK</li><li><code>secret_access_key</code>: 有权限操作bucket的 SK</li><li><code>region</code>: bucket所处的地区</li><li><code>acl</code>: 上传的文件的权限</li><li><code>endpoint</code>: bucket的加速地址 <a href="https://docs.aws.amazon.com/general/latest/gr/s3.html">点击查看AWS加速节点</a></li></ul><blockquote><p>如果 <code>env_auth</code> 配置为 <code>true</code> , 可以避免在rclone.conf中写上AWS的key和secret，而是直接使用~&#x2F;.aws&#x2F;中的配置,也可以在运行rclone时，通过指定环境变量<code>AWS_PROFILE=&lt;your_profile_name&gt;</code>来使用某一个profile</p></blockquote><h2 id="Ali-OSS的rclone配置"><a href="#Ali-OSS的rclone配置" class="headerlink" title="Ali OSS的rclone配置"></a>Ali OSS的rclone配置</h2><div class="code-wrapper"><pre><code class="hljs bash">[oss-hwpf]<span class="hljs-built_in">type</span> = s3provider = Alibabaaccess_key_id = &lt;your-ali-access-key-id&gt;secret_access_key = &lt;your-ali-secret-access-key&gt;endpoint = oss-cn-hongkong.aliyuncs.comacl = public-read</code></pre></div><p><a href="https://help.aliyun.com/document_detail/31837.html?spm=a2c4g.11186623.2.4.YOAwGz">点击查看阿里云OSS加速节点</a></p><h2 id="cloudflare-r2的rclone配置"><a href="#cloudflare-r2的rclone配置" class="headerlink" title="cloudflare r2的rclone配置"></a>cloudflare r2的rclone配置</h2><div class="code-wrapper"><pre><code class="hljs bash">[r2]<span class="hljs-built_in">type</span> = s3provider = Cloudflareaccess_key_id = xxxxsecret_access_key = xxxxregion = autoendpoint = https://xxxx.r2.cloudflarestorage.com</code></pre></div><h2 id="腾讯云cos的rclone配置"><a href="#腾讯云cos的rclone配置" class="headerlink" title="腾讯云cos的rclone配置"></a>腾讯云cos的rclone配置</h2><div class="code-wrapper"><pre><code class="hljs bash">[cos]<span class="hljs-built_in">type</span> = s3provider = TencentCOSaccess_key_id = xxxxsecret_access_key = xxxxendpoint = cos.ap-guangzhou.myqcloud.comacl = defaultstorage_class = STANDARD</code></pre></div><h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><div class="code-wrapper"><pre><code class="hljs bash">rclone config - 以控制会话的形式添加rclone的配置，配置保存在.rclone.conf文件中。rclone copy - 将文件从源复制到目的地址，跳过已复制完成的。rclone <span class="hljs-built_in">sync</span> - 将源数据同步到目的地址，只更新目的地址的数据。   –dry-run标志来检查要复制、删除的数据rclone move - 将源数据移动到目的地址。rclone delete - 删除指定路径下的文件内容。rclone purge - 清空指定路径下所有文件数据。rclone <span class="hljs-built_in">mkdir</span> - 创建一个新目录。rclone <span class="hljs-built_in">rmdir</span> - 删除空目录。rclone check - 检查源和目的地址数据是否匹配。rclone <span class="hljs-built_in">ls</span> - 列出指定路径下所有的文件以及文件大小和路径。rclone lsd - 列出指定路径下所有的目录/容器/桶。rclone lsl - 列出指定路径下所有文件以及修改时间、文件大小和路径。rclone <span class="hljs-built_in">md5sum</span> - 为指定路径下的所有文件产生一个<span class="hljs-built_in">md5sum</span>文件。rclone <span class="hljs-built_in">sha1sum</span> - 为指定路径下的所有文件产生一个<span class="hljs-built_in">sha1sum</span>文件。rclone size - 获取指定路径下，文件内容的总大小。.rclone version - 查看当前版本。rclone cleanup - 清空remote。rclone dedupe - 交互式查找重复文件，进行删除/重命名操作。rclone mount - 挂载云盘为本地硬盘fusermount -qzu LocalFolder  - 卸载挂载的云盘</code></pre></div><h2 id="rclone常用操作"><a href="#rclone常用操作" class="headerlink" title="rclone常用操作"></a>rclone常用操作</h2><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">### 显示远端bucket下的文件</span>rclone <span class="hljs-built_in">ls</span> s3-overseas:bucket-nameOUT:   106622 header.png<span class="hljs-comment">### 显示远端bucket下的目录</span>rclone lsd s3-overseas:bucket-nameOUT:   0 2020-08-27 15:57:08        -1 new<span class="hljs-comment">### 以json形式列出bucket下的目录和文件</span>rclone lsjson s3-overseas:bucket-nameOUT: [OUT: &#123;<span class="hljs-string">&quot;Path&quot;</span>:<span class="hljs-string">&quot;header.png&quot;</span>,<span class="hljs-string">&quot;Name&quot;</span>:<span class="hljs-string">&quot;header.png&quot;</span>,<span class="hljs-string">&quot;Size&quot;</span>:106622,<span class="hljs-string">&quot;MimeType&quot;</span>:<span class="hljs-string">&quot;image/png&quot;</span>,<span class="hljs-string">&quot;ModTime&quot;</span>:<span class="hljs-string">&quot;2020-08-27T07:32:29.000000000Z&quot;</span>,<span class="hljs-string">&quot;IsDir&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;Tier&quot;</span>:<span class="hljs-string">&quot;STANDARD&quot;</span>&#125;,OUT: &#123;<span class="hljs-string">&quot;Path&quot;</span>:<span class="hljs-string">&quot;new&quot;</span>,<span class="hljs-string">&quot;Name&quot;</span>:<span class="hljs-string">&quot;new&quot;</span>,<span class="hljs-string">&quot;Size&quot;</span>:0,<span class="hljs-string">&quot;MimeType&quot;</span>:<span class="hljs-string">&quot;inode/directory&quot;</span>,<span class="hljs-string">&quot;ModTime&quot;</span>:<span class="hljs-string">&quot;2020-08-27T16:02:42.413393904+08:00&quot;</span>,<span class="hljs-string">&quot;IsDir&quot;</span>:<span class="hljs-literal">true</span>&#125;OUT: ]<span class="hljs-comment">### 以json形式递归的列出bucket-name下目录和文件</span>rclone lsjson s3-overseas:bucket-name -R<span class="hljs-comment">### 查看存储桶中500B以上的文件列表</span>rclone --min-size 500B lsl s3-overseas:bucket-name</code></pre></div><h3 id="sync"><a href="#sync" class="headerlink" title="sync"></a>sync</h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">### 同步本地目录或文件到远端bucket</span>rclone <span class="hljs-built_in">sync</span> &lt;LOCAL_PATH&gt; s3-overseas:bucket-name/target-path/<span class="hljs-comment">### 同步远端bucket目录到本地</span>rclone <span class="hljs-built_in">sync</span> s3-overseas:bucket-name/target-path/ &lt;LOCAL_PATH&gt;<span class="hljs-comment">### 远端同步到远端</span><span class="hljs-comment"># S3直接同步到阿里的OSS</span>rclone <span class="hljs-built_in">sync</span> s3-overseas:bucket-name oss-hwpf:bucket-name<span class="hljs-comment">### 将本地文件同步到远端，并备份被删除或修改的文件到备份存储桶中</span>rclone <span class="hljs-built_in">sync</span> &lt;LOCAL_PATH&gt; s3-overseas:bucket-name --backup-dir s3-overseas:backup-bucket-name/backup-dir</code></pre></div><blockquote><p>sync操作，会删除目标端的目录或文件。执行前可以加 <code>--dry-run</code>参数查看将要删除的文件或目录</p></blockquote><h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">### 拷贝本地文件到远端</span>rclone copy &lt;LOCAL_PATH&gt; s3-overseas:bucket-name/target-path/<span class="hljs-comment">## 拷贝远端对象到本地</span>rclone copy s3-overseas:bucket-name/target-path/ &lt;LOCAL_PATH&gt;rclone copy --max-age 24h --progress --no-traverse &lt;LOCAL_PATH&gt; s3-overseas:bucket-name/target-path/</code></pre></div><p>copy操作，不会删除目标端的任何文件</p><p>–max-age 24h: 过滤出来最近24小时变更过的文件</p><p>–progress: 显示进度 等同于 -P</p><p>–no-traverse: 从源拷贝少量文件到目的中大量目的文件时，速度会更快</p><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">### 创建新的bucket 需要AKSK有权限</span>rclone <span class="hljs-built_in">mkdir</span> s3-overseas:new-bucket-name  <span class="hljs-comment"># 在AWS创建存储桶new-bucket-name</span><span class="hljs-comment">### 创建新目录</span>rclone <span class="hljs-built_in">mkdir</span> s3-overseas:bucket-name/new-dir<span class="hljs-comment">### 不支持直接创建空目录则用下面命令</span>rclone <span class="hljs-built_in">touch</span> s3-overseas:bucket-name/new-dir/emptyfile.txt</code></pre></div><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">### 删除bucket根目录下的delete.file  如果`--include`不加路径，则递归删除所有该名字文件</span>rclone delete s3-overseas:bucket-name --include=/delete.file<span class="hljs-comment">### 删除bucket根目录下的所有文件包括子目录</span>rclone delete s3-overseas:bucket-name --include <span class="hljs-string">&quot;*&quot;</span></code></pre></div><h3 id="check"><a href="#check" class="headerlink" title="check"></a>check</h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">### 对比本地文件和远端文件，默认校验修改时间和大小</span>rclone check &lt;LOCAL_PATH&gt; s3-overseas:bucket-name/target-path/ --one-way<span class="hljs-comment">### 进行数据对比校验</span>rclone check s3-overseas:bucket-name/target-path/  oss-hwpf:bucket-name/target-path/ -P</code></pre></div><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><blockquote><p>gd: 谷歌云盘, r2: cloudflare, cos: 腾讯cos</p></blockquote><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /home/google /home/r2 /home/cos</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">rclone mount gd: /home/google --allow-other --vfs-cache-mode writes --allow-non-empty --no-modtime &amp;rclone mount r2: /home/r2 --allow-other --vfs-cache-mode writes --allow-non-empty --no-modtime &amp;rclone mount cos: /home/cos --allow-other --vfs-cache-mode writes --allow-non-empty --no-modtime &amp;</code></pre></div><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><div class="code-wrapper"><pre><code class="hljs bash">fusermount -qzu /home/google</code></pre></div><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>复制</p><div class="code-wrapper"><pre><code class="hljs bash">rclone copy /up gd:upload --ignore-existing -u -v -P --transfers=10 --ignore-errors --buffer-size=16M --check-first --checkers=10</code></pre></div><p>同步</p><div class="code-wrapper"><pre><code class="hljs bash">rclone <span class="hljs-built_in">sync</span> /up gd:upload --ignore-existing -u -v -P --transfers=10 --ignore-errors --buffer-size=16M --check-first --checkers=10 --drive-acknowledge-abuse</code></pre></div><h3 id="网盘到网盘同步"><a href="#网盘到网盘同步" class="headerlink" title="网盘到网盘同步"></a>网盘到网盘同步</h3><blockquote><p>r2图床同步到谷歌云盘和腾讯cos</p></blockquote><div class="code-wrapper"><pre><code class="hljs bash">rclone <span class="hljs-built_in">sync</span> r2:blog gd:r2/blog --ignore-existing -u -v -P --transfers=10 --ignore-errors --buffer-size=16M --check-first --checkers=10 --drive-acknowledge-abuse</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">rclone <span class="hljs-built_in">sync</span> r2:blog cos:shenma-1253486782/blog --ignore-existing -u -v -P --transfers=15 --ignore-errors --buffer-size=64M --check-first --checkers=10 --drive-acknowledge-abuse</code></pre></div><h3 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h3><div class="code-wrapper"><pre><code class="hljs bash">rclone config - 进入交互式配置选项，进行添加、删除、管理网盘等操作。rclone config paths - 显示配置文件的路径，一般配置文件在 ~/.config/rclone/rclone.conf，更换服务器可直接copy该文件。rclone config show - 显示配置文件信息</code></pre></div><h3 id="可视化上传下载-RcloneBrowser"><a href="#可视化上传下载-RcloneBrowser" class="headerlink" title="可视化上传下载 RcloneBrowser"></a>可视化上传下载 RcloneBrowser</h3><p><a href="https://github.com/kapitainsky/RcloneBrowser/releases">https://github.com/kapitainsky/RcloneBrowser/releases</a></p><p><img src="https://r2.leshans.eu.org/2023/09/52eefd17a8d391dc08897466d62d4350.webp" alt="Pasted image 20230910013441"></p><p>配置 rclone.exe的路径还有 rclone.conf 配置文件的路径。</p><p><img src="https://r2.leshans.eu.org/2023/09/35eea64cc23302c4299153ee8992da7c.webp" alt="Pasted image 20230910013504"></p><p>配置好后就可以看见前面配置的 OneDrive 网盘了 ☁️ </p><p><img src="https://r2.leshans.eu.org/2023/09/a56446192d395aae26e42641ba029cbb.webp" alt="Pasted image 20230910013603"></p><p>双击打开就可以看见里面的内容了，可以去愉快的上传或者下载了</p><p><img src="https://r2.leshans.eu.org/2023/09/e7c54ab0daf3265f8c3a4981e7261dab.webp" alt="Pasted image 20230910013617"></p><p>上传的话，选择要上传的文件或文件夹以及云盘的存放路径，再选择 copy 模式，点击 run 即可。下载与之类似。 </p><p><img src="https://r2.leshans.eu.org/2023/09/bd2ffdf561987e43acb3592242866384.webp" alt="Pasted image 20230910013640"></p><p>在 Jobs当中还可以查看任务的进度、速度等</p><p><img src="https://r2.leshans.eu.org/2023/09/a5c9b642c56bb55fa29b826a66abe593.webp" alt="Pasted image 20230910013654"></p><p>另外还可以设置代理，见下图： </p><p><img src="https://r2.leshans.eu.org/2023/09/afb25f6d96616f4204e5db240cabd443.webp" alt="Pasted image 20230910013704"></p><p>这样挂载谷歌云端硬盘就很方便了。</p><p>完结~~</p>]]></content>
    
    
    
    <tags>
      
      <tag>rclone</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rclone常用命令参数详解</title>
    <link href="/posts/94eba75d.html"/>
    <url>/posts/94eba75d.html</url>
    
    <content type="html"><![CDATA[<h2 id="rclone：常用命令"><a href="#rclone：常用命令" class="headerlink" title="rclone：常用命令"></a>rclone：常用命令</h2><div class="code-wrapper"><pre><code class="hljs bash">rclone config - 进入交互式配置选项，进行添加、删除、管理网盘等操作。rclone config paths - 显示配置文件的路径，一般配置文件在 ~/.config/rclone/rclone.conf，更换服务器可直接copy该文件。rclone config show - 显示配置文件信息</code></pre></div><h2 id="命令语法"><a href="#命令语法" class="headerlink" title="命令语法"></a>命令语法</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 本地到网盘</span>rclone [功能选项] &lt;本地路径&gt; &lt;网盘名称:路径&gt; [参数] [参数] ...<span class="hljs-comment"># 网盘到本地</span>rclone [功能选项] &lt;网盘名称:路径&gt; &lt;本地路径&gt; [参数] [参数] ...<span class="hljs-comment"># 网盘到网盘</span>rclone [功能选项] &lt;网盘名称:路径&gt; &lt;网盘名称:路径&gt; [参数] [参数] ...</code></pre></div><h2 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例:"></a>用法示例:</h2><p>建议添加 <code>--drive-acknowledge-abuse</code> 来处理被Google Drive标识为恶意软件的文件</p><p>复制: <code>rclone copy</code></p><div class="code-wrapper"><pre><code class="hljs bash">rclone copy /up gd:upload --ignore-existing -u -v -P --transfers=10 --ignore-errors --buffer-size=16M --check-first --checkers=10</code></pre></div><p>同步: <code>rclone sync</code> 添加 <code>--drive-acknowledge-abuse</code>参数</p><div class="code-wrapper"><pre><code class="hljs bash">rclone <span class="hljs-built_in">sync</span> /up gd:upload --ignore-existing -u -v -P --transfers=10 --ignore-errors --buffer-size=16M --check-first --checkers=10 --drive-acknowledge-abuse</code></pre></div><blockquote><p>以下是对每个参数的解释：</p></blockquote><ol><li><p><code>rclone copy</code> 为功能选项, 即<code>复制</code></p></li><li><p><code>/up</code>: 本地路径，表示要复制的文件或目录的位置。</p></li><li><p><code>gd:upload</code>: 这是目标路径，<code>gd</code>是网盘名称,<code>upload</code>是网盘路径,表示要将文件或目录复制到的位置。</p></li><li><p><code>--ignore-existing</code>: 这是一个选项，指示rclone在复制文件时忽略已经存在于目标位置的文件，即不覆盖已存在的文件，仅复制源中不存在于目标位置的文件。</p></li><li><p><code>-u</code>（或 <code>--update</code>）: 这是一个选项，指示rclone仅复制源中新于目标的文件或文件夹。如果目标上已有相同文件名但内容不同的文件，它不会被覆盖。</p></li><li><p><code>-v</code>（或 <code>--verbose</code>）: 这是一个选项，用于启用详细的输出，显示更多有关操作进展的信息。</p></li><li><p><code>-P</code>（或 <code>--progress</code>）: 这是一个选项，用于显示传输进度，包括已传输的数据量和传输速度等信息。</p></li><li><p><code>--transfers=10</code>: 这是一个选项，指示rclone一次并发执行最多10个文件传输操作。这可以加快复制速度。</p></li><li><p><code>--ignore-errors</code>: 这是一个选项，指示rclone在遇到错误时继续进行操作而不中断。如果某些文件无法复制，它会继续复制其他文件，而不会停止整个操作。</p></li><li><p><code>--buffer-size=16M</code>: 这是一个选项，用于指定rclone在内存中使用的缓冲区大小，以提高性能。</p></li><li><p><code>--check-first</code>: 这是一个选项，指示rclone在实际开始复制操作之前，首先检查源和目标之间的差异。这可以节省不必要的复制操作。</p></li><li><p><code>--checkers=10</code>: 这是一个选项，用于指定rclone在进行检查（check）操作时并发执行的检查器数量。这可以加快检查操作的速度。</p></li><li><p><code>--drive-acknowledge-abuse</code> 标志来处理恶意文件.</p></li></ol><blockquote><p>综合起来，这个命令的目标是从源路径 <code>/up</code> 复制文件或目录到目标路径 <code>gd:upload</code>，在复制过程中忽略已存在的文件，仅复制新的或不同的文件，同时提供详细的进度信息，最多同时进行10个文件传输，忽略复制中的错误，使用16MB的缓冲区大小，并在复制之前检查源和目标之间的差异。</p></blockquote><h2 id="常用功能选项"><a href="#常用功能选项" class="headerlink" title="常用功能选项"></a>常用功能选项</h2><div class="code-wrapper"><pre><code class="hljs bash">rclone copy - 复制rclone move - 移动，如果要在移动后删除空源目录，请加上 --delete-empty-src-dirs 参数rclone <span class="hljs-built_in">sync</span> - 同步：将源目录同步到目标目录，只更改目标目录。rclone delete - 删除路径下的文件内容。rclone purge - 删除路径及其所有文件内容。rclone <span class="hljs-built_in">mkdir</span> - 创建目录。rclone <span class="hljs-built_in">rmdir</span> - 删除目录。rclone rmdirs - 删除指定灵境下的空目录。如果加上 --leave-root 参数，则不会删除根目录。rclone check - 检查源和目的地址数据是否匹配。rclone <span class="hljs-built_in">ls</span> - 列出指定路径下的所有的文件以及文件大小和路径。rclone lsl - 比上面多一个显示上传时间。rclone lsd 列出指定路径下的目录rclone lsf - 列出指定路径下的目录和文件</code></pre></div><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><div class="code-wrapper"><pre><code class="hljs bash">-n = --dry-run - 测试运行，用来查看 rclone 在实际运行中会进行哪些操作。-P = --progress - 显示实时传输进度。--cache-chunk-size SizeSuffi - 块的大小，默认 5M，理论上是越大上传速度越快，同时占用内存也越多。如果设置得太大，可能会导致进程中断。--cache-chunk-total-size SizeSuffix - 块可以在本地磁盘上占用的总大小，默认 10G。--transfers=N - 并行文件数，默认为 4。在比较小的内存的 VPS 上建议调小这个参数，比如 128M 的小鸡上使用建议设置为 1。--config string - 指定配置文件路径，string 为配置文件路径。比如在使用宝塔面板输入命令操作时可能会遇到找不到配置文件的问题，这时就需要指定配置文件路径。</code></pre></div><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>rclone 有 4 个级别的日志记录，ERROR，NOTICE，INFO 和 DEBUG。</p><p>默认情况下，rclone 将生成 ERROR 和 NOTICE 级别消息。</p><div class="code-wrapper"><pre><code class="hljs bash">-q rclone 将仅生成 ERROR 消息。-v rclone 将生成 ERROR，NOTICE 和 INFO 消息，推荐此项。-vv rclone 将生成 ERROR，NOTICE，INFO 和 DEBUG 消息。--log-level LEVEL 标志控制日志级别。</code></pre></div><p>输出日志到文件</p><p>使用 –log-file&#x3D;FILE 选项，rclone 会将 Error，Info 和 Debug 消息以及标准错误重定向到 FILE，这里的 FILE 是你指定的日志文件路径。</p><p>另一种方法是使用系统的指向命令，比如：</p><div class="code-wrapper"><pre><code class="hljs bash">rclone <span class="hljs-built_in">sync</span> -v Onedrive:/DRIVEX Gdrive:/DRIVEX &gt; <span class="hljs-string">&quot;~/DRIVEX.log&quot;</span> 2&gt;&amp;1</code></pre></div><h2 id="文件过滤"><a href="#文件过滤" class="headerlink" title="文件过滤"></a>文件过滤</h2><div class="code-wrapper"><pre><code class="hljs bash">--exclude 排除文件或目录。比如 --exclude *.bak，排除所有 bak 文件。--include 包含文件或目录。比如 --include *.&#123;png,jpg&#125; ，包含所有 png 和 jpg 文件，排除其他文件。--delete-excluded 删除排除的文件。需配合过滤参数使用，否则无效。</code></pre></div><h2 id="目录过滤"><a href="#目录过滤" class="headerlink" title="目录过滤"></a>目录过滤</h2><div class="code-wrapper"><pre><code class="hljs bash">--exclude .git/ 排除所有目录下的 .git 目录。--exclude /.git/ 只排除根目录下的 .git 目录。</code></pre></div><p>以&#x2F;开头只会匹配根目录，而如果没有，则是匹配所目录。同样适用于文件。</p><p>文件大小过滤</p><p>默认大小单位为 kBytes ，但可以使用 k ，M 或 G 后缀。</p><div class="code-wrapper"><pre><code class="hljs bash">--min-size 过滤小于指定大小的文件。比如 --min-size 50 表示不会传输小于 50k 的文件。--max-size 过滤大于指定大小的文件。比如 --max-size 1G 表示不会传输大于 1G 的文件。</code></pre></div><p>文件过滤规则</p><div class="code-wrapper"><pre><code class="hljs bash">--filter-from &lt;规则文件&gt; 从文件添加包含 / 排除规则。比如 --filter-from filter-file.txt。</code></pre></div><p>过滤规则文件示例：</p><div class="code-wrapper"><pre><code class="hljs bash">- secret*.jpg+ *.jpg+ *.png+ file2.avi- /dir/Trash/**+ /dir/**- *</code></pre></div><ul><li>是包含，- 是排除</li></ul><p>这里只举例比较常用和简单的一些过滤用法，更复杂和高端的用法可以查看官方文档。</p><h2 id="GoogleDrive网盘挂载到云主机-VPS上"><a href="#GoogleDrive网盘挂载到云主机-VPS上" class="headerlink" title="GoogleDrive网盘挂载到云主机&#x2F;VPS上"></a>GoogleDrive网盘挂载到云主机&#x2F;VPS上</h2><p>新建一个你要<code>挂载</code>的目录，例如挂载到 <code>/home/google</code></p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /home/google</code></pre></div><p>再执行挂载命令：</p><div class="code-wrapper"><pre><code class="hljs bash">rclone mount gd: /home/google --allow-other --vfs-cache-mode writes --allow-non-empty --no-modtime &amp;</code></pre></div><p><code>gd</code> 为 rclone 的<code>配置名称</code>，比如你在创建配置 rclone 的时候 <code>Name</code> 填的 gd，<code>/home/google</code> 为本地路径；</p><p>这里还可以自定义设置网盘里的文件夹路径，例如：</p><div class="code-wrapper"><pre><code class="hljs bash">rclone mount gd:backup /home/google --allow-other --vfs-cache-mode writes --allow-non-empty --no-modtime &amp;</code></pre></div><p><code>gd</code> 为 rclone 的配置名称：<code>backup</code> 为网盘里的目录名</p><p>重连后查看是否挂载成功：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h</code></pre></div><p>有看到gd硬盘、使用量和本地主机路径即成功挂载</p><div class="code-wrapper"><pre><code class="hljs bash">gd: 15G  1.1M   15G   1% /home/gdrive</code></pre></div><p>卸载 Google Drive 磁盘</p><div class="code-wrapper"><pre><code class="hljs bash">fusermount -qzu /home/google</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>rclone</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用免费GitHub私人仓库：定时备份网站数据</title>
    <link href="/posts/e0e5357.html"/>
    <url>/posts/e0e5357.html</url>
    
    <content type="html"><![CDATA[<p>随着<code>GitHub</code>被微软收购后，私人仓库已经变得免费，为我们提供了一个无限的创造<code>空间</code>。现在，我们可以尽情发挥其潜力，将其用于定时备份网站和服务器重要数据，确保数据安全与可靠性。</p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p>首先你肯定需要一个<a href="https://so.csdn.net/so/search?q=Github&spm=1001.2101.3001.7020">Github</a>账号，没有的可以去注册一个，地址：<a href="https://github.com/"></a><a href="https://github.com/">https://github.com</a>。有了账号就继续看。</p><h3 id="1、配置Git-SSH密钥"><a href="#1、配置Git-SSH密钥" class="headerlink" title="1、配置Git SSH密钥"></a>1、配置Git SSH密钥</h3><blockquote><p>由于本地Git仓库和GitHub仓库之间的传输是通过<code>SSH</code>加密的，所以必须要让github仓库认证你<code>SSH key</code>，在操作之前，需要先在服务器上生成<code>SSH key</code>。</p></blockquote><p>设置github 用户名和邮箱</p><div class="code-wrapper"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;name&quot;</span> git config --global user.email <span class="hljs-string">&quot;xxxx@qq.com&quot;</span></code></pre></div><p>我们先去根目录下使用命令：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~ssh-keygen -t rsa</code></pre></div><p>这里会要你命名<code>密钥名称</code>(建议使用<code>默认</code>名称)，然后连续按几次<code>Enter</code>，这时候会在<code>/root/.ssh</code>文件夹生成2个ssh密钥，然后我们查看公钥<code>id_rsa.pub</code>。</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub</code></pre></div><ul><li>查看后，再复制下公钥</li><li>打开Github官网，进入<a href="https://github.com/settings/ssh/new">https://github.com/settings/ssh/new</a>，</li><li><code>Title</code>随意，然后<code>Key</code>填入刚刚复制的公钥，最后点击<code>Add SSH Key</code>添加即可。</li></ul><p><img src="https://r2.leshans.eu.org/2023/09/1e57b6308902d7ec62471db973c4265b.webp" alt="Pasted image 20230905225818"></p><h3 id="2、建立私人仓库"><a href="#2、建立私人仓库" class="headerlink" title="2、建立私人仓库"></a>2、建立私人仓库</h3><p>我们需要先访问<a href="https://github.com/new">https://github.com/new</a>，新建一个仓库用来存放备份文件，名称自己随意，记得下面一定要勾选<code>Private</code>，也就是<code>私人仓库</code>。</p><h3 id="3、配置本地仓库"><a href="#3、配置本地仓库" class="headerlink" title="3、配置本地仓库"></a>3、配置本地仓库</h3><p>进入需要备份的文件夹，比如<code>/www/wwwroot/lala</code>，也就是把该文件夹设定为<code>本地仓库</code>，使用命令：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#进入需要备份的文件夹</span><span class="hljs-built_in">cd</span> /www/wwwroot/lala<span class="hljs-comment">#初始化你的github仓库</span>git init<span class="hljs-comment">#关联到远程github仓库</span>git remote add origin git@github.com:Blichus/back_website.git</code></pre></div><p>如果已经备份过了,<code>拉取github仓库代码到服务器</code> (关联远程github仓库后)</p><div class="code-wrapper"><pre><code class="hljs bash">git pull origin master</code></pre></div><h3 id="4、初次备份"><a href="#4、初次备份" class="headerlink" title="4、初次备份"></a>4、初次备份</h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#进入备份的文件夹</span><span class="hljs-built_in">cd</span> /www/wwwroot/lala<span class="hljs-comment">#把目录下所有文件更改状况提交到暂存区，包括增，删，改。</span>git add -A<span class="hljs-comment">#提交更改的说明，说明随意了，这里为backsite</span>git commit -m <span class="hljs-string">&quot;backsite&quot;</span><span class="hljs-comment">#开始推送到Github</span>git push -u origin master</code></pre></div><p>推送的时候可能会警告提示:</p><p><code>The authenticity of host &#39;github.com&#39; can&#39;t be established.</code></p><p><code>Are you sure you want to continue connecting (yes/no/[fingerprint])? </code></p><p>直进<code>yes</code>即可。  然后可以看到仓库的备份文件了。</p><h3 id="5、设置定时备份"><a href="#5、设置定时备份" class="headerlink" title="5、设置定时备份"></a>5、设置定时备份</h3><p>在根目录先新建一个<code>bash</code>脚本：</p><div class="code-wrapper"><pre><code class="hljs bash">nano ~/gitback.sh</code></pre></div><p>代码如下：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-comment">#进入到网站根目录，记得修改为自己的站点</span><span class="hljs-built_in">cd</span> /www/wwwroot/lala<span class="hljs-comment">#将数据库导入到该目录</span>mysqldump -uaaa -pbbb ccc &gt; dddd.sql<span class="hljs-comment"># 把目录下所有文件更改状况提交到暂存区，包括增，删，改。</span>git add -A<span class="hljs-comment"># 提交更改的说明，说明随意了，这里为backsite</span>git commit -m <span class="hljs-string">&quot;backsite&quot;</span><span class="hljs-comment"># 开始推送到Github</span>git push -u origin master</code></pre></div><ul><li><code>-uaaa</code> 注意:前面带 <code>-u</code> 后面的<code>aaa</code>为数据库用户名,通常是root</li><li><code>-pbbb</code> 后面的<code>bbb</code>为数据库密码</li><li><code>ccc</code> 为数据库名称</li><li><code>dddd</code> 为备份的数据库文件</li></ul><p>然后编辑好了后，使用<code>ctrl+x</code>，<code>y</code>保存,回车退出。</p><p>给与权限:  <code>chmod 777 gitback.sh</code></p><p>再测试下脚本，使用命令</p><div class="code-wrapper"><pre><code class="hljs bash">bash ~/gitback.sh</code></pre></div><p>脚本没问题的话，再设置为每天<code>05:15</code>执行一次：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#并将运行日志输出到根目录的siteback.log文件</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;15 05 * * * bash ~/gitback.sh &gt; ~/siteback.log 2&gt;&amp;1 &amp;&quot;</span> &gt; bt.croncrontab bt.cron<span class="hljs-built_in">rm</span> -rf bt.cron</code></pre></div><p>如果使用的是宝塔面板,直接<code>计划任务</code>里添加<code>shell脚本</code></p><div class="code-wrapper"><pre><code class="hljs bash">bash ~/gitback.sh</code></pre></div><p>最后使用<code>crontab -l</code>命令查看添加成功没。成功的话，就基本上算完成了。</p><p>如果你将本地文件夹推送到Github失败的话，常见原因有2种，具体如下。</p><h3 id="6、其他问题"><a href="#6、其他问题" class="headerlink" title="6、其他问题"></a>6、其他问题</h3><h4 id="1、邮件问题"><a href="#1、邮件问题" class="headerlink" title="1、邮件问题"></a>1、邮件问题</h4><p>报错提示：<code>Your push would publish a private email address.</code></p><p>这里可能是你将你的邮件地址私密了，解决方法如下：</p><p><code>方法一</code></p><p>如果你想一直保持私密，可以选择方法二</p><p>访问<a href="https://github.com/settings/emails">https://github.com/settings/emails</a>，将Keep my email address private的勾去掉。</p><p><code>方法二</code></p><p>1、访问<a href="https://github.com/settings/emails">https://github.com/settings/emails</a>，将Block command line pushes that expose my email的勾去掉。</p><p>2、设置你的<code>github邮箱</code>，修改成自己的再运行命令：</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> config --global user.email <span class="hljs-string">&quot;admin<span class="hljs-variable">@moerats</span>.com&quot;</span></code></pre></div><h4 id="2、密钥问题"><a href="#2、密钥问题" class="headerlink" title="2、密钥问题"></a>2、密钥问题</h4><p>报错提示：<code>Permission denied (publickey).</code></p><p>大概的原因就是，你设置密钥的时候改成了其它名称，而<code>ssh</code>默认只读取<code>id_rsa</code>，所以会显示没权限。解决方法如下：</p><p><code>方法一:</code></p><p>进入根目录的<code>.ssh文件夹</code>，将你的github密钥文件，重新更名为<code>id_rsa</code>。</p><p><code>方法二:</code></p><p>将github密钥添加到<code>ssh agent</code>，比如密匙名称为github，使用命令：</p><div class="code-wrapper"><pre><code class="hljs bash">ssh-agent bashssh-add ~/.ssh/github</code></pre></div><h4 id="3、mysql-command-not-found"><a href="#3、mysql-command-not-found" class="headerlink" title="3、mysql command not found"></a>3、mysql command not found</h4><p><code>crontab</code>定时任务中提示<code>command not found</code>解决方案</p><p>写了个脚本定时从MySQL中提取数据，但是crontab发邮件提示<code>mysql command not found</code></p><p>很奇怪，因为直接执行此脚本不会报错，正常运行，但加入到crontab中就会报错，</p><p>经查，MySQL不在<code>crontab</code>执行的环境变量中</p><p>解决方案：</p><p>  找到MySQL的安装路径： which mysql</p><div class="code-wrapper"><pre><code class="hljs"> 假设找到的是:/home/user1/mysql/bin/mysql</code></pre></div><p>  建立软连接  cd &#x2F;usr&#x2F;bin &amp;&amp; ln -fs &#x2F;home&#x2F;user1&#x2F;mysql&#x2F;bin&#x2F;mysql mysql</p><p>完结撒花~~~</p>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>备份</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 squoosh-cli 批量压缩图片</title>
    <link href="/posts/bc6a1a79.html"/>
    <url>/posts/bc6a1a79.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>去年之前，我写博客时并未意识到<code>需要对图片进行压缩</code>。有时，文章加载的图片太多，其中一些图片过大，导致浏览体验不佳。但后来，我开始使用<code>Squoosh</code>项目，每次写文章都会压缩配图。主要是因为<code>Squoosh</code>太出色了，而且还是免费软件。</p><p>去年，我制作了一个Squoosh的<code>Docker</code>镜像，可以在本地轻松启动一个图片压缩服务。但当时，我每次都是逐张压缩图片，因为我要为每张图片调整质量，以确保它们在本地存储中具有适当的大小。我自己搭建的图床运行在本地，使用本地SSD进行存储，所以之前的做法也很正常。然而，这次需要批量压缩大量图片让我意识到了批量处理的重要性。尽管可能无法完美平衡图片压缩后的<code>质量和存储大小</code>，但在博客写作（关注图片质量）和本地存储之间做出一些妥协后，带来了极大的轻松和满足感，这绝对是值得的。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>下面我讲讲如何使用 squoosh-cli 进行图片的批量压缩，之所以推荐在自建的 <code>docker</code> 容器中运行 <code>squoosh-cli</code> 命令，是因为容器里是 Linux 环境，命令行友好，不像 <code>cmd</code> 和 <code>powershell</code> 可能需要各种转义，引号，还有<code>通配符</code>问题。</p><h3 id="新建一个专用压缩文件夹"><a href="#新建一个专用压缩文件夹" class="headerlink" title="新建一个专用压缩文件夹"></a>新建一个专用压缩文件夹</h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /home/dk/squooshfiles<span class="hljs-built_in">chmod</span> -R 0755 /home/dk/squooshfiles</code></pre></div><h3 id="下面启动-squoosh-容器，命令如下"><a href="#下面启动-squoosh-容器，命令如下" class="headerlink" title="下面启动 squoosh 容器，命令如下"></a>下面启动 squoosh 容器，命令如下</h3><div class="code-wrapper"><pre><code class="hljs bash">docker run -d --name squoosh \    --restart unless-stopped \    -p 7701:8080 \    -v /home/dk/squooshfiles:/app/squooshfiles \    dko0/squoosh:1.12.0</code></pre></div><p>解析：</p><ul><li><code>/home/dk/squooshfiles</code>本地批量压缩图片文件夹</li><li>这将在容器中自动创建目录 <code>/app/squooshfiles</code></li><li>本地对 <code>/home/dk/squooshfiles</code> 的修改和容器中对 <code>/app/squooshfiles</code> 的修改将完全同步</li></ul><blockquote><p>注意: 下面的步骤都是在容器中进行操作</p></blockquote><h3 id="然后进入容器"><a href="#然后进入容器" class="headerlink" title="然后进入容器"></a>然后进入容器</h3><div class="code-wrapper"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it squoosh ash</code></pre></div><h3 id="安装-squoosh-cli-npm-包"><a href="#安装-squoosh-cli-npm-包" class="headerlink" title="安装 squoosh-cli npm 包"></a>安装 squoosh-cli npm 包</h3><div class="code-wrapper"><pre><code class="hljs bash">npm i -g @squoosh/cli</code></pre></div><p>安装完成之后执行 <code>squoosh-cli --help</code> 应能获取命令行帮助。</p><p><img src="https://r2.leshans.eu.org/2023/09/301c689fdd2bee47108cf1ba7329dcc8.webp" alt="Pasted image 20230905125527"></p><h3 id="进入压缩目录-然后创建一个文件夹-例如-0805"><a href="#进入压缩目录-然后创建一个文件夹-例如-0805" class="headerlink" title="进入压缩目录,然后创建一个文件夹,例如 0805"></a>进入压缩目录,然后创建一个文件夹,例如 <code>0805</code></h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> .. &amp;&amp; <span class="hljs-built_in">cd</span> squooshfiles</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> 0805 &amp;&amp; <span class="hljs-built_in">cd</span> 0805</code></pre></div><p>把要批量压缩的照片拷贝到0805目录</p><h3 id="最后使用-squoosh-cli-命令执行批量压缩"><a href="#最后使用-squoosh-cli-命令执行批量压缩" class="headerlink" title="最后使用 squoosh-cli 命令执行批量压缩"></a>最后使用 <code>squoosh-cli</code> 命令执行批量压缩</h3><div class="code-wrapper"><pre><code class="hljs bash">squoosh-cli --mozjpeg <span class="hljs-string">&#x27;&#123;&quot;quality&quot;:40,&quot;baseline&quot;:false,&quot;arithmetic&quot;:false,&quot;progressive&quot;:true,&quot;optimize_coding&quot;:true,&quot;smoothing&quot;:0,&quot;color_space&quot;:3,&quot;quant_table&quot;:3,&quot;trellis_multipass&quot;:false,&quot;trellis_opt_zero&quot;:false,&quot;trellis_opt_table&quot;:false,&quot;trellis_loops&quot;:1,&quot;auto_subsample&quot;:true,&quot;chroma_subsample&quot;:2,&quot;separate_chroma_quality&quot;:false,&quot;chroma_quality&quot;:75&#125;&#x27;</span> \-d output1 \-s small \*.jpg</code></pre></div><p>解释</p><ul><li><code>mozjpeg</code> 是最常用的压缩算法了，综合来说最推荐。</li><li><code>quality</code> 就是压缩质量了，在网页端可以直接预览压缩后的效果</li><li><code>-d</code> 设置输出目录</li><li><code>-s</code> 设置一个输出的文件名后缀，默认是空字符串</li><li> <code>*.jpg</code> 只压缩当前目录下的所有 jpg 扩展名图片</li></ul><p>批量压缩成功。</p><p><img src="https://r2.leshans.eu.org/2023/09/3b00962b29df7e0a169e44aed3485d2b.webp" alt="Pasted image 20230905130018"></p><p>最后感谢 squoosh 项目，写博客压缩图片利器，完全免费开源，非常推荐各位博主使用。</p><ul><li>squoosh cli npm package: <a href="https://www.npmjs.com/package/@squoosh/cli">https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;@squoosh&#x2F;cli</a></li><li>squoosh cli: <a href="https://github.com/GoogleChromeLabs/squoosh/tree/dev/cli">https://github.com/GoogleChromeLabs/squoosh/tree/dev/cli</a></li></ul><h3 id="一个重要的插曲，解决报错"><a href="#一个重要的插曲，解决报错" class="headerlink" title="一个重要的插曲，解决报错"></a>一个重要的插曲，解决报错</h3><p>TypeError: Cannot read properties of undefined (reading ‘writeText’)</p><p>这是 Chrome 限制了非安全网站的 API 使用，在非安全网站上 block 了 <code>navigator.clipboard</code> 的 api 使用权限，所以无法拷贝 npx 命令出来。下面解决这个问题。</p><p><strong>open chrome，type <code>chrome://flags/</code> in address bar, then find item <code>Insecure origins treated as secure</code>, type <code>http://10.10.10.5:7701</code> then enable it and relaunch your chrome.</strong></p><p>Chrome 在此处认为的安全的网站</p><ul><li>必须 https</li><li>或 localhost</li><li>或 127.0.0.1</li></ul><p>所以我们有必要加个白名单，这样好操作。</p><p><img src="https://r2.leshans.eu.org/2023/09/b07bf1566bf9574ff227290d1802146e.webp" alt="insecure origins.jpg"></p><blockquote><p><code>http://10.10.10.5:7701</code> 是我 squoosh 的运行环境地址。如果有多个地址需要设“白名单”，使用英文逗号隔开它们即可。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>squoosh</tag>
      
      <tag>压缩</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Clash：科学上网的究极解决方案</title>
    <link href="/posts/fbc4592f.html"/>
    <url>/posts/fbc4592f.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>早期，我一直对<code>Clash</code>的工作原理一知半解，只知道它是一种探索互联网世界的神奇工具。</p><p>每次需要<code>科学上网</code>时，只需点击一下“系统代理”按钮，瞬间解决了各种无法访问网站的问题。</p><p>久而久之，不免觉得这一过程有些繁琐：<code>打开网站 —— 拒绝访问 —— 启动 Clash—— 开启系统代理 —— 完成</code>。我曾经尝试简化这个步骤，最初的尝试是保持规则代理一直开启，通过配置文件来管理流量的转发规则。</p><p>但不久后，我发现有些网站的<code>规则</code>并不适用，还是需要使用全局代理，这种方法有一定的限制，所以我放弃了这个想法。接着，我尝试设置全局快捷键，我选择了F2键，虽然效果还算可以，但每次都需要手动按下，稍显麻烦。正如大家都知道的，懒惰是发明创造的源泉，于是我孵化出了以下的<code>终极解决方案</code>。本文将完全解决以下令人烦恼的问题：</p><ol><li>访问网页需要手动开启 Clash</li><li>终端不走 Clash 流量</li><li>Git 也蹭不到 Clash 流量</li></ol><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先要准备 Clash 和节点，这是一个比较敏感的话题，所以本文不提供任何渠道。</p><p>其次要知道 Clash 的端口号，默认是 <code>7890</code>，如果你先前没有进行更改的话。</p><p>最后需要 <code>Chrome</code> 或 <code>Edge</code> 浏览器，同时能够访问<code>拓展商店</code>，找到并下载 <a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?hl=zh-CN">SwitchyOmega</a>（需要科学上网）</p><h2 id="配置-SwitchyOmega"><a href="#配置-SwitchyOmega" class="headerlink" title="配置 SwitchyOmega"></a>配置 SwitchyOmega</h2><p>Clash 用户请按照以下进行配置。</p><p>首先配置代理服务器，选择本机，也就是 <code>127.0.0.1</code> ， 端口选择 <code>7890</code>，协议选择 <code>socks5</code></p><p>完事以后先点一下左边 <code>ACTIONS</code> 下面的 <code>应用选项</code> 来保存一下</p><p><img src="https://r2.leshans.eu.org/2023/09/2a5de368ac799c8d1a4be79dcdca88ce.webp" alt="image-20230904214009659"></p><p>接下来在情景模式的<code> auto switch</code> 中写入网上人家配置好的规则</p><p>这里请<code>开启 Clash</code> 系统代理！要不然访问不了 GitHub ！</p><p>规则列表格式选择 <code>AutoProxy</code>，规则列表网址填写</p><div class="code-wrapper"><pre><code class="hljs text">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</code></pre></div><p>然后点击立即更新情景模式，规则列表正文自动刷新</p><p><img src="https://r2.leshans.eu.org/2023/09/12c249bdbab8cd7856ed1d37f286f5d9.webp" alt="image-20230904214345242"></p><p>接下来的一步很关键：这里选择 <code>Proxy</code>，要不然开了跟没开一样</p><p><img src="https://r2.leshans.eu.org/2023/09/52e26255be41941888f642f3f225a8ed.webp" alt="image-20230904214648894"></p><p>同时，在浏览器插件中选择 <code>auto switch</code> 选项，这样就可以根据我们访问的网站自动切换代理，例如谷歌，YouTube 等</p><blockquote><p>Clash 不需要开启系统代理了，只要在后台挂着就行，记得<code>设置 Clash 为开机启动</code></p></blockquote><p><img src="https://r2.leshans.eu.org/2023/09/865124ed97a641e588533a54ed4ba389.webp" alt="image-20230904214758290"></p><p>当然，别人写的规则肯定不可能百分百全覆盖，按照自己的需要把常用的网站写进规则里面就可以了。</p><p>这里要提醒的是，有些国外网站，例如 <code>YouTube.com</code>，并不是简单的把他添加进规则里面就行，因为它本身还要引用例如 <code>Googlevideo.com</code> 这一类的 cdn，还要把 cdn 也添加进规则里面。这一步可以通过以下步骤来一键添加规则：</p><p>找到所有未加载的资源</p><p><img src="https://r2.leshans.eu.org/2023/09/49cedeacafd049296a513fd75cbf090b.webp" alt="image-20230904215451622"></p><p>一键添加规则</p><p><img src="https://r2.leshans.eu.org/2023/09/504e4ac102093bd3083e7fac87927214.webp" alt="image-20230904215518075"></p><h2 id="设置-Git-代理"><a href="#设置-Git-代理" class="headerlink" title="设置 Git 代理"></a>设置 Git 代理</h2><p>设置代理</p><div class="code-wrapper"><pre><code class="hljs bash">git config --global http.proxy 127.0.0.1:7890 &amp;&amp; git config --global https.proxy 127.0.0.1:7890</code></pre></div><p>取消代理</p><div class="code-wrapper"><pre><code class="hljs bash">git config --global --<span class="hljs-built_in">unset</span> http.proxy &amp;&amp; git config --global --<span class="hljs-built_in">unset</span> https.proxy</code></pre></div><p>查看代理</p><div class="code-wrapper"><pre><code class="hljs bash">git config --global --get http.proxy &amp;&amp; git config --global --get ht</code></pre></div><blockquote><p>git clone 时要使用 https 协议，因为设置的是 HTTPS 代理，所以使用 SSH 克隆还是很慢,<br>解决办法: 请看本站 # <code>GitHub加速终极教程</code></p></blockquote><h2 id="设置终端代理"><a href="#设置终端代理" class="headerlink" title="设置终端代理"></a>设置终端代理</h2><p>Windows 用户可以跳过这里了，这边主要是针对 Linux 或 macOS 的终端进行设置</p><p>我自己用的是 macOS，经常使用 homebrew 下载软件时要等半天，然后对我丢出一个 time out，此情景是何等的令人恼火。但是如果一昧的设置永久系统代理，那么下载某些国内软件时反而会变成 “减速器”，而且必然会浪费很多流量（流量用不完的随意）。所以这里使用一次性的方法设置代理，即代理只在当前终端窗口有效，如果关掉再开就失效了。</p><p>编辑 <code>zsh</code> 配置文件</p><div class="code-wrapper"><pre><code class="hljs bash">vim ~/.zshrc</code></pre></div><p>滑到最底下，按自己的需要写入以下内容：</p><p>设置一次性代理</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> proxy=<span class="hljs-string">&quot;export http_proxy=http://127.0.0.1:7890;export https_proxy=http://127.0.0.1:7890;&quot;</span></code></pre></div><p>设置永久代理：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> http_proxy=http://127.0.0.1:7890<span class="hljs-built_in">export</span> https_proxy=http://127.0.0.1:7890</code></pre></div><p>保存并退出，使用 <code>source ~/.zshrc</code> 刷新配置文件</p><p>使用方法：如果设置的是一次性代理，那么在需要使用代理的指令前加上 <code>proxy</code></p><p>例如使用 homebrew 下载 qq 音乐：</p><div class="code-wrapper"><pre><code class="hljs bash">proxy brew install qqmusic</code></pre></div><p>或者单独使用 <code>proxy</code> 一行命令开启代理，如果想关闭代理直接把当前终端窗口关掉就行，因为是一次性的</p><p>当然，如果是永久代理就需要手动注释掉添加的两行代码才能关闭代理 🤡</p>]]></content>
    
    
    
    <tags>
      
      <tag>clash</tag>
      
      <tag>科学上网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub加速终极教程</title>
    <link href="/posts/5001e7bf.html"/>
    <url>/posts/5001e7bf.html</url>
    
    <content type="html"><![CDATA[<p>本文意图解决使用 GitHub 访问(https) 或者 git clone（https or ssh）慢的问题。在此分享我的方法，我所了解的 GitHub 加速最佳方案。</p><blockquote><p>前提是，你的木弟子应该还行，木弟子越好，GitHub 体验越好</p></blockquote><p>很多文章没有讲全面，只讲了 <code>http proxy</code>，而没有讲 <code>ssh proxy</code>。事实上大部分程序员使用 GitHub 都会使用 SSH keys（普通用户可能就不会了），在本机生成 <code>rsa</code> 公私钥(其他的类型还有 dsa | ecdsa | ecdsa-sk | ed25519 | ed25519-sk)，然后把公钥内容拷贝、设置进 GitHub。</p><p>所以程序员 clone 一个仓库一般是 ssh clone 而不是 https clone</p><p>1</p><p><code>git clone git@github.com:xxx/yyy.git</code></p><p>如果你不配置 ssh 代理或者没有透明代理之类的网络环境（其实还有一些代理工具，不过更加小众），直接硬拖到本地大概率是很慢的。如果使用 http 代理，如果木弟子质量好，其实也还行</p><p>1</p><p><code>git clone https://github.com/xxx/yyy.git</code></p><p>但这样不如 ssh clone 稳定。下面我们来设置 <code>http proxy</code> 和 <code>ssh proxy</code>。</p><h2 id="设置-Http-Proxy"><a href="#设置-Http-Proxy" class="headerlink" title="设置 Http Proxy"></a>设置 Http Proxy</h2><div class="code-wrapper"><pre><code class="hljs bash">git config --global http.proxy socks5://127.0.0.1:7890 git config --global https.proxy socks5://127.0.0.1:7890</code></pre></div><p>好了，说回来。但这样配置的话会使本机所有的 git 服务都走了代理，假如你在良心云上（国内主机）部署了自己的 gitea，服务地址 <code>https://gitea.example.com</code>，那么可以只配置 GitHub 的 http proxy，即</p><div class="code-wrapper"><pre><code class="hljs bash">git config --global http.https://github.com.proxy socks5://127.0.0.1:7890</code></pre></div><p>这样做实际上是修改了 <code>~/.gitconfig</code> 文件，添加了如下内容</p><div class="code-wrapper"><pre><code class="hljs csharp">[<span class="hljs-meta">http <span class="hljs-string">&quot;https://github.com&quot;</span></span>]        proxy = socks5:<span class="hljs-comment">//127.0.0.1:7890</span></code></pre></div><h2 id="设置-SSH-Proxy-推荐"><a href="#设置-SSH-Proxy-推荐" class="headerlink" title="设置 SSH Proxy (推荐)"></a>设置 SSH Proxy (推荐)</h2><blockquote><p>设置ssh代理,可加速 git clone SSH协议下载</p></blockquote><h3 id="Linux-macOS"><a href="#Linux-macOS" class="headerlink" title="Linux &amp; macOS"></a>Linux &amp; macOS</h3><p>配置文件在用户家目录下的 .ssh&#x2F;config 其中 <code>nc</code> 程序位于 <code>/usr/bin/nc</code></p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/configHost github.com Hostname ssh.github.com IdentityFile /xxx/.ssh/github_id_rsa User git Port 443 ProxyCommand nc -v -x 127.0.0.1:7890 %h %p</code></pre></div><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>Win 下与之对应的 netcat 程序是 <code>connect.exe</code>，程序位于 Git 安装路径 <code>C:\Program Files\Git\mingw64\bin</code>，win 下推荐使用 <code>Git Bash</code>，路径也是 Linux style</p><p>因为 connect 程序内置在 Git 中，只要是正常安装 Git 的电脑环境都有这个程序，在 Git Bash 终端输入 <code>connect</code> 即可知晓程序路径在 <code>C:\Program Files\Git\mingw64\bin\connect.exe</code></p><p>添加<code>config</code>文件</p><div class="code-wrapper"><pre><code class="hljs shell">nano ~/.ssh/config</code></pre></div><p>配置:</p><div class="code-wrapper"><pre><code class="hljs bash">Host github.com    Hostname ssh.github.com    IdentityFile ~/.ssh/id_rsa    User git    Port 443    ProxyCommand <span class="hljs-string">&quot;C:\Program Files\Git\mingw64\bin\connect.exe&quot;</span> -S 127.0.0.1:7890 %h %p</code></pre></div><p>按 <code>Ctrl</code> + <code>O</code> 保存文件，然后按 <code>Ctrl</code> + <code>X</code> 退出。</p><p>现在，你的 Git 配置已经正确添加到 <code>~/.ssh/config</code> 文件中，可以在 Bash 中使用 Git 时生效了。</p><h2 id="一键设置SSH-Proxy-windows"><a href="#一键设置SSH-Proxy-windows" class="headerlink" title="一键设置SSH Proxy  (windows)"></a>一键设置SSH Proxy  (windows)</h2><p>要使用 Bash 命令自动运行并保存上述 SSH 配置到 <code>~/.ssh/config</code> 文件，你可以使用以下命令：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOL &gt;&gt; ~/.ssh/config</span><span class="hljs-string">Host github.com</span><span class="hljs-string">    Hostname ssh.github.com</span><span class="hljs-string">    IdentityFile ~/.ssh/id_rsa</span><span class="hljs-string">    User git</span><span class="hljs-string">    Port 443</span><span class="hljs-string">    ProxyCommand &quot;C:\Program Files\Git\mingw64\bin\connect.exe&quot; -S 127.0.0.1:7890 %h %p</span><span class="hljs-string">EOL</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>腾讯Gtimg图床-苹果cms教程</title>
    <link href="/posts/5dac6cfe.html"/>
    <url>/posts/5dac6cfe.html</url>
    
    <content type="html"><![CDATA[<p><a href="https://gouya.lanzouf.com/iGgeI07zodmh">安装插件需要先安装盒子，安装插件，更新插件点击这里，新萌必看，不看必出错</a></p><blockquote><p>苹果cms盒子云端安装对接后支持在线一键安装苹果cms模板 目前云端安装仅支持苹果cmsv10免费模板，因云端数据存储无法管理的问题苹果cms8 收费模板以及插件不支持云端安装。</p></blockquote><p>为什么要<code>安装盒子</code>？</p><p>盒子是一个<code>管理插件</code>的工具，它支持安装，<code>数据库自动创建</code>，卸载功能，可大大降低插件开发时间同时可以有序管理插件，<code>一键干净卸载插件</code>，不会造成苹果cms混乱影响苹果cms升级等问题，让你的苹果cms可以随意增加任何想要的功能<code>无需担心修改苹果cms源文件</code>影响到苹果cms正常使用。</p><p><img src="https://r2.leshans.eu.org/2023/09/1b578cd247fb47a8ea61de632f6c0a24.webp" alt="Pasted image 20230901225640"></p><p>盒子下载地址：<a href="https://gouya.lanzouf.com/iGgeI07zodmh">https://gouya.lanzouf.com/iGgeI07zodmh</a></p><p>QQ群：792135526（群里名额有限随时清理潜水用户）</p><h3 id="安装苹果cms盒子方法："><a href="#安装苹果cms盒子方法：" class="headerlink" title="安装苹果cms盒子方法："></a><strong>安装苹果cms盒子方法：</strong></h3><p>1.下载到的盒子客户端压缩包内拥有一个application文件夹，直接上传到网站根目录中。</p><p>2.添加苹果cms盒子快捷菜单：苹果cms盒子,macBox&#x2F;stylelist（参考下图）</p><p><img src="https://r2.leshans.eu.org/2023/09/59946841c80ef5f41edc6bde6b0ae07b.webp" alt="Pasted image 20230901225724"></p><h3 id="腾讯Gtimg图床插件优点："><a href="#腾讯Gtimg图床插件优点：" class="headerlink" title="腾讯Gtimg图床插件优点："></a>腾讯Gtimg图床插件优点：</h3><p><code>免费，不限空间</code>，安装插件后直接使用，支持封面同步，编辑视频图片上传。</p><p>插件升级注意：</p><p>该插件不提供升级包，如需升级卸载删除原先的插件重新安装新版本即可</p><p>有人会担心图片失效了怎么办，其实很简单，吧图片全部清空重新采集一遍就行了，清空方法也简单，打开<code>phpMyAdmin</code>找到<code>mac_vod</code>表点击sql，输入sql语句：</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> mac_vod <span class="hljs-keyword">SET</span> vod_pic <span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span>;</code></pre></div><p>然后点击执行就可以清空所有图片，在然后重新采集一遍图片就好了。</p><h3 id="图床插件安装方法："><a href="#图床插件安装方法：" class="headerlink" title="图床插件安装方法："></a><strong>图床插件安装方法：</strong></h3><p>1.下载到的插件压缩包上传到<code>addons</code>目录中解压</p><p>2.打开<code>苹果cms盒子</code>点击安装即可</p><p>3.下载地址: <a href="https://gouya.lanzouy.com/igtxi0bnaqhi">https://gouya.lanzouy.com/igtxi0bnaqhi</a></p><p>使用教程：</p><p>最新更新需要腾讯图床需要提供token，例如下面部分</p><p><code>userid=68552314;omaccesstoken=001fceb42ca1d843edf1066170a2a2bc5d9788a63587b8419549426a6b40c2052799417defb079f6a54b391efbb481e3f5da50123896b210607ba3f2e8fb6cf08cnv;omtoken=001fceb42ca1d843edf1066172a2bc5d9788a63587b82195461536a6b40c2052766417defb079f6a54b391efbb481e3f5da506d896db210607ba3f2e8fb6cf08cnv;  </code></p><p>token需要自己登录<a href="https://om.qq.com/userAuth/index">腾讯开放平台</a>，然后登录一个账号刷新网页F12查看</p><p><img src="https://r2.leshans.eu.org/2023/09/7ad00f9ae9847e0f17f2bffdebf2b7af.webp" alt="Pasted image 20230901225931"></p><p>1.安装并<code>启用插件</code></p><p>2.参考下图切换至腾讯图床并且填写<code>token</code></p><p><img src="https://r2.leshans.eu.org/2023/09/f228c934b40298d880a91058a9bc418d.webp" alt="Pasted image 20230901225943"></p><p><code>注意：因腾讯对于图床调整全部增加了防盗链，因此使用腾讯图床需要接触防盗，下面提供两种方法</code></p><p>1.（推荐方法）编辑模板在头部增加位置</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;referrer&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;never&quot;</span>/&gt;</span></code></pre></div><p>参考下图</p><p><img src="https://r2.leshans.eu.org/2023/09/29fcdb9d4b6134d4b3f0d0045712073a.webp" alt="Pasted image 20230901230001"></p><h3 id="插件更新方法："><a href="#插件更新方法：" class="headerlink" title="插件更新方法："></a><strong>插件更新方法：</strong></h3><p>一般有插件开发者提供更新包替换，涉及到收费问题暂时不支持在线升级功能。  </p><p>4.0升级内容：</p><p>1.移除模板相关代码</p><p>2.移除SG11加密组件，无需在安装加密组件了，直接使用即可</p><p>3.移除不使用的代码</p><p>注：因苹果cms版本问题可能出现兼容，点击安装，启用，卸载没反应，如果遇到这种问题刷新一下即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>图床</tag>
      
      <tag>腾讯</tag>
      
      <tag>苹果cms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>9款高效实用又非常有趣的软件！完全免费开源！！</title>
    <link href="/posts/8324716b.html"/>
    <url>/posts/8324716b.html</url>
    
    <content type="html"><![CDATA[<p>1、FreeRDP：完全免费的远程桌面管理工具。通过它可以轻松实现 macOS 或 Linux 远程操作 Windows 桌面系统反之亦可，使用起来十分方便和流畅。<br>【**<a href="https://github.com/FreeRDP/FreeRDP">开源软件</a>**】</p><p>2、min：一款最小化的浏览器。它是仅包含搜索、书签、密码管理、广告屏蔽器等最基础功能的极简浏览器，适用于 Windows、Linux、macOS 操作系统。</p><p>【**<a href="https://github.com/minbrowser/min">开源软件</a>**】</p><p>3.wechat-backup：本地备份微信聊天记录的工具。它能够将手机上的微信聊天记录，解密后保存在电脑上，支持查看、搜索、恢复微信聊天记录。</p><p>【**<a href="https://github.com/greycodee/wechat-backup">开源软件</a>**】</p><p>4、ServerStatus：多服务器云监控。轻松监控多台服务器状态的工具，用于解决多个不同平台下的服务器状态监控问题</p><p>【<a href="https://github.com/cppla/ServerStatus"><strong>开源软件</strong></a>】</p><p>5.vanblog：实用的一站式个人博客系统。一款简洁优雅的博客系统，追求极致响应速度和博客体验。快到极致的响应速度，Lighthouse 接近满分。前后台均为响应式，支持 Docker 一键部署。前台为静态页面并支持增量渲染，按需构建更新页面。拒绝花里胡哨的功能，专注于个人博客场景。</p><p>【<a href="https://github.com/Mereithhh/vanblog"><strong>开源软件</strong></a>】</p><hr><p>不同的【<a href="https://vanblog.mereith.com/guide/get-started.html#%E9%85%8D%E7%BD%AE%E8%A6%81%E6%B1%82">安装方式</a>】</p><p>6.TowerDefense-GameFramework-Demo：开源的塔防游戏示例。此项目主要用来上手和学习基于 Unity 引擎的游戏框架 GameFramework，感兴趣的同学可以把玩一下。游戏共有五个关卡，玩家通过击杀敌人和建造能量塔获取资源，消耗能量建造防御塔阻止敌人攻击基地</p><p>【**<a href="https://github.com/DrFlower/TowerDefense-GameFramework-Demo">开源软件</a>**】</p><p>7.nightingale：开源的云原生监控系统。支持 Docker 等多种部署方式，集数据采集、监控告警、可视化为一体的企业级监控平台。借助高性能时序库，可以满足数亿时间线的采集、存储和告警分析的场景。该项目已在上千家企业部署落地，经历了各种生产环境的检验。</p><p>【<a href="https://github.com/ccfos/nightingale/blob/main/README_zh.md"><strong>开源软件</strong></a>】</p><p>8.ghidra：一款免费开源的软件逆向分析工具。该项目由美国国安局开源，可用于分析编译后的代码。</p><p>【**<a href="https://github.com/NationalSecurityAgency/ghidra">开源软件</a>**】</p><p>9.HackBrowserData：一款浏览器数据导出工具。能够导出本地浏览器的密码、历史记录、Cookie、书签、下载记录、localStorage 等数据的命令行工具，支持多平台下的多种主流浏览器。</p><p>【**<a href="https://github.com/moonD4rk/HackBrowserData">开源软件</a>**】</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用 acme.sh 申请 Google 的免费 SSL 证书</title>
    <link href="/posts/f02ff0bc.html"/>
    <url>/posts/f02ff0bc.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>上个月 30 日，Google Cloud 在其博客发表文章 <a href="https://cuojue.org/go/#aHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2Jsb2cvcHJvZHVjdHMvaWRlbnRpdHktc2VjdXJpdHkvYXV0b21hdGUtcHVibGljLWNlcnRpZmljYXRlLWxpZmVjeWNsZS1tYW5hZ2VtZW50LXZpYS0tYWNtZS1jbGllbnQtYXBp">Automate Public Certificates Lifecycle Management via RFC 8555 (ACME)</a> 发布了测试版的自动化公共 CA 管理程序。<br>简而言之就是 Google 也开放了类似于 Let’s Encrypt 的免费证书申请。并且和 Google 各项服务使用相同的根证书。</p></blockquote><h3 id="优劣分析"><a href="#优劣分析" class="headerlink" title="优劣分析"></a>优劣分析</h3><ol><li>可以设置颁发证书的有效期；（<code>最长 90 天</code>）</li><li>支持<code>多域名及通配符</code>；（与 Let’s Encrypt 相同）</li><li>仅<code>支持 DNS 验证和文件验证</code>，不支持邮件验证；（与 Let’s Encrypt 相同）</li><li><code>支持 IP 地址</code>，但是仅允许该 IP 地址块的所有者进行验证；（Let’s Encrypt 暂不支持）</li><li>不支持 IDN (International Domain Name, 国际化域名，使用 Punycode 进行编码，形如 xn–1.xn–2).（Let’s Encrypt 已经支持）</li><li>目前签发的证书，即使选择 <code>ECC</code> 类型，证书链的中级证书也是 RSA 的（Let’s Encrypt 已经支持全链 ECC）</li><li><code>ocsp.pki.goog</code> 有<code>国内节点</code>，访客体验还是很不错的。</li><li>目前有 DNSSEC CAA 问题，在 DNSPod 添加了 DNSSEC 的用户请暂缓申请</li></ol><h2 id="申请方法"><a href="#申请方法" class="headerlink" title="申请方法"></a>申请方法</h2><h3 id="申请-GOOGLE-域名-API"><a href="#申请-GOOGLE-域名-API" class="headerlink" title="申请 GOOGLE 域名 API"></a>申请 GOOGLE 域名 API</h3><p>登录 google 账号后，进入下面链接</p><p><a href="https://cloud.google.com/sdk/gcloud/reference/publicca?hl=zh-cn">https://cloud.google.com/sdk/gcloud/reference/publicca?hl=zh-cn</a></p><p>单击<code>右上角</code>的“<code>激活 Cloud Shell</code>”，打开Cloud Shell</p><p><img src="https://imgs.leshans.eu.org/docs/1713300328.png"></p><p>然后在在 Cloud Shell 输入</p><div class="code-wrapper"><pre><code class="hljs bash">gcloud publicca external-account-keys create</code></pre></div><p>要等待一会才会返回 <code>keyid</code> 和 <code>b64mackey</code>，不行就多输入几次</p><div class="code-wrapper"><pre><code class="hljs angelscript">Created an <span class="hljs-keyword">external</span> account key<span class="hljs-string">[b64MacKey: xxxxxxxxxxxxxxxxxxx</span><span class="hljs-string">keyId: xxxxxxxxxxxx]</span></code></pre></div><p>保存好keyId和b64MacKey</p><h3 id="安装-acme-sh"><a href="#安装-acme-sh" class="headerlink" title="安装 acme.sh"></a>安装 acme.sh</h3><p>如果已经安装请忽略这步</p><div class="code-wrapper"><pre><code class="hljs bash">curl https://get.acme.sh | sh -s email=你的邮箱</code></pre></div><p>或者</p><div class="code-wrapper"><pre><code class="hljs bash">wget -O -  https://get.acme.sh | sh -s email=你的邮箱</code></pre></div><p>若后面出现 command not found，则需要手动执行以下命令：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc</code></pre></div><p>Acme.sh 默认生成 Let’s Encrypt R3 证书，我们需要修改一下让它默认生成 google 证书</p><div class="code-wrapper"><pre><code class="hljs bash">acme.sh --set-default-ca --server google</code></pre></div><h3 id="申请-google-证书"><a href="#申请-google-证书" class="headerlink" title="申请 google 证书"></a>申请 google 证书</h3><p>获取申请 google 证书的资格</p><div class="code-wrapper"><pre><code class="hljs stylus">~/<span class="hljs-selector-class">.acme</span>.sh/acme<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--register-account</span> <span class="hljs-attr">--server</span> google \    <span class="hljs-attr">--eab-kid</span> <span class="hljs-string">&quot;xxxxx&quot;</span> \    <span class="hljs-attr">--eab-hmac-key</span> <span class="hljs-string">&quot;xxxxx&quot;</span></code></pre></div><p><code>eab-kid</code> 为申请到的谷歌 keyId</p><p><code>eab-hmac-key</code> 申请到的 b64MacKey</p><p>注意: <code> API 获取的凭证</code>应该是<code>只能使用一次</code>，重新获取 API 凭证之后可以成功注册（更新：每台服务器都需要单独的凭证注册一次，之后的签发则不再需要）。</p><h3 id="签发证书"><a href="#签发证书" class="headerlink" title="签发证书"></a>签发证书</h3><p><strong>acme.sh</strong> 实现了 <strong>acme</strong> 协议支持的所有验证协议. 一般有两种方式验证: http 和 dns 验证.</p><ol><li>http 方式需要在你的网站根目录下放置一个文件, 来验证你的域名所有权,完成验证. 然后就可以生成证书了.</li></ol><div class="code-wrapper"><pre><code class="hljs stylus">acme<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--issue</span> -d mydomain<span class="hljs-selector-class">.com</span> <span class="hljs-attr">--webroot</span> /home/wwwroot/mydomain.com/</code></pre></div><p>只需要<code>指定域名</code>, 例如: mydomain.com  多个可以后面再加 -d <a href="http://www.mydomain.com/">www.mydomain.com</a></p><p>并指定域名所在的<code>网站根目录</code>, 例如: &#x2F;home&#x2F;wwwroot&#x2F;mydomain.com&#x2F;</p><p><strong>acme.sh</strong> 会全自动的生成验证文件, 并放到网站的根目录, 然后自动完成验证. 最后会聪明的删除验证文件. 整个过程没有任何副作用.</p><h3 id="查看已证书安装信息"><a href="#查看已证书安装信息" class="headerlink" title="查看已证书安装信息"></a>查看已证书安装信息</h3><div class="code-wrapper"><pre><code class="hljs bash">acme.sh --info -d example.com</code></pre></div><h2 id="选择默认-CA"><a href="#选择默认-CA" class="headerlink" title="选择默认 CA"></a>选择默认 CA</h2><p>目前 <a href="http://acme.sh/">acme.sh</a> 支持 5 个正式环境 CA，分别是 <a href="https://letsencrypt.org/">Let’s Encrypt</a>、<a href="https://www.buypass.com/">Buypass</a>、<a href="https://u.nu/zerossl">ZeroSSL</a>、<a href="https://www.ssl.com/">SSL.com</a>和 <a href="https://cloud.google.com/certificate-manager/docs/public-ca-tutorial">Google Public CA</a>，默认使用 ZeroSSL，如果需要更换可以使用如下命令：</p><p>切换 Let’s Encrypt</p><div class="code-wrapper"><pre><code class="hljs bash">acme.sh --set-default-ca --server letsencrypt</code></pre></div><p>切换 Buypass</p><div class="code-wrapper"><pre><code class="hljs bash">acme.sh --set-default-ca --server buypass</code></pre></div><p>切换 ZeroSSL</p><div class="code-wrapper"><pre><code class="hljs bash">acme.sh --set-default-ca --server zerossl</code></pre></div><p>切换 <a href="http://ssl.com/">SSL.com</a></p><div class="code-wrapper"><pre><code class="hljs bash">acme.sh --set-default-ca --server ssl.com</code></pre></div><p>切换 Google Public CA</p><div class="code-wrapper"><pre><code class="hljs bash">acme.sh --set-default-ca --server google</code></pre></div><p>如果已有 ZeroSSL 帐号，可以在后台控制面板拿到 API Key，然后执行如下命令</p><div class="code-wrapper"><pre><code class="hljs shell">apt install jqcurl -s -X POST &quot;https://api.zerossl.com/acme/eab-credentials?access_key=你的API_Key&quot; | jq</code></pre></div><p>终端会输出如下内容</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>  <span class="hljs-attr">&quot;success&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;eab_kid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kid字符串&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;eab_hmac_key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hmac_key字符串&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>然后手工添加帐号</p><div class="code-wrapper"><pre><code class="hljs stylus">acme<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--register-account</span>  <span class="hljs-attr">--server</span> zerossl \        <span class="hljs-attr">--eab-kid</span> kid字符串  \        <span class="hljs-attr">--eab-hmac-key</span> hmac_key字符串</code></pre></div><p>Google Public CA 需要按照<a href="https://cloud.google.com/blog/products/identity-security/automate-public-certificate-lifecycle-management-via--acme-client-api">官方博客</a>申请内测，然后获取 Key。</p><p>几个 CA 的简单对比</p><table><thead><tr><th>功能</th><th>LE</th><th>Buypass</th><th>ZeroSSL</th><th><a href="http://ssl.com/">SSL.com</a></th><th>Google Public CA</th></tr></thead><tbody><tr><td>有效期</td><td>90 天</td><td>180 天</td><td>90 天</td><td>90 天</td><td>90 天</td></tr><tr><td>多域名</td><td>支持</td><td>支持，最多 5 个</td><td>支持</td><td>收费支持</td><td>支持</td></tr><tr><td>泛域名</td><td>支持</td><td>不支持</td><td>支持</td><td>收费支持</td><td>支持</td></tr><tr><td>Rate Limit</td><td>有</td><td>有</td><td>收费无</td><td>未知</td><td>有</td></tr><tr><td>GUI 管理</td><td>否</td><td>否</td><td>有</td><td>有</td><td>无</td></tr><tr><td>ECC 证书链</td><td>否</td><td>否</td><td>有</td><td>未知</td><td>无</td></tr><tr><td>客户支持</td><td>社区</td><td>收费</td><td>收费</td><td>收费</td><td>收费</td></tr></tbody></table><p>简单来说，如果没有特殊需求，可以选择 Let’s Encrypt，如果服务器在国内，可以选择 ZeroSSL 或 Buypass，如果愿意付费得到更好的服务和保障，可以选择 ZeroSSL 和 <a href="http://ssl.com/">SSL.com</a>，如果面向欧盟用户，可以选择 Buypass 和 ZeroSSL。</p><p><em>注意：经过测试 Google Public CA 的 ACME 验证域名在国内是无法访问的，只有国外服务器才可以申请，申请完成后的证书并无影响。</em></p><h2 id="使用-HTTP-验证签发证书"><a href="#使用-HTTP-验证签发证书" class="headerlink" title="使用 HTTP 验证签发证书"></a>使用 HTTP 验证签发证书</h2><p>我们以 Let’s Encrypt 为例，直接在终端运行</p><div class="code-wrapper"><pre><code class="hljs bash">acme.sh --issue -d example.com -w /var/www/letsencrypt</code></pre></div><p>如果希望签发 ECC 证书，则运行</p><div class="code-wrapper"><pre><code class="hljs bash">acme.sh --issue -d example.com --keylength ec-256 -w /var/www/letsencrypt</code></pre></div><p>如果需要多个域名，则运行</p><div class="code-wrapper"><pre><code class="hljs bash">acme.sh --issue -d example.com -d example.org -w /var/www/letsencrypt</code></pre></div><p>然后就等他执行完，直到出现 <code>Cert success</code> 的提示</p><p><img src="https://r2.leshans.eu.org/2023/08/a94fd19d8971edb593faaa0d65974c6b.webp" alt="Pasted image 20230829023310"></p><p>然后我们可以安装证书</p><p>Nginx</p><div class="code-wrapper"><pre><code class="hljs bash">acme.sh --install-cert -d example.com \--key-file       /etc/nginx/ssl/example.com.key  \--fullchain-file /etc/nginx/ssl/example.com.crt \--ca-file        /etc/nginx/ssl/example.com.ca.crt \--reloadcmd     <span class="hljs-string">&quot;systemctl restart nginx&quot;</span></code></pre></div><p>对应的 Nginx 配置指定证书文件</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">ssl_certificate</span> /etc/nginx/ssl/example.com.crt;<span class="hljs-attribute">ssl_certificate_key</span> /etc/nginx/ssl/example.com.key;<span class="hljs-attribute">ssl_trusted_certificate</span> /etc/nginx/ssl/example.com.ca.crt;</code></pre></div><p>Apache</p><div class="code-wrapper"><pre><code class="hljs bash">acme.sh --install-cert -d example.com \--key-file       /etc/apache2/ssl/example.com.key  \--fullchain-file /etc/apache2/ssl/example.com.crt \--ca-file        /etc/apache2/ssl/example.com.ca.crt \--reloadcmd     <span class="hljs-string">&quot;curl https://ssl-config.mozilla.org/ffdhe2048.txt &gt;&gt; /etc/apache2/ssl/example.com.crt &amp;&amp; systemctl restart apache2&quot;</span></code></pre></div><p>对应的 Apache 配置指定证书文件</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">SSLCertificateFile</span>      /etc/apache2/ssl/example.com.crt<span class="hljs-attribute">SSLCertificateKeyFile</span>   /etc/apache2/ssl/example.com.key</code></pre></div><p>如果是 ECC 证书，则安装的时候需要带上 <code>--ecc</code> 参数，比如</p><div class="code-wrapper"><pre><code class="hljs bash">acme.sh --install-cert --ecc -d example.com \--key-file       /etc/nginx/ssl/example.com.key  \--fullchain-file /etc/nginx/ssl/example.com.crt \--ca-file        /etc/nginx/ssl/example.com.ca.crt \--reloadcmd     <span class="hljs-string">&quot;systemctl restart nginx&quot;</span></code></pre></div><p>注意如果是多个域名，也仅需要在 <code>-d</code> 参数后面指定第一个域名即可。</p><h2 id="使用-DNS-验证签发证书"><a href="#使用-DNS-验证签发证书" class="headerlink" title="使用 DNS 验证签发证书"></a>使用 DNS 验证签发证书</h2><p>有时候因为不想暴露一些二级域名，或者希望在多台机器上部署同一个域名的证书，这时候就需要用到 DNS 插件了，<a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi">acme.sh</a> 支持几十种 DNS 插件。</p><p>这里以 Cloudflare 为例，登录 Cloudflare Dash 后在 <a href="https://dash.cloudflare.com/profile/api-tokens">API Token</a> 菜单里添加一个 API Token：</p><p><img src="https://r2.leshans.eu.org/2023/08/4fdce737b8b441d513c523e40da9fa90.webp" alt="Pasted image 20230829023544"></p><p>然后选择 Edit Zone DNS 的模板</p><p><img src="https://r2.leshans.eu.org/2023/08/a7655914900e328325772afeba21f046.webp" alt="Pasted image 20230829023556"></p><p>选择你要编辑的域名，也可以加入你服务器的 IP 作为白名单</p><p><img src="https://r2.leshans.eu.org/2023/08/1594e6dbc1044ea3174cb58e9501c8c7.webp" alt="Pasted image 20230829023610"></p><p>完成后会给你一串字符，把他复制下来，需要填入下方的 <code>CF_Token</code> 参数</p><p><img src="https://r2.leshans.eu.org/2023/08/6453b45daabaf41793b6f1baf646f4d1.webp" alt="Pasted image 20230829023626"></p><p>然后进入域名的管理页面，在右侧 API 列找到 <code>Account ID</code> 和 <code>Zone ID</code> 并复制</p><p><img src="https://r2.leshans.eu.org/2023/08/4f11c193526c0a26a83fe7c16c314ce1.webp" alt="Pasted image 20230829023641"></p><p>接着在终端运行</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> CF_Token=<span class="hljs-string">&quot;复制下来的 Token&quot;</span><span class="hljs-built_in">export</span> CF_Account_ID=<span class="hljs-string">&quot;复制下来的 Account ID&quot;</span><span class="hljs-built_in">export</span> CF_Zone_ID=<span class="hljs-string">&quot;复制下来的 Zone ID&quot;</span></code></pre></div><p>然后开启 <a href="http://acme.sh/">acme.sh</a> 的 DNS API 模式申请证书</p><div class="code-wrapper"><pre><code class="hljs bash">acme.sh --issue --dns dns_cf -d example.com -d *.example.com</code></pre></div><p>如果是dns.la:</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> LA_Id=<span class="hljs-string">&quot;&lt;appid&gt;&quot;</span><span class="hljs-built_in">export</span> LA_Key=<span class="hljs-string">&quot;&lt;apikey&gt;&quot;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">acme.sh --issue --dns dns_la -d example.com -d *.example.com</code></pre></div><p>安装证书方法同上，另外吐槽下，很多教程会让你用 Cloudflare 的全局 Global API Key，真的是，风险太大了，最后怎么被黑的都不知道 &#x3D; &#x3D;</p><p>如果不想使用第三方的 DNS 服务完全可以自建 <a href="https://github.com/joohoi/acme-dns">acme-dns</a> 或者 <a href="https://github.com/PowerDNS/pdns">PowerDNS</a>，篇幅有限，我们之后再介绍。</p><h3 id="更新证书"><a href="#更新证书" class="headerlink" title="更新证书"></a>更新证书</h3><p>目前证书在 60 天以后会自动更新，您无需进行任何操作。接下来可能会讲这个时间，但是都是自动的，你不用担心。</p><p>请确保 cronjob 正确安装，看起来类似如下：</p><div class="code-wrapper"><pre><code class="hljs jboss-cli">crontab  -l56 * * * * <span class="hljs-string">&quot;/root/.acme.sh&quot;</span><span class="hljs-string">/acme.sh</span> <span class="hljs-params">--cron</span> <span class="hljs-params">--home</span> <span class="hljs-string">&quot;/root/.acme.sh&quot;</span> &gt; <span class="hljs-string">/dev/null</span></code></pre></div><h3 id="更新acme-sh"><a href="#更新acme-sh" class="headerlink" title="更新acme.sh"></a>更新acme.sh</h3><p>目前由于 acme 协议和 Letscrypt CA 都在关闭的更新，因此 acme.sh 也经常更新以保持同步。</p><p>升级 acme.sh 到最新版本：</p><div class="code-wrapper"><pre><code class="hljs bash">acme.sh --upgrade</code></pre></div><p>如果您不想手动升级，可以开启自动升级：</p><div class="code-wrapper"><pre><code class="hljs bash">acme.sh --upgrade --auto-upgrade</code></pre></div><p>此后，acme.sh就会自动保持更新了。</p><p>您也可以随时关闭自动更新：</p><div class="code-wrapper"><pre><code class="hljs stylus">acme<span class="hljs-selector-class">.sh</span> <span class="hljs-attr">--upgrade</span> <span class="hljs-attr">--auto-upgrade</span>  <span class="hljs-number">0</span></code></pre></div><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p><a href="https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E">https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E</a></p><p><a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi#dns_cf">https://github.com/acmesh-official/acme.sh/wiki/dnsapi#dns_cf</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>ssl</tag>
      
      <tag>证书</tag>
      
      <tag>acme.sh</tag>
      
      <tag>谷歌</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>推荐8个宝藏级的开源软件！来自Github的免费精品项目</title>
    <link href="/posts/81064f58.html"/>
    <url>/posts/81064f58.html</url>
    
    <content type="html"><![CDATA[<p><img src="https://r2.leshans.eu.org/2023/08/87400406fde62d7161f6d5c3e000eab7.webp" alt="Pasted image 20230827232940"></p><p>1.Malware-Patch：阻止 Windows 流氓软体授权的工具。它轻巧、无需后台运行，可用于阻止指定软体的管理员授权。</p><p>【**<a href="https://github.com/the1812/Malware-Patch/blob/master">开源项目</a>**】</p><p>2.Rocket.Chat：一款可自由定制的企业级开源通信平台源码。用它来可以搭建一个功能丰富的通信平台，可自託管做为 Slack 的开源替代品。支持创建频道、团队和讨论等多种不同功能的群聊，消息支持图片、文件、视频和语音，拥有包括 Windows、Linux、macOS、Android 和 iOS 在内的多种客户端。 如果你需要搭建一个安全加密，且具有高度私密性的通信平台，那麽这款开源项目就非常适合你了。</p><p>【<a href="https://github.com/RocketChat/Rocket.Chat"><strong>开源项目</strong></a>】</p><p>3.hackingtool：黑客工具全家桶。该项目收录了各种黑客工具，包括破解密码、SQL 注入、钓鱼攻击、XSS、DDos 等。堪称黑客军火库的开源项目啊<br>【**<a href="https://github.com/Z4nzu/hackingtool">开源项目</a>**】</p><p>4.sniffnet：可轻鬆监控网路流量的工具。这是一个简单、可靠、炫酷的网路监控应用，可以让你一目了然地了解设备的网路流量。<br>【<a href="https://github.com/GyulyVGC/sniffnet"><strong>开源项目</strong></a>】</p><p>5.changedetection ：简单好用的网站变更检测、监控和通知服务。基于 Flask+Selenium 构建的 Web 服务，可以在目标网站发生变化时发出通知，可用于监控商品降价、工作机会、版本发布、最新内容等，支持 Docker 的安装方式。</p><p>【<a href="https://github.com/dgtlmoon/changedetection.io"><strong>开源项目</strong></a>】</p><p>6.calibre：一款完全免费开源且功能强大的电子书管理工具。它是集下载、格式转化、制作、管理于一体的电子书工具，比如可以将 txt 文本，转化成包含作者信息和书籍封面的 mobi 文件，制作完成后还可以直接发送到 Kindle 设备上。 支持多种电子书格式，包括EPUB、MOBI、PDF等等。Calibre的功能非常强大，可以帮助用户轻鬆地管理自己的电子书库，包括添加、删除、重命名和搜索等。此外，它还提供了阅读器功能，用户可以在软体内直接阅读电子书，而不需要另外下载阅读器。你还可以可通过插件&#x2F;扩展实现更多的功能。</p><p>【<a href="https://github.com/kovidgoyal/calibre"><strong>开源项目</strong></a>】</p><p>7.Magisk：Android 获取 Root 许可权的工具。它可以快速、无痛地获得 Android 的超级用户许可权，支持 Android 5.0 以上的设备。<br>【**<a href="https://github.com/topjohnwu/Magisk">开源项目</a>**】</p><p>8.uptime-kuma：一款极简的 uptime 监控工具。该项目可以用来监控服务正常运行时间，它界面美观、支持 Docker 一键部署，提供了中文界面、通知、多状态页面等实用功能。</p><p>【**<a href="https://github.com/louislam/uptime-kuma">开源项目</a>**】</p>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Nginx反向代理，自建CDN加速节点</title>
    <link href="/posts/9b6ee089.html"/>
    <url>/posts/9b6ee089.html</url>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="1、安装Nginx"><a href="#1、安装Nginx" class="headerlink" title="1、安装Nginx"></a>1、安装Nginx</h3><p><a href="https://lnmp.org/install.html">这里使用的是军哥的LNMP</a> <em>单独安装Nginx</em></p><div class="code-wrapper"><pre><code class="hljs shell">wget http://soft.vpser.net/lnmp/lnmp2.0.tar.gz -O lnmp2.0.tar.gz &amp;&amp; tar zxf lnmp2.0.tar.gz &amp;&amp; cd lnmp2.0 &amp;&amp; ./install.sh nginx</code></pre></div><h3 id="2、CDN配置"><a href="#2、CDN配置" class="headerlink" title="2、CDN配置"></a>2、CDN配置</h3><p>假如我需要对<code>www.moerats.com</code>搭建<code>CDN</code>节点，数据放在<code>192.168.1.100</code>，需要先修改<code>hosts</code>指向，告知<code>CDN</code>节点去哪里去获取网站数据，也就是回源地址，做如下修改：</p><div class="code-wrapper"><pre><code class="hljs bash">vi /etc/hosts192.168.1.100    www.moerats.com</code></pre></div><p>然后创建<code>nginx</code>配置文件<code>moerats.com.conf</code>。</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#创建缓存目录</span><span class="hljs-built_in">mkdir</span> -p /usr/local/nginx/caches/www.moerats.com<span class="hljs-comment">#设置缓存目录权限</span><span class="hljs-built_in">chown</span> -R www:www /usr/local/nginx/caches/www.moerats.com<span class="hljs-comment">#创建moerats.com.conf</span>vi /usr/local/nginx/conf/vhost/moerats.com.conf</code></pre></div><p>在<code>moerats.com.conf</code>中添加下面的内容，缓存目录&#x2F;缓存时间请根据实际情况调整。</p><div class="code-wrapper"><pre><code class="hljs bash">proxy_cache_path /usr/local/nginx/caches/www.moerats.com levels=1:2 keys_zone=xiaoz:50m inactive=30m max_size=50m;server &#123;    listen 80;    server_name www.moerats.com;    charset utf-8,gbk;        location / &#123;        proxy_set_header Accept-Encoding <span class="hljs-string">&quot;&quot;</span>;           proxy_pass https://www.moerats.com;           proxy_redirect off;           proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;           proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;           proxy_cache xiaoz;           proxy_cache_valid  200 304  30m;           proxy_cache_valid  301 24h;           proxy_cache_valid  500 502 503 504 0s;           proxy_cache_valid any 1s;           proxy_cache_min_uses 1;           expires 12h;    &#125;&#125;</code></pre></div><p><strong>参数说明：</strong></p><p><code>/usr/local/nginx/caches/www.moerats.com</code>：为缓存目录</p><p><code>levels</code>：指定该缓存空间有两层hash目录，第一层目录为1个字母，第二层为2个字母。</p><p><code>keys_zone=xiaoz:50m</code>：为缓存空间起个名字，这里取名为“xiaoz”，后面的50m指内存缓存空间</p><p><code>inactive=30m</code>：如果30分钟内该资源没有被访问则删除</p><p><code>max_size=50m</code>：指硬盘缓存大小为50MB</p><p><code>proxy_cache_valid</code>：指定状态码缓存时间，前面写状态码，后面写缓存时间。</p><h3 id="3-然后重启Nginx生效"><a href="#3-然后重启Nginx生效" class="headerlink" title="3. 然后重启Nginx生效"></a>3. 然后重启Nginx生效</h3><div class="code-wrapper"><pre><code class="hljs bash">/etc/init.d/nginx reload</code></pre></div><h3 id="4、Https配置"><a href="#4、Https配置" class="headerlink" title="4、Https配置"></a>4、Https配置</h3><p>如果是<code>https</code>网站，配置文件参考：</p><div class="code-wrapper"><pre><code class="hljs bash">proxy_cache_path /data/wwwroot/caches/www.moerats.com levels=1:2 keys_zone=Rats:50m inactive=30m max_size=50m;server &#123;    listen 443 ssl http2;    ssl_certificate    /home/moerats.com.crt;    ssl_certificate_key    /home/moerats.com.key;    ssl_session_timeout 1d;    ssl_session_cache <span class="hljs-built_in">builtin</span>:1000 shared:SSL:10m;    ssl_dhparam /data/ssl/dhparam.pem;    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    ssl_ciphers <span class="hljs-string">&#x27;ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS&#x27;</span>;    ssl_prefer_server_ciphers on;    ssl_stapling on;    ssl_stapling_verify on;    server_name www.moerats.com;    access_log /data/wwwlogs/moerats.com_nginx.log combined;       charset utf-8,gbk;        location / &#123;        proxy_set_header Accept-Encoding <span class="hljs-string">&quot;&quot;</span>;           proxy_pass https://www.moerats.com;           proxy_redirect off;           proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;           proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;           proxy_cache Rats;           proxy_cache_valid  200 304  30m;           proxy_cache_valid  301 24h;           proxy_cache_valid  500 502 503 504 0s;           proxy_cache_valid any 1s;           proxy_cache_min_uses 1;           expires 12h;    &#125;&#125;server &#123;    listen 80 default_server;    <span class="hljs-built_in">return</span> 301 https://$host<span class="hljs-variable">$request_uri</span>;&#125;</code></pre></div><p>你也可以使用多台<code>VPS</code>，利用<code>CloudXNS</code>智能解析，将不同地区的<code>DNS</code>解析到最近的<code>VPS</code>上，进行<code>CND</code>加速。</p>]]></content>
    
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>cdn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gravatar头像 镜像地址大全</title>
    <link href="/posts/3576168.html"/>
    <url>/posts/3576168.html</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>当我们在很多博客或者网站留言，评论的时候会看到有的人头像很酷很个性化，但是这个博客和网站本身并没有提供设置头像的功能，感觉有点神奇，那么是怎么做到的呢？<code>其实这是使用了Gravatar</code>。</p><p>Gravatar，全称<code>Globally Recognized Avatar</code>。翻译成中文为<code>全球通用头像</code>。</p><p>Gravatar的概念首先是在国外的独立WordPress博客中兴起的，当你到任何一个支持Gravatar的网站留言时，这个网站都会根据你所提供的Email地址为你显示出匹配的头像。当然，这个头像，是需要你事先到Gravatar的网站注册并上传的，否则，在这个网站上，就只会显示成一个默认的头像。</p><p>当你访问支持<code>gravatar</code>头像的网站时，只要输入你注册的邮箱账号，<code>即会自动调用gravatar的api</code>，转换成保存的头像。这样就可以为广大程序提供个人头像存储服务。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用该服务时需要去<a href="https://cn.gravatar.com/">官网</a>中注册一个账号，并上传头像。</p><p>注意头像上传后会审核，然后管理员会按图片包含的内容划分一个等级（G 普通级、PG 辅导级、R 和 X 为限制级）。</p><p>通过之后这个头像就可以使用了。在任何支持Gravatar的地方，在评论填写email地址时，请填写你申请注册头像用的这个email地址。你的头像就会出现在留言中。就这样可以展示给大家看了</p><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><p>由于gravatar目前服务极不稳定，调用时推荐用国内的源。</p><p>以下个人整理备份。</p><div class="code-wrapper"><pre><code class="hljs shell">- gravatar官方的www源：[https://www.gravatar.com/avatar/]- gravatar官方的cn源：[https://cn.gravatar.com/avatar/]- gravatar官方的en源：[https://en.gravatar.com/avatar/]- gravatar官方的secure源：[https://secure.gravatar.com/avatar/]- V2EX源：[https://cdn.v2ex.com/gravatar/]- Loli源：[https://gravatar.loli.net/avatar/]- 极客族：[https://sdn.geekzu.org/avatar/]</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>gravatar</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git配置、提交到多个远程仓库</title>
    <link href="/posts/41f19983.html"/>
    <url>/posts/41f19983.html</url>
    
    <content type="html"><![CDATA[<p>优雅地配置并将代码推<code>送至多个远程仓库</code>，如 GitHub 和 Gitee，是一项重要的开发实践。通过巧妙配置 Git，你可以无缝管理多个代码托管平台。</p><p>在<code>gitee</code>平台,你可以将<code>github</code>上的项目导入进来,只需要填上github仓库 <code>URL</code>即可.非常方便</p><h2 id="同时提交到github和gitee"><a href="#同时提交到github和gitee" class="headerlink" title="同时提交到github和gitee"></a>同时提交到github和gitee</h2><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>通过命令行<code>set-url --add</code> 添加</p><hr><h4 id="1-使用如下命令添加远程仓库"><a href="#1-使用如下命令添加远程仓库" class="headerlink" title="1.使用如下命令添加远程仓库"></a>1.使用如下命令添加远程仓库</h4><div class="code-wrapper"><pre><code class="hljs bash">git remote set-url --add origin</code></pre></div><p>例如：</p><div class="code-wrapper"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-built_in">--add</span> <span class="hljs-string">origin</span> <span class="hljs-string">https</span>://<span class="hljs-string">gitee</span>.<span class="hljs-string">com</span>/<span class="hljs-string">ganace</span>/<span class="hljs-string">Ganace</span>.<span class="hljs-string">git</span></code></pre></div><h4 id="2-查看远程仓库情况"><a href="#2-查看远程仓库情况" class="headerlink" title="2.查看远程仓库情况"></a>2.查看远程仓库情况</h4><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span></code></pre></div><p>可以看到gitee的仓库地址已经添加进去了</p><div class="code-wrapper"><pre><code class="hljs ruby">origin  <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/github.com/</span><span class="hljs-title class_">Ganace</span>/<span class="hljs-title class_">Ganace</span>.github.io.git (fetch)origin  <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/github.com/</span><span class="hljs-title class_">Ganace</span>/<span class="hljs-title class_">Ganace</span>.github.io.git (push)origin  <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/gitee.com/ganace</span><span class="hljs-regexp">/Ganace.git (push)</span></code></pre></div><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>打开<code>/.git/config</code>文件，在<code>[remote “origin”]</code>项中添加多个需要同时提交的git远程仓库url。</p><p>例如：</p><div class="code-wrapper"><pre><code class="hljs ruby">[remote <span class="hljs-string">&quot;origin&quot;</span>]url = <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/github.com/</span><span class="hljs-title class_">Ganace</span>/<span class="hljs-title class_">Ganace</span>.github.io.giturl = <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/gitee.com/ganace</span><span class="hljs-regexp">/Ganace.git</span><span class="hljs-regexp">fetch = +refs/heads</span><span class="hljs-regexp">/*:refs/remotes</span><span class="hljs-regexp">/origin/</span>*</code></pre></div><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>使用<code>git push -f</code> 统一提交到所有仓库，并且强制统一版本。</p><div class="code-wrapper"><pre><code class="hljs bash">git push -f origin --all</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CloudFlare Tunnel 内网穿透和反向代理</title>
    <link href="/posts/54ab332c.html"/>
    <url>/posts/54ab332c.html</url>
    
    <content type="html"><![CDATA[<p>将您的本地服务扩展到全球网络：<code>Cloudflare Tunnel</code>的魔力</p><p><code>Cloudflare Tunnel</code>是您连接全球网络的完美伙伴。无论您是个人开发者还是企业用户，通过Cloudflare Tunnel，您可以轻松将您的<code>本地或电脑上</code>的服务提供给全球用户。这款强大的工具可以安全地将您的服务引导到<code>Cloudflare的分布式</code>网络中，确保数据的安全性和隐私。通过加密通信和强大的安全功能，您的Web服务将免受恶意攻击和数据泄露的威胁。</p><h2 id="一键脚本"><a href="#一键脚本" class="headerlink" title="一键脚本"></a>一键脚本</h2><p>适用于debian&#x2F;ubuntu</p><div class="code-wrapper"><pre><code class="hljs shell">curl -sS -O https://raw.githubusercontent.com/woniu336/open_shell/main/cloudflared.sh &amp;&amp; chmod +x cloudflared.sh &amp;&amp; ./cloudflared.sh</code></pre></div><p><code>后面可以不看了</code></p><h2 id="1-下载与安装"><a href="#1-下载与安装" class="headerlink" title="1.下载与安装"></a>1.下载与安装</h2><p> 安装教程: <a href="https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/install-and-setup/tunnel-guide/local/">点击打开</a></p><div class="code-wrapper"><pre><code class="hljs bash">wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb &amp;&amp; sudo dpkg -i cloudflared-linux-amd64.deb</code></pre></div><blockquote><p>有两种运行隧道的方式: <code>控制台</code>和<code>命令行</code></p></blockquote><p><strong>区别:</strong> 控制台添加<code>第2个隧道</code>的时候提示你已经安装过cloudflared服务了,你需要卸载才能继续, 命令行则可以运行多个<code>配置文件</code>,也就是多个服务,所以<code>没有限制</code></p><p>本文使用的是<code>命令行</code>方式</p><p><a href="https://one.dash.cloudflare.com/">打开控制台–Access–Tunnels</a></p><p><img src="https://cdn.bilicdn.tk/gh/woniu336/blog-image@main/img/Pasted%20image%2020230821060949.webp" alt="Pasted image 20230821060949"></p><h2 id="2-登录"><a href="#2-登录" class="headerlink" title="2.登录"></a>2.登录</h2><div class="code-wrapper"><pre><code class="hljs bash">cloudflared tunnel login</code></pre></div><p>会自动<code>打开浏览器</code>，登录后<code>选择域名</code>，完成验证</p><p>此时 Cloudflare 会创建一个 <code>cert.pem</code> 文件放在你的 <code>~/.cloudflared</code> 目录下。</p><p><img src="https://cdn.bilicdn.tk/gh/woniu336/blog-image@main/img/Pasted%20image%2020230821061103.webp" alt="Pasted image 20230821061103"></p><p><img src="https://cdn.bilicdn.tk/gh/woniu336/blog-image@main/img/Pasted%20image%2020230821061328.webp" alt="Pasted image 20230821061328"></p><h2 id="3-创建隧道"><a href="#3-创建隧道" class="headerlink" title="3.创建隧道"></a>3.创建隧道</h2><div class="code-wrapper"><pre><code class="hljs bash">cloudflared tunnel create 隧道名</code></pre></div><p>此时会输出一些<code>隧道 ID</code> 之类的信息</p><h2 id="4-配置隧道"><a href="#4-配置隧道" class="headerlink" title="4.配置隧道"></a>4.配置隧道</h2><p>给隧道创建一个<code>域名</code></p><div class="code-wrapper"><pre><code class="hljs bash">cloudflared tunnel route dns 隧道名 刚才选择的域名</code></pre></div><blockquote><p><strong>这里有个坑</strong>: 回到域名的<code>DNS解析</code>,把CNAME 记录名称改回来</p><p>比如: tt.baidu.com改为mm.baidu.com</p><p>内容改为: <code>隧道UUID.cfargotunnel.com</code></p></blockquote><h2 id="5-创建配置文件"><a href="#5-创建配置文件" class="headerlink" title="5. 创建配置文件"></a>5. 创建配置文件</h2><p>比如我打算放在 <code>~/.cloudflared/config.yml</code>，文件内容如下：</p><div class="code-wrapper"><pre><code class="hljs shell">tunnel: UUIDcredentials-file: /root/.cloudflared/UUID.json ingress:  - hostname: xx.baidu.com    service: http://localhost:80  - service: http_status:404</code></pre></div><h3 id="启动隧道："><a href="#启动隧道：" class="headerlink" title="启动隧道："></a>启动隧道：</h3><div class="code-wrapper"><pre><code class="hljs bash">cloudflared tunnel --config ~/.cloudflared/config.yml run</code></pre></div><p>此时会有一些调试信息，比如它告诉你连接到了哪些 Cloudflare 节点之类的：</p><div class="code-wrapper"><pre><code class="hljs subunit">022<span class="hljs-string">-03</span><span class="hljs-string">-26</span>T06:52:31Z INF Starting tunnel tunnelID=xxxxxxx<span class="hljs-string">-5</span>b0e-xxxx<span class="hljs-string">-8034</span>-xxxxxxx2022<span class="hljs-string">-03</span><span class="hljs-string">-26</span>T06:52:31Z INF Version 2022.3.4...2022<span class="hljs-string">-03</span><span class="hljs-string">-26</span>T06:52:31Z INF Generated Connector ID: 624aa020-a90a<span class="hljs-string">-4</span>bef<span class="hljs-string">-91</span>da<span class="hljs-string">-330</span>c74edb02f2022<span class="hljs-string">-03</span><span class="hljs-string">-26</span>T06:52:31Z INF Initial protocol http22022<span class="hljs-string">-03</span><span class="hljs-string">-26</span>T06:52:31Z INF Starting metrics server on 127.0.0.1:44143/metrics2022<span class="hljs-string">-03</span><span class="hljs-string">-26</span>T06:52:33Z INF Connection 34504363<span class="hljs-string">-646</span>c<span class="hljs-string">-46</span>a2<span class="hljs-string">-973</span>d-bd112943c58f registered connIndex=0 location=KIX2022<span class="hljs-string">-03</span><span class="hljs-string">-26</span>T06:52:34Z INF Connection 7a3ec8f7<span class="hljs-string">-482</span>c<span class="hljs-string">-4</span>fe5<span class="hljs-string">-93</span>c4<span class="hljs-string">-69</span>d1177ca457 registered connIndex=1 location=NRT2022<span class="hljs-string">-03</span><span class="hljs-string">-26</span>T06:52:35Z INF Connection 7d571bdb<span class="hljs-string">-96</span>d2<span class="hljs-string">-49</span>d3-b8bf<span class="hljs-string">-14754</span>aa6cf8b registered connIndex=2 location=KIX2022<span class="hljs-string">-03</span><span class="hljs-string">-26</span>T06:52:36Z INF Connection 473e30ae-e98b<span class="hljs-string">-4</span>da1<span class="hljs-string">-8768</span><span class="hljs-string">-12</span>bf5304c7ab registered connIndex=3 location=NRT</code></pre></div><h2 id="6-其他"><a href="#6-其他" class="headerlink" title="6. 其他"></a>6. 其他</h2><h3 id="体验隧道"><a href="#体验隧道" class="headerlink" title="体验隧道"></a>体验隧道</h3><p>由官方提供测试域名 <code>重新启动体验隧道域名会变</code></p><div class="code-wrapper"><pre><code class="hljs bash">cloudflared tunnel --url localhost:你http服务端口号</code></pre></div><h3 id="运行隧道-有时会失败"><a href="#运行隧道-有时会失败" class="headerlink" title="运行隧道 (有时会失败)"></a><del>运行隧道 (有时会失败)</del></h3><div class="code-wrapper"><pre><code class="hljs bash">cloudflared tunnel run --url localhost:你http服务端口号 隧道名字</code></pre></div><h3 id="删除隧道"><a href="#删除隧道" class="headerlink" title="删除隧道"></a>删除隧道</h3><div class="code-wrapper"><pre><code class="hljs bash">cloudflared tunnel delete 隧道名</code></pre></div><h3 id="列出隧道"><a href="#列出隧道" class="headerlink" title="列出隧道"></a>列出隧道</h3><div class="code-wrapper"><pre><code class="hljs bash">cloudflared tunnel list</code></pre></div><h2 id="配置为系统服务"><a href="#配置为系统服务" class="headerlink" title="配置为系统服务"></a>配置为系统服务</h2><p>执行</p><div class="code-wrapper"><pre><code class="hljs go">cloudflared service install</code></pre></div><p>cloudflared 会新建 systemd 文件</p><p>开启服务</p><div class="code-wrapper"><pre><code class="hljs go">ystemctl start cloudflared.service</code></pre></div><h2 id="7-卸载隧道"><a href="#7-卸载隧道" class="headerlink" title="7. 卸载隧道"></a>7. 卸载隧道</h2><div class="code-wrapper"><pre><code class="hljs bash">sudo cloudflared service uninstall</code></pre></div><p>记得删除<code>cloudflared.service</code>残留文件</p><div class="code-wrapper"><pre><code class="hljs bash">sudo <span class="hljs-built_in">rm</span> /etc/systemd/system/cloudflared.service</code></pre></div><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>理论上不限制流量，比之前的worker法好一点，适合没有独立公网v4的nat，内网机器，省去自己内网穿透，端口转发的麻烦</p><p>另外，毕竟是穿透到国外，CF什么速度懂得都懂，跨境速度就挺差，国内穿透还是可以考虑阿里的钉钉免费内网穿透，走的阿里BGP（海外主电信副联通）</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/create-tunnel">https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/create-tunnel</a></p><p><a href="https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/trycloudflare">https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/trycloudflare</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>反向代理</tag>
      
      <tag>内网穿透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用Cloudflare Tunnel为Uptime Kuma设置反向代理</title>
    <link href="/posts/380f614a.html"/>
    <url>/posts/380f614a.html</url>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>这是迄今为止我见过的最简单的反向代理！</p><p>她就是<code>Cloudflare Tunnel</code>  </p><p>不用安装Nginx 或 Apache</p><p>安装好<code>Uptime Kuma</code>( docker 安装)，您只需在“设置”中提供 <code>Cloudflare Tunnel</code> 令牌，即可在 Internet 上浏览 Uptime Kuma。</p><p><img src="https://r2.leshans.eu.org/2023/08/14cffc608eff11aff6879f4c46a46f54.webp" alt="Pasted image 20230820140831"></p><p>优点：</p><ul><li>免费</li><li>完整的 GUI，零配置文件</li><li>您可以将 Uptime Kuma 置于防火墙后面</li><li>无需暴露您的真实IP</li><li>公开 Docker 端口是可选的</li><li>不需要 Nginx、Caddy 或 Traefik 等反向代理软件</li><li>零配置 SSL</li><li>免费SSL</li></ul><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ul><li>您域名的 DNS 由 Cloudflare 管理。</li><li>对于 Docker，仅 Debian或ubuntu 基础支持。</li><li>对于非 Docker，需要下载并安装<code>cloudflared</code>。<a href="https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/installation/">https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/installation/</a></li><li>对于非 Docker Windows 用户，您可以在其 Github 版本上下载 msi 安装程序：<a href="https://github.com/cloudflare/cloudflared/releases/latest">https://github.com/cloudflare/cloudflared/releases/latest</a></li></ul><h2 id="四个步骤"><a href="#四个步骤" class="headerlink" title="四个步骤"></a>四个步骤</h2><ol><li><a href="https://dash.teams.cloudflare.com/">在Cloudflare Zero Trust</a>上创建隧道。</li><li>获取您的隧道令牌并将其设置到您的 Uptime Kuma 实例中。</li><li>将域名映射到<a href="http://localhost:3001/">http://localhost:3001</a>。</li><li>启动。</li></ol><h2 id="开始吧"><a href="#开始吧" class="headerlink" title="开始吧"></a>开始吧</h2><p>步骤其实非常简单。然而，由于这个概念对任何人来说都是相当新的，所以详细地写出来可能会更好。</p><p>但相信我，一旦您学会了，您将再次记住如何在没有本指南的情况下进行配置！而对于 Nginx 或 Traefik，我永远不记得如何在不谷歌搜索的情况下进行配置。</p><ol><li><p>前往<a href="https://dash.teams.cloudflare.com/">Cloudflare Zero Trust</a>。</p></li><li><p><code>Access</code>&gt;&gt; <code>Tunnels</code>_<code>Create Tunnel</code></p><p> <img src="https://r2.leshans.eu.org/2023/08/d042170a98d589ed54049eebd00086dc.webp"></p></li><li><p>键入<code>Tunnel name</code>诸如<code>uptime-kuma</code>并保存隧道。</p></li><li><p>单击令牌进行复制。</p><p> <img src="https://r2.leshans.eu.org/2023/08/7b81d0bde06c988536c8118c7943ec5e.webp"></p></li><li><p>转到您的 Uptime Kuma 实例。</p><p> <img src="https://r2.leshans.eu.org/2023/08/5243e955b868eca72505829a116ef9d9.webp"></p></li><li><p><code>Settings</code>&gt;<code>Reverse Proxy</code></p></li><li><p>将令牌粘贴到<code>Cloudflare Tunnel Token</code>字段中。</p></li><li><p>点击<code>Start cloudflared</code></p></li><li><p>返回到<code>Cloudflare Zero Trust</code>，如果您看到连接器，则单击<code>Next</code></p><p> <img src="https://r2.leshans.eu.org/2023/08/0bf2af2207e9b775d09b821a37cab580.webp"></p></li><li><p>选择您最喜欢的域名并映射到<code>http://localhost:3001</code></p><p><img src="https://r2.leshans.eu.org/2023/08/ceb29fd37fa199fb99abda3965539b51.webp"></p></li><li><p>点击<code>Save</code>并转到您的域名<code>https://&lt;your domain name&gt;</code>并获利！是的，它还会自动为您提供 SSL！</p><p><img src="https://r2.leshans.eu.org/2023/08/3cbf563f8867f0e5bda906d925056bc5.webp"></p></li></ol><h2 id="如何停止"><a href="#如何停止" class="headerlink" title="如何停止"></a>如何停止</h2><ul><li>选项 1.您可以删除 Cloudflare 上的地图。</li><li>选项 2. 您可以在 Uptime Kuma 中单击<code>Stop cloudflared</code>和。<code>Remove Token</code></li></ul><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>或者，您可以通过环境变量设置令牌。cloudflared 将自动启动。</p><p>通过这种方法，您甚至不需要将容器端口暴露给主机。</p><p>UPTIME_KUMA_CLOUDFLARED_TOKEN&#x3D;<code>&lt;your token&gt;</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>Uptime Kuma</tag>
      
      <tag>反向代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PICGO+白嫖Cloudflare R2存储做图床</title>
    <link href="/posts/71da88bf.html"/>
    <url>/posts/71da88bf.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>Cloudflare R2</code>存储允许开发人员存储大量非结构化数据，而无需支付与典型云存储服务相关的昂贵出口带宽费用。Cloudflare R2存储<code>流量不收费</code>，收费的是<strong>存储空间</strong>和<strong>请求次数</strong>。A类操作和B类操作分开收费，<code>上传</code>属于A类操作，<code>下载和访问</code>属于B类操作。</p><table><thead><tr><th></th><th>免费</th><th>付费 - 费率</th></tr></thead><tbody><tr><td>贮存</td><td>10 GB&#x2F;月</td><td>每月 0.015 美元&#x2F;GB</td></tr><tr><td>A 类操作</td><td>每月 100 万个请求</td><td>4.50 美元&#x2F;百万请求</td></tr><tr><td>B 类操作</td><td>每月 1000 万个请求</td><td>0.36 美元&#x2F;百万请求</td></tr></tbody></table><p>也就是说，可以<code>免费存储10G</code>的文件，每个月可以上传<code>100万次</code>，<code>访问1000万次</code>，假如用作图床，一般是用不到这个量级的。并且可以绑定自定义域名，套用页面规则以后可以设置浏览器缓存，这样可以减少一些请求次数并且可以防止被人刷请求次数导致一晚上过去，房子就不属于自己了。不自定义域名也是可以的，也就是说你甚至不需要拥有域名就可以拥有一个图床。</p><p>存储也是比较便宜的，超出10G以后，1G文件基本上每个月只要1毛人民币。当然和B2那种5刀一个月1T是没法比的，用作图床的话还有种阿里云国际的OSS的40G年付包也是比较有性价比，这里扯远了。下面详细说一下怎么白嫖R2做图床。</p><p>本文的图就放在R2上，只不过域名是自定义的。</p><h2 id="设置R2"><a href="#设置R2" class="headerlink" title="设置R2"></a>设置R2</h2><h3 id="开通R2"><a href="#开通R2" class="headerlink" title="开通R2"></a>开通R2</h3><p>首先当然是拥有一个<code>Cloudflare</code>账号，并且点击右上角的语言设置中文。</p><p>第一步当然是开通R2，<code>侧边栏找到R2</code>然后点击开通。这里可以绑定支持外币支付的卡，或者直接绑定<code>paypal</code>，中国区的paypal也是可以的。</p><p><img src="https://r2.leshans.eu.org/2023/08/0d53d7aa084e049bf725df031e52b5ba.webp"></p><p>第二步是创建存储桶，可以自己选取位置，<code>不建议无脑选亚太地区</code>，亚太地区虽然近但是国际访问速度受限，我这里选择<code>北美西部</code>。</p><p><img src="https://r2.leshans.eu.org/2023/08/548bc9e55db5ac3a49113996ab79196c.webp"></p><p>第三步是创建完存储桶后，点进就到<code>存储桶</code>的设置，然后找到【R2.dev 子域】，将其开启，下图是我已经开启的状态。</p><p><img src="https://r2.leshans.eu.org/2023/08/050f7957c03da2dbba3f384a11057386.webp"></p><p>大家可以认为你的存储同并没有域名绑定，开启这个子域名以后，cf就分配了一个域名给你的存储桶，如果你绑定了<code>自定义域名</code>到存储桶的话，可以把这个开关给关了，可以少一些问题。如果你没有购买域名没法自定义域名，一直用cf给你的这个域名也是可以的。自定义域名的好处是不限速，而且可以享受cloudflare上面的一系列缓存和自定义限速等设置，防止被刷访问次数。</p><p>然后，你就可以通过cf网站上传器上传图片到<code>R2</code>了，便可正常访问。</p><h2 id="开通API"><a href="#开通API" class="headerlink" title="开通API"></a>开通API</h2><p>回到R2的概述界面，点击右上角的 <code>管理 R2 API 令牌</code>，然后点击右上角的<code>创建api令牌</code>，如果要使用<code>picgo</code>进行图片的上传，请记得在权限选项把对象读和写打开，在ttl选项可以设置api令牌的有效期，这里可以<code>选择永久</code>。大概如下图所示。</p><p><img src="https://r2.leshans.eu.org/2023/08/eefdb595e0f458b63b9f0c9bce9271e6.webp"></p><p>创建完成令牌以后请把 <strong>访问密钥 ID</strong> 和 <strong>机密访问密钥</strong> 收藏好，只会显示这一次，以后用的时候就找不到了，记下来以后还能用到。当然，如果没记住的话，以后再创建一个api令牌也是可以的。</p><p><img src="https://r2.leshans.eu.org/2023/08/790af159211e85a796585ce38a1eeb69.webp"></p><h2 id="使用picgo进行上传操作"><a href="#使用picgo进行上传操作" class="headerlink" title="使用picgo进行上传操作"></a>使用picgo进行上传操作</h2><p>PICGO项目地址：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></p><p>安装好PicGo后，点击【插件设置】搜索【S3】，安装下图插件。</p><p><img src="https://r2.leshans.eu.org/2023/08/54061e7c9c84f11d90526d6538f8b584.webp"></p><p>安装完成后，点击左侧-侧边栏的图床设置，里面多了一个AMAZON S3这个选项，进去设置。</p><p><img src="https://r2.leshans.eu.org/2023/08/29e0a651a09dc9fa3412da33a4f5330e.webp"></p><p>应用密钥ID填写我们刚刚复制的<strong>访问密钥 ID</strong></p><p>应用密钥填写我们刚刚复制的<strong>机密访问密钥</strong></p><p>桶命就写我们存储桶的名字，这里是duangks</p><p>文件路径自己设置，默认也是可以的</p><p>地区可以不用填写，默认跳转就可以</p><p>自定义节点需要填写一下，在R2中点击存储桶，到存储桶的管理界面，点击设置，里面的S3 api就是需要复制的。例如</p><p><img src="https://r2.leshans.eu.org/2023/08/e544d2319a8fb8eb7758b3cee4f3f8d3.webp"></p><p>自定义域名需要注意一下，复制咱们开通的R2.dev 子域，然后在后面加上&#x2F;你的桶名。</p><p>例如，我开通的R2.dev 子域是 <a href="https://pu1-082231df54234f2b90d1bd5432310a4b.r2.dev/">https://pu1-082231df54234f2b90d1bd5432310a4b.r2.dev</a></p><p>需要在软件里面填写的自定义域名就是 <a href="https://pu1-082231df54234f2b90d1bd5432310a4b.r2.dev/duangks">https://pu1-082231df54234f2b90d1bd5432310a4b.r2.dev/duangks</a></p><p>然后就可以愉快的使用picgo了。</p><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><p>假如你在cf里面托管有域名的话，可以直接在R2存储桶的设置界面设置自定义域名，填写一个二级域名以后不需要自己去设置dns，cf就会自动帮你映射好。</p><p>然后就可以顺路把R2.dev 子域给关了。</p><p>记得到时候在picgo里面自定义域名也需要加后缀，就像这样 https:&#x2F;&#x2F;你的自定义域名&#x2F;你的存储桶名</p><p>最后，推荐大家使用以下picgo的二开项目PICLIST，直接去github搜就行，相比picgo多了一个自带的图片管理功能，可以对图片进行有损&#x2F;无损压缩和变换格式，以及添加水印。还多了个管理功能，可以通过设置以后直接管理你上传的文件。</p>]]></content>
    
    
    
    <tags>
      
      <tag>picgo</tag>
      
      <tag>Cloudflare</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub Actions自动构建Hugo并同步到腾讯COS</title>
    <link href="/posts/4671a739.html"/>
    <url>/posts/4671a739.html</url>
    
    <content type="html"><![CDATA[<p>借助强大的 <code>Github Action</code>，我们能够轻松地实现博客的自动化构建与部署，让整个流程更加优雅高效。在这个过程中，我们选用了 <code>Hugo</code> 这一优秀的工具，它与 hexo 一样，都是出色的静态博客生成器。</p><p>考虑国内网络环境，我们选择了<code>腾讯云COS</code>来部署博客，以提供更快速、稳定的访问体验。这个策略让博客的美感与技术有机融合，为读者呈现出精致的阅读空间。</p><h3 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h3><ol><li>到腾讯云–<code>访问管理</code>—<code>用户列表</code>，新建一个账户</li></ol><p> 地址: <a href="https://console.cloud.tencent.com/cam">https://console.cloud.tencent.com/cam</a></p><ol start="2"><li><p>访问方式改为”编程访问”，用户权限添加”<code>QcloudCOSDataFullControl</code>、 <code>QcloudCDNFullAccess</code>“。完成之后将生成的 SecretId、SecretKey 复制保存。</p></li><li><p>到 Github 新建一个仓库(私有公共都行)，把自己 hugo 生成的站点源文件(不是 public 下文件)同步过去。</p></li><li><p>在刚创建的仓库——<code>Settings</code>——<code>Secrets and variables</code>——<code>Actions</code>，</p></li><li><p>新建 <code>SecretId</code>、<code>SecretKey</code>、<code>Bucket</code>、 <code>Region</code> 四个密钥。其中 SecretId、SecretKey 为上面复制保存的，Bucket(存储桶名称)、 Region(所属地域 如:<code>ap-guangzhou</code> )在 COS 中存储桶列表中获取。</p></li></ol><p><img src="https://r2.leshans.eu.org/2023/08/8fc672e50e662e5d15089fc9e2c1033d.webp"></p><h2 id="自动构建"><a href="#自动构建" class="headerlink" title="自动构建"></a>自动构建</h2><p>在博客仓库根目录下新建 <code>.github/workflows</code> 文件夹，新建一个 <code>deploy.yml</code>（文件名随意），作用：借助 <code>Github Action</code> 实现自动部署</p><div class="code-wrapper"><pre><code class="hljs makefile"><span class="hljs-section">注意: 第5 38 40 行</span>第5行触发的分支是main还是master, <span class="hljs-section">第38行改为你的用户名和仓库名,比如: 111/222</span>第40行是Github Pages 所在分支最后两行是同步根目录还是public目录</code></pre></div><h3 id="完整脚本"><a href="#完整脚本" class="headerlink" title="完整脚本"></a>完整脚本</h3><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Auto</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">hugo</span><span class="hljs-attr">on:</span>  <span class="hljs-attr">push:</span>    <span class="hljs-attr">branches:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span> <span class="hljs-comment"># 更新触发的分支</span><span class="hljs-attr">jobs:</span>  <span class="hljs-attr">build-deploy:</span>    <span class="hljs-comment">#  runs-on: ubuntu-latest</span>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-20.04</span>    <span class="hljs-attr">steps:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Check</span> <span class="hljs-string">out</span> <span class="hljs-string">repository</span> <span class="hljs-string">code</span>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span>        <span class="hljs-attr">with:</span>           <span class="hljs-attr">submodules:</span> <span class="hljs-string">recursive</span> <span class="hljs-comment"># Fetch Hugo themes (true OR recursive)</span>           <span class="hljs-attr">fetch-depth:</span> <span class="hljs-number">0</span> <span class="hljs-comment"># Fetch all history for .GitInfo and .Lastmod</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">hugo</span>        <span class="hljs-attr">uses:</span> <span class="hljs-string">peaceiris/actions-hugo@v2</span>        <span class="hljs-attr">with:</span>          <span class="hljs-comment">#  hugo-version: &quot;latest&quot; # 可以修改为你使用的 Hugo 版本</span>          <span class="hljs-attr">hugo-version:</span> <span class="hljs-string">&quot;0.113.0&quot;</span>          <span class="hljs-attr">extended:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 设置是否需要 extended 版本</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Cache</span> <span class="hljs-string">resources</span> <span class="hljs-comment"># 缓存 resource 文件加快生成速度</span>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache@v3</span>        <span class="hljs-attr">with:</span>         <span class="hljs-attr">path:</span> <span class="hljs-string">resources</span>         <span class="hljs-comment"># 检查照片文件变化</span>         <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.os</span> <span class="hljs-string">&#125;&#125;-hugocache-$&#123;&#123;</span> <span class="hljs-string">hashFiles(&#x27;content/**/*&#x27;)</span> <span class="hljs-string">&#125;&#125;</span>         <span class="hljs-attr">restore-keys:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.os</span> <span class="hljs-string">&#125;&#125;-hugocache-</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">Hugo</span> <span class="hljs-string">static</span> <span class="hljs-string">files</span> <span class="hljs-comment"># 部署静态资源</span>        <span class="hljs-attr">run:</span> <span class="hljs-string">hugo</span> <span class="hljs-string">--gc</span> <span class="hljs-string">--minify</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">to</span> <span class="hljs-string">Github</span> <span class="hljs-string">Pages</span>  <span class="hljs-comment"># 部署到Github Pages页面</span>        <span class="hljs-attr">uses:</span> <span class="hljs-string">peaceiris/actions-gh-pages@v3</span>        <span class="hljs-attr">with:</span>          <span class="hljs-attr">personal_token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.PERSONAL_TOKEN</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-comment"># 两个仓库请使用 deploy_key</span>          <span class="hljs-attr">external_repository:</span> <span class="hljs-number">111</span><span class="hljs-string">/222</span>  <span class="hljs-comment"># 如果在同一个仓库请注释</span>          <span class="hljs-attr">publish_dir:</span> <span class="hljs-string">./public</span> <span class="hljs-comment"># hugo 生成到 public 作为跟目录</span>          <span class="hljs-attr">publish_branch:</span> <span class="hljs-string">main</span> <span class="hljs-comment"># Github Pages 所在分支</span>          <span class="hljs-attr">commit_message:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.event.head_commit.message</span> <span class="hljs-string">&#125;&#125;</span><span class="hljs-comment"># 上传到腾讯COS存储桶</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Python</span>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-python@v4</span>        <span class="hljs-attr">with:</span>          <span class="hljs-attr">python-version:</span> <span class="hljs-number">3.9</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">coscmd</span> <span class="hljs-string">and</span> <span class="hljs-string">sdk</span>        <span class="hljs-attr">run:</span> <span class="hljs-string">sudo</span> <span class="hljs-string">pip</span> <span class="hljs-string">install</span> <span class="hljs-string">coscmd</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Configure</span> <span class="hljs-string">coscmd</span>        <span class="hljs-attr">env:</span>          <span class="hljs-attr">SECRET_ID:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SecretId</span> <span class="hljs-string">&#125;&#125;</span>          <span class="hljs-attr">SECRET_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SecretKey</span> <span class="hljs-string">&#125;&#125;</span>          <span class="hljs-attr">BUCKET:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.Bucket</span> <span class="hljs-string">&#125;&#125;</span>          <span class="hljs-attr">REGION:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.Region</span> <span class="hljs-string">&#125;&#125;</span>        <span class="hljs-attr">run:</span> <span class="hljs-string">coscmd</span> <span class="hljs-string">config</span> <span class="hljs-string">-a</span> <span class="hljs-string">$SECRET_ID</span> <span class="hljs-string">-s</span> <span class="hljs-string">$SECRET_KEY</span> <span class="hljs-string">-b</span> <span class="hljs-string">$BUCKET</span> <span class="hljs-string">-r</span> <span class="hljs-string">$REGION</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Upload</span> <span class="hljs-string">to</span> <span class="hljs-string">COS</span>        <span class="hljs-attr">run:</span> <span class="hljs-string">coscmd</span> <span class="hljs-string">upload</span> <span class="hljs-string">-rfs</span> <span class="hljs-string">--delete</span> <span class="hljs-string">./</span> <span class="hljs-string">/</span>        <span class="hljs-comment"># run: coscmd upload -rfs --delete public/ /</span></code></pre></div><h3 id="其他代码"><a href="#其他代码" class="headerlink" title="其他代码"></a>其他代码</h3><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># 上传到腾讯COS存储桶</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">coscmd</span>        <span class="hljs-attr">run:</span> <span class="hljs-string">sudo</span> <span class="hljs-string">pip</span> <span class="hljs-string">install</span> <span class="hljs-string">coscmd</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Configure</span> <span class="hljs-string">coscmd</span>        <span class="hljs-attr">env:</span>          <span class="hljs-attr">COS_SECRET_ID:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.COS_SECRET_ID</span> <span class="hljs-string">&#125;&#125;</span>          <span class="hljs-attr">COS_SECRET_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.COS_SECRET_KEY</span> <span class="hljs-string">&#125;&#125;</span>          <span class="hljs-attr">COS_BUCKET_NAME:</span> <span class="hljs-string">jpcos-1253486782</span> <span class="hljs-comment"># Change for yourself</span>          <span class="hljs-attr">COS_BUCKET_REGION:</span> <span class="hljs-string">ap-tokyo</span> <span class="hljs-comment"># Change for yourself</span>        <span class="hljs-attr">run:</span> <span class="hljs-string">coscmd</span> <span class="hljs-string">config</span> <span class="hljs-string">-a</span> <span class="hljs-string">$COS_SECRET_ID</span> <span class="hljs-string">-s</span> <span class="hljs-string">$COS_SECRET_KEY</span> <span class="hljs-string">-b</span> <span class="hljs-string">$COS_BUCKET_NAME</span> <span class="hljs-string">-r</span> <span class="hljs-string">$COS_BUCKET_REGION</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">to</span> <span class="hljs-string">COS</span> <span class="hljs-string">Bucket</span>        <span class="hljs-attr">run:</span> <span class="hljs-string">coscmd</span> <span class="hljs-string">upload</span> <span class="hljs-string">-rfs</span> <span class="hljs-string">--delete</span> <span class="hljs-string">./</span> <span class="hljs-string">/</span>       <span class="hljs-comment"># run: coscmd upload -rfs --delete public/ /</span></code></pre></div><h3 id="同步到Backblaze-B2"><a href="#同步到Backblaze-B2" class="headerlink" title="同步到Backblaze B2"></a>同步到Backblaze B2</h3><p>地址:<a href="https://www.backblaze.com/cloud-storage">https://www.backblaze.com/cloud-storage</a> </p><p><code>10GB</code> 免费存储空间。</p><p><code>Backblaze B2</code>每月免费 10G 存储及每天 1G 的流量，如果套壳 Cloudflare，流量个人使用等于不要钱。折腾的乐趣，就在于不停的折腾～</p><p>Backblaze B2 同步，<code>B2_APPKEY_ID</code> <code>B2_APPKEY</code>在<a href="https://secure.backblaze.com/app_keys.htm">Application Keys</a>菜单下生成就行。要特别注意的是<code>B2_BUCKET</code>写法，完整的写法是<code>b2://xxx</code>，其中<code>xxx</code>为存储桶名称。</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># 同步到Backblaze B2 </span><span class="hljs-attr">name:</span> <span class="hljs-string">Sync</span> <span class="hljs-string">B2</span> <span class="hljs-string">Bucket</span><span class="hljs-attr">on:</span> <span class="hljs-string">push</span><span class="hljs-attr">jobs:</span>  <span class="hljs-attr">deploy:</span>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>    <span class="hljs-attr">steps:</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@master</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">jakejarvis/backblaze-b2-action@master</span>      <span class="hljs-attr">env:</span>        <span class="hljs-attr">SOURCE_DIR:</span> <span class="hljs-string">&#x27;./&#x27;</span>        <span class="hljs-attr">B2_BUCKET:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.B2_BUCKET</span> <span class="hljs-string">&#125;&#125;</span>        <span class="hljs-attr">B2_APPKEY_ID:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.B2_APPKEY_ID</span> <span class="hljs-string">&#125;&#125;</span>        <span class="hljs-attr">B2_APPKEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.B2_APPKEY</span> <span class="hljs-string">&#125;&#125;</span></code></pre></div><h3 id="所需的环境变量"><a href="#所需的环境变量" class="headerlink" title="所需的环境变量"></a>所需的环境变量</h3><p><code>SOURCE_DIR</code>您想要同步&#x2F;上传到 B2 的本地目录。例如，<code>./public</code></p><p><code>B2_BUCKET</code>您要同步到的存储桶的名称。例如，<code>my_files</code></p><p><code>B2_APPKEY_ID</code>您的 Backblaze 应用程序密钥 ID。<a href="https://secure.backblaze.com/app_keys.htm">在这里生成它。</a></p><p><code>B2_APPKEY</code>您的 Backblaze 应用程序密钥 — 又名“秘密”密钥。<a href="https://secure.backblaze.com/app_keys.htm">在这里生成它。</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>腾讯COS</tag>
      
      <tag>GitHub Actions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用cosfs挂载腾讯云COS到VPS服务器上</title>
    <link href="/posts/39d84278.html"/>
    <url>/posts/39d84278.html</url>
    
    <content type="html"><![CDATA[<h2 id="事前准备"><a href="#事前准备" class="headerlink" title="事前准备"></a>事前准备</h2><ol><li><p>准备好用于挂载的Bucket，配置好权限  </p></li><li><p>获得可以用于挂载Bucket，accesskey和secret</p></li><li><p>本文使用的是Ubuntu 20.04</p></li></ol><p>腾讯官方Cosfs的地址<br><a href="https://github.com/tencentyun/cosfs/">https://github.com/tencentyun/cosfs/</a></p><h3 id="1-下载cosfs的安装包"><a href="#1-下载cosfs的安装包" class="headerlink" title="1.下载cosfs的安装包"></a>1.下载cosfs的安装包</h3><div class="code-wrapper"><pre><code class="hljs bash">wget https://github.com/tencentyun/cosfs/releases/download/v1.0.21/cosfs_1.0.21-ubuntu20.04_amd64.deb</code></pre></div><h3 id="2-安装软件包"><a href="#2-安装软件包" class="headerlink" title="2.安装软件包"></a>2.安装软件包</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo dpkg -i cosfs_1.0.21-ubuntu20.04_amd64.deb</code></pre></div><p>3.如果安装过程中遇到依赖项错误，请使用以下命令修复它们</p><div class="code-wrapper"><pre><code class="hljs bash">sudo apt-get install -f</code></pre></div><h3 id="3-配置访问"><a href="#3-配置访问" class="headerlink" title="3.配置访问"></a>3.配置访问</h3><p>将Bucket名称以及具有此Bucket访问权限的<code>AccessKeyId</code>&#x2F;<code>AccessKeySecret</code></p><p>信息存放在&#x2F;etc&#x2F;passwd-cosfs文件中。注意这个文件的权限必须正确设置，建议设为640。</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> my-bucket:key-id:key-secret &gt; /etc/passwd-cosfs<span class="hljs-built_in">chmod</span> 640 /etc/passwd-cosfs</code></pre></div><ul><li><code>my-bucket</code>: 存储桶名称</li><li><code>key-id</code>: AccessKeyId</li><li><code>key-secret</code>: AccessKeySecret</li></ul><h3 id="4-将Bucket挂载到指定目录"><a href="#4-将Bucket挂载到指定目录" class="headerlink" title="4.将Bucket挂载到指定目录"></a>4.将Bucket挂载到指定目录</h3><div class="code-wrapper"><pre><code class="hljs arduino">cosfs my-bucket /home/cos -ourl=http:<span class="hljs-comment">//cos.ap-guangzhou.myqcloud.com -oallow_other</span></code></pre></div><ul><li>my-bucket:存储桶名称</li><li>&#x2F;home&#x2F;cos为你的服务器上的路径</li><li><a href="http://cos.ap-guangzhou.myqcloud.com/">http://cos.ap-guangzhou.myqcloud.com</a> 为所属地域</li></ul><h3 id="5-卸载已挂载的磁盘"><a href="#5-卸载已挂载的磁盘" class="headerlink" title="5.卸载已挂载的磁盘"></a>5.卸载已挂载的磁盘</h3><div class="code-wrapper"><pre><code class="hljs bash">fusermount -u /home/cos</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>腾讯云cos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>发卡网轻松装！独角数卡1分钟安装攻略</title>
    <link href="/posts/c9ca1864.html"/>
    <url>/posts/c9ca1864.html</url>
    
    <content type="html"><![CDATA[<p>独角数卡是一款精巧的卡密销售系统，具备强大功能。</p><p>您可按照作者提供的文档，依赖 <code>mysql</code> 和 <code>redis</code> 进行顺利安装。</p><p>或者，您也可以采用本文的<code>Docker镜像</code>，比官方推荐更优。</p><p>这个镜像集成了所有组件，一分钟内即可搭建完毕。使您迅速体验到这一卓越系统的便捷和高效。</p><p>项目地址: <a href="https://github.com/assimon/dujiaoka">https://github.com/assimon/dujiaoka</a></p><h2 id="步骤-1-安装-docker"><a href="#步骤-1-安装-docker" class="headerlink" title="步骤 1 安装 docker"></a>步骤 1 安装 docker</h2><div class="code-wrapper"><pre><code class="hljs bash">curl -fsSL https://get.docker.com | shcurl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/latest/download/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose<span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose</code></pre></div><h2 id="步骤2-安装部署独角数卡"><a href="#步骤2-安装部署独角数卡" class="headerlink" title="步骤2 安装部署独角数卡"></a>步骤2 安装部署独角数卡</h2><p>事先解析好你的域名, 指向你VPS的IP地址</p><div class="code-wrapper"><pre><code class="hljs bash">bash &lt;(curl -L -s https://raw.githubusercontent.com/woniu336/open_shell/main/dujiao.sh)</code></pre></div><ol><li>提示输入域名: 输入解析好的域名</li><li>店铺名字: 随意</li><li>开通Https[Y&#x2F;N]N 选择N</li></ol><p>安装好之后,终端底部会显示一些安装的信息</p><h2 id="步骤3-网页安装-重点"><a href="#步骤3-网页安装-重点" class="headerlink" title="步骤3 网页安装 重点"></a>步骤3 网页安装 重点</h2><p><code>注意端口号</code>是: 3080</p><p>打开域名:3080 ,例如 <a href="http://baidu.com:3080/">http://baidu.com:3080</a></p><p>后面可以使用<code>反向代理</code>方式去掉3080端口</p><p>访问域名开始安装：</p><ul><li>将<code>mysql</code>的地址改为<code>db</code></li><li>将<code>mysql</code>的用户名改为<code>dujiaoka</code></li><li>将<code>mysql</code>密码改为终端显示的密码</li><li>将<code>redis</code>的地址改为<code>redis</code></li><li>填写网站名称</li><li>网站 url 填写完整域名地址，例如<code>http://shop.ioiox.com</code></li></ul><p>点击安装，并成功安装，登录后台:</p><p>在域名后面加上 <code>/admin</code>，账户密码都是<code>admin</code> 就可以正常登录后台了！</p><p>记得改一下用户名和密码！</p><h2 id="关于https的问题"><a href="#关于https的问题" class="headerlink" title="关于https的问题"></a>关于https的问题</h2><p>后台登录出现0err或者其他登录异常问题，大概率是开启了https而后台没有开启，把下面的false改为true即可</p><p>修改配置文件:</p><div class="code-wrapper"><pre><code class="hljs bash">vim /root/dujiao/env.conf</code></pre></div><p>把 <code>ADMIN_HTTPS=false</code> 改成 <code>ADMIN_HTTPS=true</code></p><p><code>APP_URL</code> 域名也改一下(https)</p><p>重启docker</p><div class="code-wrapper"><pre><code class="hljs bash">systemctl restart docker</code></pre></div><p>设置docker 开机自启</p><div class="code-wrapper"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> docker</code></pre></div><p>⚠️正式上线后一定要将env.conf配置里面的<code>APP_DEBUG</code>设置为<code>false</code>⚠️</p>]]></content>
    
    
    
    <tags>
      
      <tag>发卡</tag>
      
      <tag>独角数卡</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker搭建Gogs一个轻量 Git 服务端</title>
    <link href="/posts/a22fcd51.html"/>
    <url>/posts/a22fcd51.html</url>
    
    <content type="html"><![CDATA[<h2 id="为何选择-Gogs-？"><a href="#为何选择-Gogs-？" class="headerlink" title="为何选择 Gogs ？"></a>为何选择 Gogs ？</h2><p>我选择了 <a href="https://gogs.io/">Gogs</a> 来讲解，主要是出于以下几个原因：</p><ol><li>Gogs 是一个轻量化的 Git 服务，对系统占用较小。</li><li>Gogs 的功能够用。</li><li>Gogs 的安装流程简便。</li></ol><p>其中第一点最重要，因为 Gitlab 对系统配置的要求比较高，单是内存这一项就要求大于 4 GB，如果是 2 GB 内存则会直接无法运行，这个要求已经可以淘汰掉一些入门级服务器了。而 Gogs 在 NAS、树莓派、入门级服务器上都可以无压力运行，长期运行也不会影响其他服务。</p><p>而且我们介绍的场景也不是多人开发协作，只是个人同步笔记用，不需要过多的开发相关功能，有最基本的 Git 服务和一个便于操作的网页就足够了。</p><p>Gogs 的安装过程也比较简单，官方的 Docker 版本基本做到了开箱即用，连数据库都不需要额外配置，有个文件夹存放数据就可以。</p><h2 id="如何在图形界面中安装-Docker-版-Gogs"><a href="#如何在图形界面中安装-Docker-版-Gogs" class="headerlink" title="如何在图形界面中安装 Docker 版 Gogs"></a>如何在图形界面中安装 Docker 版 Gogs</h2><p>我通常建议通过图形化界面来管理 Docker，这样能够直观看到容器的运行状态，像启动、停止、修改配置这样的操作，都能以最简单的方式完成。</p><p>所以先来讲讲在图像界面下如何安装 Docker 版本的 Gogs。</p><h3 id="了解-Docker-的关键配置"><a href="#了解-Docker-的关键配置" class="headerlink" title="了解 Docker 的关键配置"></a>了解 Docker 的关键配置</h3><p>我们借助 Gogs 顺便了解一下通过 Docker 跑一个服务需要做什么配置。</p><p>首先我们找到 Gogs 在 <code>hub.docker.com</code> 中的包：<a href="https://hub.docker.com/r/gogs/gogs/">Gogs - Docker Hub</a> 。</p><p>根据它下方的文档提示可以得知，Gogs 的必要配置很少，我们根据它的官方配置可以得知，它需要这下面两行核心代码就可以完成部署。</p><div class="code-wrapper"><pre><code class="hljs bash">docker pull gogs/gogs docker run --name=gogs -p 10022:22 -p 10880:3000 -v /var/gogs:/data gogs/gogs</code></pre></div><h2 id="如何使用-Gogs"><a href="#如何使用-Gogs" class="headerlink" title="如何使用 Gogs"></a>如何使用 Gogs</h2><p>使用 Gogs 创建仓库和 Github 类似，注册账户，创建仓库……图形化界面总是容易让人理解。这里就不再赘述了。</p><p>不过有一点需要注意。在完成仓库创建后，我们需要通过 git clone 把仓库下载到本地。往常在 Github 中 git clone 仓库后再尝试 push 时会提示用账号密码登录，然后由服务器判别你是否有这个仓库的更多权限，允许你做进一步的操作。</p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>gogs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手把手教你：Git分支创建与代码提交的细致流程</title>
    <link href="/posts/fb9de0e2.html"/>
    <url>/posts/fb9de0e2.html</url>
    
    <content type="html"><![CDATA[<p>其实最基本的流程就是新建分支，在这个分支上改动代码，再提交上去，跟master分支合并。</p><h2 id="1-新建分支"><a href="#1-新建分支" class="headerlink" title="1. 新建分支"></a>1. 新建分支</h2><p>首先，在你新建分支之前，你应该在master分支，并且要保证你当前的是最新代码，要不然就是找死，最后提交代码就会出问题。</p><ol><li><strong><code>git pull origin master</code></strong> 在master分支下，保证当前代码与线上同步</li><li><strong><code>git branch &lt;分支名&gt;</code></strong> ，正儿八经的新建分支。</li><li><strong><code>git checkout &lt;分支名&gt;</code></strong> ，切换 到新建的分支上，再进行下一步。</li><li><strong><code>git push origin &lt;分支名&gt;</code></strong> ,把本地分支推到远端，让远端也有一个你的分支</li></ol><p>新建分支并切换到该分支：<code>git checkout -b &lt;分支名&gt;</code></p><h2 id="2-提交代码"><a href="#2-提交代码" class="headerlink" title="2. 提交代码"></a>2. 提交代码</h2><p>在新建的分支上写完代码之后，就可以提交代码了。此时应该在你新建的分支上</p><ol><li><strong><code>git status</code></strong> ,查看自己写了哪些东西。</li><li><strong><code>git add .</code></strong></li><li><strong><code>git commit -m</code></strong> ‘本次提交的描述’</li><li><strong><code>git push origin &lt;分支名&gt;</code></strong> ,push是从本地向远端推代码</li><li>执行完上一步，有可能报错，此时淡定，不认识英语的话在线翻译是干嘛的，大多数时候提示你，本地落后于远端，（意思就是远端比本地多了一些代码，为什么会出现这种情况呢，肯定是你跟别人共用一个分支，他提交了一段代码到远端，所以导致你的本地落后于远端）既然落后了，那就把他更新成最新的呗，<br> <strong><code>git pull --rebase origin 远程分支名</code></strong></li><li>执行完之后，你的代码就跟远端又一样了。并且你的修改仍然在，此时再提交你的代码<br>   <strong><code>git push origin &lt;分支名&gt;</code></strong></li></ol><h2 id="3-rebase代码"><a href="#3-rebase代码" class="headerlink" title="3.rebase代码"></a>3.rebase代码</h2><p>提交完代码之后需要让测试人员进行测试，若测试没问题，就可以rebase代码，然后上线了。（&#x3D;&#x3D;这一步是保证你要上线的代码是基于最新的master&#x3D;&#x3D;）</p><blockquote><ol><li><strong><code>git pull —rebase origin &lt;分支名&gt;</code></strong></li><li><strong><code>git pull —rebase origin master</code></strong><br> 执行这两步的时候都有可能发生冲突，此时你要做的就是解决冲突，再继续提交。</li></ol></blockquote><blockquote><ol><li>解决完冲突之后，**<code>git add .</code>**</li><li><strong><code>git rebase —continue</code></strong></li><li>若此时还有冲突，继续解决，解决完继续执行1，2步。</li><li>若此时没有报错，**<code>git push origin &lt;分支名&gt;</code><strong>；（这一步必须在</strong>git pull —rebase origin master**成功之后执行）</li><li>此时若显示，当前分支落后于master分支，则需要强推，****git push -f origin &lt;分支名&gt;****，若不报错，则rebase成功。</li></ol></blockquote><h5 id="以上就是一个完整的流程，以下是一些常用的git操作"><a href="#以上就是一个完整的流程，以下是一些常用的git操作" class="headerlink" title="以上就是一个完整的流程，以下是一些常用的git操作"></a>以上就是一个完整的流程，以下是一些常用的git操作</h5><h2 id="4-删除分支"><a href="#4-删除分支" class="headerlink" title="4.删除分支"></a>4.删除分支</h2><ol><li><p>删除本地分支 ( 切换到master分支之后再删除 )</p><p> <strong><code>git branch -d &lt;分支名&gt;</code></strong></p></li><li><p>删除远端分支</p><p> <strong><code>git push origin --delete &lt;分支名&gt;</code></strong></p></li></ol><h2 id="3-查看本地有哪些分支"><a href="#3-查看本地有哪些分支" class="headerlink" title="3.查看本地有哪些分支"></a>3.查看本地有哪些分支</h2><p><strong><code>git branch</code></strong></p><h2 id="4-切换分支"><a href="#4-切换分支" class="headerlink" title="4. 切换分支"></a>4. 切换分支</h2><p><strong><code>git checkout &lt;分支名&gt;</code></strong></p><h2 id="5-如何从远程拉一个分支"><a href="#5-如何从远程拉一个分支" class="headerlink" title="5.如何从远程拉一个分支"></a>5.如何从远程拉一个分支</h2><p>当你跟别人共用一个分支的时候（有时候前端会共用一个分支），如果别人新建了一个分支（此时远端应该已经有了你们要用的分支），你要做的就是把远端的分支拉到自己本地。<br><strong><code>git fetch origin &lt;分支名&gt;: &lt;分支名&gt;</code></strong></p><h2 id="6-合并分支"><a href="#6-合并分支" class="headerlink" title="6.合并分支"></a>6.合并分支</h2><p>如果你基于主分支master新建了分支dev，再基于dev分支新建了一个分支test，在test分支开发完成后，需要将test合并到dev分支上。此时，先用<code>git branch</code> 查看自己在哪个分支上，然后<code>git checkout dev</code>(切换到需要合并的分支上)，最后<code>git merge test</code>（在dev分支上执行这句，意思是将test合并到dev分支上）</p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Git实现稳定的Obsidian同步方案</title>
    <link href="/posts/73fd56.html"/>
    <url>/posts/73fd56.html</url>
    
    <content type="html"><![CDATA[<p>关于 Obsidian 同步这件事，似乎总能让人感到头疼。同步方案不是太少，而是太多。多到你难以辨别哪种方案是最合适自己的。而且有不少同步方法是未经验证的，一些想当然的方案其实并不适合 Obsidian。</p><p>这篇文章我想先聊聊 PC 之间的 Obsidian 库同步。也就是不论系统，可以在 Windows、macOS、Linux 之间稳定完成同步的方法：Git 同步方案。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在开始之前，确保你已经安装了Git和Obsidian软件。接下来，我们将一步步进行配置。</p><h3 id="创建Git仓库"><a href="#创建Git仓库" class="headerlink" title="创建Git仓库"></a>创建Git仓库</h3><p>首先，选择一个Git平台作为仓库托管，这里我们以GitHub为例。如果你还没有GitHub账号，请先在<a href="https://github.com/">GitHub官网</a>注册一个账号。</p><ol><li>登录GitHub账号，点击右上角的“+”按钮，选择“New repository”。</li><li>填写仓库名称，选择公开或私有，其他设置保持默认，点击“Create repository”。</li></ol><h3 id="将仓库同步到本地"><a href="#将仓库同步到本地" class="headerlink" title="将仓库同步到本地"></a>将仓库同步到本地</h3><p>你可以使用命令行或图形化工具，这里我们介绍使用GitHub Desktop。</p><ol><li>下载并安装<a href="https://desktop.github.com/">GitHub Desktop</a>。</li><li>打开GitHub Desktop，登录你的GitHub账号。</li><li>点击“File”菜单，选择“Clone repository”。</li><li>选择你刚创建的仓库，选择本地存放位置，点击“Clone”按钮。</li></ol><h3 id="合并Obsidian库和Git仓库"><a href="#合并Obsidian库和Git仓库" class="headerlink" title="合并Obsidian库和Git仓库"></a>合并Obsidian库和Git仓库</h3><ol><li>打开Obsidian软件，找到你想同步的笔记库所在的文件夹。</li><li>将笔记库文件夹（包括隐藏的 .obsidian 文件夹）复制到刚刚克隆的Git仓库文件夹中。</li><li>使用GitHub Desktop提交和推送至远程仓库</li></ol><h3 id="安装Obsidian-Git插件"><a href="#安装Obsidian-Git插件" class="headerlink" title="安装Obsidian Git插件"></a>安装Obsidian Git插件</h3><ol><li>在Obsidian中打开刚刚合并的仓库文件夹。</li><li>点击左侧导航栏的插件图标。</li><li>在插件搜索框中输入“Obsidian Git”并安装。</li></ol><h2 id="安装-Obsidian-Git-插件进行后续的同步"><a href="#安装-Obsidian-Git-插件进行后续的同步" class="headerlink" title="安装 Obsidian Git 插件进行后续的同步"></a>安装 Obsidian Git 插件进行后续的同步</h2><p>接下来你需要进 Obsidian ，打开这个转移好的目录，并在这个库中，安装一个名为 <a href="https://github.com/denolehov/obsidian-git">Obsidian Git</a> 的插件。</p><p>安装完成后应该会自动出现一个 Git Control View 的侧边栏。如果没有，则按下 Ctrl + P，搜索 <code>Obsidian Git: Open Source Control View</code> ，就可以打开这个面板。</p><p><img src="https://r2.leshans.eu.org/2023/08/36f682a6be487f7bf782503a8c5bb342.webp" alt="Pasted image 20230815212603"></p><p>有了这个插件，以后的同步操作你都可以在 Obsidian 内部进行了。</p><p>这个插件顶部的按钮对应了 Git 中最常见的几个操作。如果你对 Git 有一定的了解，应该对这些操作不会陌生。</p><ol><li>Backup：备份，提交所有的更改，并且执行推送。</li><li>Commit：确认提交，但不推送。</li><li>Stage all：存储当前的变更。</li><li>Unstage all：取消存储变更。</li><li>Push：推送到远端，可以理解为推送到 Github。</li><li>Pull：从远端拉取到本地，可以理解为从 Github 拉取最新数据到本地。</li><li>Change Layout：改变下方文件的排布方式。</li><li>Refresh：刷新当前的文件变更情况。</li></ol><p>如果你不想了解他们具体是干什么的，只想知道怎么做同步，那其实就两个按键有用：</p><ol><li>Backup，第一个按钮，一次性完成提交并推送到 Github。</li><li>Pull，第六个按钮，从 Github 同步到本地。</li></ol><p>到这一步就完成了所有的配置工作，第一次使用时，点击 Backup 就可以。</p><h3 id="补充：初次使用-git-时出现报错的解决方法"><a href="#补充：初次使用-git-时出现报错的解决方法" class="headerlink" title="补充：初次使用 git 时出现报错的解决方法"></a>补充：初次使用 git 时出现报错的解决方法</h3><p>有读者提到，如果此前从未使用过 git ，直接使用 Github Desktop 进行同步是可行的。</p><p>但此时打开 Obsidian 会提示两个错误：</p><p><img src="https://r2.leshans.eu.org/2023/08/73bc68fa05e30d5d855d101bd9da3594.webp" alt="Pasted image 20230815212649"></p><p>这两个错误的意思分别是：没有指定分支、没有读取到用户名。所以这是一个账号设置错误。</p><p>至于在 Github Desktop 中能够正常使用，在 Obsidian 中却不行。究其原因，是因为授权方式是通过 Github 的账号密码进行登录的。而 Obsidian 用的是命令行，采用的授权方式不同，导致只有 Obsidian 无法访问 Github。</p><p>所以解决方法如下：</p><ol><li>打开终端，输入 <code>cd 存储库位置</code>，比如 <code>cd D:\ObsidianLibrary</code> 来打开存储库。</li><li>输入 <code>git remote show origin</code> 来检查当前分支情况，依据更详细的报错，可以解决第一个问题。</li></ol><div class="code-wrapper"><pre><code class="hljs bash">git remote show origin</code></pre></div><ol start="3"><li>如果此时尚未登陆，应该会弹出一个登录窗口，提示进行登录，此时输入“账号 + 令牌”，就可以完成登录了。注意这个时候的令牌与密码不同，要用 Github 的个人访问令牌登录。参考文档《<a href="https://www.w3cschool.cn/githubcn/githubcn-34sx3acb.html">创建个人访问令牌</a>》<a href="https://utgd.net/article/9642#fn2">[2|2]</a> 就可以生成令牌。</li></ol><p>你也可以直接使用以下命令来设置全局身份。</p><div class="code-wrapper"><pre><code class="hljs shell">git config --global credential.helper store</code></pre></div><p>这行命令的作用是在 git 中全局启用凭证存储，启用后第一次 <code>git clone</code> 或者 <code>git push</code> 时会提示你输入“账户 + 令牌”。之后执行 git 操作都不再需要密码。</p><h2 id="更多的配置"><a href="#更多的配置" class="headerlink" title="更多的配置"></a>更多的配置</h2><h3 id="如何启用自动同步"><a href="#如何启用自动同步" class="headerlink" title="如何启用自动同步"></a>如何启用自动同步</h3><p>刚开始使用时，你也许不习惯每次手动点一下 Pull 按钮。</p><p>那你可以在 Obsidian Git 插件里启用选项 <code>Auto Backup after file change</code> ，让它每隔一段时间自动进行同步，默认是 10 分钟进行一次推送。下面有一个 <code>Auto pull</code> 的选项，默认 10 分钟进行一次拉取。</p><h3 id="如何解决文件同步冲突？"><a href="#如何解决文件同步冲突？" class="headerlink" title="如何解决文件同步冲突？"></a>如何解决文件同步冲突？</h3><p>如果你在一台电脑上改动了文件，但是忘记同步了，并且在自动同步之前关机了。然后继续在另一台电脑上修改了同一个文件，那么回到这台电脑上做同步时就有可能发生冲突了。</p><p>此时你可以选择自己手动解决这些冲突，在 Obsidian Git 界面中，每次提交时都会告诉你这些文件发生了哪些变化。</p><p>由于 Git 的应用非常普遍，如果出现了其他报错，根据报错提示进行搜索，往往可以在搜索引擎中找到答案。</p><h3 id="不想同步布局和某些配置怎么办？"><a href="#不想同步布局和某些配置怎么办？" class="headerlink" title="不想同步布局和某些配置怎么办？"></a>不想同步布局和某些配置怎么办？</h3><p>通过调整 Git 仓库目录下的隐藏文件 <code>.gitignore</code> 文件，可以选择不同步某些文件。</p><p>根据 Obsidian 的官方文档，他们建议你在 .gitignore 中添加 <code>.obsidian/workspace</code> 。</p><p>如果你已经同步了，那就输入这行命令，这会从仓库中删除文件，未来也不再同步到仓库里，但保留本地文件。</p><div class="code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">rm</span> .obsidian/workspace --cached</code></pre></div><h2 id="自动同步和解决冲突"><a href="#自动同步和解决冲突" class="headerlink" title="自动同步和解决冲突"></a>自动同步和解决冲突</h2><p>你可以在Obsidian Git插件设置中启用自动同步选项，定期自动进行备份和拉取。</p><p>如果在多台设备上同时修改了同一个文件，可能会出现冲突。Obsidian Git插件会提示你哪些文件发生了变化，你可以手动解决这些冲突。</p><h2 id="文件变动Timeline和其他配置"><a href="#文件变动Timeline和其他配置" class="headerlink" title="文件变动Timeline和其他配置"></a>文件变动Timeline和其他配置</h2><p>如果想查看文件变动的时间线，你可以使用VSCode软件，打开Obsidian仓库所在的文件夹，然后在VSCode的左侧文件目录下方找到“Timeline”功能，以查看每个文件在每次Git提交中的变化情况。</p><p>如果你不想同步某些文件，可以通过在Git仓库目录下的<code>.gitignore</code>文件中添加文件路径来实现。例如，添加<code>.obsidian/workspace</code>以忽略同步工作区文件。</p><h3 id="如何查看文件变动-Timeline"><a href="#如何查看文件变动-Timeline" class="headerlink" title="如何查看文件变动 Timeline"></a>如何查看文件变动 Timeline</h3><p>Obsidian 的 Obsidian Git 插件，主要作用是进行提交、拉取、推送这些操作。只能列举某次提交产生的所有变化，不能直观地看到单个文件变动的历史情况。</p><p>VSCode 内置了一个非常方便的功能：Timeline，它可以清晰的看到每个文件在每次 Git 提交中的变化情况。</p><p>你可以在 VSCode 中打开 Obsidian 仓库，在左侧文件目录下方找到“时间线”，就可以回顾这个文件经历了哪些版本了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>使用Git实现Obsidian的稳定同步方案需要进行一些准备工作，但它能为你提供可靠的版本管理和同步功能。通过Obsidian Git插件，你可以在Obsidian中轻松地进行备份和同步操作，同时也可以通过VSCode的Timeline功能查看文件的变动历史。无论是个人使用还是团队协作，Git都是一个强大的工具，能够帮助你更好地管理和同步Obsidian笔记库。</p>]]></content>
    
    
    
    <tags>
      
      <tag>obsidian</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker部署mysql并修改其占用内存大小</title>
    <link href="/posts/80661e20.html"/>
    <url>/posts/80661e20.html</url>
    
    <content type="html"><![CDATA[<p>因为自己部署服务内存比较小，而mysql在docker初始化就占500M，所以可优化其占用内存大小</p><span id="more"></span><h3 id="一-安装mysql"><a href="#一-安装mysql" class="headerlink" title="一.安装mysql"></a>一.安装mysql</h3><p>1.下载好镜像</p><div class="code-wrapper"><pre><code class="hljs bash">docker pull mysql:8.0.18</code></pre></div><p>2.创建<code>MySQL</code>容器</p><div class="code-wrapper"><pre><code class="hljs bash">docker run -<span class="hljs-built_in">id</span> --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:8.0.18</code></pre></div><p>3.查看安装情况</p><div class="code-wrapper"><pre><code class="hljs bash">docker ps -l</code></pre></div><h3 id="二-修改mysql占用内存大小"><a href="#二-修改mysql占用内存大小" class="headerlink" title="二.修改mysql占用内存大小"></a>二.修改mysql占用内存大小</h3><p>因为自己部署服务内存比较小，而mysql在docker初始化就占500M，所以可优化其占用内存大小</p><p>1.查看运行内存</p><div class="code-wrapper"><pre><code class="hljs bash">docker stats</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">[root@ ~]<span class="hljs-comment"># docker stats</span>CONTAINER ID   NAME        CPU %     MEM USAGE / LIMIT     MEM %     NET I/O           BLOCK I/O         PIDSa28d702be74a   mysql       0.34%     400.49MiB / 1.694GiB  24.33%     0B / 0B           19.3MB / 14.1MB   38c8adbf02c7a5   kafka       0.30%     435.7MiB / 1.694GiB   25.11%    1.77MB / 2.93MB   130MB / 86kB      6592187cc1f68e   zookeeper   0.07%     89.78MiB / 1.694GiB   5.18%     2.93MB / 1.77MB   99.5MB / 127kB    19</code></pre></div><p> <br> <br> 2.进入mysql容器终端</p><div class="code-wrapper"><pre><code class="hljs perl">docker <span class="hljs-keyword">exec</span> -it mysql bash</code></pre></div><p>3.切换进入&#x2F;etc&#x2F;mysql&#x2F;conf.d 目录</p><div class="code-wrapper"><pre><code class="hljs cobol">cd /etc/mysql/conf.d</code></pre></div><p>4.我们需要进入容器当中进行修改容器里面的配置文件，可能有的服务器是没有安装vim的，所以我们没有的需要安装的</p><div class="code-wrapper"><pre><code class="hljs bash">apt-get install vim</code></pre></div><p>5.docker进入mysql容器内，进入&#x2F;etc&#x2F;mysql&#x2F;conf.d 目录执行 vim docker.cnf</p><div class="code-wrapper"><pre><code class="hljs bash">vim docker.cnf</code></pre></div><p>6.在对应文件后面添加下面的参数</p><div class="code-wrapper"><pre><code class="hljs bash">performance_schema_max_table_instances=400  table_definition_cache=400    performance_schema=off    table_open_cache=64    innodb_buffer_pool_chunk_size=64M    innodb_buffer_pool_size=64M</code></pre></div><p>各参数对应的意义为</p><div class="code-wrapper"><pre><code class="hljs bash">[mysqld]performance_schema_max_table_instances=400  table_definition_cache=400    <span class="hljs-comment">#缓存</span>performance_schema=off    <span class="hljs-comment">#用于监控MySQL server在一个较低级别的运行过程中的资源消耗、资源东西</span>table_open_cache=64    <span class="hljs-comment">#打开表的缓存</span>innodb_buffer_pool_chunk_size=64M    <span class="hljs-comment">#InnoDB缓冲池大小调整操作的块大小</span>innodb_buffer_pool_size=64M    <span class="hljs-comment">#InnoDB 存储引擎的表数据和索引数据的最大内存缓冲区大小</span></code></pre></div><p>7.退出</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">exit</span></code></pre></div><p>8.重启mysql容器</p><div class="code-wrapper"><pre><code class="hljs cobol">docker stop mysqldocker start mysql</code></pre></div><p>9.观察修改后的内存情况</p><div class="code-wrapper"><pre><code class="hljs bash">docker stats</code></pre></div><p><img src="https://r2.leshans.eu.org/2023/08/8823a3c3155b5abcffa69fc03c6ffcbb.webp" alt="Pasted image 20230815152734"></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Umami替代品，Plausible网站流量统计工具</title>
    <link href="/posts/ca678ca6.html"/>
    <url>/posts/ca678ca6.html</url>
    
    <content type="html"><![CDATA[<p>这一期，来介绍另一个流量统计的项目——Plausible。</p><blockquote><p>Plausible Analytics 是一个简单、开源、轻量级（&lt; 1 KB）且注重隐私的 Google Analytics 替代品。Plausible 被超过10,000个付费订阅用户信任，用于提供他们网站和业务洞察力。我们完全独立、自筹资金并自给自足。</p></blockquote><p>来自<a href="https://plausible.io/docs">官方Docs</a></p><p><img src="https://r2.leshans.eu.org/2023/08/cc105dd01b8626e5c7380daea0bf6226.webp" alt="Pasted image 20230815033226"></p><h2 id="2-项目展示"><a href="#2-项目展示" class="headerlink" title="2. 项目展示"></a>2. 项目展示</h2><p>直接丢几个图：</p><p><img src="https://r2.leshans.eu.org/2023/08/83d091eae0849ed4fc4f77b879dac011.webp" alt="Pasted image 20230815033247"></p><p><img src="https://r2.leshans.eu.org/2023/08/dccf1ae8b332495b56c8723d9838dd2a.webp" alt="Pasted image 20230815033255"></p><p><img src="https://r2.leshans.eu.org/2023/08/d1e9b296ae1d172dfe2059079068c7a1.webp" alt="Pasted image 20230815033303"></p><h3 id="2-1-特点"><a href="#2-1-特点" class="headerlink" title="2.1 特点"></a>2.1 特点</h3><ul><li>支持docker一键部署，轻量级Docker镜像（使用Alpine Linux）</li><li>支持谷歌API，链接谷歌分析、谷歌关键词工具</li><li>支持自定义事件</li><li>颜值高</li></ul><h2 id="3-相关地址"><a href="#3-相关地址" class="headerlink" title="3. 相关地址"></a>3. 相关地址</h2><p>GitHub官方仓库：<a href="https://github.com/plausible/analytics">https://github.com/plausible/analytics</a><br>官方文档地址：<a href="https://plausible.io/docs">https://plausible.io/docs</a></p><h2 id="4-搭建方式"><a href="#4-搭建方式" class="headerlink" title="4. 搭建方式"></a>4. 搭建方式</h2><p>创建一下安装的目录：</p><div class="code-wrapper"><pre><code class="hljs bash">sudo -i<span class="hljs-built_in">mkdir</span> -p /root/data/docker_data/plausible<span class="hljs-built_in">cd</span> /root/data/docker_data/plausiblegit <span class="hljs-built_in">clone</span> https://github.com/plausible/hosting<span class="hljs-built_in">cd</span> hosting</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">vim docker-compose.yml</code></pre></div><p>英文输入法下，按 <code>i</code></p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.3&quot;</span><span class="hljs-attr">services:</span>  <span class="hljs-attr">mail:</span>    <span class="hljs-attr">category_bar:</span> <span class="hljs-literal">true</span> <span class="hljs-string">bytemark/smtp</span>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>  <span class="hljs-attr">plausible_db:</span>    <span class="hljs-comment"># supported versions are 12, 13, and 14</span>    <span class="hljs-attr">category_bar:</span> <span class="hljs-literal">true</span> <span class="hljs-string">postgres:14-alpine</span>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./db-data:/var/lib/postgresql/data</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">POSTGRES_PASSWORD=postgres</span>  <span class="hljs-attr">plausible_events_db:</span>    <span class="hljs-attr">category_bar:</span> <span class="hljs-literal">true</span> <span class="hljs-string">clickhouse/clickhouse-server:23.3.7.5-alpine</span>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./event-data:/var/lib/clickhouse</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./clickhouse/clickhouse-config.xml:/etc/clickhouse-server/config.d/logging.xml:ro</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./clickhouse/clickhouse-user-config.xml:/etc/clickhouse-server/users.d/logging.xml:ro</span>    <span class="hljs-attr">ulimits:</span>      <span class="hljs-attr">nofile:</span>        <span class="hljs-attr">soft:</span> <span class="hljs-number">262144</span>        <span class="hljs-attr">hard:</span> <span class="hljs-number">262144</span>  <span class="hljs-attr">plausible:</span>    <span class="hljs-attr">category_bar:</span> <span class="hljs-literal">true</span> <span class="hljs-string">plausible/analytics:v2.0</span>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>    <span class="hljs-attr">command:</span> <span class="hljs-string">sh</span> <span class="hljs-string">-c</span> <span class="hljs-string">&quot;sleep 10 &amp;&amp; /entrypoint.sh db createdb &amp;&amp; /entrypoint.sh db migrate &amp;&amp; /entrypoint.sh run&quot;</span>    <span class="hljs-attr">depends_on:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">plausible_db</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">plausible_events_db</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">mail</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-number">8090</span><span class="hljs-string">:8000</span>    <span class="hljs-attr">env_file:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">plausible-conf.env</span></code></pre></div><p>大家可以用默认的设置，也可以和咕咕一样修改一下，修改好之后，注意切换成英文输入法，然后按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出。</p><div class="code-wrapper"><pre><code class="hljs bash">openssl rand -<span class="hljs-built_in">base64</span> 64 | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27;\n&#x27;</span> ; <span class="hljs-built_in">echo</span></code></pre></div><p>保存下来。</p><p>打开环境配置文件：</p><div class="code-wrapper"><pre><code class="hljs bash">vim plausible-conf.env</code></pre></div><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">BASE_URL</span>=填你打算给plausible准备的域名，比如https://analytics.baidu.com<span class="hljs-attr">SECRET_KEY_BASE</span>=填刚刚生成的那个密钥</code></pre></div><p>修改好之后，注意切换成英文输入法，然后按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出。</p><p>更多参数配置，请看文档：<a href="https://plausible.io/docs/self-hosting-configuration">https://plausible.io/docs/self-hosting-configuration</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Umami</tag>
      
      <tag>Plausible</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1Panel 是新一代的 Linux 服务器运维管理面板</title>
    <link href="/posts/67349b6c.html"/>
    <url>/posts/67349b6c.html</url>
    
    <content type="html"><![CDATA[<h1 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h1><h2 id="1-环境要求"><a href="#1-环境要求" class="headerlink" title="1 环境要求"></a>1 环境要求</h2><p><strong>安装前请确保您的系统符合安装条件：</strong></p><ul><li>操作系统：支持主流 Linux 发行版本（基于 Debian &#x2F; RedHat，包括国产操作系统）；</li><li>服务器架构：x86_64、aarch64、armv7l、ppc64le、s390x；</li><li>内存要求：建议可用内存在 1GB 以上；</li><li>浏览器要求：请使用 Chrome、FireFox、IE10+、Edge等现代浏览器；</li><li><strong>可访问互联网</strong>。</li></ul><p><img src="https://r2.leshans.eu.org/2023/08/a7438a5222696241d9d979b76906be50.webp" alt="Pasted image 20230814123709"></p><h2 id="2-安装部署"><a href="#2-安装部署" class="headerlink" title="2 安装部署"></a>2 安装部署</h2><p>GitHub release 链接: <a href="https://github.com/1Panel-dev/1Panel/releases">https://github.com/1Panel-dev/1Panel/releases</a></p><p>更多信息请查阅在线文档：<a href="https://1panel.cn/docs/">https://1panel.cn/docs/</a></p><p>RedHat &#x2F; CentOS</p><div class="code-wrapper"><pre><code class="hljs shell">curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; sh quick_start.sh</code></pre></div><p>ubuntu</p><div class="code-wrapper"><pre><code class="hljs bash">curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; sudo bash quick_start.sh</code></pre></div><p>debian</p><div class="code-wrapper"><pre><code class="hljs bash">curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; bash quick_start.sh</code></pre></div><p>安装成功后，控制台会打印面板访问信息，可通过浏览器访问 1Panel：</p><p><code>http://目标服务器 IP 地址:目标端口/安全入口</code></p><ul><li><strong>如果使用的是云服务器，请至安全组开放目标端口。</strong></li><li><strong>ssh 登录 1Panel 服务器后，执行 1pctl user-info 命令可获取安全入口（entrance）</strong></li></ul><p>安装成功后，可使用 <a href="https://1panel.cn/docs/installation/cli/">1pctl</a> 命令行工具来维护 1Panel</p><p><a href="https://1panel.cn/docs/installation/cli/">https://1panel.cn/docs/installation/cli/</a></p>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>1Panel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>强大的LDNMP一键建站脚本工具</title>
    <link href="/posts/a2998cf2.html"/>
    <url>/posts/a2998cf2.html</url>
    
    <content type="html"><![CDATA[<p>安装依赖</p><div class="code-wrapper"><pre><code class="hljs shell">apt update -y  &amp;&amp; apt install -y curl</code></pre></div><p>一键脚本</p><div class="code-wrapper"><pre><code class="hljs shell">curl -sS -O https://raw.githubusercontent.com/kejilion/sh/main/kejilion.sh &amp;&amp; chmod +x kejilion.sh &amp;&amp; ./kejilion.sh</code></pre></div><p><img src="https://r2.leshans.eu.org/2023/08/478388c2efcb07b65699946a1a730b9c.webp" alt="Pasted image 20230813220236"></p><p><code>观看教程</code></p>]]></content>
    
    
    <categories>
      
      <category>vps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vps</tag>
      
      <tag>脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迁移 hugo 博客到服务器上</title>
    <link href="/posts/623e9381.html"/>
    <url>/posts/623e9381.html</url>
    
    <content type="html"><![CDATA[<p>不管是在腾讯云,阿里云,还是海外vps上部署hugo博客,本教程均适用,详细记录,以备不时之需.</p><h2 id="1-场景"><a href="#1-场景" class="headerlink" title="1. 场景"></a>1. 场景</h2><p><code>ubuntu 20.04</code>，使用<code>root</code>账号，创建普通账号，并赋予<code>root</code>权限。</p><p>查看系统发行版本，命令如下：</p><div class="code-wrapper"><pre><code class="hljs text">lsb_release -a</code></pre></div><h2 id="2-服务器端"><a href="#2-服务器端" class="headerlink" title="2. 服务器端"></a>2. 服务器端</h2><p>接下来就是网上介绍比较少的服务端配置</p><h5 id="1-ssh-进自己的服务器"><a href="#1-ssh-进自己的服务器" class="headerlink" title="1 .ssh 进自己的服务器"></a>1 .ssh 进自己的服务器</h5><div class="code-wrapper"><pre><code class="hljs shell">ssh root@XXX.XXX.XX.XX</code></pre></div><h5 id="2-建立-git-用户"><a href="#2-建立-git-用户" class="headerlink" title="2 .建立 git 用户"></a>2 .建立 git 用户</h5><div class="code-wrapper"><pre><code class="hljs shell">adduser git</code></pre></div><p>默认会在<code>/home</code>路径下创建一个与用户名相同的用户目录。</p><h5 id="3-安装-git"><a href="#3-安装-git" class="headerlink" title="3. 安装 git"></a>3. 安装 git</h5><div class="code-wrapper"><pre><code class="hljs shell">sudo apt install git</code></pre></div><h5 id="4-给新用户添加管理权限"><a href="#4-给新用户添加管理权限" class="headerlink" title="4. 给新用户添加管理权限"></a>4. 给新用户添加管理权限</h5><p>如果希望新创建的用户具有管理权限，将用户添加到<code>sudo</code>组即可！</p><p>将新用户添加到 <code>sudo</code> 组，命令如下：</p><div class="code-wrapper"><pre><code class="hljs text">adduser git sudo</code></pre></div><h5 id="5-账号切换"><a href="#5-账号切换" class="headerlink" title="5. 账号切换"></a>5. 账号切换</h5><p>由<code>root</code>账号切换到普通账号：</p><div class="code-wrapper"><pre><code class="hljs text">sudo su git</code></pre></div><p>由普通账号切换到<code>root</code>账号：或者<code>exit</code></p><div class="code-wrapper"><pre><code class="hljs text">sudo su root</code></pre></div><p>注意：切换到<code>root</code>账号时，需要输入当前账号的<code>密码</code>。</p><h5 id="6-在服务端新建-git-仓库"><a href="#6-在服务端新建-git-仓库" class="headerlink" title="6. 在服务端新建 git 仓库"></a>6. 在服务端新建 git 仓库</h5><p>注意这里建的不是 Github仓库，是自己的服务器上的 <code>git 仓库</code></p><ul><li>在<code>git</code>目录下建立一个仓库 <code>hugo.git</code></li><li>同时建立一个文件夹<code>hugo</code>用来存放仓库文件</li></ul><div class="code-wrapper"><pre><code class="hljs shell">su gitcd /homemkdir gitcd gitgit init --bare hugo.gitsudo chown -R git:git hugo.gitmkdir hugo</code></pre></div><h5 id="7-配置钩子"><a href="#7-配置钩子" class="headerlink" title="7. 配置钩子"></a>7. 配置钩子</h5><div class="code-wrapper"><pre><code class="hljs shell">vim /home/git/hugo.git/hooks/post-receive</code></pre></div><p>写入以下文本</p><div class="code-wrapper"><pre><code class="hljs bash">git --work-tree=/home/git/hugo --git-dir=/home/git/hugo.git checkout -f</code></pre></div><p>配置权限</p><div class="code-wrapper"><pre><code class="hljs shell">sudo chmod +x /home/git/hugo.git/hooks/post-receive</code></pre></div><h5 id="8-配置SSH公钥"><a href="#8-配置SSH公钥" class="headerlink" title="8. 配置SSH公钥"></a>8. 配置SSH公钥</h5><p>先在本地生成</p><div class="code-wrapper"><pre><code class="hljs shell">ssh-keygen -t RSA -C &quot;usr邮箱&quot;cat .ssh/id_rsa.pub</code></pre></div><p>然后把 cat 内容复制到服务端的 <code>.ssh/authorized_keys</code> 文件内</p><div class="code-wrapper"><pre><code class="hljs shell">cd ~mkdir .sshtouch .ssh/authorized_keyschmod 600 .ssh/authorized_keys</code></pre></div><div class="code-wrapper"><pre><code class="hljs shell">vim .ssh/authorized_keys</code></pre></div><p>到此为止完成了服务端全部配置，以上任何一步操作如果提示缺少了什么就<code>sudo apt install</code>一下</p><h2 id="3-部署本地到服务端"><a href="#3-部署本地到服务端" class="headerlink" title="3. 部署本地到服务端"></a>3. 部署本地到服务端</h2><p>在本地运行</p><div class="code-wrapper"><pre><code class="hljs shell">hugo</code></pre></div><p>命令后，网站根目录内生成一个 <code>public</code> 文件夹，里面是静态网页文件，把这个 <code>public</code>文件夹整个 push 到我们刚刚在服务器端配置的 <code>hugo.git</code> 仓库里面</p><p>远程 git 仓库地址格式,  例如<code>ip</code>是 <code>8.8.8.8</code>举例</p><div class="code-wrapper"><pre><code class="hljs elixir">git<span class="hljs-variable">@8</span>.<span class="hljs-number">8.8</span>.<span class="hljs-number">8</span><span class="hljs-symbol">:/home/git/hugo</span>.git</code></pre></div><p>注意: 默认ssh是22 如果不是,请往下看</p><div class="code-wrapper"><pre><code class="hljs shell">cd publicgit initgit add .git commit -m &#x27;First Commit&#x27;git remote add origin git@8.8.8.8:/home/git/hugo.gitgit push -u origin master</code></pre></div><p>如果一切顺利，那么 hugo 站点已经成功部署在云服务器上，配置好<code>Nginx</code>, 访问域名即可显示</p><h3 id="如果SSH是其他端口"><a href="#如果SSH是其他端口" class="headerlink" title="如果SSH是其他端口"></a>如果SSH是其他端口</h3><p>比如SSH:33 ip:8.8.8.8</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> publicgit initgit add .git commit -m <span class="hljs-string">&#x27;First Commit&#x27;</span>git remote add origin ssh://git@8.8.8.8:33/home/git/hugo.gitgit push -u origin master</code></pre></div><p>或者 </p><div class="code-wrapper"><pre><code class="hljs bash">git push -u ssh://git@8.8.8.8:33/home/git/hugo.git master</code></pre></div><h3 id="验证本地仓库关联到远程服务器的-Git-仓库"><a href="#验证本地仓库关联到远程服务器的-Git-仓库" class="headerlink" title="验证本地仓库关联到远程服务器的 Git 仓库"></a>验证本地仓库关联到远程服务器的 Git 仓库</h3><ol><li><p>打开终端或命令行，进入到您本地的 Git 仓库目录。</p></li><li><p>运行以下命令，查看当前配置的远程仓库信息：</p></li></ol><div class="code-wrapper"><pre><code class="hljs bash">git remote -v</code></pre></div><p>显示本地仓库的远程关联信息。如果您已经成功关联了远程仓库，您会看到类似于以下的输出：</p><div class="code-wrapper"><pre><code class="hljs bash">origin  ssh://git@8.8.8.8:33/home/git/hugo.git (fetch)origin  ssh://git@8.8.8.8:33/home/git/hugo.git (push)</code></pre></div><p>在这个输出中，<code>origin</code> 是远程仓库的名称，后面的 URL 显示了远程仓库的地址。如果您在这里看到您想要关联的服务器地址和端口，说明关联已经成功。</p><ol start="3"><li>您还可以尝试进行一次 <code>git fetch</code> 操作，以从远程仓库获取最新的更新：</li></ol><div class="code-wrapper"><pre><code class="hljs bash">git fetch origin</code></pre></div><p>如果操作成功，说明您的本地仓库可以与远程仓库通信。</p><ol start="4"><li>最后，您可以尝试进行一次 <code>git push</code> 操作，将本地的更改推送到远程仓库：</li></ol><div class="code-wrapper"><pre><code class="hljs bash">git push origin master</code></pre></div><ol start="5"><li>测试 SSH 连接 (注意:ssh是33)</li></ol><div class="code-wrapper"><pre><code class="hljs bash">ssh -p 33 git@8.8.8.8</code></pre></div><p>这是是一个用于测试 SSH 连接的命令，它会尝试使用 SSH 协议通过指定的端口连接到指定的 IP 地址。如果成功连接，您将会看到类似于以下的输出</p><div class="code-wrapper"><pre><code class="hljs delphi">Welcome <span class="hljs-keyword">to</span> Ubuntu <span class="hljs-number">20.04</span>.<span class="hljs-number">6</span> LTS (GNU/Linux <span class="hljs-number">5.4</span>.<span class="hljs-number">0</span>-<span class="hljs-number">155</span>-<span class="hljs-keyword">generic</span> x86_64)...</code></pre></div><h2 id="4-自动推送脚本"><a href="#4-自动推送脚本" class="headerlink" title="4. 自动推送脚本"></a>4. 自动推送脚本</h2><p>每次都需要生成静态文件再推到服务端仓库，很麻烦，所以写一个脚本</p><p>网站根目录 <code>Mysite</code> 下新建一个 <code>vps.sh</code> 脚本文件</p><div class="code-wrapper"><pre><code class="hljs shell">cd Mysitetouch vps.sh</code></pre></div><p>向其中添加内容：记得修改为你的 <code>ip</code></p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span>hugo -D --gc<span class="hljs-built_in">cd</span> publicgit initgit add .git commit -m <span class="hljs-string">&#x27;Update My Site to vps&#x27;</span>git push origin master</code></pre></div><p>双击打开运行<code>vps.sh</code>即可自动推送文件到仓库,以后写完博客或修改博客后都需要运行一下<code>vps.sh</code>,才能部署到云端</p><p>注意,第一次运行<code>vps.sh</code>可能会出现如图这种情况,直接输入yes回车即可,如果仓库里没发现上传的文件可以再运行一次<code>vps.sh</code></p><h3 id="5-拉取远程更改并合并"><a href="#5-拉取远程更改并合并" class="headerlink" title="5. 拉取远程更改并合并"></a>5. 拉取远程更改并合并</h3><ol><li>在运行 <code>git push</code> 之前，先运行以下命令来拉取远程仓库的更改并尝试合并它们到你的本地分支：</li></ol><div class="code-wrapper"><pre><code class="hljs bash">git pull origin master</code></pre></div><p>如果出现冲突，需要解决冲突后再次提交</p><ol start="2"><li><strong>强制推送：</strong> 如果你确定你的本地更改是正确的，而且你不需要保留远程仓库的更改，可以使用强制推送。但要注意，强制推送会覆盖远程分支的历史，可能会导致数据丢失。</li></ol><div class="code-wrapper"><pre><code class="hljs bash">git push -f origin master</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>hugo</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Syncthing开源免费跨平台的文件同步工具-利用Syncthing搭建免费同步网盘</title>
    <link href="/posts/d5e3cb91.html"/>
    <url>/posts/d5e3cb91.html</url>
    
    <content type="html"><![CDATA[<p>实时同步网盘，其实可以选择也挺多的，OneDrive、Google Drive、Dropbox、Box.com、iCloud等都是支持自动同步备份的，只可惜这些网盘很多都是打不开的。国内的坚果云在同步这一块做得不错，但是免费的额度太少了，不能满足大量同步的需要。</p><p>本篇文章要分享的开源免费跨平台的文件同步工具<code>Syncthing</code>，可以实现实时同步备份搭建个人同步网盘的功能，试用了一下发现Syncthing完全可以替代市面上这些同步网盘。Syncthing可以运行在<code>Windows</code>、<code>Linux</code>、<code>MacOS</code>等全平台上，而且提供了安卓手机APP，功能非常强大。</p><p>GitHub 项目地址：<a href="https://github.com/syncthing/syncthing">https://github.com/syncthing/syncthing</a></p><p>文档地址：<a href="https://docs.syncthing.net/intro/getting-started.html">https://docs.syncthing.net/intro/getting-started.html</a></p><p>客户端下载：<a href="https://github.com/syncthing/syncthing/releases">https://github.com/syncthing/syncthing/releases</a></p><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p><code>推荐使用普通用户安装,请往下看</code></p><p><code>本文只记录在ubuntu20.04上怎么搭建</code></p><p>更新一下组件</p><div class="code-wrapper"><pre><code class="hljs bash">apt update -y &amp;&amp; apt install -y curl &amp;&amp; apt install -y socat &amp;&amp; apt install wget -y</code></pre></div><p>然后:</p><div class="code-wrapper"><pre><code class="hljs bash">wget https://github.com/syncthing/syncthing/releases/download/v1.23.7/syncthing-linux-amd64-v1.23.7.tar.gztar -zxvf syncthing-linux-amd64-v1.23.7.tar.gz<span class="hljs-built_in">cd</span> syncthing-linux-amd64-v1.23.7<span class="hljs-built_in">cp</span> syncthing /usr/local/bin/</code></pre></div><p>接着:</p><div class="code-wrapper"><pre><code class="hljs shell">syncthing</code></pre></div><p>使用<code>CTRL + C</code>停止运行,修改文件</p><div class="code-wrapper"><pre><code class="hljs shell">vim /root/.config/syncthing/config.xml</code></pre></div><p>将<code>127.0.0.1:8384</code>改成 <code>0.0.0.0:8384</code> 即可,保存退出</p><p>再输入<code>syncthing</code>运行它。然后在浏览器输入<code>服务器IP:8384</code>访问。</p><h2 id="保持后台运行"><a href="#保持后台运行" class="headerlink" title="保持后台运行"></a>保持后台运行</h2><p>对于VPS主机运行syncthing如果关闭终端，syncthing也会停止运行，可以将syncthing放在后台，命令如下：</p><div class="code-wrapper"><pre><code class="hljs shell">nohup syncthing &amp;</code></pre></div><h2 id="开机自动启动并保持运行"><a href="#开机自动启动并保持运行" class="headerlink" title="开机自动启动并保持运行"></a>开机自动启动并保持运行</h2><div class="code-wrapper"><pre><code class="hljs shell">vim /usr/lib/systemd/system/syncthing@.service</code></pre></div><p>加入以下内容</p><div class="code-wrapper"><pre><code class="hljs shell">[Unit]Description=Syncthing - Open Source Continuous File Synchronization for %IDocumentation=man:syncthing(1)After=network.target[Service]User=%iExecStart=/usr/local/bin/syncthing -no-browser -no-restart -logflags=0Restart=on-failureSuccessExitStatus=3 4RestartForceExitStatus=3 4[Install]WantedBy=multi-user.target</code></pre></div><p>然后保存退出，之后就可以通过systemd进行启动和管理了，注意注意把命令里面的<code>root</code>替换成自己的用户名：</p><p> 启动<code>syncthing</code></p><div class="code-wrapper"><pre><code class="hljs bash">systemctl start syncthing@root.service</code></pre></div><p>设置<code>syncthing</code>开机自启</p><div class="code-wrapper"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> syncthing@root.service</code></pre></div><p> 查看syncthing运行状态</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">systemctl</span> status syncthing<span class="hljs-variable">@root</span>.service</code></pre></div><p>停止syncthing</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">systemctl</span> stop syncthing<span class="hljs-variable">@root</span>.service</code></pre></div><p>关闭syncthing开机自启</p><div class="code-wrapper"><pre><code class="hljs mel">systemctl <span class="hljs-keyword">disable</span> syncthing@root.service</code></pre></div><p>或者可以用<code>--user</code>参数来运行</p><div class="code-wrapper"><pre><code class="hljs xquery"><span class="hljs-number">1</span>systemctl <span class="hljs-built_in">–root</span> <span class="hljs-keyword">start</span> syncthing</code></pre></div><h2 id="禁止IP访问"><a href="#禁止IP访问" class="headerlink" title="禁止IP访问"></a>禁止IP访问</h2><p>如果你已经成功绑定了域名到<code>Syncthing</code>，想要禁止使用IP访问Syncthing，那么把配置文件作如下修改即可。</p><p>把端口设置成：0.0.0.0:8384，那么syncthing可以通过ip进行访问 。<br>把端口设置成：127.0.0.1:8384，那么只能通过域名访问，这个时候只有通过nginx反向代理才能访问到127.0.0.1这个本地地址。</p><h2 id="更新-Syncthing"><a href="#更新-Syncthing" class="headerlink" title="更新 Syncthing"></a>更新 Syncthing</h2><p>把 <code>v1.23.7</code> 改成最新版本即可</p><div class="code-wrapper"><pre><code class="hljs shell">wget https://github.com/syncthing/syncthing/releases/download/v1.23.7/syncthing-linux-amd64-v1.23.7.tar.gztar -zxvf syncthing-linux-amd64-v1.23.7.tar.gzcd syncthing-linux-amd64-v1.23.7systemctl stop syncthing@root.servicecp syncthing /usr/local/bin/systemctl start syncthing@root.service</code></pre></div><h2 id="使用普通用户安装"><a href="#使用普通用户安装" class="headerlink" title="使用普通用户安装"></a>使用普通用户安装</h2><p>如果以 root 用户启动 Syncthing 会被提示不建议在 root 用户下运行，所以在正式使用之前，</p><h3 id="建立新用户"><a href="#建立新用户" class="headerlink" title="建立新用户"></a>建立新用户</h3><div class="code-wrapper"><pre><code class="hljs shell">adduser sync</code></pre></div><p>设置密码 然后一路回车默认 最后 <code>y</code></p><p><code>切换用户:</code></p><div class="code-wrapper"><pre><code class="hljs bash">sudo su <span class="hljs-built_in">sync</span></code></pre></div><p><code>进入主目录:</code></p><div class="code-wrapper"><pre><code class="hljs shell">cd /home/sync</code></pre></div><h3 id="开始安装-1"><a href="#开始安装-1" class="headerlink" title="开始安装:"></a>开始安装:</h3><div class="code-wrapper"><pre><code class="hljs shell">wget https://github.com/syncthing/syncthing/releases/download/v1.23.7/syncthing-linux-amd64-v1.23.7.tar.gztar -zxvf syncthing-linux-amd64-v1.23.7.tar.gzcd syncthing-linux-amd64-v1.23.7cp syncthing /home/sync/syncthing</code></pre></div><p>运行一次 <code>syncthing</code>，程序会将配置文件释放出来。</p><p>停止运行程序，先编辑配置文件。</p><div class="code-wrapper"><pre><code class="hljs shell">vim /home/sync/.config/syncthing/config.xml</code></pre></div><p>找到 <code>&lt;address&gt;</code> 这行，将 <code>127.0.0.1</code> 改为 <code>0.0.0.0</code>，这样就可以从公网访问 Web UI 了，保存退出。</p><p>再次直接运行 <code>syncthing</code>，然后在地址栏输入 <code>http://w.x.y.z:8384/</code> 进入 Syncthing 的 Web UI 管理界面，第一次访问时会提醒设置账号及密码，建议设置并重启 Syncthing。</p><p>这时候 <code>syncthing</code> 就已经可以开始正常使用了，如果使用了防火墙，在过程中对相应的规则进行放行。</p><p>那么将执行以下命令：</p><div class="code-wrapper"><pre><code class="hljs bash">iptables -I INPUT -p tcp --dport 8384 -j ACCEPT</code></pre></div><h3 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h3><p>切换回<code>root</code>: sudo su root</p><div class="code-wrapper"><pre><code class="hljs bash">vim /lib/systemd/system/syncthing.service</code></pre></div><div class="code-wrapper"><pre><code class="hljs shell">[Unit]Description=SyncthingDocumentation=man:syncthing(1)After=network.target[Service]User=syncExecStart=/home/sync/syncthing -no-browser -no-restart -logflags=0Restart=on-failureSuccessExitStatus=3 4RestartForceExitStatus=3 4<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">Hardening</span>ProtectSystem=fullPrivateTmp=trueSystemCallArchitectures=nativeMemoryDenyWriteExecute=trueNoNewPrivileges=true[Install]WantedBy=multi-user.target</code></pre></div><p>最后:</p><div class="code-wrapper"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> syncthingsystemctl start syncthing</code></pre></div><h2 id="Syncthing-Tray-简单小巧的文件同步工具"><a href="#Syncthing-Tray-简单小巧的文件同步工具" class="headerlink" title="Syncthing Tray 简单小巧的文件同步工具"></a>Syncthing Tray 简单小巧的文件同步工具</h2><p>点击下载: </p><p><a href="https://github.com/Martchus/syncthingtray/releases/download/v1.4.4/syncthingtray-1.4.4-x86_64-w64-mingw32.exe.zip">Syncthing Tray</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>syncthing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>独角数卡发卡宝塔安装教程</title>
    <link href="/posts/13317cbf.html"/>
    <url>/posts/13317cbf.html</url>
    
    <content type="html"><![CDATA[<p>独角数卡发卡宝塔安装教程详细记录(转载于github)</p><span id="more"></span><h2 id="前景概要"><a href="#前景概要" class="headerlink" title="前景概要"></a>前景概要</h2><div class="code-wrapper"><pre><code class="hljs autohotkey">⚠️正式上线后一定要将.env配置里面的APP_DEBUG设置为<span class="hljs-literal">false</span>⚠️``⚠️正式上线后一定要将.env配置里面的APP_DEBUG设置为<span class="hljs-literal">false</span>⚠️``⚠️正式上线后一定要将.env配置里面的APP_DEBUG设置为<span class="hljs-literal">false</span>⚠️</code></pre></div><h3 id="搭配视频教程食用更佳"><a href="#搭配视频教程食用更佳" class="headerlink" title="搭配视频教程食用更佳"></a>搭配视频教程食用更佳</h3><p>请自备梯子🪜科学上网<br><a href="https://t.me/dujiaoshuka/22">视频教程👉🏻https://t.me/dujiaoshuka/22</a></p><p>首先： 你需要一台内存<code>512M</code>或以上为最佳的vps或云服务器<br>其次 你的服务器操作系统要为 <code>linux</code> 内核，我可不管你是什么<code>centos</code>党还是<code>ubuntu</code>党</p><p>什么？ 没有？ 那请点击浏览器右上角的X号!</p><h2 id="宝塔安装"><a href="#宝塔安装" class="headerlink" title="宝塔安装"></a>宝塔安装</h2><p>直接自己去看吧: <a href="https://bt.cn/">bt.cn</a>。<br>如果宝塔都不会玩我建议你放弃~</p><h2 id="必装环境"><a href="#必装环境" class="headerlink" title="必装环境"></a>必装环境</h2><p>接下来我们安装一下下图六个软件：<br><img src="https://r2.leshans.eu.org/2023/08/e839e695ceb7b2e61838198628bccbb9." alt="必装软件"></p><p>最好是编译安装哦，性能更好。<br>🙋由于在之前版本很多同学不会使用<code>supervisor</code>，所以2.0.+版本我们会采用较为简单的<code>堡塔应用管理器</code>来实现守护进程。</p><h2 id="PHP环境确认"><a href="#PHP环境确认" class="headerlink" title="PHP环境确认"></a>PHP环境确认</h2><h3 id="一、-接下来我们按照步骤删除一下php的禁用函数"><a href="#一、-接下来我们按照步骤删除一下php的禁用函数" class="headerlink" title="一、 接下来我们按照步骤删除一下php的禁用函数"></a>一、 接下来我们按照步骤删除一下php的禁用函数</h3><p>（ps:宝塔默认会禁用一些php的函数，导致artisan命令无法正确运行）</p><p>点击【软件商店】-&gt;【PHP设置】-&gt;【禁用函数列表】 将以下函数删除！！<br><code>putenv</code>，<code>proc_open</code>，<code>pcntl_signal</code>，<code>pcntl_alarm</code></p><p><img src="https://r2.leshans.eu.org/2023/08/944c5a01c8b2a7a9089978445c5a1af0." alt="禁用函数列表.png"></p><h3 id="二、-我们再装一下必要的两个扩展"><a href="#二、-我们再装一下必要的两个扩展" class="headerlink" title="二、 我们再装一下必要的两个扩展"></a>二、 我们再装一下必要的两个扩展</h3><p>点击【软件商店】-&gt;【PHP设置】-&gt;【安装扩展】<br>安装以下三个扩展：<br><code>fileinfo</code>、<code>redis</code>、<code>opcache(可选安装，性能加强)</code></p><p><img src="https://r2.leshans.eu.org/2023/08/7354d8fe886cb9f0ddb5ba45e06b6cd6." alt="安装扩展.png"></p><h2 id="新建一个网站"><a href="#新建一个网站" class="headerlink" title="新建一个网站"></a>新建一个网站</h2><h3 id="一、在宝塔里新建一个网站用于运行本项目"><a href="#一、在宝塔里新建一个网站用于运行本项目" class="headerlink" title="一、在宝塔里新建一个网站用于运行本项目"></a>一、在宝塔里新建一个网站用于运行本项目</h3><p><img src="https://r2.leshans.eu.org/2023/08/8649ff9becb474e7673a90568280bd27." alt="新建一个网站.png"></p><h3 id="二、上传我们的项目代码"><a href="#二、上传我们的项目代码" class="headerlink" title="二、上传我们的项目代码"></a>二、上传我们的项目代码</h3><p>请选择xxx_build.tar.gz压缩包。<br>⚠️一定要选择带build字样的包，才有依赖！<br>独角数卡发行版本下载地址：<a href="https://github.com/assimon/dujiaoka/releases">独角数卡各发行版本</a></p><h3 id="三、设置项目伪静态和运行目录"><a href="#三、设置项目伪静态和运行目录" class="headerlink" title="三、设置项目伪静态和运行目录"></a>三、设置项目伪静态和运行目录</h3><p>解压项目代码后，我们点击网站的<code>设置</code><br>设置运行目录： <img src="https://r2.leshans.eu.org/2023/08/f467f7b615a5318d4577f287015a74cc." alt="设置网站运行目录.png"> 设置伪静态：<br><img src="https://r2.leshans.eu.org/2023/08/f96333932694eb54bbf5e48a2560e66f." alt="伪静态.png"></p><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><h3 id="一、访问你的网站域名，进入安装流程"><a href="#一、访问你的网站域名，进入安装流程" class="headerlink" title="一、访问你的网站域名，进入安装流程"></a>一、访问你的网站域名，进入安装流程</h3><h3 id="二、按实际情况填写网站配置信息"><a href="#二、按实际情况填写网站配置信息" class="headerlink" title="二、按实际情况填写网站配置信息"></a>二、按实际情况填写网站配置信息</h3><p><img src="https://r2.leshans.eu.org/2023/08/30a7266885d4d8013a6a4a9d54cd66bf." alt="安装页面"></p><h2 id="配置守护进程"><a href="#配置守护进程" class="headerlink" title="配置守护进程"></a>配置守护进程</h2><p>注意，很多人嫌麻烦不配置这一步，那你出了问题别哔哔！⚠ ⚠ ⚠<br>注意，很多人嫌麻烦不配置这一步，那你出了问题别哔哔！⚠ ⚠ ⚠<br>注意，很多人嫌麻烦不配置这一步，那你出了问题别哔哔！⚠ ⚠ ⚠</p><p><code>堡塔应用管理器</code>是我们用来管理laravel队列进程的工具。</p><p>很多同学喜欢问可不可以不执行这一步。</p><p>现在我明确的告诉你，不可以！请按照教程来，不然可以选择不使用。🙅‍♀️</p><p>没有它的话你的程序执行会异常！</p><p>如果不喜欢使用<code>堡塔应用管理器</code>，那么使用1.x版本<code>supervisor</code>也是可以的，两个必须选一个！ 必选题！</p><h3 id="一、堡塔应用管理器配置教程"><a href="#一、堡塔应用管理器配置教程" class="headerlink" title="一、堡塔应用管理器配置教程"></a>一、堡塔应用管理器配置教程</h3><p>进入宝塔控制面板： 步骤：【软件商店】-&gt;【堡塔应用管理器设置】-&gt;【添加应用】 如图： <img src="https://r2.leshans.eu.org/2023/08/e83930603e2cf3ad2f5a5f47e3d346c2." alt="守护进程配置"></p><p>名称：随意，如dujiao<br>应用环境: 选择php7.4<br>启动文件: 网站根目录 + <code>/artisan</code><br>执行目录: 网站根目录<br>启动参数: <code> queue:work</code></p><p>保存即可!</p><p>如果遇到没有自己的php版本怎么办？或者系统有多个php版本，但是应用环境没有自己想要的那个php版本怎么办？</p><p>请看下一步新增应用环境</p><h4 id="新增应用环境"><a href="#新增应用环境" class="headerlink" title="新增应用环境"></a>新增应用环境</h4><p><img src="https://r2.leshans.eu.org/2023/08/f16f93e99135622c62d6574b1a967e4d." alt="新增应用环境"></p><p>环境名称可以随便填。</p><p>启动文件一般是 <code>/www/server/php/72/bin/php</code></p><p>⚠️注意哦，我这里是72就是php7.2，你可能是73或者74。按照自己来，我这里只是举例！</p><h3 id="二、supervisor配置教程"><a href="#二、supervisor配置教程" class="headerlink" title="二、supervisor配置教程"></a>二、supervisor配置教程</h3><p>步骤：【软件商店】-&gt;【Supervisor设置】-&gt;【添加守护进程】 如图： <img src="https://r2.leshans.eu.org/2023/08/d87497f07bf1ddd37920e1d4aab00027." alt="守护进程配置"></p><p>命令参考：</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/php/</span><span class="hljs-number">74</span><span class="hljs-regexp">/bin/</span>php <span class="hljs-regexp">/www/</span>wwwroot<span class="hljs-regexp">/dujiaoka/</span>artisan queue:work</code></pre></div><p>名称：随意填写<br>启动用户：选择www<br>运行目录：选择程序根目录<br>启动命令：&#x2F;www&#x2F;server&#x2F;php&#x2F;你的php版本&#x2F;bin&#x2F;php &#x2F;www&#x2F;wwwroot&#x2F;你的网站根目录&#x2F;artisan queue:work</p><p>请注意你自己的php版本和网站根目录。不要瞎抄照着我的写？ 注意命令之间的空格。</p>]]></content>
    
    
    
    <tags>
      
      <tag>发卡</tag>
      
      <tag>独角数卡</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>好用免费开源同步工具Syncthing安装教程</title>
    <link href="/posts/359b0916.html"/>
    <url>/posts/359b0916.html</url>
    
    <content type="html"><![CDATA[<h2 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h2><p><code>Syncthing</code> 是一个连续的文件同步程序。它可以在两台或更多的计算机之间同步文件。</p><p>总结下面几个特点：</p><ul><li>中文友好（支持<code>中文界面</code>）</li><li>设置简单，易上手</li><li>支持 Linux、Windows、macOS（NAS 也可以方便部署）</li><li>同步效率不错</li><li>支持版本控制（可以恢复到指定的版本）</li><li><code>Docker 部署方便</code></li><li>支持同步加密，保护数据安全（不过咕咕还不知道如果解密，后续可以阅读一下文档，有知道的小伙伴也欢迎留言区留言和大家分享一下）</li><li>支持一对多、多对一、一对一</li><li>使用的人比较多，发现问题可以比较容易搜索到解决方案。（毕竟 GitHub 上都有 <code>4 万多的 star</code>）</li></ul><h2 id="2-项目展示"><a href="#2-项目展示" class="headerlink" title="2. 项目展示"></a>2. 项目展示</h2><p>GitHub 项目地址：<a href="https://github.com/syncthing/syncthing">https://github.com/syncthing/syncthing</a></p><p>文档地址：<a href="https://docs.syncthing.net/intro/getting-started.html">https://docs.syncthing.net/intro/getting-started.html</a></p><p>客户端下载：<a href="https://github.com/syncthing/syncthing/releases">https://github.com/syncthing/syncthing/releases</a></p><p>本文用的 Docker 镜像：<a href="https://hub.docker.com/r/linuxserver/syncthing">https://hub.docker.com/r/linuxserver/syncthing</a></p><h2 id="3-搭建方式"><a href="#3-搭建方式" class="headerlink" title="3. 搭建方式"></a>3. 搭建方式</h2><div class="code-wrapper"><pre><code class="hljs bash">apt update -y  <span class="hljs-comment"># 升级packages  </span>  apt install wget curl sudo vim git  <span class="hljs-comment"># 推荐Debian</span></code></pre></div><p>创建一下安装的目录：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /home/data/docker_data/syncthing   <span class="hljs-built_in">cd</span> /home/data/docker_data/syncthing    nano docker-compose.yml</code></pre></div><p><code>docker-compose.yml</code> 填入以下内容：</p><div class="code-wrapper"><pre><code class="hljs bash">---version: <span class="hljs-string">&quot;2.1&quot;</span>services:  syncthing:    category_bar: <span class="hljs-literal">true</span> lscr.io/linuxserver/syncthing    container_name: syncthing    hostname: syncthing <span class="hljs-comment">#optional</span>    environment:      - PUID=1000      - PGID=1000      - TZ=Asia/Shanghai    volumes:      - /home/data/docker_data/syncthing/config:/config      - /home/data/docker_data/syncthing/Documents:/Documents      - /home/data/docker_data/syncthing/Media:/Media    ports:      - 8384:8384      - 22000:22000/tcp      - 22000:22000/udp      - 21027:21027/udp    restart: unless-stopped</code></pre></div><p>没问题的话，<code>ctrl+x</code> 退出，按 <code>y</code> 保存，<code>enter</code> 确认。</p><p>然后运行：</p><div class="code-wrapper"><pre><code class="hljs bash">docker-compose up -d</code></pre></div><p>访问：<code>http:服务ip:8384</code> 即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>syncthing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10个可以免费白嫖VPS、云服务器的网站！给大家都罗列出来了….</title>
    <link href="/posts/ee93bc.html"/>
    <url>/posts/ee93bc.html</url>
    
    <content type="html"><![CDATA[<p><img src="https://r2.leshans.eu.org/2023/08/ff30b428f4733701436f1ed9403985f3.webp"></p><p>1.LinuxOne （无需信用卡）：【**<a href="https://linuxone.cloud.marist.edu/#/login">链接</a>**】 需要按视频教程的步骤进行设置。</p><p>2.Hax VPS （无需信用卡）：【**<a href="https://hax.co.id/">链接</a>**】</p><p>3.Oracle Cloud 甲骨文云：【<a href="https://www.freedidi.com/6075.html"><strong>链接和工具</strong></a>】</p><p>4.AWS 亚马逊云：【**<a href="https://www.freedidi.com/7568.html">注册链接</a>**】</p><p>5.Vultr：<strong>注册首充35刀就送100美元</strong>【**<a href="https://www.vultr.com/?ref=8941239-8H">优惠链接</a>**】</p><p>6.GCP 谷歌云 ：【**<a href="https://cloud.google.com/">官方链接</a>**】</p><p>7.Linode：【**<a href="https://linode.gvw92c.net/1re6ng">链接直达</a>**】</p><p>8.Ditital Ocean：<strong>充值25刀可以获得额外200美元</strong>【**<a href="https://m.do.co/c/6769296f9fda">优惠链接</a>**】</p><p>9.Kamatera：【**<a href="https://www.kamatera.com/express/compute/">注册链接</a>**】</p><p>10.CIVO： 【**<a href="https://www.civo.com/">官方链接</a>**】</p><p>11.Evolution Host：【<a href="https://evolution-host.com/free-vps.php"><strong>申请链接</strong></a>】</p><p>连接VPS、云服务器的工具：</p><p>1.WinSCP：<a href="https://winscp.net/">https://winscp.net</a></p><p>2.Putty：<a href="https://www.putty.org/">https://www.putty.org</a></p><p>3.tabby: <a href="https://tabby.sh/">https://tabby.sh/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>vps</tag>
      
      <tag>免费</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vps使用rclone挂载Google Drive教程</title>
    <link href="/posts/753561ea.html"/>
    <url>/posts/753561ea.html</url>
    
    <content type="html"><![CDATA[<p>其实 <code>rclone</code> 挂载 <code>Google Drive</code> 网上的教程已经很多了，但是大多数的教程都有一点点过时，与现在的实际操作有一点出入，故整理了当前的挂载操作，以防忘记。</p><h2 id="一、-安装并配置-rclone"><a href="#一、-安装并配置-rclone" class="headerlink" title="一、 安装并配置 rclone"></a>一、 安装并配置 rclone</h2><p><code>安装unzip和curl：</code></p><p>Debian&#x2F;Ubuntu系统</p><div class="code-wrapper"><pre><code class="hljs bash">sudo apt-get updatesudo apt-get install curl unzip</code></pre></div><p>CentOS</p><div class="code-wrapper"><pre><code class="hljs bash">sudo yum install curl unzip</code></pre></div><p><code>安装依赖：</code></p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># centos</span>yum install -y fuse fuse3 或者 yum install fuse3<span class="hljs-comment"># debian</span>apt-get install fuse3</code></pre></div><p><code>一键安装rclone脚本</code></p><div class="code-wrapper"><pre><code class="hljs bash">curl https://rclone.org/install.sh | sudo bash</code></pre></div><p><code>vps上开始配置rclone：</code></p><div class="code-wrapper"><pre><code class="hljs bash">rclone config</code></pre></div><p><code>选择 n</code>，新建一个</p><div class="code-wrapper"><pre><code class="hljs html">No remotes found, make a new one?n) New remotes) Set configuration passwordq) Quit confign/s/q&gt; n</code></pre></div><p>输入新建的名称，随意写:比如 <code>gd</code></p><div class="code-wrapper"><pre><code class="hljs html">Enter name for new remote.name&gt;gd</code></pre></div><p>选择要挂载的网盘类型，<code>选择18</code>，<code>Google Drive</code></p><p>输入<code>client_id</code>、<code>client_secret</code></p><p>选择<code>Google Drive</code> 谷歌云盘的操作权限，<code>选择1</code>，<code>完整</code>的访问权限</p><div class="code-wrapper"><pre><code class="hljs html">Option scope.Scope that rclone should use when requesting access from drive.Choose a number from below, or type in your own value.Press Enter to leave empty. 1 / Full access all files, excluding Application Data Folder.   \ (drive) 2 / Read-only access to file metadata and file contents.   \ (drive.readonly)   / Access to files created by rclone only. 3 | These are visible in the drive website.   | File authorization is revoked when the user deauthorizes the app.   \ (drive.file)   / Allows read and write access to the Application Data folder. 4 | This is not visible in the drive website.   \ (drive.appfolder)   / Allows read-only access to file metadata but 5 | does not allow any access to read or download file content.   \ (drive.metadata.readonly)scope&gt; 1</code></pre></div><p>回车默认</p><div class="code-wrapper"><pre><code class="hljs html">Option service_account_file.Service Account Credentials JSON file path.Leave blank normally.Needed only if you want use SA instead of interactive login.Leading `~` will be expanded in the file name as will environment variables such as `$&#123;RCLONE_CONFIG_DIR&#125;`.Enter a value. Press Enter to leave empty.service_account_file&gt;</code></pre></div><p>是否要编辑<code>高级配置</code>，我这里<code>选择n</code></p><div class="code-wrapper"><pre><code class="hljs html">Edit advanced config?y) Yesn) No (default)y/n&gt; n</code></pre></div><p>下面注意了，<code>选择n</code>，表示自行配置，</p><div class="code-wrapper"><pre><code class="hljs bash">Use auto config? * Say Y <span class="hljs-keyword">if</span> not sure * Say N <span class="hljs-keyword">if</span> you are working on a remote or headless machiney) Yes (default)n) Noy/n&gt; n</code></pre></div><p><code>复制代码</code>(下图红色框起来的地方)，等下会用到</p><p><img src="https://r2.leshans.eu.org/2023/08/e14e26cf7cd20061f721d90b5f606de6.webp"></p><h2 id="二、获取授权"><a href="#二、获取授权" class="headerlink" title="二、获取授权"></a>二、获取授权</h2><h3 id="一：下载rclone-（windows）"><a href="#一：下载rclone-（windows）" class="headerlink" title="一：下载rclone  （windows）"></a>一：下载rclone  （windows）</h3><p> <a href="https://rclone.org/downloads/">https://rclone.org/downloads/</a></p><p><img src="https://r2.leshans.eu.org/2023/08/0a3618be8579c7bb4517a897dabe8a10.webp"></p><h3 id="二：获取授权码"><a href="#二：获取授权码" class="headerlink" title="二：获取授权码"></a>二：获取授权码</h3><p><code>打开cmd:</code> 进入你的 <code>rclone目录</code> – <code>空白处右键</code>–<code>在此处打开命令行窗口</code></p><p>如果开启了科学上网，输入以下命令：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> http_proxy=socks5://127.0.0.1:7890<span class="hljs-built_in">set</span> https_proxy=socks5://127.0.0.1:7890</code></pre></div><p>取消sock5代理 （可选）</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> http_proxy=<span class="hljs-built_in">set</span> https_proxy=</code></pre></div><p>粘贴VPS生成的<code>代码</code>回车</p><p>（<code>浏览器</code>自动打开进入到谷歌账号登录界面，并<code>选择同意授权</code>。由于是新申请的 API，所以谷歌会提醒该应用未经验证。但是左下角有一行小灰字，<code>点击选择继续就能授权</code>）</p><p>授权成功浏览器会提示 <code>success：</code></p><p><img src="https://r2.leshans.eu.org/2023/08/3fde03baf64fa2e8c9bdc91d3123645f.webp"></p><p>此时返回CMD命令行，等待几秒就能看见<code>授权的 code</code> 了。</p><p><img src="https://r2.leshans.eu.org/2023/08/c8e213c767691b9501779bfb24632785.webp"></p><p>复制授权，<code>回到vps终端</code>，粘贴到 vps 中。红色框起来的地方</p><p><img src="https://r2.leshans.eu.org/2023/08/f0a347b2b05250aaba0bb824a925d413.webp" alt="image-20230810014110112"></p><p>接下来 rclone 会询问是否为团队盘：<code>选择n</code></p><div class="code-wrapper"><pre><code class="hljs html">Configure this as a Shared Drive (Team Drive)?y) Yesn) No (default)</code></pre></div><p>如果您要挂载的就是<code>团队盘</code>，那么选择 y，不是的话就选择 n</p><p><code>此时配置就已经结束了</code>，退出 clone，开始挂载。</p><h2 id="三、-挂载-Google-Drive"><a href="#三、-挂载-Google-Drive" class="headerlink" title="三、 挂载 Google Drive"></a>三、 挂载 Google Drive</h2><p>首先新建一个文件夹用于挂载：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /home/google</code></pre></div><p>开始挂载：</p><div class="code-wrapper"><pre><code class="hljs bash">rclone mount gd: /home/google --allow-other --vfs-cache-mode writes --allow-non-empty --no-modtime &amp;</code></pre></div><p>其中 <code>gd</code> 是 rclone 配置时输入的<code>配置名称</code>，<code>/home/google</code> 是挂载目录</p><blockquote><p>还可以<code>自定义</code>设置<code>网盘里的文件夹路径</code>，例如：</p></blockquote><div class="code-wrapper"><pre><code class="hljs bash">rclone mount gd:backup /home/google --allow-other --vfs-cache-mode writes --allow-non-empty --no-modtime &amp;</code></pre></div><p><code>gd</code> 为 rclone 的配置名称：<code>backup</code> 为网盘里的目录名</p><p>检查挂载：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h</code></pre></div><p>卸载挂载：（<code>/home/google</code> 为挂载目录）</p><div class="code-wrapper"><pre><code class="hljs bash">fusermount -qzu /home/google</code></pre></div><p>完结~</p>]]></content>
    
    
    
    <tags>
      
      <tag>rclone</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将hugo博客部署至IPFS</title>
    <link href="/posts/9c8e95fb.html"/>
    <url>/posts/9c8e95fb.html</url>
    
    <content type="html"><![CDATA[<p>官网: <a href="https://fleek.co/hosting/">https://fleek.co/hosting/</a></p><p>免费套餐: 每月50G流量</p><p><a href="https://fleek.co/pricing/">https://fleek.co/pricing/</a></p><table><thead><tr><th>特点</th><th>优势</th></tr></thead><tbody><tr><td>Git 集成</td><td>简化代码管理和部署流程</td></tr><tr><td>自动部署</td><td>省时省力地将站点部署到网络</td></tr><tr><td>自动SSL</td><td>自动为站点提供SSL安全证书</td></tr><tr><td>全球CDN</td><td>加速内容全球分发</td></tr><tr><td>速度极快</td><td>利用边缘网络提供快速加载</td></tr><tr><td>便于使用</td><td>用户友好的界面和操作</td></tr><tr><td>协作性</td><td>便于团队协作和版本控制</td></tr><tr><td>可定制</td><td>支持灵活的定制需求</td></tr></tbody></table><table><thead><tr><th>优势</th><th>描述</th></tr></thead><tbody><tr><td>速度快</td><td>Fleek的边缘网络结合了IPFS和边缘计算技术，为用户提供极快的加载时间，同时部署到Fleek Edge。</td></tr><tr><td>去中心化</td><td>使用Fleek，您的IPFS托管网站和应用程序不仅备份在其服务器上，还会自动存档到去中心化存储网络Filecoin，作为开放网络中的附加备份层。</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>hugo</tag>
      
      <tag>IPFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>公共DNS汇总</title>
    <link href="/posts/2b182b9a.html"/>
    <url>/posts/2b182b9a.html</url>
    
    <content type="html"><![CDATA[<p>公共DNS汇总,互联网企业&amp;高校DNS</p><span id="more"></span><h2 id="互联网企业-高校DNS"><a href="#互联网企业-高校DNS" class="headerlink" title="互联网企业&amp;高校DNS"></a><strong>互联网企业&amp;高校DNS</strong></h2><p><code>(推荐中科大)</code></p><table><thead><tr><th>厂商</th><th>IPV4地址（主）</th><th>IPV4地址（备）</th></tr></thead><tbody><tr><td>中科大DNS 中国电信</td><td>202.141.162.123</td><td></td></tr><tr><td>中科大DNS 中国移动</td><td>202.141.176.93</td><td></td></tr><tr><td>中科大DNS 教育网</td><td>202.38.93.153</td><td></td></tr><tr><td>114 DNS</td><td>114.114.114.114</td><td>114.114.115.115</td></tr><tr><td>114 DNS安全版</td><td>114.114.114.119</td><td>114.114.115.119</td></tr><tr><td>114 DNS家庭版</td><td>114.114.114.110</td><td>114.114.115.110</td></tr><tr><td>阿里 AliDNS</td><td>223.5.5.5</td><td>223.6.6.6</td></tr><tr><td>百度 BaiduDNS</td><td>180.76.76.76</td><td></td></tr><tr><td>DNSPod&#x2F;腾讯DNS</td><td>119.29.29.29</td><td>119.28.28.28</td></tr><tr><td></td><td>182.254.116.116</td><td>182.254.118.118</td></tr><tr><td>DNSPod&#x2F;腾讯DNS DoT</td><td>dot.pub</td><td>1.12.12.12 | 120.53.53.53</td></tr><tr><td>CNNIC SDNS</td><td>1.2.4.8</td><td>210.2.4.8</td></tr><tr><td>OneDNS 拦截版</td><td>117.50.11.11</td><td>52.80.66.66</td></tr><tr><td>OneDNS 纯净版</td><td>117.50.10.10</td><td>52.80.52.52</td></tr><tr><td>OneDNS 家庭版</td><td>117.50.60.30</td><td>52.80.60.30</td></tr><tr><td>清华大学 TUNA</td><td>101.6.6.6</td><td></td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建一个小而美的网站流量监控 ——Umami</title>
    <link href="/posts/dcfdb8bd.html"/>
    <url>/posts/dcfdb8bd.html</url>
    
    <content type="html"><![CDATA[<p>这一期带大家来搭建一个网站流量的监控，看看自己的小破站到底有多少人看，是不是 1 ip 呢？</p><p><img src="https://r2.leshans.eu.org/2023/08/a071cb19d51b8e08e2f9944b04cd73e6.webp"></p><p><img src="https://r2.leshans.eu.org/2023/08/43e48fd11b5fcae50b7c4b3f31b8ab3b.webp"></p><p>非常清爽，满足小博客使用已经足够了，</p><h3 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h3><h4 id="1、安装-docker、curl、git、vim、wget-等必备的工具"><a href="#1、安装-docker、curl、git、vim、wget-等必备的工具" class="headerlink" title="1、安装 docker、curl、git、vim、wget 等必备的工具"></a>1、安装 docker、curl、git、vim、wget 等必备的工具</h4><div class="code-wrapper"><pre><code class="hljs bash">apt update -y    apt install -y wget vim sudo curl git    wget -qO- get.docker.com | bash    docker -v    systemctl <span class="hljs-built_in">enable</span> docker    sudo curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose    sudo <span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose    docker-compose --version</code></pre></div><h4 id="2、然后到-github-上接取项目，进入目录"><a href="#2、然后到-github-上接取项目，进入目录" class="headerlink" title="2、然后到 github 上接取项目，进入目录"></a>2、然后到 github 上接取项目，进入目录</h4><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~    <span class="hljs-built_in">mkdir</span> -p ~/data/docker_data/umami    <span class="hljs-built_in">cd</span> ~/data/docker_data/umami</code></pre></div><h4 id="3、编辑配置文件"><a href="#3、编辑配置文件" class="headerlink" title="3、编辑配置文件"></a>3、编辑配置文件</h4><div class="code-wrapper"><pre><code class="hljs bash">nano docker-compose.yml</code></pre></div><h4 id="4、写入-Docker-compose-代码"><a href="#4、写入-Docker-compose-代码" class="headerlink" title="4、写入 Docker-compose 代码"></a>4、写入 Docker-compose 代码</h4><div class="code-wrapper"><pre><code class="hljs bash">---  version: <span class="hljs-string">&#x27;3&#x27;</span>  services:    umami:      category_bar: <span class="hljs-literal">true</span> docker.umami.dev/umami-software/umami:postgresql-latest      ports:        - <span class="hljs-string">&quot;3000:3000&quot;</span>      environment:        DATABASE_URL: postgresql://umami:umami@db:5432/umami        DATABASE_TYPE: postgresql        APP_SECRET: replace-me-with-a-random-string      depends_on:        - db      restart: always    db:      category_bar: <span class="hljs-literal">true</span> postgres:15-alpine      environment:        POSTGRES_DB: umami        POSTGRES_USER: umami        POSTGRES_PASSWORD: umami      volumes:        - ./sql/schema.postgresql.sql:/docker-entrypoint-initdb.d/schema.postgresql.sql:ro        - ./umami-db-data:/var/lib/postgresql/data      restart: always</code></pre></div><p>检查完毕之后，<code>ctrl+x</code> 退出，按 <code>y</code> 确认修改内容， <code>enter</code> 确认</p><h4 id="5、启动-Umami"><a href="#5、启动-Umami" class="headerlink" title="5、启动 Umami"></a>5、启动 Umami</h4><div class="code-wrapper"><pre><code class="hljs bash">docker-compose up -d</code></pre></div><p>此时，访问 <code>http://ip:3000</code> 就可以访问了，打开的是英文界面，右上方可以切换语言，默认用户名为 <code>admin</code>，密码为 <code>umami</code></p><p>宝塔用户需要打开防火墙，放行 <code>3000</code> 端口，腾讯云、阿里云等用户还需要在官网后台服务器页面放行官方防火墙的 <code>3000</code> 端口。</p><p>如果要反向代理，且反向代理的服务与 umami 在一台服务器上，可以不用放行 <code>3000</code> 端口。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>目前用了大半年了，感觉效果不错，有一个缺点是不能统计到搜索的关键词。</p><p>类似的统计服务还有百度统计、谷歌统计、Matoma 等等，不过他们都没有这个这么轻量</p>]]></content>
    
    
    
    <tags>
      
      <tag>Umami</tag>
      
      <tag>统计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EasyImage：一个简洁的开源图床程序</title>
    <link href="/posts/2fb64a70.html"/>
    <url>/posts/2fb64a70.html</url>
    
    <content type="html"><![CDATA[<h2 id="EasyImage-简单图床-2-0"><a href="#EasyImage-简单图床-2-0" class="headerlink" title="EasyImage 简单图床 2.0"></a><a href="https://www.nbmao.com/archives/tag/easyimage" title="View all posts in EasyImage">EasyImage</a> 简单图床 2.0</h2><p>支持多文件上传,简单无数据库,返回图片url,markdown,bbscode,html的一款<a href="https://www.nbmao.com/archives/tag/%e5%9b%be%e5%ba%8a%e7%a8%8b%e5%ba%8f" title="View all posts in 图床程序">图床程序</a></p><p>演示地址：<a href="https://png.cm/">png.cm</a></p><p>在当前html5流行大势所趋下，遂利用基础知识新写了一个以html5为默认上传并且支持flash,向下兼容至IE9。</p><p><img src="https://r2.leshans.eu.org/2023/08/04aa116342309a2a4d7d04a8ea7ed536.webp"></p><h4 id="功能支持："><a href="#功能支持：" class="headerlink" title="功能支持："></a>功能支持：</h4><ul><li><input checked="" disabled="" type="checkbox">  支持仅登录后上传</li><li><input checked="" disabled="" type="checkbox">  支持设置图片质量</li><li><input checked="" disabled="" type="checkbox">  支持上传图片转换为指定格式</li><li><input checked="" disabled="" type="checkbox">  支持文字&#x2F;图片水印</li><li><input checked="" disabled="" type="checkbox">  支持设置图片指定宽&#x2F;高</li><li><input checked="" disabled="" type="checkbox">  支持限制最低宽度&#x2F;高度上传</li><li><input checked="" disabled="" type="checkbox">  支持设置广告</li><li><input checked="" disabled="" type="checkbox">  支持开启&#x2F;关闭api上传</li><li><input checked="" disabled="" type="checkbox">  在线管理图片(增、删、改、查)</li><li><input checked="" disabled="" type="checkbox">  支持网站统计 请将统计代码放入:public&#x2F;static&#x2F;hm.js</li><li><input checked="" disabled="" type="checkbox">  更多·····</li></ul><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><a href="https://github.com/icret/easyImages2.0#%E6%B3%A8%E6%84%8F"></a>注意：</h4><ol><li>安装之前先使用浏览器访问check.php检查扩展是否都安装！</li><li>请将所有文件赋予0755权限或www权限</li><li>上传后必须修改config.php的位置：<ul><li>domain 当前图片域名</li><li>password 登录管理密码！</li></ul></li><li>如果无法登陆管理界面或上传图片，请先打开check.php检查扩展或者使用phpinfo检查。</li><li>可以使用浏览器的 F12调试模式-&gt;console查看错误</li><li>如果对php不太熟悉的话，不要将<a href="https://www.nbmao.com/archives/tag/%e5%9b%be%e5%ba%8a%e7%a8%8b%e5%ba%8f" title="View all posts in 图床程序">图床程序</a>放置于二级目录</li><li>下载源码后可以删除一些文件：README.md,check.php,LICENSE</li></ol><h4 id="API上传示例："><a href="#API上传示例：" class="headerlink" title="API上传示例："></a>API上传示例：</h4><p>参数：</p><table><thead><tr><th align="center">参数名称</th><th align="center">类型</th><th align="center">是否必须</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">image</td><td align="center">file</td><td align="center">是</td><td align="center">需上传的图片</td></tr><tr><td align="center">api</td><td align="center">text</td><td align="center">是</td><td align="center">token</td></tr></tbody></table><p>html form上传示例:</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;../index.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;image&quot;</span> <span class="hljs-attr">accept</span>=<span class="hljs-string">&quot;image/*&quot;</span> &gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;token&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;在tokenList文件找到token并输入&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre></div><p>api上传成功后返回json：</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">// 参数:&quot;sucess&quot;上传成功 &quot;url&quot; 图片链接  &quot;del&quot; 删除链接 &quot;failed&quot; 上传失败 &quot;message&quot; 错误信息</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;http:\/\/192.168.1.15\/i\/2021\/05\/03\/u34au6_2.jpg&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;del&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;http:\/\/192.168.1.15\/api\/api-web.php?hash=XH%BB2Z%D1%08%D8%E2%D7%048%DFJ%86n%C0%06%DAD%DCP%3E%CF%C4%1B%60%E5%C4Pli&quot;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><h4 id="安全配置"><a href="#安全配置" class="headerlink" title="安全配置"></a><a href="https://github.com/icret/easyImages2.0#%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE"></a>安全配置</h4><ul><li>Apache配置文件默认设置上传目录不可运行</li></ul><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">RewriteEngine</span> <span class="hljs-literal">on</span> RewriteCond % !^$<span class="hljs-attribute">RewriteRule</span> i/(.*).(php)$ –<span class="hljs-meta"> [F]</span><span class="hljs-attribute">RewriteRule</span> public/(.*).(php)$ –<span class="hljs-meta"> [F]</span><span class="hljs-attribute">RewriteRule</span> config/(.*).(php)$ –<span class="hljs-meta"> [F]</span></code></pre></div><ul><li>Nginx请在Nginx配置：</li></ul><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-comment"># 禁止运行php的目录</span>   <span class="hljs-section">location</span> <span class="hljs-regexp">~* ^/(i|public|config)/.*\.(php|php5)$</span>   &#123;    <span class="hljs-attribute">deny</span> all;   &#125;</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>8款良心实用的软件推荐，真正的新系统必备，绝对刷新你的认知！</title>
    <link href="/posts/d4c67a1c.html"/>
    <url>/posts/d4c67a1c.html</url>
    
    <content type="html"><![CDATA[<p><img src="https://r2.leshans.eu.org/2023/08/e3eba7dbc4c2d2480ba74445f0035f55.webp" alt="img"></p><p>1.Final2x 图片放大工具，免费开源 <strong>【<a href="https://github.com/Tohrusky/Final2x/">开源项目</a>】</strong></p><p>2.Gopeed 一款支持全平台的下载器 <strong>【<a href="https://gopeed.com/zh-CN">官方下载</a>】</strong></p><p>3.视频压缩神器 <strong>【<a href="https://handbrake.fr/">下载链接</a>】</strong></p><p>4.Optimizer 堪称是 Windows 系统上最好用的性能优化器！<strong>【<a href="https://github.com/hellzerg/optimizer">开源项目</a>】</strong></p><p>5.memreduct 内存自动优化清理 <strong>【<a href="https://github.com/henrypp/memreduct">开源项目</a>】</strong></p><p>6.ssh客户端 <a href="https://tabby.sh/">https://tabby.sh/</a></p><p>7.在线抠图 <a href="https://www.remove.bg/zh">https://www.remove.bg/zh</a></p><p>8.压缩图像 <a href="https://www.iloveimg.com/zh-cn/compress-image">https://www.iloveimg.com/zh-cn/compress-image</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>软件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开源自动工作流工具 n8n 发布 1.0 版本</title>
    <link href="/posts/50bdae02.html"/>
    <url>/posts/50bdae02.html</url>
    
    <content type="html"><![CDATA[<p>开源自动工作流工具 <a href="https://www.appinn.com/n8n-io/">n8n</a> 前几天在<a href="https://blog.n8n.io/n8n-version-1/">官方博客</a>上宣布了新里程碑 1.0 版本，拥有更加稳定的性能，并且提供了 Python 支持，新增<a href="https://semver.org/lang/zh-CN/">语义版本控制</a>，代表着 n8n 可以用于更苛刻的生产环境。</p><p><img src="https://r2.leshans.eu.org/2023/08/e4e9283c1a8f50181993eb6ef9235700.webp"></p><p>小众软件在 2019 年介绍过 <a href="https://www.appinn.com/n8n-io/">n8n</a>，这是一个开源的自动工作流服务，类似 IFTTT、Zapier，可以互联互通包括 GitHub、Dropbox、Google、NextCLoud、RSS、Slack、Telegram 在内的几十款在线服务。实现当 A 条件发生，触发 B 服务这样的自动工作流程。</p><p>你可以直接使用 n8n 提供的服务，也可以自托管使用自己的服务器来处理工作流。</p><p>一键自托管安装（基于 Docker）：</p><div class="code-wrapper"><pre><code class="hljs bash">docker run -it --<span class="hljs-built_in">rm</span> --name n8n -p 5678:5678 -v ~/.n8n:/home/node/.n8n docker.n8n.io/n8nio/n8n</code></pre></div><p>然后，就可以使用 ip:5678 来访问控制台了。</p><p><img src="https://r2.leshans.eu.org/2023/08/5ddf6def2032cd1448b369d7e164254c.webp"></p><p>附：n8n 更新日志：</p><p>我们很高兴地宣布，n8n版本1.0已经发布，这是我们的工作流自动化平台的最新迭代。有了这个版本，n8n自信地走上了作为生产就绪服务的舞台，磨砺以满足我们的云、自托管和企业用户的需求。</p><p>我们对稳定性和性能的承诺比以往任何时候都更加坚定。在版本1.0中，我们优化了n8n，以支持您的关键工作流，使其成为您自动化旅程中的坚定伙伴。</p><p>响应广大用户的需求，n8n现在提供了Python支持，这为依赖Python进行自动化任务的用户提供了新的能力。</p><p>为了简化您的更新过程，我们采用了语义化版本。这保证了您能体验到可预测的、无麻烦的更新，保持与我们最新的增强和bug修复同步。</p><p>版本1.0体现了我们致力于在最具挑战性的环境中使n8n变得可行的承诺。我们推出了单点登录（SSO）等功能，以便顺利地与您现有的身份验证系统集成。您现在可以在多个环境中同步工作流，并使用全局变量、日志流式处理和高级执行过滤器来增强您的工作流和简化自动化过程。</p><p>请注意，版本1.0引入了一些重大变化。我们准备了完整的迁移指南，确保您现有工作流的顺利过渡。 在庆祝这个里程碑的同时，我们向活跃的n8n社区表达了诚挚的感谢。您持续的支持和深思熟虑的反馈对于塑造今天的n8n有着重大的作用。</p><p>拥抱自动化的未来。自动化愉快！</p><p>n8n团队</p>]]></content>
    
    
    
    <tags>
      
      <tag>工作流</tag>
      
      <tag>n8n</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux VPS服务器SSH端口一键修改脚本</title>
    <link href="/posts/fe6aee4d.html"/>
    <url>/posts/fe6aee4d.html</url>
    
    <content type="html"><![CDATA[<p>说明：我们的很多<code>VPS</code>服务器，默认的端口都是<code>22</code>，所以一直会被人扫描爆破，很容易会出现问题，所以我们需要通过修改端口来尽可能减少这种事情发生，之前发过手动修改教程，但对于很多小白或者很懒的人来说，更喜欢一键脚本就能完成的方法，这里就整了个<code>SSH</code>端口一键修改脚本。从<code>OneinStack</code>一键安装包上扒下来的。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>系统要求：支持<code>Debian</code>、<code>Ubuntu</code>、<code>CentOS</code>系统。<br>运行以下命令：</p><div class="code-wrapper"><pre><code class="hljs bash">wget https://raw.githubusercontent.com/woniu336/open_shell/main/sshport.sh&amp;&amp;  bash sshport.sh</code></pre></div><p>输入端口确认。再打开防火墙端口：</p><p><code>#如果防火墙使用的iptables（Centos 6），修改端口为8080</code></p><div class="code-wrapper"><pre><code class="hljs bash">iptables -I INPUT -p tcp --dport 8080 -j ACCEPTservice iptables saveservice iptables restart</code></pre></div><p><code>#如果使用的是firewall（CentOS 7）</code></p><div class="code-wrapper"><pre><code class="hljs bash">firewall-cmd --zone=public --add-port=8080/tcp --permanentfirewall-cmd --reload</code></pre></div><p>最后重启<code>ssh</code>生效：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#CentOS系统</span>service sshd restart<span class="hljs-comment">#Debian/Ubuntu系统</span>service ssh restart</code></pre></div><p>然后就可以使用新端口<code>SSH</code>登录了</p>]]></content>
    
    
    <categories>
      
      <category>vps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一条命令激活 Windows 系统</title>
    <link href="/posts/45210a04.html"/>
    <url>/posts/45210a04.html</url>
    
    <content type="html"><![CDATA[<h2 id="Windows-激活方法"><a href="#Windows-激活方法" class="headerlink" title="Windows 激活方法"></a>Windows 激活方法</h2><p>打开 命令提示符 (管理员)，复制以下命令到命令提示符并回车。</p><div class="code-wrapper"><pre><code class="hljs bash">slmgr /skms kms.v0v.bid &amp;&amp; slmgr /ato</code></pre></div><p>激活成功。</p>]]></content>
    
    
    <categories>
      
      <category>系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>最新原装正版的 Windows 11 系统官方纯净版，免费安装并激活！</title>
    <link href="/posts/a734d49f.html"/>
    <url>/posts/a734d49f.html</url>
    
    <content type="html"><![CDATA[<p>1.Windows 11 官方下载：【**<a href="https://www.microsoft.com/zh-cn/software-download/windows11">点击进入</a>**】</p><p>2.Rufus 写盘工具：【**<a href="https://rufus.ie/">官网链接</a>**】</p><p>3.永久免费激活看视频演示</p><p>4.KMS ：CMD以管理员身份依次输入以下命令</p><div class="code-wrapper"><pre><code class="hljs shell">slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GXslmgr /skms kms.loli.bestslmgr /ato</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows11</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Telegram 必备机器人，支持ChatGPT，永久免费，一键汉化，海量群组搜索，只有你还不知道？</title>
    <link href="/posts/8d458906.html"/>
    <url>/posts/8d458906.html</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>如果说翻墙后最必备的两个软件。</p><p>第一就是<a href="https://youtube.com/">Youtube</a>，俗称油管，YouTube拥有海量的视频内容，涵盖了几乎所有的领域和主题，到2023年，Youtube月活跃用户超过2.5亿，翻墙后1&#x2F;4的流量都在Youtube。</p><p>第二就是<a href="https://telegram.org/">Telegram</a>，俗称电报，由于Telegram支持创建大型群组和频道，可以容纳成千上万的成员。这使得它成为组织、社区和媒体机构进行广泛传播和交流的理想平台。</p><h3 id="对比QQ群和电报群"><a href="#对比QQ群和电报群" class="headerlink" title="对比QQ群和电报群"></a>对比QQ群和电报群</h3><p>给大家看一下QQ群和电报群的对比</p><p><img src="https://r2.leshans.eu.org/2023/08/0fedc58454a7a3b6add60e28ad82f243.webp"></p><p>QQ群默认200人，QQ达到一定等级可以升级为500人。1000人需要年费超级会员，3000人群需要超级会员+648。</p><p>电报群，一进去创建，就可以创建20万人的群，无任何限制，永久保存历史记录，不限制大小。</p><p>我说一句<code>国内的平台仗着国外的平台进不来就公然喂大家吃屎</code>大家没人反对吧。</p><p>而作为一个Telegram的新人，你可能都不知道如何找到想要的群组频道，Telegram给你准备了各种各样的机器人，机器人定制化并支持非常丰富的功能，而最主要的就是内置搜索，可以搜到任何你想要的群组，频道，强大能力堪比谷歌。</p><p>我今天就来给大家介绍一款集成了ChatGPT的电报机器人，可以免费无需任何API Key，随时随地和ChatGPT对话，还能在里面搜索到各种你想要的群组和资源。还可以帮你一键汉化。</p><h2 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h2><p>我们今天就来体验下，这款万能的机器人。</p><p><img src="https://r2.leshans.eu.org/2023/08/9c7f92abdb0249221132796a2dd567e4.webp"></p><p>直接在手机的电报应用打开电报应用，链接我放在了视频下方：<a href="https://t.me/jisou123bot">极搜机器人</a></p><p>或者直接在搜索框里面搜索 <code>jisou123bot</code>，自动就找到了这款机器人。</p><p>Info</p><p>它能做什么？ 这是一个搜索机器人，您可以向它发送关键字来寻找群组、频道或消息。另外，您还可以在它上面免费使用ChatGPT。</p><p>我们点击开始使用这个机器人。</p><p>自动进入机器人，如果你的电报还没有汉化，直接点击中文包，然后点击更改，就可以一键汉化，是不是非常方便。</p><p>菜单里面我们看看功能有多强大，热门群聊热搜排行榜等等。你也可以自己在消息栏搜索群组加入。</p><h3 id="ChatGPT"><a href="#ChatGPT" class="headerlink" title="ChatGPT"></a>ChatGPT</h3><p>大家最关注的可能就是<code>ChatGPT</code>了，很多人苦于没有ChatGPT的账号，今天就让大家体验一下ChatGPT，永久免费，没有限制。</p><p>点击菜单-&gt;切换到<code>ChatGPT</code></p><p>然后问它 几个问题。我们只做几个简单的测试。涉及逻辑，专业，文学。</p><ol><li><p>爸爸妈妈结婚是近亲结婚吗？</p></li><li><p>python怎么读取json文件？</p></li><li><p>给我写一篇年度最佳员工的获奖感言。</p></li></ol><p>可以感觉的回答速度和质量都是很不错的，如果你有兴趣赶紧尝试下。</p><h3 id="群组搜索"><a href="#群组搜索" class="headerlink" title="群组搜索"></a>群组搜索</h3><p>热门群聊</p><p><code>福利</code> -&gt; 这个我不说，懂的都懂，还有加密货币，游戏，电影，二次元等等分类。</p><p>比如你想搜索原神相关的内容，聊天窗口直接输入原神，就搜索了所有原神相关的内容，下面的图标可以过滤类型，聊天图标就是群组和频道，然后点击群组就只过滤群组，然后直接找到第一个群组：原神 提瓦特大陆加入群组。</p><h3 id="加入群组"><a href="#加入群组" class="headerlink" title="加入群组"></a>加入群组</h3><p>你可以把 机器人加入群组，来自动回复和支持chatgpt在群内聊天。</p><p>我这里教你创建一个群组加入机器人来回复消息。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Telegram</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>绝妙！在安装 Windows 11 时选择 no@thankyou.com 登录，轻松创建本地账户，无需联网账户</title>
    <link href="/posts/17d883d4.html"/>
    <url>/posts/17d883d4.html</url>
    
    <content type="html"><![CDATA[<p>感谢 @WM 的推荐，来自 X 的用户 @StarIight✨ 分享了一个 Featured&#x2F;Bug：只需要在安装 Windows 11 时，使用用户名 <a href="mailto:&#x6e;&#111;&#x40;&#x74;&#x68;&#x61;&#x6e;&#x6b;&#x79;&#x6f;&#117;&#46;&#x63;&#111;&#109;">&#x6e;&#111;&#x40;&#x74;&#x68;&#x61;&#x6e;&#x6b;&#x79;&#x6f;&#117;&#46;&#x63;&#111;&#109;</a> 登录，即可跳过联网账户，轻松创建本地账。@Appinn</p><p><img src="https://r2.leshans.eu.org/2023/08/d9e3cb6fa7ef31f63892d6960cddaac6.webp"></p><p>这就…当青小蛙看到这个的时候，只能卧槽了…</p><p>就在前几天，青小蛙还在论坛分享了这个：《不联网，无网络安装 Windows 11》</p><p>在 Windows 11 的最新版本 22H2 中，微软干掉了“我没有 Internet 连接”按钮，没登陆不让你装系统。</p><p>有些电脑网卡没有驱动就直接卡在这里了。 此时你可以按下 Shift+F10 打开命令提示符，输入 <code>oobe\BypassNRO.cmd</code> 即可重启进入带有跳过按钮的 OOBE。</p><hr><h2 id="x6e-x6f-x40-x74-x68-97-110-107-x79-x6f-117-x2e-99-x6f-109"><a href="#x6e-x6f-x40-x74-x68-97-110-107-x79-x6f-117-x2e-99-x6f-109" class="headerlink" title="&#x6e;&#x6f;&#x40;&#x74;&#x68;&#97;&#110;&#107;&#x79;&#x6f;&#117;&#x2e;&#99;&#x6f;&#109;"></a><a href="mailto:&#x6e;&#x6f;&#x40;&#x74;&#x68;&#97;&#110;&#107;&#x79;&#x6f;&#117;&#x2e;&#99;&#x6f;&#109;">&#x6e;&#x6f;&#x40;&#x74;&#x68;&#97;&#110;&#107;&#x79;&#x6f;&#117;&#x2e;&#99;&#x6f;&#109;</a></h2><p>而这个莫名其妙又有些好笑的账户，基本上就是替代上面的命令行，只需要登录时输入，密码随意，就能跟着向导创建本地账户了。</p><p>简直…太好用。</p><p>微软你说你是不是深井冰。</p>]]></content>
    
    
    <categories>
      
      <category>系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows11</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>目前最简单、最安全、最稳定的专属节点搭建方法</title>
    <link href="/posts/8c1cdb33.html"/>
    <url>/posts/8c1cdb33.html</url>
    
    <content type="html"><![CDATA[<h2 id="安装X-UI"><a href="#安装X-UI" class="headerlink" title="安装X-UI"></a>安装X-UI</h2><div class="code-wrapper"><pre><code class="hljs bash">bash &lt;(curl -Ls https://raw.githubusercontent.com/FranzKafkaYu/x-ui/956bf85bbac978d56c0e319c5fac2d6db7df9564/install.sh) 0.3.4.4</code></pre></div><p>选择1.8.3版本</p><p><img src="https://imgs.leshans.eu.org/2024/01/db08a7b8b19ced72df93c347b6bd1cb3.webp"></p><h2 id="各平台客户端"><a href="#各平台客户端" class="headerlink" title="各平台客户端"></a>各平台客户端</h2><p>Windows（v2rayN）：<a href="https://github.com/2dust/v2rayN/releases/tag/6.23">https://github.com/2dust/v2rayN/releases/tag/6.23</a></p><p>Android（v2rayNG）：<a href="https://github.com/2dust/v2rayNG/releases/tag/1.8.5">https://github.com/2dust/v2rayNG/releases/tag/1.8.5</a></p><p>IOS（shadowrocket）：<a href="https://apps.apple.com/app/shadowrocket/id932747118">https://apps.apple.com/app/shadowrocket/id932747118</a></p><h2 id="搭建vision节点申请证书"><a href="#搭建vision节点申请证书" class="headerlink" title="搭建vision节点申请证书"></a>搭建vision节点申请证书</h2><p>#安装证书工具：</p><p><code>curl https://get.acme.sh | sh; apt install socat -y || yum install socat -y; ~/.acme.sh/acme.sh --set-default-ca --server letsencrypt</code></p><p>#三种方式任选其中一种，申请失败则更换方式</p><p>#申请证书方式1： </p><p><code>~/.acme.sh/acme.sh  --issue -d 你的域名 --standalone -k ec-256 --force --insecure</code></p><p>#申请证书方式2： </p><p><code>~/.acme.sh/acme.sh --register-account -m &quot;$&#123;RANDOM&#125;@chacuo.net&quot; --server buypass --force --insecure &amp;&amp; ~/.acme.sh/acme.sh  --issue -d 你的域名 --standalone -k ec-256 --force --insecure --server buypass</code></p><p>#申请证书方式3： </p><p><code>~/.acme.sh/acme.sh --register-account -m &quot;$&#123;RANDOM&#125;@chacuo.net&quot; --server zerossl --force --insecure &amp;&amp; ~/.acme.sh/acme.sh  --issue -d 你的域名 --standalone -k ec-256 --force --insecure --server zerossl</code></p><p>#安装证书：</p><p><code>~/.acme.sh/acme.sh --install-cert -d 你的域名 --ecc --key-file /etc/x-ui/server.key --fullchain-file /etc/x-ui/server.crt</code></p><h2 id="Reality寻找适合的目标网站"><a href="#Reality寻找适合的目标网站" class="headerlink" title="Reality寻找适合的目标网站"></a>Reality寻找适合的目标网站</h2><p>查询ASN：<a href="https://tools.ipip.net/as.php">https://tools.ipip.net/as.php</a></p><p>寻找目标：<a href="https://fofa.info/">https://fofa.info</a></p><p><code>asn==&quot;25820&quot; &amp;&amp; country==&quot;US&quot; &amp;&amp; port==&quot;443&quot; &amp;&amp; cert!=&quot;Let&#39;s Encrypt&quot; &amp;&amp; cert.issuer!=&quot;ZeroSSL&quot; &amp;&amp; status_code=&quot;200&quot;</code></p><h3 id="检测端口是否被封"><a href="#检测端口是否被封" class="headerlink" title="检测端口是否被封"></a>检测端口是否被封</h3><p><a href="https://tcp.ping.pe/">https://tcp.ping.pe/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>vpn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免费翻墙，批量vless节点，反代伪装网页，轻松跑满本地宽带</title>
    <link href="/posts/6f28ea1a.html"/>
    <url>/posts/6f28ea1a.html</url>
    
    <content type="html"><![CDATA[<p>最新代码： <a href="https://github.com/3Kmfi6HP/EDtunnel/blob/main/_worker.js">https://github.com/3Kmfi6HP/EDtunnel/blob/main/_worker.js</a></p><p>cloudflare ：<a href="https://www.cloudflare.com/">https://www.cloudflare.com/</a></p><p>域名优选官网 : <a href="http://www.nirsoft.net/utils/multiple_ping_tool.html">http://www.nirsoft.net/utils/multiple_ping_tool.html</a></p><p>ip&amp;域名优选打包：<a href="https://github.com/woniu336/open_shell/blob/main/works%E4%B8%93%E7%94%A8ip%E5%9F%9F%E5%90%8D%E4%BC%98%E9%80%89-%E5%B7%A5%E5%85%B7.zip">点击下载&gt;&gt;</a> </p><p>域名cdn查询：<a href="https://dnschecker.org/">https://dnschecker.org</a></p><p>站长ping检测：<a href="https://ping.chinaz.com/">https://ping.chinaz.com/</a></p><p>安卓客户端: <a href="https://github.com/SagerNet/SagerNet/releases/tag/0.8.1-rc03">Release 0.8.1-rc03 · SagerNet&#x2F;SagerNet (github.com)</a></p><p>windows客户端: <a href="https://github.com/2dust/v2rayN/releases/tag/6.23">https://github.com/2dust/v2rayN/releases/tag/6.23</a></p><p>全平台翻墙工具: <a href="https://binghe.gitbook.io/quan-ping-tai-fan-qiang-gong-ju/0/windows">Windows翻墙客户端 - 全平台翻墙工具 (gitbook.io)</a></p><h5 id="cloudflare-颁发域名收集"><a href="#cloudflare-颁发域名收集" class="headerlink" title="cloudflare 颁发域名收集"></a><strong>cloudflare 颁发域名收集</strong></h5><div class="code-wrapper"><pre><code class="hljs html">vless://bfb0a9e3-d88e-4472-a24b-5b90cc73d7db@shopify.com:80?encryption=none&amp;security=none&amp;type=ws&amp;host=woaijia.qige005.workers.dev&amp;path=%2F%3Fed%3D2048#woaijia.qige005.workers.dev-HTTP</code></pre></div><p>白天: shopify.com</p><p>晚上: <a href="http://www.visa.com.hk/">www.visa.com.hk</a></p><div class="code-wrapper"><pre><code class="hljs html">gamer.com.twsteamdb.infotoy-people.comsilkbook.comcdn.anycast.eu.orgicook.hkshopify.comwww.visa.com.twtime.isjapan.comwww.hugedomains.comwww.visa.com.sgwww.whoer.netwww.visa.com.hkmalaysia.comwww.visa.co.jpwww.ipget.neticook.twwww.visa.comwww.gov.uawww.udacity.comwww.shopify.comwww.whatismyip.comsingapore.comwww.visakorea.comwww.csgo.comrussia.comip.sbwww.4chan.orgwww.glassdoor.comxn--b6gac.eu.orgwww.digitalocean.comwww.udemy.comcdn-all.xn--b6gac.eu.orgdnschecker.orgtasteatlas.comtoy-people.compixiv.netcomicabc.comicook.twgamer.com.twsteamdb.infotoy-people.comsilkbook.com</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>vpn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免费 12 个月使用！体验 AWS—— 目前世界上最大的云服务器提供商家</title>
    <link href="/posts/53abdf8c.html"/>
    <url>/posts/53abdf8c.html</url>
    
    <content type="html"><![CDATA[<p><img src="https://r2.leshans.eu.org/2023/08/4e950a3b9eae6b832522b278935dd862.webp"><br>几乎每个大厂都可以免费体验一定时长的云服务，比如 GCP、Azure，甲骨文甚至还有可以永久免费的服务器。</p><p><img src="https://r2.leshans.eu.org/2023/08/023d9099f3f1ac87f68ce6d723a7cc3d.webp"></p><p>这一期，我们就来免费体验一下世界上最大的云服务器提供商 —— 亚马逊的云服务 (AWS)</p><p><img src="https://r2.leshans.eu.org/2023/08/df5842aa4066999a2cfbc5770c656faf.webp"></p><p>世界上最大的云服务器提供商是亚马逊网络服务 (AWS)。AWS 是一家全球性云计算平台，提供计算、存储、数据库、网络、分析、机器学习、人工智能、移动、开发工具和企业应用等多种服务。AWS 在全球拥有超过 200 个区域和 70 多个国家 &#x2F; 地区的数据中心。</p><p>2022 年，AWS 的收入为 540.5 亿美元，比 2021 年增长了 37%。AWS 是世界上最受欢迎的云计算平台，拥有超过 300 万客户。AWS 的客户包括小型企业、中型企业和大型企业，以及政府机构和非营利组织。</p><p>AWS 的优势包括：</p><p>广泛的服务：AWS 提供广泛的服务，满足企业的各种需求。<br>可靠性：AWS 拥有全球最可靠的数据中心网络。<br>安全性：AWS 提供最先进的安全功能。<br>成本效益：AWS 的价格非常合理。</p><p>来源：bard.google.com</p><p>AWS 其实可以免费 白嫖体验很多产品，比如云服务器（ec2），云存储（S3），CDN 相关产品（网站提速），lightsail（VPS, 搭建远程桌面）SES (群发邮件)，Amazon Chime （视频会议）等等等等，大家可以随意尝试。</p><p>这边我们玩服务器多一些，就来白嫖 12 个月的 EC2 吧。</p><p><img src="https://r2.leshans.eu.org/2023/08/9d923705dc0db580173c2b78696ab53c.webp"></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>AWS 免费体验地址：<a href="https://gao.ee/aws">https://gao.ee/aws</a></p><p>正式开始之前，建议你准备：</p><h3 id="一个邮箱"><a href="#一个邮箱" class="headerlink" title="一个邮箱"></a>一个邮箱</h3><p>一个可以接受验证码的手机号（大家可以用自己的手机号接受验证码，正常国内的能收到码，也可以可以选择 GV 或者是到 5sim.net 上找接码，看是最低 6 卢布（大概 5 毛钱）一条）<br>一张信用卡（只是授权一下，并不会要你钱，可以是虚拟卡，比如咕咕用的 OneKey Card）<br><code>注册账号的时候不要挂代理</code></p><h3 id="开始注册"><a href="#开始注册" class="headerlink" title="开始注册"></a>开始注册</h3><p>点击创建 AWS 账户，一步一步完成注册即可，<code>地址填拼音</code>。</p><p>具体可以看视频。</p><p>YouTube 视频地址：<a href="https://youtu.be/r6Mr5tBCnvc">https://youtu.be/r6Mr5tBCnvc</a></p><p>YouTube 视频地址：<a href="https://youtu.be/JgfWYcNR6nk">https://youtu.be/JgfWYcNR6nk</a></p><p>bilibili 视频地址：<a href="https://www.bilibili.com/video/BV1VP411t7ia/">https://www.bilibili.com/video/BV1VP411t7ia/</a></p><p><img src="https://r2.leshans.eu.org/2023/08/a5f1ac24c6bc9ed902eaa34648ccb851.webp"><br>没什么问题的话，你会看到这个界面。</p><p><img src="https://r2.leshans.eu.org/2023/08/a6bf02de97ea136396dd51efd8944c46.webp"></p><p>信用卡验证预扣款截图：</p><p><img src="https://r2.leshans.eu.org/2023/08/d4b94b50522ed200da2e9738615422e6.webp"></p><h2 id="AWS-后台概览"><a href="#AWS-后台概览" class="headerlink" title="AWS 后台概览"></a>AWS 后台概览</h2><h3 id="选择服务器地区："><a href="#选择服务器地区：" class="headerlink" title="选择服务器地区："></a>选择服务器地区：</h3><p><img src="https://r2.leshans.eu.org/2023/08/14428a6bb7b5bf21d48b7c2e4bd48b9f.webp"></p><h3 id="创建实例："><a href="#创建实例：" class="headerlink" title="创建实例："></a>创建实例：</h3><p><img src="https://r2.leshans.eu.org/2023/08/2a167d02b1bc7205f25fb2408470be48.webp"></p><h3 id="输入名称："><a href="#输入名称：" class="headerlink" title="输入名称："></a>输入名称：</h3><p><img src="https://r2.leshans.eu.org/2023/08/bf893f2daa5f2e2701854c26174b3b15.webp"></p><h3 id="选择系统："><a href="#选择系统：" class="headerlink" title="选择系统："></a>选择系统：</h3><p><img src="https://r2.leshans.eu.org/2023/08/6d1ec5c67da5e2e33b5ea8ce4af95a74.webp"></p><h3 id="打开-22、80、443-端口："><a href="#打开-22、80、443-端口：" class="headerlink" title="打开 22、80、443 端口："></a>打开 22、80、443 端口：</h3><p><img src="https://r2.leshans.eu.org/2023/08/9fcc54df5cb7d01c3f1bd1faf3bbb966.webp"></p><h3 id="修改硬盘大小："><a href="#修改硬盘大小：" class="headerlink" title="修改硬盘大小："></a>修改硬盘大小：</h3><p><img src="https://r2.leshans.eu.org/2023/08/2dfa2453ca31182015da72b7c3633bfd.webp"></p><h3 id="启动实例失败，需要我们创建一个密钥对："><a href="#启动实例失败，需要我们创建一个密钥对：" class="headerlink" title="启动实例失败，需要我们创建一个密钥对："></a>启动实例失败，需要我们创建一个密钥对：</h3><p><img src="https://r2.leshans.eu.org/2023/08/253297dd920ac12bdd991c20d197f819.webp"></p><p><img src="https://r2.leshans.eu.org/2023/08/bc98a872aca7f4ffda2b10398edd7ced.webp"></p><h3 id="再次启动实例："><a href="#再次启动实例：" class="headerlink" title="再次启动实例："></a>再次启动实例：</h3><p><img src="https://r2.leshans.eu.org/2023/08/087be628f7e06ee9420fab8bddaf3a9a.webp"></p><h3 id="连接服务器："><a href="#连接服务器：" class="headerlink" title="连接服务器："></a>连接服务器：</h3><p><img src="https://r2.leshans.eu.org/2023/08/5346bf8c82f6ff67cd5c6f26c2002668.webp"></p><p><code>chmod 400 密钥地址  </code></p><p><code>ssh -i 密钥位置 admin@ip</code>  </p><p>即可登录。</p><p><img src="https://r2.leshans.eu.org/2023/08/3bf1b3e3689d32793c292f9bf91d94da.webp"></p><h2 id="DD-一个干净的-Debian-10"><a href="#DD-一个干净的-Debian-10" class="headerlink" title="DD 一个干净的 Debian 10"></a>DD 一个干净的 Debian 10</h2><p>默认的登录方式其实是最安全的，但是对我们来说难免太不方便了，我们希望可以随时随地用密钥登录，这边我们就来完全重装一下这台机器的系统吧。&#96;</p><p>dd 脚本（大概 5-10 分钟）</p><p>bash &lt;(wget –no-check-certificate -qO- ‘<a href="https://raw.githubusercontent.com/MoeClub/Note/master/InstallNET.sh">https://raw.githubusercontent.com/MoeClub/Note/master/InstallNET.sh</a>‘) -d 10 -v 64 -p “自定义root密码” -port “自定义ssh端口”<br>这边我的 dd 脚本是这样的：</p><div class="code-wrapper"><pre><code class="hljs bash">bash &lt;(wget --no-check-certificate -qO- <span class="hljs-string">&#x27;https://raw.githubusercontent.com/MoeClub/Note/master/InstallNET.sh&#x27;</span>) -d 10 -v 64 -p <span class="hljs-string">&quot;password123&quot;</span> -port <span class="hljs-string">&quot;222&quot;</span></code></pre></div><p>我把密码改成了 password123，SSH 端口改成了 222</p><p>直接输入到命令行即可。</p><p>AWS 开启后台端口的方法<br>默认我们的这台机器只开了 22 端口（我们视频里也勾选了 80、443 端口）</p><p>所以现在总共只打开了三个端口，我们还需要开启 222 端口，不然一会儿 SSH 连接不上。</p><p>这边我们尝试开启 222 端口。</p><p><img src="https://r2.leshans.eu.org/2023/08/511a75cf6f72cce091cf08dd3f36babc.webp"><br><img src="https://r2.leshans.eu.org/2023/08/7f76b155bf5ecebf51ab418ea26e3532.webp"><br><img src="https://r2.leshans.eu.org/2023/08/78ca95f00632484e324a570eafba2dc8.webp"><br><img src="https://r2.leshans.eu.org/2023/08/b3d9b04c6bb2cbacc6acd4c0f045ada0.webp"><br><img src="https://r2.leshans.eu.org/2023/08/cf4ffced2516f8e9c7c8f7d8467ef79f.webp"><br><img src="https://r2.leshans.eu.org/2023/08/6f079fcf52188dfd09243693246dd32b.webp"><br>开启之后，我们尝试登录机器。</p><p>ssh root@ip -p 222<br>成功登录！</p><p><img src="https://r2.leshans.eu.org/2023/08/b4b0dbb135f13c6e4d9ba08840311c7a.webp"><br>好了，现在你就有一台干净系统的机器啦，下一期我们介绍一下如何在这个机器上装一个好玩儿的 Docker 项目，在这个免费使用的 12 个月里面好好折腾它！</p>]]></content>
    
    
    
    <tags>
      
      <tag>AWS</tag>
      
      <tag>亚马逊</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stack主题的自定义</title>
    <link href="/posts/c6a07c6f.html"/>
    <url>/posts/c6a07c6f.html</url>
    
    <content type="html"><![CDATA[<h2 id="🍥Hugo主题魔改"><a href="#🍥Hugo主题魔改" class="headerlink" title="🍥Hugo主题魔改"></a>🍥Hugo主题魔改</h2><p>由于之前魔改部分写的很慢,又考虑过出个魔改好的主题直接给人们用,后来想想了还是算了,毕竟博客怎么能缺少折腾的乐趣呢,于是乎我花了点时间把魔改内容进行了一些休整,以内容呈现为核心,放弃了很多花哨的东西,加上考虑到魔改的难易程度与网页加载快慢,最后精简成少量的个人感觉比较有用的样式,并做了注释,直接使用即可完成一些个性化调整.由于本人纯小白,所以可能还有可以优化的地方,如果你有更好的方案欢迎在下方探讨交流.</p><h2 id="🍦魔改风格"><a href="#🍦魔改风格" class="headerlink" title="🍦魔改风格"></a>🍦魔改风格</h2><p>本文对于主题的魔改主要以圆角风格和阅读沉浸感为核心,目标是魔改出一个与本站类似的主题风格,具体使用体验可以参考目前主题.</p><h2 id="🍕魔改前的准备"><a href="#🍕魔改前的准备" class="headerlink" title="🍕魔改前的准备"></a>🍕魔改前的准备</h2><p>首先在博客根目录下的<code>assets</code>下创建一个名为<code>scss</code>的文件夹,然后在<code>scss</code>文件夹里创建一个名为<code>custom.scss</code>的文件,最终效果为<code>~blog/assets/scss/custom.scss</code>,创建好文件后,接下来对于主题的大部分样式魔改都将写进这个custom.scss.其中有很多冗余的代码但是为了使用尽可能用少的文件防止杂乱不堪,所以只好这样子了(如果你是大佬的话请随意).</p><h2 id="🎈主题整体细节调整"><a href="#🎈主题整体细节调整" class="headerlink" title="🎈主题整体细节调整"></a>🎈主题整体细节调整</h2><p>对于这一部分的调整我认为每个打算折腾主题前可以先加上,这样子主题整体上会有较大的改变,而且可以使文章内容的展现更为舒适,因为原主题使用了比较低的对比度,个人不是很习惯.</p><p>页面概览:</p><p><img src="https://r2.leshans.eu.org/2023/08/5ef681ee2c02ee576a3d05478fdd64bc.webp" alt="主页概览"></p><p>主页概览</p><p>在上文中提到的<code>custom.scss</code>文件中写入以下👇内容</p><div class="code-wrapper"><pre><code class="hljs scss"><span class="hljs-comment">//  ~\blog\assets\scss\custom.scss</span><span class="hljs-comment">// 页面基本配色</span><span class="hljs-selector-pseudo">:root</span> &#123;  <span class="hljs-comment">// 全局顶部边距</span>  <span class="hljs-attr">--main-top-padding</span>: <span class="hljs-number">30px</span>;  <span class="hljs-comment">// 全局卡片圆角</span>  <span class="hljs-attr">--card-border-radius</span>: <span class="hljs-number">25px</span>;  <span class="hljs-comment">// 标签云卡片圆角</span>  <span class="hljs-attr">--tag-border-radius</span>: <span class="hljs-number">8px</span>;  <span class="hljs-comment">// 卡片间距</span>  <span class="hljs-attr">--section-separation</span>: <span class="hljs-number">40px</span>;  <span class="hljs-comment">// 全局字体大小</span>  <span class="hljs-attr">--article-font-size</span>: <span class="hljs-number">1.8rem</span>;  <span class="hljs-comment">// 行内代码背景色</span>  <span class="hljs-attr">--code-background-color</span>: <span class="hljs-number">#f8f8f8</span>;  <span class="hljs-comment">// 行内代码前景色</span>  <span class="hljs-attr">--code-text-color</span>: <span class="hljs-number">#e96900</span>;  <span class="hljs-comment">// 暗色模式下样式</span>  &amp;<span class="hljs-selector-attr">[data-scheme=<span class="hljs-string">&quot;dark&quot;</span>]</span> &#123;    <span class="hljs-comment">// 行内代码背景色</span>    <span class="hljs-attr">--code-background-color</span>: <span class="hljs-number">#ff6d1b17</span>;    <span class="hljs-comment">// 行内代码前景色</span>    <span class="hljs-attr">--code-text-color</span>: <span class="hljs-number">#e96900</span>;  &#125;&#125;<span class="hljs-comment">//------------------------------------------------------</span><span class="hljs-comment">// 修复引用块内容窄页面显示问题</span><span class="hljs-selector-tag">a</span> &#123;  <span class="hljs-attribute">word-break</span>: break-all;&#125;<span class="hljs-selector-tag">code</span> &#123;  <span class="hljs-attribute">word-break</span>: break-all;&#125;<span class="hljs-comment">//---------------------------------------------------</span><span class="hljs-comment">// 文章内容图片圆角阴影</span><span class="hljs-selector-class">.article-page</span> <span class="hljs-selector-class">.main-article</span> <span class="hljs-selector-class">.article-content</span> &#123;  <span class="hljs-selector-tag">img</span> &#123;    <span class="hljs-attribute">max-width</span>: <span class="hljs-number">96%</span> <span class="hljs-meta">!important</span>;    <span class="hljs-attribute">height</span>: auto <span class="hljs-meta">!important</span>;    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">8px</span>;  &#125;&#125;<span class="hljs-comment">//------------------------------------------------</span><span class="hljs-comment">// 文章内容引用块样式</span><span class="hljs-selector-class">.article-content</span> &#123;  <span class="hljs-selector-tag">blockquote</span> &#123;    <span class="hljs-attribute">border-left</span>: <span class="hljs-number">6px</span> solid <span class="hljs-number">#358b9a1f</span> <span class="hljs-meta">!important</span>;    <span class="hljs-attribute">background</span>: <span class="hljs-number">#3a97431f</span>;  &#125;&#125;<span class="hljs-comment">// ---------------------------------------</span><span class="hljs-comment">// 代码块基础样式修改</span><span class="hljs-selector-class">.highlight</span> &#123;  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">102%</span> <span class="hljs-meta">!important</span>;  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--pre-background-color);  <span class="hljs-attribute">padding</span>: <span class="hljs-built_in">var</span>(--card-padding);  <span class="hljs-attribute">position</span>: relative;  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>;  <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">7px</span> <span class="hljs-meta">!important</span>;  <span class="hljs-attribute">margin-right</span>: -<span class="hljs-number">12px</span>;  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-built_in">var</span>(--shadow-l1) <span class="hljs-meta">!important</span>;  &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;    <span class="hljs-selector-class">.copyCodeButton</span> &#123;      <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;    &#125;  &#125;  <span class="hljs-comment">// keep Codeblocks LTR</span>  <span class="hljs-selector-attr">[dir=<span class="hljs-string">&quot;rtl&quot;</span>]</span> &amp; &#123;    <span class="hljs-attribute">direction</span>: ltr;  &#125;  pre &#123;    <span class="hljs-attribute">margin</span>: initial;    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;    <span class="hljs-attribute">width</span>: auto;  &#125;&#125;<span class="hljs-comment">// light模式下的代码块样式调整</span><span class="hljs-selector-attr">[data-scheme=<span class="hljs-string">&quot;light&quot;</span>]</span> <span class="hljs-selector-class">.article-content</span> <span class="hljs-selector-class">.highlight</span> &#123;  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff9f3</span>;&#125;<span class="hljs-selector-attr">[data-scheme=<span class="hljs-string">&quot;light&quot;</span>]</span> <span class="hljs-selector-class">.chroma</span> &#123;  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ff6f00</span>;  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff9f3cc</span>;&#125;<span class="hljs-comment">//-------------------------------------------</span><span class="hljs-comment">// 设置选中字体的区域背景颜色</span><span class="hljs-comment">//修改选中颜色</span><span class="hljs-selector-pseudo">::selection</span> &#123;  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;  <span class="hljs-attribute">background</span>: <span class="hljs-number">#34495e</span>;&#125;<span class="hljs-selector-tag">a</span> &#123;  <span class="hljs-attribute">text-decoration</span>: none;  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--accent-color);  &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--accent-color-darker);  &#125;  &amp;<span class="hljs-selector-class">.link</span> &#123;    <span class="hljs-attribute">color</span>: <span class="hljs-number">#4288b9ad</span>;    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">2px</span>;    <span class="hljs-attribute">text-decoration</span>: none;    <span class="hljs-attribute">cursor</span>: pointer;    &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;      <span class="hljs-attribute">text-decoration</span>: underline;    &#125;  &#125;&#125;<span class="hljs-comment">//-------------------------------------------------</span><span class="hljs-comment">//文章封面高度更改</span><span class="hljs-selector-class">.article-list</span> <span class="hljs-selector-tag">article</span> <span class="hljs-selector-class">.article-image</span> <span class="hljs-selector-tag">img</span> &#123;  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;  <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;  <span class="hljs-selector-tag">object</span>-fit: cover;  <span class="hljs-keyword">@include</span> respond(md) &#123;    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;  &#125;  <span class="hljs-keyword">@include</span> respond(xl) &#123;    <span class="hljs-attribute">height</span>: <span class="hljs-number">305px</span>;  &#125;&#125;<span class="hljs-comment">//---------------------------------------------------</span><span class="hljs-comment">// 全局页面布局间距调整</span><span class="hljs-selector-class">.main-container</span> &#123;  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100vh</span>;  <span class="hljs-attribute">align-items</span>: flex-start;  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">15px</span>;  <span class="hljs-attribute">gap</span>: <span class="hljs-built_in">var</span>(--section-separation);  <span class="hljs-attribute">padding-top</span>: <span class="hljs-built_in">var</span>(--main-top-padding);  <span class="hljs-keyword">@include</span> respond(md) &#123;    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">37px</span>;  &#125;&#125;<span class="hljs-comment">//--------------------------------------------------</span><span class="hljs-comment">//页面三栏宽度调整</span><span class="hljs-selector-class">.container</span> &#123;  <span class="hljs-attribute">margin-left</span>: auto;  <span class="hljs-attribute">margin-right</span>: auto;  <span class="hljs-selector-class">.left-sidebar</span> &#123;    <span class="hljs-attribute">order</span>: -<span class="hljs-number">3</span>;    <span class="hljs-attribute">max-width</span>: <span class="hljs-built_in">var</span>(--left-sidebar-max-width);  &#125;  <span class="hljs-selector-class">.right-sidebar</span> &#123;    <span class="hljs-attribute">order</span>: -<span class="hljs-number">1</span>;    <span class="hljs-attribute">max-width</span>: <span class="hljs-built_in">var</span>(--right-sidebar-max-width);    <span class="hljs-comment">/// Display right sidebar when min-width: lg</span>    <span class="hljs-keyword">@include</span> respond(lg) &#123;      <span class="hljs-attribute">display</span>: flex;    &#125;  &#125;  &amp;<span class="hljs-selector-class">.extended</span> &#123;    <span class="hljs-keyword">@include</span> respond(md) &#123;      <span class="hljs-attribute">max-width</span>: <span class="hljs-number">1024px</span>;      <span class="hljs-attr">--left-sidebar-max-width</span>: <span class="hljs-number">25%</span>;      <span class="hljs-attr">--right-sidebar-max-width</span>: <span class="hljs-number">22%</span> <span class="hljs-meta">!important</span>;    &#125;    <span class="hljs-keyword">@include</span> respond(lg) &#123;      <span class="hljs-attribute">max-width</span>: <span class="hljs-number">1280px</span>;      <span class="hljs-attr">--left-sidebar-max-width</span>: <span class="hljs-number">20%</span>;      <span class="hljs-attr">--right-sidebar-max-width</span>: <span class="hljs-number">30%</span>;    &#125;    <span class="hljs-keyword">@include</span> respond(xl) &#123;      <span class="hljs-attribute">max-width</span>: <span class="hljs-number">1453px</span>; <span class="hljs-comment">//1536px;</span>      <span class="hljs-attr">--left-sidebar-max-width</span>: <span class="hljs-number">15%</span>;      <span class="hljs-attr">--right-sidebar-max-width</span>: <span class="hljs-number">25%</span>;    &#125;  &#125;  &amp;<span class="hljs-selector-class">.compact</span> &#123;    <span class="hljs-keyword">@include</span> respond(md) &#123;      <span class="hljs-attr">--left-sidebar-max-width</span>: <span class="hljs-number">25%</span>;      <span class="hljs-attribute">max-width</span>: <span class="hljs-number">768px</span>;    &#125;    <span class="hljs-keyword">@include</span> respond(lg) &#123;      <span class="hljs-attribute">max-width</span>: <span class="hljs-number">1024px</span>;      <span class="hljs-attr">--left-sidebar-max-width</span>: <span class="hljs-number">20%</span>;    &#125;    <span class="hljs-keyword">@include</span> respond(xl) &#123;      <span class="hljs-attribute">max-width</span>: <span class="hljs-number">1280px</span>;    &#125;  &#125;&#125;<span class="hljs-comment">//-------------------------------------------------------</span><span class="hljs-comment">//全局页面小图片样式微调</span><span class="hljs-selector-class">.article-list--compact</span> <span class="hljs-selector-tag">article</span> <span class="hljs-selector-class">.article-image</span> <span class="hljs-selector-tag">img</span> &#123;  <span class="hljs-attribute">width</span>: <span class="hljs-built_in">var</span>(--image-size);  <span class="hljs-attribute">height</span>: <span class="hljs-built_in">var</span>(--image-size);  <span class="hljs-selector-tag">object</span>-fit: cover;  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">17%</span>;&#125;</code></pre></div><p>Copy</p><hr><h2 id="🧀菜单栏调整为圆角"><a href="#🧀菜单栏调整为圆角" class="headerlink" title="🧀菜单栏调整为圆角"></a>🧀菜单栏调整为圆角</h2><p>样式预览:</p><p><img src="https://r2.leshans.eu.org/2023/08/69f822c5faed82ef4e5d545ebe893ed4.webp" alt="圆角菜单"></p><p>圆角菜单</p><p>依然是在<code>custom.scss</code>中写入以下内容:</p><div class="code-wrapper"><pre><code class="hljs scss"><span class="hljs-comment">//  ~\blog\assets\scss\custom.scss</span><span class="hljs-comment">// --------------------------------</span><span class="hljs-comment">// 菜单栏样式</span><span class="hljs-comment">// 下拉菜单改圆角样式</span><span class="hljs-selector-class">.menu</span> &#123;  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">0</span>;  <span class="hljs-attribute">list-style</span>: none;  <span class="hljs-attribute">flex-direction</span>: column;  <span class="hljs-attribute">overflow-x</span>: hidden;  <span class="hljs-attribute">overflow-y</span>: scroll;  <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.6rem</span>;  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--card-background);  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-built_in">var</span>(--shadow-l2); <span class="hljs-comment">//改个阴影</span>  <span class="hljs-attribute">display</span>: none;  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>; <span class="hljs-comment">//改为0</span>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>; <span class="hljs-comment">//加个圆角</span>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">30px</span> <span class="hljs-number">30px</span>;  <span class="hljs-keyword">@include</span> respond(xl) &#123;    <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span> <span class="hljs-number">0</span>;  &#125;  &amp;,  <span class="hljs-selector-class">.menu-bottom-section</span> &#123;    <span class="hljs-attribute">gap</span>: <span class="hljs-number">30px</span>;    <span class="hljs-keyword">@include</span> respond(xl) &#123;      <span class="hljs-attribute">gap</span>: <span class="hljs-number">25px</span>;    &#125;  &#125;  &amp;<span class="hljs-selector-class">.show</span> &#123;    <span class="hljs-attribute">display</span>: flex;  &#125;  <span class="hljs-keyword">@include</span> respond(md) &#123;    <span class="hljs-attribute">align-items</span>: flex-end;    <span class="hljs-attribute">display</span>: flex;    <span class="hljs-attribute">background-color</span>: transparent;    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;    <span class="hljs-attribute">box-shadow</span>: none;    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;  &#125;  <span class="hljs-selector-tag">li</span> &#123;    <span class="hljs-attribute">position</span>: relative;    <span class="hljs-attribute">vertical-align</span>: middle;    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;    <span class="hljs-keyword">@include</span> respond(md) &#123;      <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;    &#125;    svg &#123;      stroke-<span class="hljs-attribute">width</span>: <span class="hljs-number">1.33</span>;      <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;      <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;    &#125;    <span class="hljs-selector-tag">a</span> &#123;      <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;      <span class="hljs-attribute">display</span>: inline-flex;      <span class="hljs-attribute">align-items</span>: center;      <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--body-text-color);      <span class="hljs-attribute">gap</span>: <span class="hljs-built_in">var</span>(--menu-icon-separation);    &#125;    <span class="hljs-selector-tag">span</span> &#123;      <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;    &#125;    &amp;<span class="hljs-selector-class">.current</span> &#123;      <span class="hljs-selector-tag">a</span> &#123;        <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--accent-color);        <span class="hljs-attribute">font-weight</span>: bold;      &#125;    &#125;  &#125;&#125;</code></pre></div><p>Copy</p><hr><h2 id="🍟滚动条美化"><a href="#🍟滚动条美化" class="headerlink" title="🍟滚动条美化"></a>🍟滚动条美化</h2><p>依然是在<code>custom.scss</code>中写入以下内容:</p><div class="code-wrapper"><pre><code class="hljs scss"><span class="hljs-comment">//  ~\blog\assets\scss\custom.scss</span><span class="hljs-comment">//------------------------------------------------</span><span class="hljs-comment">//将滚动条修改为圆角样式</span><span class="hljs-comment">//菜单滚动条美化</span><span class="hljs-selector-class">.menu</span>::-webkit-scrollbar &#123;  <span class="hljs-attribute">display</span>: none;&#125;<span class="hljs-comment">// 全局滚动条美化</span><span class="hljs-selector-tag">html</span> &#123;  ::-webkit-scrollbar &#123;    <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;  &#125;  ::-webkit-scrollbar-track &#123;    <span class="hljs-attribute">background-color</span>: transparent;  &#125;  ::-webkit-scrollbar-thumb &#123;    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#d6dee1</span>;    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>;    <span class="hljs-attribute">border</span>: <span class="hljs-number">6px</span> solid transparent;    <span class="hljs-attribute">background-clip</span>: content-box;  &#125;  ::-webkit-scrollbar-thumb:hover &#123;    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#a8bbbf</span>;  &#125;&#125;</code></pre></div><p>Copy</p><hr><h2 id="🥑归档页实现双栏"><a href="#🥑归档页实现双栏" class="headerlink" title="🥑归档页实现双栏"></a>🥑归档页实现双栏</h2><p>样式预览:</p><p><img src="https://r2.leshans.eu.org/2023/08/90f9382aee233013948d4fe17734370c.webp" alt="双栏归档页"></p><p>双栏归档页</p><p>原主题在大屏下的归档页面使用了单栏设计,这将会产生大量的空白占用页面并且不利于文章的查找,因此将其改为双栏则能够很好的利用大屏下的页面空间.</p><p>依然是在<code>custom.scss</code>中写入以下内容:</p><div class="code-wrapper"><pre><code class="hljs scss"><span class="hljs-comment">//  ~\blog\assets\scss\custom.scss</span><span class="hljs-comment">//--------------------------------------------------</span><span class="hljs-comment">//归档页面双栏</span><span class="hljs-comment">/* 归档页面两栏 */</span><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">1024px</span>) &#123;  <span class="hljs-selector-class">.article-list--compact</span> &#123;    <span class="hljs-attribute">display</span>: grid;    <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">1</span>fr <span class="hljs-number">1</span>fr;    <span class="hljs-attribute">background</span>: none;    <span class="hljs-attribute">box-shadow</span>: none;    <span class="hljs-attribute">gap</span>: <span class="hljs-number">1rem</span>;    <span class="hljs-selector-tag">article</span> &#123;      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">var</span>(--card-background);      <span class="hljs-attribute">border</span>: none;      <span class="hljs-attribute">box-shadow</span>: <span class="hljs-built_in">var</span>(--shadow-l2);      <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">8px</span>;      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">16px</span>;    &#125;  &#125;&#125;</code></pre></div><p>Copy</p><hr><h2 id="🌿链接模块实现三栏样式"><a href="#🌿链接模块实现三栏样式" class="headerlink" title="🌿链接模块实现三栏样式"></a>🌿链接模块实现三栏样式</h2><p>样式预览:</p><p><img src="https://r2.leshans.eu.org/2023/08/2d92a1b999b13216cf165c8753153301.webp" alt="三栏链接"></p><p>三栏链接</p><p>由于原主题使用的单栏样式在多条链接的情况下会导致链接的查找比较困难,因此改为双栏或三栏能够有效解决这种问题</p><p>依然是在<code>custom.scss</code>中写入以下内容:</p><div class="code-wrapper"><pre><code class="hljs scss"><span class="hljs-comment">//  ~\blog\assets\scss\custom.scss</span><span class="hljs-comment">//--------------------------------------------------</span><span class="hljs-comment">//链接三栏</span><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">1024px</span>) &#123;  <span class="hljs-selector-class">.article-list--compact</span><span class="hljs-selector-class">.links</span> &#123;    <span class="hljs-attribute">display</span>: grid;    <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">1</span>fr <span class="hljs-number">1</span>fr <span class="hljs-number">1</span>fr; <span class="hljs-comment">//三个1fr即为三栏,两个1fr则为双栏,以此类推即可.</span>    <span class="hljs-attribute">background</span>: none;    <span class="hljs-attribute">box-shadow</span>: none;    <span class="hljs-attribute">gap</span>: <span class="hljs-number">1rem</span>;    <span class="hljs-selector-tag">article</span> &#123;      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">var</span>(--card-background);      <span class="hljs-attribute">border</span>: none;      <span class="hljs-attribute">box-shadow</span>: <span class="hljs-built_in">var</span>(--shadow-l2);      <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">8px</span>;      <span class="hljs-attribute">border-radius</span>: <span class="hljs-built_in">var</span>(--card-border-radius);      &amp;<span class="hljs-selector-pseudo">:nth-child</span>(odd) &#123;        <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">8px</span>;      &#125;    &#125;  &#125;&#125;</code></pre></div><p>Copy</p><hr><h2 id="🎉首页添加欢迎横幅"><a href="#🎉首页添加欢迎横幅" class="headerlink" title="🎉首页添加欢迎横幅"></a>🎉首页添加欢迎横幅</h2><p>样式预览:</p><p><img src="https://r2.leshans.eu.org/2023/08/3da2c1a311f58656fadd861c6ca529c1.webp" alt="欢迎横幅"></p><p>欢迎横幅</p><p>欢迎横幅虽然用处不大,但是我觉得可以使主页不会那么单调,同时可以表示对于访客的热情吧哈哈哈</p><p>现在博客的根目录下新建一个文件夹名为<code>layouts</code>(默认生成站点时也生成了,没有的话手动创建),之后将<code>~\blog\themes\hugo-theme-stack\layouts\index.html</code>下的文件复制到刚刚创建的layouts文件夹里,这意味着主题<code>根目录下的layouts文件夹里的index.html</code>将覆盖原主题目录下对应的文件,然后我们再复制出来的<code>index.html</code>中添加以下内容:</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- ~\site\blog\layouts\index.html --&gt;</span>......    &#123;&#123; $filtered := ($pages | intersect $notHidden) &#125;&#125;    &#123;&#123; $pag := .Paginate ($filtered) &#125;&#125;<span class="hljs-comment">&lt;!-- 上面是主题自带的,只展示一部分,其余省略 --&gt;</span><span class="hljs-comment">&lt;!-- ---这是我们添加进去的--------- --&gt;</span><span class="hljs-comment">&lt;!-- 首页欢迎字幅板块 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;welcome&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 2rem; text-align: center; font-weight: bold&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;shake&quot;</span>&gt;</span>👋<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;jump-text1&quot;</span> &gt;</span> Welcome<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;jump-text2&quot;</span>&gt;</span> To <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;jump-text3&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:#e99312&quot;</span>&gt;</span>L1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;jump-text4&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:#e99312&quot;</span>&gt;</span>n&lt;/span    &gt;<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;jump-text5&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:#e99312&quot;</span>&gt;</span>Sn<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;jump-text6&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:#e99312&quot;</span>&gt;</span>0&lt;/span    &gt;<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;jump-text7&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:#e99312&quot;</span>&gt;</span>w<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;jump-text8&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:#e99312&quot;</span>&gt;</span>&#x27;s<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;jump-text9&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:#e99312&quot;</span>&gt;</span>Blog<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- ------首页欢迎字幅板块------ --&gt;</span><span class="hljs-comment">&lt;!-- 下面也是主题自带的,只展示一部分,其余省略 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;article-list&quot;</span>&gt;</span>        &#123;&#123; range $index, $element := $pag.Pages &#125;&#125;            &#123;&#123; partial &quot;article-list/default&quot; . &#125;&#125;        &#123;&#123; end &#125;&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>......</code></pre></div><p>Copy</p><p>接下来我们给欢迎横幅添加一些样式,回到原来创建的<code>custom.scss</code>中,在文件中写入以下内容</p><div class="code-wrapper"><pre><code class="hljs scss"><span class="hljs-comment">//  ~\blog\assets\scss\custom.scss</span><span class="hljs-comment">//---------------------------------------------------------</span><span class="hljs-comment">//首页欢迎板块样式</span><span class="hljs-selector-class">.welcome</span> &#123;  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--card-text-color-main);  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">var</span>(--card-background);  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-built_in">var</span>(--shadow-l2);  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">30px</span>;  <span class="hljs-attribute">display</span>: inline-block;&#125;<span class="hljs-comment">// 👋emoji实现摆动效果</span><span class="hljs-selector-class">.shake</span> &#123;  <span class="hljs-attribute">display</span>: inline-block;  <span class="hljs-attribute">animation</span>: shake <span class="hljs-number">1s</span>;  <span class="hljs-attribute">animation-duration</span>: <span class="hljs-number">1s</span>;  <span class="hljs-attribute">animation-timing-function</span>: ease;  <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0s</span>;  <span class="hljs-attribute">animation-iteration-count</span>: <span class="hljs-number">1</span>;  <span class="hljs-attribute">animation-direction</span>: normal;  <span class="hljs-attribute">animation-fill-mode</span>: none;  <span class="hljs-attribute">animation-play-state</span>: running;  <span class="hljs-attribute">animation-name</span>: shake;  <span class="hljs-attribute">animation</span>-timeline: auto;  <span class="hljs-attribute">animation</span>-range-start: normal;  <span class="hljs-attribute">animation</span>-range-end: normal;  <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">2s</span>;  <span class="hljs-keyword">@keyframes</span> shake &#123;    <span class="hljs-number">0%</span> &#123;      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0</span>);    &#125;    <span class="hljs-number">25%</span> &#123;      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">45deg</span>) <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.2</span>);    &#125;    <span class="hljs-number">50%</span> &#123;      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0</span>) <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.2</span>);    &#125;    <span class="hljs-number">75%</span> &#123;      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">45deg</span>) <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.2</span>);    &#125;    <span class="hljs-number">100%</span> &#123;      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0</span>);    &#125;  &#125;&#125;<span class="hljs-comment">// 实现字符跳动动画</span><span class="hljs-selector-class">.jump-text1</span> &#123;  <span class="hljs-attribute">display</span>: inline-block;  <span class="hljs-attribute">animation</span>: jump <span class="hljs-number">0.5s</span> <span class="hljs-number">1</span>;&#125;<span class="hljs-selector-class">.jump-text2</span> &#123;  <span class="hljs-attribute">display</span>: inline-block;  <span class="hljs-attribute">animation</span>: jump <span class="hljs-number">0.5s</span> <span class="hljs-number">1</span>;  <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.1s</span>;&#125;<span class="hljs-selector-class">.jump-text3</span> &#123;  <span class="hljs-attribute">display</span>: inline-block;  <span class="hljs-attribute">animation</span>: jump <span class="hljs-number">0.5s</span> <span class="hljs-number">1</span>;  <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.2s</span>;&#125;<span class="hljs-selector-class">.jump-text4</span> &#123;  <span class="hljs-attribute">display</span>: inline-block;  <span class="hljs-attribute">animation</span>: jump <span class="hljs-number">0.5s</span> <span class="hljs-number">1</span>;  <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.3s</span>;&#125;<span class="hljs-selector-class">.jump-text5</span> &#123;  <span class="hljs-attribute">display</span>: inline-block;  <span class="hljs-attribute">animation</span>: jump <span class="hljs-number">0.5s</span> <span class="hljs-number">1</span>;  <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.4s</span>;&#125;<span class="hljs-selector-class">.jump-text6</span> &#123;  <span class="hljs-attribute">display</span>: inline-block;  <span class="hljs-attribute">animation</span>: jump <span class="hljs-number">0.5s</span> <span class="hljs-number">1</span>;  <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.5s</span>;&#125;<span class="hljs-selector-class">.jump-text7</span> &#123;  <span class="hljs-attribute">display</span>: inline-block;  <span class="hljs-attribute">animation</span>: jump <span class="hljs-number">0.5s</span> <span class="hljs-number">1</span>;  <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.6s</span>;&#125;<span class="hljs-selector-class">.jump-text8</span> &#123;  <span class="hljs-attribute">display</span>: inline-block;  <span class="hljs-attribute">animation</span>: jump <span class="hljs-number">0.5s</span> <span class="hljs-number">1</span>;  <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.7s</span>;&#125;<span class="hljs-selector-class">.jump-text9</span> &#123;  <span class="hljs-attribute">display</span>: inline-block;  <span class="hljs-attribute">animation</span>: jump <span class="hljs-number">0.5s</span> <span class="hljs-number">1</span>;  <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.9s</span>;&#125;<span class="hljs-keyword">@keyframes</span> jump &#123;  <span class="hljs-number">0%</span> &#123;    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">0</span>);  &#125;  <span class="hljs-number">50%</span> &#123;    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">20px</span>);  &#125;  <span class="hljs-number">100%</span> &#123;    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">0</span>);  &#125;&#125;</code></pre></div><p>Copy</p><hr><h2 id="💊文章页面左上角引入返回按钮"><a href="#💊文章页面左上角引入返回按钮" class="headerlink" title="💊文章页面左上角引入返回按钮"></a>💊文章页面左上角引入返回按钮</h2><p>样式预览:</p><p><img src="https://r2.leshans.eu.org/2023/08/6890874a410744744aa21935615d107b.webp" alt="桌面端左侧返回按钮"></p><p>桌面端左侧返回按钮</p><p><img src="https://r2.leshans.eu.org/2023/08/2347fbd7302784303d6c9c9cf072cbbf.webp" alt="移动端顶部返回按钮"></p><p>移动端顶部返回按钮</p><p>引入这个返回按钮同时隐藏左侧边栏可以制造留白,通告阅读时的沉浸感,我认为这对于提高阅读体验式比较有帮助的.</p><p>首先需要在博客的根目录的<code>layouts</code>文件夹中创建一个名为<code>_default</code>(注意不要少了下划线)的文件夹,然后将原主题中<code>~\blog\themes\hugo-theme-stack\layouts\_default\single.html</code>的<code>single.html</code>复制到刚刚创建的<code>_default</code>中,然后写入添加以下内容:</p><blockquote><p>注意对照原主题,不要把重复的部分也写进去</p></blockquote><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- ~\blog\layouts\_default\single.html --&gt;</span>.......已省略,请自己对照......  &#123;&#123; partialCached &quot;footer/footer&quot; . &#125;&#125;    &#123;&#123; partialCached &quot;article/components/photoswipe&quot; . &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123; define &quot;left-sidebar&quot; &#125;&#125;&#123;&#123; if (.Scratch.Get &quot;TOCEnabled&quot;) &#125;&#125;        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;article-toolbar&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: sticky;top: 5px;z-index: 1000;&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;&#123; .Site.BaseURL | relLangURL &#125;&#125;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;back-home&quot;</span>&gt;</span>                &#123;&#123; (resources.Get &quot;icons/back.svg&quot;).Content | safeHTML &#125;&#125;                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; T &quot;article.back&quot; &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    &#123;&#123; else &#125;&#125;        &#123;&#123; partial &quot;sidebar/left.html&quot; . &#125;&#125;    &#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123; define &quot;right-sidebar&quot; &#125;&#125;    &#123;&#123; if .Scratch.Get &quot;hasWidget&quot; &#125;&#125;&#123;&#123; partial &quot;sidebar/right.html&quot; (dict &quot;Context&quot; . &quot;Scope&quot; &quot;page&quot;) &#125;&#125;&#123;&#123; end&#125;&#125;&#123;&#123; end &#125;&#125;</code></pre></div><p>Copy</p><p>接下来我们给返回按钮添加以下样式,不然返回按钮会显示异常,回到原来创建的<code>custom.scss</code>中,在文件中写入以下内容:</p><div class="code-wrapper"><pre><code class="hljs scss"><span class="hljs-comment">//  ~\blog\assets\scss\custom.scss</span><span class="hljs-comment">//--------------------------------------------------</span><span class="hljs-comment">//引入左上角返回按钮</span><span class="hljs-selector-class">.back-home</span> &#123;  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">var</span>(--card-background);  <span class="hljs-attribute">border-radius</span>: <span class="hljs-built_in">var</span>(--tag-border-radius);  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--card-text-color-tertiary);  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">0.1rem</span>;  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">24px</span>;  <span class="hljs-attribute">display</span>: inline-flex;  <span class="hljs-attribute">align-items</span>: center;  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.4rem</span>;  <span class="hljs-attribute">text-transform</span>: uppercase;  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">20px</span> <span class="hljs-number">10px</span> <span class="hljs-number">15px</span>;  <span class="hljs-attribute">transition</span>: box-shadow <span class="hljs-number">0.3s</span> ease;  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-built_in">var</span>(--shadow-l3);  &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-built_in">var</span>(--shadow-l2);  &#125;  svg &#123;    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">5px</span>;    <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;    <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;  &#125;  <span class="hljs-selector-tag">span</span> &#123;    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;    <span class="hljs-attribute">white-space</span>: nowrap;  &#125;&#125;<span class="hljs-selector-class">.main-container</span> <span class="hljs-selector-class">.right-sidebar</span> &#123;  <span class="hljs-attribute">order</span>: <span class="hljs-number">2</span>;  <span class="hljs-attribute">max-width</span>: <span class="hljs-built_in">var</span>(--right-sidebar-max-width);  <span class="hljs-comment">/// Display right sidebar when min-width: lg</span>  <span class="hljs-keyword">@include</span> respond(lg) &#123;    <span class="hljs-attribute">display</span>: flex;  &#125;&#125;<span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.main</span> &#123;  <span class="hljs-attribute">order</span>: <span class="hljs-number">1</span>;  <span class="hljs-attribute">min-width</span>: <span class="hljs-number">0</span>;  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">100%</span>;  <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;  <span class="hljs-attribute">display</span>: flex;  <span class="hljs-attribute">flex-direction</span>: column;  <span class="hljs-attribute">gap</span>: <span class="hljs-built_in">var</span>(--section-separation);  <span class="hljs-keyword">@include</span> respond(md) &#123;    <span class="hljs-attribute">padding-top</span>: <span class="hljs-built_in">var</span>(--main-top-padding);  &#125;&#125;</code></pre></div><p>Copy</p><hr><h2 id="🍎代码块引入MacOS窗口样式"><a href="#🍎代码块引入MacOS窗口样式" class="headerlink" title="🍎代码块引入MacOS窗口样式"></a>🍎代码块引入MacOS窗口样式</h2><p>样式预览:</p><p><img src="https://r2.leshans.eu.org/2023/08/4bd1071234f80c5d4cc2e9efafff3003.webp" alt="MacOS红绿灯窗口"></p><p>MacOS红绿灯窗口</p><p>使用这个样式可以使代码块更有逼格,首先在博客根目录下的<code>static</code>文件夹中创建名为<code>img</code>的文件夹,然后再<code>img</code>文件夹中创建一个名为<code>code-header.svg</code>的文件,在文件中写入以下内容:</p><div class="code-wrapper"><pre><code class="hljs svg"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.1&quot;</span>  <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;0px&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;0px&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;450px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;130px&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">ellipse</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;65&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;65&quot;</span> <span class="hljs-attr">rx</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">ry</span>=<span class="hljs-string">&quot;52&quot;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;rgb(220,60,54)&quot;</span> <span class="hljs-attr">stroke-width</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;rgb(237,108,96)&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">ellipse</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;225&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;65&quot;</span> <span class="hljs-attr">rx</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">ry</span>=<span class="hljs-string">&quot;52&quot;</span>  <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;rgb(218,151,33)&quot;</span> <span class="hljs-attr">stroke-width</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;rgb(247,193,81)&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">ellipse</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;385&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;65&quot;</span> <span class="hljs-attr">rx</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">ry</span>=<span class="hljs-string">&quot;52&quot;</span>  <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;rgb(27,161,37)&quot;</span> <span class="hljs-attr">stroke-width</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;rgb(100,200,86)&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span></code></pre></div><p>Copy</p><p>接下来我们在原来创建的<code>custom.scss</code>文件中添加以下内容:</p><div class="code-wrapper"><pre><code class="hljs scss"><span class="hljs-comment">//  ~\blog\assets\scss\custom.scss</span><span class="hljs-comment">//----------------------------------------------------------</span><span class="hljs-comment">//为代码块顶部添加macos样式</span><span class="hljs-selector-class">.article-content</span> &#123;  <span class="hljs-selector-class">.highlight</span><span class="hljs-selector-pseudo">:before</span> &#123;    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-attribute">display</span>: block;    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(/img/code-header.svg);    <span class="hljs-attribute">height</span>: <span class="hljs-number">32px</span>;    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;    <span class="hljs-attribute">background-size</span>: <span class="hljs-number">57px</span>;    <span class="hljs-attribute">background-repeat</span>: no-repeat;    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">5px</span>;    <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">1px</span> <span class="hljs-number">2px</span>;  &#125;&#125;</code></pre></div><p>Copy</p><hr><h2 id="🍺More…"><a href="#🍺More…" class="headerlink" title="🍺More…"></a>🍺More…</h2><p>后续的魔改内容会更新在这篇文章中.大家可以根据需要调试更改和增删一些参数,😀如果你有什么好的想法欢迎在评论区留言交流.</p>]]></content>
    
    
    
    <tags>
      
      <tag>hugo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用Github Page和Github Action部署你的Hugo博客</title>
    <link href="/posts/aa8bee05.html"/>
    <url>/posts/aa8bee05.html</url>
    
    <content type="html"><![CDATA[<h2 id="🍕利用Github-Page和Github-Action部署你的Hugo博客"><a href="#🍕利用Github-Page和Github-Action部署你的Hugo博客" class="headerlink" title="🍕利用Github Page和Github Action部署你的Hugo博客"></a>🍕利用Github Page和Github Action部署你的Hugo博客</h2><h3 id="🍔注册GitHub"><a href="#🍔注册GitHub" class="headerlink" title="🍔注册GitHub"></a>🍔注册GitHub</h3><p>打开<code>https://github.com/</code>,(打不开的可能需要魔法,或者换个时间点打开,具体怎么操作就不细说了,懂得都懂😶),注册一个GitHub账号,如果不会注册那你还来看这篇文章干嘛.</p><h3 id="🧀创建Github仓库"><a href="#🧀创建Github仓库" class="headerlink" title="🧀创建Github仓库"></a>🧀创建Github仓库</h3><p>为了使用<code>GitHub Action</code>自动部署,加上便于管理,所以创建两个仓库,虽然一个也行.</p><p>1.我们先创建一个名字为<code>blog</code>的仓库用于存放hugo生成的文件,打开右上角的<code>+号</code>,然后选择<code>New repository</code>以新建仓库</p><p><img src="https://r2.leshans.eu.org/2023/08/00a1ce170f5e85a7fdb11d20d2cf2244.webp"></p><p>2.跟着图片里的步骤操作,先给仓库取个名字,叫做<code>blog</code>(小白最好将仓库名字跟我起一样的),然后勾选<code>public</code>,接着勾选<code>Add a REAMME file</code>,最后点击<code>Create repository</code>完成创建.</p><p><img src="https://r2.leshans.eu.org/2023/08/6cd7341b6edf4943d4ee0dbf40f7195f.webp"></p><p>3.接下来我们按照刚才那样依葫芦画瓢,再创建一个名为<code>blog-file</code>的仓库</p><p><img src="https://r2.leshans.eu.org/2023/08/96a6fddc65af243c030ef91b2e81c9ed.webp"></p><h3 id="🍦获取SSH-Key密钥"><a href="#🍦获取SSH-Key密钥" class="headerlink" title="🍦获取SSH Key密钥"></a>🍦获取SSH Key密钥</h3><p>ssh密钥可以是我们推送文件到仓库时不需要每次都输入密码,大大的提高我们的效率.所以我们首先需要在我们的电脑生成ssh密钥</p><p>1.在<code>git bash</code>执行以下指令,配置邮箱和用户名</p><div class="code-wrapper"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;you@example.com&quot;</span>   <span class="hljs-comment">#you@example.com替换为你的邮箱并回车</span>git config --global user.name <span class="hljs-string">&quot;Your Name&quot;</span>          <span class="hljs-comment">#Your Name替换为你的名字并回车</span></code></pre></div><p>Copy</p><p><img src="https://r2.leshans.eu.org/2023/08/eeca6f9277266f6dfa6ab93b0df30ac8.webp"></p><p>2.生成shh key,在<code>git bash</code>中 输入以下命令</p><div class="code-wrapper"><pre><code class="hljs sh">ssh-keygen -t rsa</code></pre></div><p>Copy</p><p><img src="https://r2.leshans.eu.org/2023/08/3c61c8b708992a8fae694ab15366d4be.webp"></p><p>一路回车就行</p><p>默认会生成在如下目录</p><div class="code-wrapper"><pre><code class="hljs sh">C:\Users\用户名\.ssh</code></pre></div><p>Copy</p><p><img src="https://r2.leshans.eu.org/2023/08/2e37b7bf2f9347c2ba8ef4db8713cb74.webp"></p><p>用记事本打开生成目录下<code>id_rsa.pub</code>,其中的内容即为公钥,<code>id_rsa</code>即为私钥.这两个待会要用到.</p><p>3.将将公钥配置到<code>GitHub</code>账户中,先打开设置,即<code>Settings</code></p><p><img src="https://r2.leshans.eu.org/2023/08/852804060ef7654d1158f64fc0c230a4.webp"></p><p>进入<code>SSH and GPG key</code>配置项里,点击<code>SSH keys</code>下的<code>New SHH key</code>进行添加</p><p><img src="https://r2.leshans.eu.org/2023/08/c43662576bb6a0326ffa8b9fcd77c5b0.webp"></p><p>4.然后随便在<code>Title</code>项里随便起一个名字,在<code>Key</code>里填入刚才得到的<code>id_rsa.pub</code>里的内容,然后点击<code>Add SSH key</code>就添加好了.</p><p><img src="https://r2.leshans.eu.org/2023/08/13c8fb41364945308cc849de2ef3b04e.webp"></p><p>5.接下来我们需要往刚才创建的名为<code>blog-file</code>的仓库里添加<code>id_rsa密钥</code>,点击<code>Settings</code>,然后找到<code>Secrets and variables</code>,点击<code>Actions</code>,然后点击<code>New repository secret</code>，在<code>Name</code>里填入<code>ACTIONS_DEPLOY_KEY</code>，在<code>Value</code>里填入<code>id_rsa</code>密钥即可。</p><p><img src="https://r2.leshans.eu.org/2023/08/fa72fcba60cb43f45b312819449972af.webp"></p><hr><h3 id="🍚部署hugo博客"><a href="#🍚部署hugo博客" class="headerlink" title="🍚部署hugo博客"></a>🍚部署hugo博客</h3><p>1.接下来我们在我们的博客根目录下创建一个名为<code>.github</code>的文件夹,然后在文件夹里新建一个新的文件夹,名字为<code>workflows</code>,接着进入<code>workflows</code>文件夹里新建一个名为<code>deploy.xml</code>的文件,再在<code>deploy.xml</code>里填入如下内容,最终目录为<code>~\blog\.github\workflows\deploy.xml</code>,将<code>deploy.xml</code>中的<code>external_repository</code>项里的<code>lin-snow</code>改为你GitHub注册时的名字即可</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">GitHub</span> <span class="hljs-string">Page</span><span class="hljs-attr">on:</span>    <span class="hljs-attr">push:</span>        <span class="hljs-attr">branches:</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">main</span> <span class="hljs-comment"># main 更新触发</span><span class="hljs-attr">jobs:</span>    <span class="hljs-attr">deploy:</span>        <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>        <span class="hljs-attr">steps:</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span>              <span class="hljs-attr">with:</span>                  <span class="hljs-attr">submodules:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># clone submodules</span>                  <span class="hljs-attr">fetch-depth:</span> <span class="hljs-number">0</span> <span class="hljs-comment"># 克隆所有历史信息</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Hugo</span>              <span class="hljs-attr">uses:</span> <span class="hljs-string">peaceiris/actions-hugo@v2</span>              <span class="hljs-attr">with:</span>                  <span class="hljs-attr">hugo-version:</span> <span class="hljs-string">&quot;0.115.2&quot;</span> <span class="hljs-comment"># Hugo 版本</span>                  <span class="hljs-attr">extended:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># hugo插件版 Stack主题 必须启用</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Cache</span> <span class="hljs-string">resources</span> <span class="hljs-comment"># 缓存 resource 文件加快生成速度</span>              <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache@v3</span>              <span class="hljs-attr">with:</span>                  <span class="hljs-attr">path:</span> <span class="hljs-string">resources</span>                  <span class="hljs-comment"># 检查照片文件变化</span>                  <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.os</span> <span class="hljs-string">&#125;&#125;-hugocache-$&#123;&#123;</span> <span class="hljs-string">hashFiles(&#x27;content/**/*&#x27;)</span> <span class="hljs-string">&#125;&#125;</span>                  <span class="hljs-attr">restore-keys:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.os</span> <span class="hljs-string">&#125;&#125;-hugocache-</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-comment"># 生成网页 删除无用 resource 文件 削减空行</span>              <span class="hljs-attr">run:</span> <span class="hljs-string">hugo</span> <span class="hljs-string">--minify</span> <span class="hljs-string">--gc</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-comment"># 部署到 GitHub Page</span>              <span class="hljs-attr">uses:</span> <span class="hljs-string">peaceiris/actions-gh-pages@v3</span>              <span class="hljs-attr">with:</span>                  <span class="hljs-comment"># 如果在同一个仓库下使用请使用 github_token 并注释 deploy_key</span>                  <span class="hljs-comment"># github_token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span>                  <span class="hljs-attr">deploy_key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="hljs-string">&#125;&#125;</span>                  <span class="hljs-comment"># 如果在同一个仓库请注释</span>                  <span class="hljs-attr">external_repository:</span> <span class="hljs-string">lin-snow/blog</span> <span class="hljs-comment"># 你的 GitHub page 仓库 example/example.github.io</span>                  <span class="hljs-attr">publish_dir:</span> <span class="hljs-string">./public</span>                  <span class="hljs-attr">user_name:</span> <span class="hljs-string">&quot;github-actions[bot]&quot;</span>                  <span class="hljs-attr">user_email:</span> <span class="hljs-string">&quot;github-actions[bot]@users.noreply.github.com&quot;</span>                  <span class="hljs-attr">full_commit_message:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">from</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.repository</span> <span class="hljs-string">&#125;&#125;@$&#123;&#123;</span> <span class="hljs-string">github.sha</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">🚀</span></code></pre></div><p>Copy</p><p>2.然后在博客根目录文件夹下新建一个名为<code>deploy.sh</code>的文件用于一键部署博客,在<code>deploy.sh</code>中填入如下内容,其中最后一行代码里的<code>git@github.com:lin-snow/blog-file.git</code>需要更改为你自己仓库的地址,可以通过如下图片中的操作获得该地址</p><p><img src="https://r2.leshans.eu.org/2023/08/0229816bbacaa285c057c8b70cd5d9b6.webp"></p><div class="code-wrapper"><pre><code class="hljs sh">hugo <span class="hljs-comment">#构造你的blog</span>git init <span class="hljs-comment">#初始化git</span>git add -Agit commit -m <span class="hljs-string">&#x27;deploy&#x27;</span>git push -f git@github.com:lin-snow/blog-file.git main<span class="hljs-comment">#向存储库推送</span></code></pre></div><p>Copy</p><p>然后双击打开运行<code>deploy.sh</code>即可自动推送文件到仓库,以后写完博客或修改博客后都需要运行一下<code>deploy.sh</code>,才能部署到云端</p><p>3.接下来我们先运行<code>deploy.sh</code>推送一下文件到仓库,等推送上去之后,我们才能完成接下来的操作.</p><blockquote><p>注意,第一次运行deploy.sh可能会出现如图这种情况,直接输入yes回车即可,如果仓库里没发现上传的文件可以再运行一次<code>deploy.sh</code></p><p><img src="https://r2.leshans.eu.org/2023/08/ba70b755586b654137ed9ae2c6c8f1f7.webp"></p></blockquote><p>这里贴出我的GitHub Action运行状况</p><p><img src="https://r2.leshans.eu.org/2023/08/668c8bc6abee9e4e17c7d38dbc5481f4.webp"></p><hr><h3 id="🍺开启Github-Page"><a href="#🍺开启Github-Page" class="headerlink" title="🍺开启Github Page"></a>🍺开启Github Page</h3><p>等待<code>Github Action</code>完成后,我们需要开启<code>GitHub page</code>,首先进入blog这个仓库,然后打开设置,找到<code>page</code>项,根据如下设置即可.</p><p><img src="https://r2.leshans.eu.org/2023/08/93437cfc4b41faa223a0018736e845b0.webp"></p><p>到这里我们就成功上线我们的博客了.至于自定义域名可以在网上找到很多教程,这里就不写了,毕竟我比较懒.</p><h2 id="🥝利用Vercel部署你的Hugo博客"><a href="#🥝利用Vercel部署你的Hugo博客" class="headerlink" title="🥝利用Vercel部署你的Hugo博客"></a>🥝利用Vercel部署你的Hugo博客</h2><p>由于Vercel相比与GitHub在国内的访问速度更快,所以我比较推荐使用Vercel部署,但是Vercel分配的二级域名已经被墙了,所以需要绑定自定义的域名才能解决国内的访问问题.接着上面的操作.</p><h3 id="🍖登录Vercel"><a href="#🍖登录Vercel" class="headerlink" title="🍖登录Vercel"></a>🍖登录Vercel</h3><p>首先我们需要登录一下Vercel,由于Vercel支持直接使用GitHub登录,所以直接用GitHub登录就行了.</p><h3 id="🎈导入博客"><a href="#🎈导入博客" class="headerlink" title="🎈导入博客"></a>🎈导入博客</h3><p>登录Vercel后,点击页面右上角的<code>Add New ...</code>按钮,选择<code>Project</code></p><p><img src="https://r2.leshans.eu.org/2023/08/d2245f0e5d033d7b73e20a6ff8762348.webp"></p><p>然后选择我们在<code>GitHub</code>创建的<code>Blog</code>项目,点击<code>Import</code></p><p><img src="https://r2.leshans.eu.org/2023/08/226a9a04b9349ef730df77a721af1c46.webp"></p><p>接着其他什么都保持默认即可,直接点击<code>Deploy</code>等待部署完成</p><p><img src="https://r2.leshans.eu.org/2023/08/cfca9b2634f0d2df8bd77d8931beea80.webp"></p><p>等待导入完毕后会自动分配一个二级域名给你,但是这个被墙了,所以我们要自定义域名,先点击刚刚导入的项目,选择<code>Setting</code>s,然后选择<code>Domains</code>,在输入框中输入自己的域名,然后按照提示在域名服务商中添加解析即可.</p><p><img src="https://r2.leshans.eu.org/2023/08/9044c6ec41099a8179ec2e83a4c690e8.webp"></p><p>这样子我们就完成博客在Vercel的部署了.🎉</p>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hugo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker容器常用命令</title>
    <link href="/posts/c1b05bf.html"/>
    <url>/posts/c1b05bf.html</url>
    
    <content type="html"><![CDATA[<h2 id="一、docker-常用基础命令总结"><a href="#一、docker-常用基础命令总结" class="headerlink" title="一、docker 常用基础命令总结"></a>一、docker 常用基础命令总结</h2><div class="code-wrapper"><pre><code class="hljs bash">--启动dockersystemctl start docker--停止dokcersystemctl stop docker--查看docker状态systemctl status docker --重启dockersystemctl restart docker--设置docker 开机自启systemctl <span class="hljs-built_in">enable</span> docker--查看docker 版本docker version--查看docker 镜像docker images--查看docker 运行列表docker ps --查看docker （运行、停止）docker ps -aq--删除容器docker <span class="hljs-built_in">rm</span> -f 容器ID/容器名称(CONTAINER ID/NAMES)-- 删除多个容器（空格隔开）docker <span class="hljs-built_in">rm</span> -f 容器ID/容器名称 容器ID/容器名称 ...--删除全部容器docker <span class="hljs-built_in">rm</span> -f $(docker ps -aq)</code></pre></div><h2 id="二、停止一个正在运行的容器"><a href="#二、停止一个正在运行的容器" class="headerlink" title="二、停止一个正在运行的容器"></a>二、停止一个正在运行的容器</h2><ol><li><p><code>docker stop</code> 容器ID或容器名  </p></li><li><p><code>docker stop -t=60</code> 容器ID或容器名 (参数 -t：关闭容器的限时)</p></li><li><p><code>docker kill</code> 容器ID或容器名 :直接关闭容器</p></li></ol><blockquote><p>stop和kill的区别:stop给与一定的关闭时间，kill直接关闭容器  </p></blockquote><h2 id="三、重启一个容器"><a href="#三、重启一个容器" class="headerlink" title="三、重启一个容器"></a>三、重启一个容器</h2><ol><li><p><code>docker ps</code> 查看正在运行的容器信息</p></li><li><p><code>docker restart</code> 容器ID或容器名</p></li></ol><h2 id="四、工作中常用docker命令"><a href="#四、工作中常用docker命令" class="headerlink" title="四、工作中常用docker命令"></a>四、工作中常用docker命令</h2><div class="code-wrapper"><pre><code class="hljs bash">--查看docker docker ps --进入容器docker <span class="hljs-built_in">exec</span> -it 容器ID/容器名称(CONTAINER ID/NAMES) /bin/bashdocker <span class="hljs-built_in">exec</span> -it 容器ID/容器名称(CONTAINER ID/NAMES) bash--例如docker <span class="hljs-built_in">exec</span> -it 56f0b18af626 /bin/bashdocker <span class="hljs-built_in">exec</span> -it postgres10.7 bash</code></pre></div><h2 id="五、设置搭建好容器开机自启"><a href="#五、设置搭建好容器开机自启" class="headerlink" title="五、设置搭建好容器开机自启"></a>五、设置搭建好容器开机自启</h2><div class="code-wrapper"><pre><code class="hljs bash">docker ps -qa docker  update --restart=always 容器ID/容器名docker  update --restart=always 56f0b18af626</code></pre></div><h2 id="六、开启docker-容器端口号"><a href="#六、开启docker-容器端口号" class="headerlink" title="六、开启docker 容器端口号"></a>六、开启docker 容器端口号</h2><div class="code-wrapper"><pre><code class="hljs bash">--启动firewalldsystemctl status firewalld.servicesystemctl start firewalld.service--开放端口号firewall-cmd --zone=public --add-port=5432/tcp --permanent (permanent永久生效，没有此参数重启后失效)--更新防火墙策略firewall-cmd --reload--查看开放端口firewall-cmd --zone=public --list-ports--查看5432firewall-cmd --zone= public --query-port=5432/tcp--删除端口firewall-cmd --zone=public --remove-port=5432/tcp --permanent--注：每次更改firewall规则后需重新加载（firewall-cmd --reload）</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可能是最快的独角数卡发卡网搭建教程</title>
    <link href="/posts/f6cbf330.html"/>
    <url>/posts/f6cbf330.html</url>
    
    <content type="html"><![CDATA[<p>独角数卡是一款卡密销售系统,他依赖 mysql 和 redis ，按部就班的装是没问题的，因为作者提供的文档还挺强大，佩服!<br>这里主要怎么五分钟无痛的安装好它，</p><p>主要参考了一位大佬的docker镜像 <a href="https://blog.dov.moe/posts/49102/">https://blog.dov.moe/posts/49102/</a></p><p>啰嗦两句，这个镜像比官方推荐那个镜像要好，官方那个docker是半吊子的，还需要装mysql和redis</p><h2 id="相关地址"><a href="#相关地址" class="headerlink" title="相关地址"></a>相关地址</h2><p>GitHub 官方仓库：<a href="https://github.com/assimon/dujiaoka">https://github.com/assimon/dujiaoka</a><br>Docker 镜像地址：<a href="https://hub.docker.com/r/stilleshan/dujiaoka">https://hub.docker.com/r/stilleshan/dujiaoka</a> （同时支持 X86 和 ARM 架构）来自：<a href="https://www.ioiox.com/archives/159.html">Stille 大佬</a><br>常见问题集锦：<a href="https://github.com/assimon/dujiaoka/wiki/problems">https://github.com/assimon/dujiaoka/wiki/problems</a></p><h2 id="1-首先安装docker"><a href="#1-首先安装docker" class="headerlink" title="1. 首先安装docker"></a>1. 首先安装docker</h2><div class="code-wrapper"><pre><code class="hljs bash">curl -fsSL https://get.docker.com | shcurl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/latest/download/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose<span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose</code></pre></div><h2 id="2-安装部署独角数卡"><a href="#2-安装部署独角数卡" class="headerlink" title="2. 安装部署独角数卡"></a>2. 安装部署独角数卡</h2><h3 id="1-创建安装目录"><a href="#1-创建安装目录" class="headerlink" title="1. 创建安装目录"></a>1. 创建安装目录</h3><div class="code-wrapper"><pre><code class="hljs bash">sudo -i    <span class="hljs-built_in">mkdir</span> -p /root/data/docker_data/shop    <span class="hljs-built_in">cd</span> /root/data/docker_data/shop    <span class="hljs-built_in">mkdir</span> storage uploads    <span class="hljs-built_in">chmod</span> -R 777 storage uploads  <span class="hljs-comment"># 创建数据目录用于挂载  </span>  <span class="hljs-built_in">touch</span> env.conf    <span class="hljs-built_in">chmod</span> -R 777 env.conf</code></pre></div><p>这边我们直接用 docker 的方式安装。</p><div class="code-wrapper"><pre><code class="hljs bash">vim docker-compose.yml</code></pre></div><p>英文输入法下，按 <code>i</code></p><div class="code-wrapper"><pre><code class="hljs bash">version: <span class="hljs-string">&quot;3&quot;</span>    services:    web:      category_bar: <span class="hljs-literal">true</span> stilleshan/dujiaoka      environment:          <span class="hljs-comment"># - INSTALL=false  </span>        - INSTALL=<span class="hljs-literal">true</span>          <span class="hljs-comment"># - MODIFY=true  </span>    volumes:        - ./env.conf:/dujiaoka/.env        - ./uploads:/dujiaoka/public/uploads        - ./storage:/dujiaoka/storage      ports:        - 8090:80         <span class="hljs-comment"># 8090可以改成任意服务器没有使用过的端口，80不要修改  </span>    restart: always       db:      category_bar: <span class="hljs-literal">true</span> mariadb:focal      restart: always      environment:        - MYSQL_ROOT_PASSWORD=changeyourpassword        - MYSQL_DATABASE=dujiaoka        - MYSQL_USER=dujiaoka        - MYSQL_PASSWORD=changeyourpassword      volumes:        - ./mysql:/var/lib/mysql      redis:      category_bar: <span class="hljs-literal">true</span> redis:alpine      restart: always      volumes:        - ./redis:/data</code></pre></div><p><code>changeyourpassword</code> 可以修改成自己的密码。</p><p>修改好之后，注意切换成英文输入法，然后按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出。</p><p>添加env.conf文件</p><div class="code-wrapper"><pre><code class="hljs bash">vim env.conf</code></pre></div><p>输入：</p><div class="code-wrapper"><pre><code class="hljs bash">APP_NAME=咕咕的小卖部  APP_ENV=<span class="hljs-built_in">local</span>  APP_KEY=<span class="hljs-built_in">base64</span>:rKwRuI6eRpCw/9e2XZKKGj/Yx3iZy5e7+FQ6+aQl8Zg=  APP_DEBUG=<span class="hljs-literal">true</span>  APP_URL=https://你的域名    LOG_CHANNEL=stack    <span class="hljs-comment"># 数据库配置  </span>DB_CONNECTION=mysql  DB_HOST=db  DB_PORT=3306  DB_DATABASE=dujiaoka  DB_USERNAME=dujiaoka  DB_PASSWORD=changeyourpassword    <span class="hljs-comment"># redis配置  </span>REDIS_HOST=redis  REDIS_PASSWORD=  REDIS_PORT=6379    BROADCAST_DRIVER=<span class="hljs-built_in">log</span>  SESSION_DRIVER=file  SESSION_LIFETIME=120      <span class="hljs-comment"># 缓存配置  </span><span class="hljs-comment"># file为磁盘文件  redis为内存级别  </span><span class="hljs-comment"># redis为内存需要安装好redis服务端并配置  </span>CACHE_DRIVER=redis    <span class="hljs-comment"># 异步消息队列  </span><span class="hljs-comment"># sync为同步  redis为异步  </span><span class="hljs-comment"># 使用redis异步需要安装好redis服务端并配置  </span>QUEUE_CONNECTION=redis    <span class="hljs-comment"># 后台语言  </span><span class="hljs-comment">## zh_CN 简体中文  </span><span class="hljs-comment">## zh_TW 繁体中文  </span><span class="hljs-comment">## en    英文  </span>DUJIAO_ADMIN_LANGUAGE=zh_CN    <span class="hljs-comment"># 后台登录地址  </span>ADMIN_ROUTE_PREFIX=/admin    <span class="hljs-comment"># 是否开启https (前端开启了后端也必须为true)  </span><span class="hljs-comment"># 后台登录出现0err或者其他登录异常问题，大概率是开启了https而后台没有开启，把下面的false改为true即可  </span>ADMIN_HTTPS=<span class="hljs-literal">true</span></code></pre></div><p>这边可以不用动，因为后续我们安装的时候填的信息会覆盖这里面的内容，修改好之后，注意切换成英文输入法，然后按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出。</p><p>最后：</p><div class="code-wrapper"><pre><code class="hljs shell">docker-compose up -d</code></pre></div><p>理论上我们就可以输入 <code>http://ip:8090</code> 访问安装了。</p><p>注意: <code>使用IP:8090可能会出现错误</code>,</p><p>推荐使用解析好的域名安装,做好<code>反向代理</code></p><p>推荐使用 <code>Nginx Proxy Manager</code> 反向代理神器</p><p><img src="https://r2.leshans.eu.org/2023/08/5dcffa8382678de28c5807d67f8a16f8.webp"></p><h3 id="2-网页安装"><a href="#2-网页安装" class="headerlink" title="2.网页安装"></a>2.网页安装</h3><p>访问域名开始安装：</p><ul><li>将<code>mysql</code>的地址改为<code>db</code></li><li>将<code>mysql</code>的用户名改为<code>dujiaoka</code></li><li>将<code>redis</code>的地址改为<code>redis</code></li><li>填写网站名称</li><li>网站 url 填写完整域名地址，例如<code>https://shop.ioiox.com</code></li></ul><p>点击安装成功后，<code>先不要登录</code>, 先修改其他参数后在进行登录使用</p><p><img src="https://r2.leshans.eu.org/2023/08/0ddfed22f2facd1cf293e5ca81a6e690.webp"></p><p>此时，我们先停止容器。</p><div class="code-wrapper"><pre><code class="hljs shell">docker-compose down</code></pre></div><p>将<code>docker-compose.yml</code>中的<code>INSTALL</code>改为<code>false</code></p><p>将<code>env.conf</code>中的<code>APP_DEBUG</code>改为<code>false</code> 以及 <code>ADMIN_HTTPS </code> 改成 <code>true</code></p><p>最后:</p><div class="code-wrapper"><pre><code class="hljs bash">docker-compose up -d</code></pre></div><p>然后在域名后面加上 <code>/admin</code>，账户密码都是<code>admin</code> 就可以正常登录后台了！</p><p>记得改一下用户名和密码！</p><p><img src="https://r2.leshans.eu.org/2023/08/e80c067669fc97c0d004f2edb6bfb55f.webp"></p><h2 id="3-迁移服务器"><a href="#3-迁移服务器" class="headerlink" title="3.迁移服务器"></a>3.迁移服务器</h2><ul><li>所有配置，数据，缓存，数据库都存储在整个<code>shop</code>目录中，定期备份即可。</li><li>如需迁移服务器，仅需打包本目录到新服务器，执行上述所有<code>chmod 777</code>的权限命令，再次<code>docker-compose up -d</code>即可恢复上线。</li></ul><p>进入<code>shop</code>目录</p><div class="code-wrapper"><pre><code class="hljs shell">chmod -R 777 storage uploads env.conf</code></pre></div><p>然后将<code>env.conf</code>中的 <code>APP_URL</code>改成新的域名</p><p>最后运行:</p><div class="code-wrapper"><pre><code class="hljs shell">docker-compose up -d</code></pre></div><h2 id="4-更新与卸载"><a href="#4-更新与卸载" class="headerlink" title="4. 更新与卸载"></a>4. 更新与卸载</h2><h3 id="更新-shop"><a href="#更新-shop" class="headerlink" title="更新 shop"></a>更新 shop</h3><div class="code-wrapper"><pre><code class="hljs shell">cd /root/data/docker_data/shop    docker-compose down     cp -r /root/data/docker_data/shop /root/data/docker_data/shop.archive  # 万事先备份，以防万一    docker-compose pull    docker-compose up -d    # 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。    docker image prune  # prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</code></pre></div><p>提示：</p><div class="code-wrapper"><pre><code class="hljs shell">WARNING! This will remove all dangling images.  Are you sure you want to continue? [y/N]</code></pre></div><p>输入 <code>y</code></p><p>利用 Docker 搭建的应用，更新非常容易～</p><h3 id="卸载-shop"><a href="#卸载-shop" class="headerlink" title="卸载 shop"></a>卸载 shop</h3><div class="code-wrapper"><pre><code class="hljs shell">cd /root/data/docker_data/shop    docker-compose down    cd ..    rm -rf /root/data/docker_data/shop  # 完全删除映射到本地的数据</code></pre></div><p>可以卸载得很干净。</p>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>发卡</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最新Linux一键重装脚本，迄今为止功能最全，最好用的脚本</title>
    <link href="/posts/f44f5e27.html"/>
    <url>/posts/f44f5e27.html</url>
    
    <content type="html"><![CDATA[<p>整理记录最新Linux一键重装支持Debian 12，迄今为止功能最全，最好用的脚本</p><span id="more"></span><p>项目地址: <a href="https://github.com/leitbogioro/Tools/">https://github.com/leitbogioro/Tools/</a></p><h2 id="首先登录SSH-下载脚本"><a href="#首先登录SSH-下载脚本" class="headerlink" title="首先登录SSH,下载脚本"></a>首先登录SSH,下载脚本</h2><p><code>国外服务器</code></p><div class="code-wrapper"><pre><code class="hljs bash">wget --no-check-certificate -qO InstallNET.sh <span class="hljs-string">&#x27;https://raw.githubusercontent.com/leitbogioro/Tools/master/Linux_reinstall/InstallNET.sh&#x27;</span> &amp;&amp; <span class="hljs-built_in">chmod</span> a+x InstallNET.sh</code></pre></div><p><code>中国大陆服务器：</code></p><div class="code-wrapper"><pre><code class="hljs bash">wget --no-check-certificate -qO InstallNET.sh <span class="hljs-string">&#x27;https://gitee.com/mb9e8j2/Tools/raw/master/Linux_reinstall/InstallNET.sh&#x27;</span> &amp;&amp; <span class="hljs-built_in">chmod</span> a+x InstallNET.sh</code></pre></div><h2 id="然后安装依赖"><a href="#然后安装依赖" class="headerlink" title="然后安装依赖"></a>然后安装依赖</h2><p>Debian系列(<code>Debian / Ubuntu</code> &#x2F; Kali):</p><div class="code-wrapper"><pre><code class="hljs bash">apt update -yapt install wget -y</code></pre></div><p>RedHat系列，仅基于RedHat 7+、grub2（<code>CentOS</code> &#x2F; AlmaLinux &#x2F; RockyLinux &#x2F; <code>OracleLinux</code> &#x2F; Fedora &#x2F; VzLinux &#x2F; ScientificOS &#x2F; RedHat Enterprise Linux &#x2F; <code>腾讯OpenCloudOS</code> &#x2F; <code>AWS</code> AmazonLinux &#x2F; <code>AliyunLinux或AliyunLinux</code> &#x2F; OpenAnolis）：</p><div class="code-wrapper"><pre><code class="hljs bash">yum install wget -y</code></pre></div><p>或者：</p><div class="code-wrapper"><pre><code class="hljs bash">dnf install wget -y</code></pre></div><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>默认密码 </p><div class="code-wrapper"><pre><code class="hljs">LeitboGi0ro</code></pre></div><p>默认ssh端口22</p><hr><p>说明: 可以直接在后面加版本号,例如:  <code>bash InstallNET.sh -debian 11</code></p><p>或者 <code>bash InstallNET.sh -ubuntu 20.04</code></p><p>启动安装命令后十几秒完成, 提示你 <code>reboot</code>  重启你的机器,稍等几分钟就好</p><p>安装完成,最好改下密码</p><p>Debian 12</p><div class="code-wrapper"><pre><code class="hljs bash">bash InstallNET.sh -debian</code></pre></div><p>CentOS 9</p><div class="code-wrapper"><pre><code class="hljs bash">bash InstallNET.sh -centos</code></pre></div><p>Ubuntu 22.04</p><div class="code-wrapper"><pre><code class="hljs bash">bash InstallNET.sh -ubuntu</code></pre></div><p>Windows Server 2022</p><div class="code-wrapper"><pre><code class="hljs bash">bash InstallNET.sh -windows</code></pre></div><h2 id="参数详细说明"><a href="#参数详细说明" class="headerlink" title="参数详细说明"></a>参数详细说明</h2><p><code>-debian 9-12</code>：Debian 9 及更高版本</p><p><code>-centos 7</code> 或 8&#x2F;9-stream：CentOS 7 及更高版本</p><p><code>-ubuntu 20.04</code>&#x2F;22.04：Ubuntu 20.04 及更高版本</p><p><code>-windows 10</code>&#x2F;11&#x2F;2012&#x2F;2016&#x2F;2019&#x2F;2022：Windows 10 Enterprise LTSC、Windows 11 Pro for Workstation 22H2、Windows Server 2012 R2、Windows Server 2016、Windows Server 2019、Windows Server 2022。支持 IPv4 dhcp 和静态、扩展当前操作系统磁盘分区。用户登录后必须执行自动步骤。</p>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vercel部署hugo记录配置</title>
    <link href="/posts/2a2c1c52.html"/>
    <url>/posts/2a2c1c52.html</url>
    
    <content type="html"><![CDATA[<h2 id="构建和开发设置"><a href="#构建和开发设置" class="headerlink" title="构建和开发设置"></a>构建和开发设置</h2><p>在新项目中使用框架时，系统会自动检测到该框架。因此，会自动配置多个项目设置，以达到最佳效果。你可以在下面覆盖它们。</p><p><img src="https://r2.leshans.eu.org/2023/07/220f80a9913bb8fe05a176cf44145503.webp"></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>为了在构建和运行时为您的部署提供环境变量，您可以在这里为您选择的环境输入环境变量。</p><p>指定<code>hugo版本</code></p><p><img src="https://r2.leshans.eu.org/2023/07/6112283a5fae16e078ecf419e739fc55.webp"></p>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vercel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hugo使用Shortcode插入bilibili、Youtube视频</title>
    <link href="/posts/37453670.html"/>
    <url>/posts/37453670.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用个人博客也有一年多的时间，这一年多的时候踩了很多坑，也学到了很多知识。 这里分享一个系列教程：从零开始搭建个人博客，把我的经验分享在这里。</p><h2 id="Shortcodes是什么"><a href="#Shortcodes是什么" class="headerlink" title="Shortcodes是什么"></a>Shortcodes是什么</h2><p>shortcode 可以理解为<strong>HTML模版</strong>，可以很方便的支持markdown里面写一行规定格式的代码，能用shortcode里面的模版替换成对应的HTML文件，然后就把这段HTML代码添加到编译之后的HTML文件中。</p><p><code>Hugo shortcode</code></p><p><code>//注：去掉@，我这里是为了防止自动编译</code><br><code>&#123;@&#123;&lt; name parameter1 parameter2 &gt;&#125;&#125;</code></p><p>然后在你的<code>主题</code>的<code>layouts/shortcodes</code> 会自动找 名字为 name.html的文件，就把参数的值替换到html中，得到一个最终的html信息。</p><p>shortcode可以很方便的做复用，可以让你在每个markdown文件里面添加很少的内容，通常是一行代码，就能生成一个通用的HTML片段。</p><p>使用Shortcode，我们就能很方便的通过一行简单的代码来插入B站或者Youtube视频。</p><h2 id="插入视频"><a href="#插入视频" class="headerlink" title="插入视频"></a>插入视频</h2><p>我们就教大家怎么在Hugo中嵌入Bilibili视频和Youtube视频，这样当别人访问你的个人博客网站的时候，可以直接点击播放你插入的视频，还可以自动跳转到你的自媒体平台播放视频，来给你的自媒体平台引流。</p><h3 id="1-嵌入Bilibili视频"><a href="#1-嵌入Bilibili视频" class="headerlink" title="1. 嵌入Bilibili视频"></a>1. 嵌入Bilibili视频</h3><p>在hugo网站目录你使用的主题目录下<code>themes/&#123;your theme name&#125;/layouts/shortcodes</code>中创建bilibili.html文件。</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-comment">&lt;!-- style 样式 是为了让网页上的视频框按比例显示而非固定的大小 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><span class="language-css">      <span class="hljs-selector-class">.aspect-ratio</span> &#123;</span><span class="language-css">        <span class="hljs-attribute">position</span>: relative;</span><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;</span><span class="language-css">        <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">75%</span>;</span><span class="language-css">      &#125;</span><span class="language-css"></span><span class="language-css">      <span class="hljs-selector-class">.aspect-ratio</span> <span class="hljs-selector-tag">iframe</span> &#123;</span><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><span class="language-css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><span class="language-css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><span class="language-css">      &#125;</span><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;aspect-ratio&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span></span><span class="hljs-tag">              <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://player.bilibili.com/player.html?bvid=&#123;&#123;.Get 0 &#125;&#125;&amp;page=&#123;&#123; if .Get 1 &#125;&#125;&#123;&#123;.Get 1&#125;&#125;&#123;&#123; else &#125;&#125;1&amp;high_quality=1&amp;danmaku=0&#123;&#123;end&#125;&#125;&quot;</span></span><span class="hljs-tag">              <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;no&quot;</span> </span><span class="hljs-tag">              <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> </span><span class="hljs-tag">              <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> </span><span class="hljs-tag">              <span class="hljs-attr">framespacing</span>=<span class="hljs-string">&quot;0&quot;</span> </span><span class="hljs-tag">              <span class="hljs-attr">allowfullscreen</span>=<span class="hljs-string">&quot;true&quot;</span></span><span class="hljs-tag">              &gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span>      <span class="hljs-comment">&lt;!-- src 中的 &amp;high_quality=1&amp;danmaku=0 设定了高清程度并默认屏蔽弹幕 --&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div><p>然后在你的bilibli的连接上找到BV号。 比如我的视频链接是： <a href="https://www.bilibili.com/video/BV1n8411K7zr/?vd_source=adec61d169fe18e7682f66c984380921">https://www.bilibili.com/video/BV1n8411K7zr/?vd_source&#x3D;adec61d169fe18e7682f66c984380921</a></p><p>那么BV号就是：<code>BV1n8411K7zr</code></p><p>在你的markdown文件里面添加这么一行</p><p>这样就能展示你的B站视频了:</p><p>点击<code>去Bilibili观看</code>或者<code>吐槽</code>会自动跳转到b站对应的视频链接继续观看，非常方便。</p><h2 id="2-嵌入Youtube视频"><a href="#2-嵌入Youtube视频" class="headerlink" title="2. 嵌入Youtube视频"></a>2. 嵌入Youtube视频</h2><p>Hugo是自带Youtube视频的插入的，所以我们甚至不需要自己添加shortcode模板。</p><p>找到你的视频链接：</p><p><code>https://www.youtube.com/watch?v=kDQJF6Ngsi0</code><br>你只需要取到 v&#x3D;xxxx里面的xxxx内容 也就是你只需要写</p><p>就会自动匹配Hugo自带的<code>shortcode</code>模板，嵌入你的youtube视频。</p><p>如果你不想用hugo自带的shortcode模板，或者它无法正常插入视频，那么同样的方式在你使用的主题目录下<code>themes/&#123;your theme name&#125;/layouts/shortcodes</code>中创建youtube.html文件。</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><span class="language-css">    <span class="hljs-selector-class">.meta-media</span> &#123;</span><span class="language-css">      <span class="hljs-attribute">position</span>: relative;</span><span class="language-css">      <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">30px</span>;</span><span class="language-css">      <span class="hljs-attribute">display</span>: flex;</span><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;</span><span class="language-css">      <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">75%</span>;</span><span class="language-css">    &#125;</span><span class="language-css">    <span class="hljs-selector-class">.video</span> &#123;</span><span class="language-css">      <span class="hljs-attribute">position</span>: absolute;</span><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><span class="language-css">      <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><span class="language-css">      <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><span class="language-css">    &#125;</span><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;meta-media&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://www.youtube.com/embed/&#123;&#123; .Get 0 &#125;&#125;&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;yes&quot;</span> <span class="hljs-attr">allowfullscreen</span>=<span class="hljs-string">&quot;allowfullscreen&quot;</span> <span class="hljs-attr">high_quality</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">framespacing</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;video&quot;</span> &gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre></div><p>看一下效果：</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p><code>shortcodes</code>是不是很方便？让你在博客里面只需要写上一行代码就可以自动链接到B站或者Youtube，可以非常方便的引流。赶快在你的个人博客加入shortcodes添加B站和Youtube视频吧。能大大提高你的B站和Youtube视频的站外曝光率。</p>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hugo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>甲骨文云 Oracle Cloud 服务器防回收保活 docker 命令</title>
    <link href="/posts/c238045f.html"/>
    <url>/posts/c238045f.html</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>近期甲骨文出台了政策，将对闲置的服务器进行停机或者回收处理，为了防止被删，网上各路大神也出了很多教程来让服务器高负载，不过大多数都是试用 shell 脚本循环计算，dd 复制空文件或者一些类似 lookbusy 等第三方软件来模拟高负载。</p><p>不过作为洁癖党，总是会避免安装一些不太了解的第三方软件，也但是一些脚本后台运行出问题，或者时间长了忘记了，所以还是觉得把脚本跑在 docker 里最合适，也最方便管理。可以做到想开就开，想关就关，还可以配合 crontab 定时开关。</p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p>原理很简单，就是写了一段最简单的循环计算 shell 脚本，在 alpine 容器内部执行。只需要控制 docker 的启动和停止即可。</p><p>注意：本服务脚本仅占用 CPU 资源，甲骨文政策大概率满足其一即可。</p><h3 id="CPU-占用效果"><a href="#CPU-占用效果" class="headerlink" title="CPU 占用效果"></a>CPU 占用效果</h3><p>启动此容器后 CPU 占用大致效果图</p><p><img src="https://r2.leshans.eu.org/2023/08/8e78b6c44f5b963760cc4155665d7bb7.webp"></p><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p><strong>启动命令</strong></p><div class="code-wrapper"><pre><code class="hljs bash">docker run -d --name keeporaclealive --<span class="hljs-built_in">rm</span> alpine sh -c <span class="hljs-string">&quot;while true; do for i in &#123;1..100000&#125;; do j=<span class="hljs-subst">$((i*i)</span>); done; done&quot;</span></code></pre></div><p><strong>停止命令</strong></p><div class="code-wrapper"><pre><code class="hljs bash">docker stop keeporaclealive</code></pre></div><p>注意：上述启动命令加入了<code>--rm</code>参数，停止容器将自动删除容器，不会残留到系统中。</p><h3 id="docker-常驻"><a href="#docker-常驻" class="headerlink" title="docker 常驻"></a>docker 常驻</h3><p><strong>启动命令</strong></p><div class="code-wrapper"><pre><code class="hljs bash">docker run -d --name keeporaclealive --restart always alpine sh -c <span class="hljs-string">&quot;while true; do for i in &#123;1..100000&#125;; do j=<span class="hljs-subst">$((i*i)</span>); done; done&quot;</span></code></pre></div><p>上述命令将容器常驻，即使服务器重启也会自动启动服务。</p><p><strong>停止命令</strong></p><div class="code-wrapper"><pre><code class="hljs bash">docker stop keeporaclealive<span class="hljs-comment"># 停止服务，容器不会被删除。</span>docker start keeporaclealive<span class="hljs-comment"># 再次启动容器。</span>docker <span class="hljs-built_in">rm</span> keeporaclealive<span class="hljs-comment"># 停止后彻底删除容器。</span></code></pre></div><h3 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker compose"></a>docker compose</h3><p>同时也可以用 docker compose 来管理，这样启动和停止命令会更加方便。</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> keeporaclealive<span class="hljs-built_in">cd</span> keeporaclealivevi docker-compose.yml<span class="hljs-comment"># 创建 keeporaclealive 目录并新建 docker-compose.yml 文件，复制以下配置文件。</span></code></pre></div><p>docker-compose.yml</p><div class="code-wrapper"><pre><code class="hljs bash">version: <span class="hljs-string">&#x27;3&#x27;</span>services:  keeporaclealive:    category_bar: <span class="hljs-literal">true</span> alpine    <span class="hljs-built_in">command</span>: <span class="hljs-string">&#x27;sh -c &quot;while true; do for i in $$(seq 1 100000); do j=$$[i*i]; done; done&quot;&#x27;</span>    restart: always</code></pre></div><p>启动和停止可以用以下命令控制：</p><div class="code-wrapper"><pre><code class="hljs bash">docker-compose up -d<span class="hljs-comment"># 启动</span>docker-compose down<span class="hljs-comment"># 停止</span></code></pre></div><p>crontab 定时任务，每日 10 点启动，每日 14 点停止。<br><code>根据自身情况修改 /root/keeporaclealive 目录地址</code></p><div class="code-wrapper"><pre><code class="hljs bash">crontab -e<span class="hljs-comment"># 添加以下两条记录</span>0 10 * * * <span class="hljs-built_in">cd</span> /root/keeporaclealive &amp;&amp; /usr/local/bin/docker-compose up -d0 14 * * * <span class="hljs-built_in">cd</span> /root/keeporaclealive &amp;&amp; /usr/local/bin/docker-compose down</code></pre></div><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>更多甲骨文云 Oracle Cloud 相关技巧,教程及信息,请持续关注甲骨文云 Oracle Cloud 系列文章汇总</p>]]></content>
    
    
    
    <tags>
      
      <tag>甲骨文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 和 GitHub 的关联</title>
    <link href="/posts/d0818795.html"/>
    <url>/posts/d0818795.html</url>
    
    <content type="html"><![CDATA[<h2 id="本地-Git-和-GitHub-的链接（通过-SSH-Key-配置）"><a href="#本地-Git-和-GitHub-的链接（通过-SSH-Key-配置）" class="headerlink" title="本地 Git 和 GitHub 的链接（通过 SSH Key 配置）"></a>本地 Git 和 GitHub 的链接（通过 SSH Key 配置）</h2><h3 id="1-注册-GitHub-账号，安装-git"><a href="#1-注册-GitHub-账号，安装-git" class="headerlink" title="1. 注册 GitHub 账号，安装 git"></a>1. 注册 GitHub 账号，安装 git</h3><p>Github: <a href="https://github.com/">https://github.com/</a></p><p>Git 下载: <a href="https://git-scm.com/">https://git-scm.com/</a></p><blockquote><p>安装完git以后,全部的命令操作都在bash里执行</p></blockquote><h3 id="2-本地配置用户名和邮箱"><a href="#2-本地配置用户名和邮箱" class="headerlink" title="2. 本地配置用户名和邮箱"></a>2. 本地配置用户名和邮箱</h3><p><img src="https://r2.leshans.eu.org/2023/07/1aee52908e8bafb1af3a017afc54d067.webp"></p><p>你的 github 用户名和邮箱</p><div class="code-wrapper"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;woniu336&quot;</span>git config --global user.email <span class="hljs-string">&quot;310478073@qq.com&quot;</span></code></pre></div><h3 id="3-生成-SSH-Key"><a href="#3-生成-SSH-Key" class="headerlink" title="3. 生成 SSH Key"></a>3. 生成 SSH Key</h3><p>一路回车即可</p><div class="code-wrapper"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;310478073@qq.com&quot;</span></code></pre></div><p>用户主目录 <code> /.ssh</code> 下有两个文件，<code>id_rsa</code> 是私钥，<code>id_rsa.pub</code> 是公钥, 记事本打开公钥 <code>id_rsa.pub</code>, 然后复制公钥内容</p><h3 id="4-添加-SSH-keys"><a href="#4-添加-SSH-keys" class="headerlink" title="4. 添加 SSH keys"></a>4. 添加 SSH keys</h3><p>回到浏览器中，进入 Github 设置中的 SSH and GPG keys，新建一个 SSH keys，标题自己起，Key 的内容就输入刚才复制的文件中的值，然后添加。</p><p><code>添加地址:</code>  <a href="https://github.com/settings/ssh/new">https://github.com/settings/ssh/new</a></p><h3 id="5-验证关联"><a href="#5-验证关联" class="headerlink" title="5. 验证关联"></a>5. 验证关联</h3><p>回到本地的 Git 窗口，输入如下代码，验证是否链接成功。</p><div class="code-wrapper"><pre><code class="hljs bash">ssh -T git@github.com</code></pre></div><p><code>再输入yes</code></p><h3 id="6-远程库与本地库操作"><a href="#6-远程库与本地库操作" class="headerlink" title="6. 远程库与本地库操作"></a>6. 远程库与本地库操作</h3><ol><li>从远程克隆一份到本地</li></ol><div class="code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@github.com:woniu336/blog-image.git</code></pre></div><p>以后获取用  <code>git pull origin main</code></p><ol start="2"><li>本地库关联远程库  (没有问题就从第3点开始)</li></ol><div class="code-wrapper"><pre><code class="hljs bash">git remote add origin git@github.com:woniu336/blog-image.git</code></pre></div><blockquote><p><code>添加远程github仓库的时候提示错误：error: remote origin already exists.</code></p></blockquote><p>先删除远程 Git 仓库</p><div class="code-wrapper"><pre><code class="hljs bash">git remote <span class="hljs-built_in">rm</span> origin</code></pre></div><p>再添加远程 Git 仓库</p><div class="code-wrapper"><pre><code class="hljs bash">git remote add origin git@github.com:woniu336/blog-image.git</code></pre></div><hr><ol start="3"><li>推送 master 分支的所有内容</li></ol><p>​    例如添加一个 test. Txt 文件, 然后推送到远程</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> test.txt</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">git add test.txt</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;添加新文件&quot;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">git push -u origin main</code></pre></div><p>注意: 远程分支是<code>main</code>还是<code>master</code>  , 第一次使用加上了-u 参数</p><p>推送成功后就可以看到远程和本地的内容一模一样，下次只要本地作了提交，就可以通过命令：</p><div class="code-wrapper"><pre><code class="hljs bash">git commit -am <span class="hljs-string">&quot;update&quot;</span>git push origin main</code></pre></div><p>把最新内容推送到 Github</p><h3 id="7-推送错误-网络问题"><a href="#7-推送错误-网络问题" class="headerlink" title="7. 推送错误 (网络问题)"></a>7. 推送错误 (网络问题)</h3><p><code>办法: 为 git 设置 http, https 代理 </code></p><p>7890 是小狐狸的代理端口, 请修改为自己本地的代理端口, 搞定!</p><p><img src="https://r2.leshans.eu.org/2023/07/bf57306ab7ff8a12ca710a58fcf97b75.webp"></p><div class="code-wrapper"><pre><code class="hljs bash">git config --global http.proxy <span class="hljs-string">&#x27;socks5://127.0.0.1:7890&#x27;</span>git config --global https.proxy <span class="hljs-string">&#x27;socks5://127.0.0.1:7890&#x27;</span></code></pre></div><p>其他操作: 取消 http, https 代理</p><div class="code-wrapper"><pre><code class="hljs bash">git config --global --<span class="hljs-built_in">unset</span> http.proxygit config --global --<span class="hljs-built_in">unset</span> https.proxy</code></pre></div><p>查看当前生效的配置，</p><div class="code-wrapper"><pre><code class="hljs bash">git config -l</code></pre></div><p>输入 <code>git remote show origin</code> 来检查当前分支情况</p><div class="code-wrapper"><pre><code class="hljs bash">git remote show origin</code></pre></div><p>bash终端设置代理:</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> http_proxy=socks5://127.0.0.1:7890 <span class="hljs-built_in">set</span> https_proxy=socks5://127.0.0.1:7890</code></pre></div><p>取消sock5代理</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> http_proxy= <span class="hljs-built_in">set</span> https_proxy=</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>obsidian主面板设计</title>
    <link href="/posts/f9a5fe93.html"/>
    <url>/posts/f9a5fe93.html</url>
    
    <content type="html"><![CDATA[<h4 id="日记"><a href="#日记" class="headerlink" title="日记"></a>日记</h4><div class="code-wrapper"><pre><code class="hljs dataview">table title AS &quot;标题&quot;,date AS &quot;创建时间&quot;from &quot;日记&quot;where draft=truesort date desc</code></pre></div><h4 id="草稿箱"><a href="#草稿箱" class="headerlink" title="草稿箱"></a>草稿箱</h4><div class="code-wrapper"><pre><code class="hljs dataview">table title AS &quot;标题&quot;,date AS &quot;创建时间&quot;from &quot;post&quot;where draft=truesort date desc</code></pre></div><h3 id="已发布"><a href="#已发布" class="headerlink" title="已发布"></a>已发布</h3><div class="code-wrapper"><pre><code class="hljs dataview">table title AS &quot;标题&quot;,date AS &quot;创建时间&quot;from &quot;post&quot;where draft=falsesort date desc</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>obsidian</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hugo部署twikoo评论</title>
    <link href="/posts/1ef48bd8.html"/>
    <url>/posts/1ef48bd8.html</url>
    
    <content type="html"><![CDATA[<h2 id="1-申请-envId"><a href="#1-申请-envId" class="headerlink" title="1.申请 envId"></a>1.申请 envId</h2><p>请看 <a href="https://twikoo.js.org/quick-start.html#%E4%BA%91%E5%87%BD%E6%95%B0%E9%83%A8%E7%BD%B2">twikoo 官方文档</a>，我选的是 vercel 部署方式，视频教程：Twikoo Vercel 部署教程 </p><h2 id="2-添加代码"><a href="#2-添加代码" class="headerlink" title="2.添加代码"></a>2.添加代码</h2><p>Hugo 的 PaperMod 主题添加 twikoo 代码的位置：layouts&#x2F;partials&#x2F;comments.html 推荐添加在自己博客站点下的 layouts 文件夹，不要添加到主题里的 layouts 文件夹，否则更新主题时会被覆盖 </p><!-- Twikoo --><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pagination__title&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pagination__title-h&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 20px;&quot;</span>&gt;</span>💬评论<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tcomment&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot; https://cdn.staticfile.org/twikoo/ &#123;&#123; .Site.Params.twikoo.version &#125;&#125; /twikoo. All. Min. Js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">        <span class="hljs-title class_">Twikoo</span>.<span class="hljs-property">Init</span> (&#123;</span><span class="language-javascript">            <span class="hljs-title class_">EnvId</span>: <span class="hljs-string">&quot;&quot;</span>,  <span class="hljs-comment">//这里填写自己的 envId</span></span><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&quot; #tcomment &quot;</span>,</span><span class="language-javascript">            <span class="hljs-title class_">Lang</span>: <span class="hljs-string">&#x27;zh-CN&#x27;</span>,</span><span class="language-javascript">            <span class="hljs-title class_">Region</span>: <span class="hljs-string">&#x27;ap-guangzhou&#x27;</span>,  <span class="hljs-comment">//我的区域是广州，可以不填，默认是 ap-shanghai</span></span><span class="language-javascript">            <span class="hljs-title class_">Path</span>: <span class="hljs-variable language_">window</span>. <span class="hljs-variable constant_">TWIKOO_MAGIC_PATH</span>||<span class="hljs-variable language_">window</span>. <span class="hljs-title class_">Location</span>. <span class="hljs-title class_">Pathname</span>,</span><span class="language-javascript">        &#125;);</span><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre></div><p>调用上述 twikoo 代码的位置：layouts&#x2F;_default&#x2F;single. Html</p><div class="code-wrapper"><pre><code class="hljs html">// twikoo，一般只需要复制以下3行代码，加上其他代码是为了帮助读者确认代码添加的位置&#123;&#123;- if (.Param &quot;comments&quot;) &#125;&#125;  &#123;&#123;- partial &quot;comments.html&quot; . &#125;&#125;&#123;&#123;- end &#125;&#125;</code></pre></div><p>在站点配置文件 config. Yml 的 params 中加上如下代码，版本号自己去 twikoo 的 github 看最新的版本</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">params:</span><span class="hljs-attr">twikoo:</span>      <span class="hljs-attr">version:</span> <span class="hljs-number">1.5</span><span class="hljs-number">.8</span> <span class="hljs-string">//</span> <span class="hljs-string">这个版本号要自己手动修改，和twikoo的版本号要对得上</span></code></pre></div><p>完结!</p>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hugo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客写作流程之工具篇</title>
    <link href="/posts/389ed8a6.html"/>
    <url>/posts/389ed8a6.html</url>
    
    <content type="html"><![CDATA[<p>本文将对我个人的博文写作流程 <strong>所用到的工具</strong> 做一个总结与分享。从标题就可以看出来，主要有这几个工具： <code>emacs</code>, <code>orgmode</code> &amp; <code>hugo</code> ，另外还有两个配合 <code>hugo</code> 的辅助包 <code>easy-hugo</code> （可选） &amp; <code>ox-hugo</code> 。</p><ul><li><code>hugo</code> : <a href="https://gohugo.io/">https://gohugo.io/</a></li><li><code>orgmode</code> : <a href="https://orgmode.org/">https://orgmode.org/</a></li><li><code>ox-hugo</code> : <a href="https://ox-hugo.scripter.co/">https://ox-hugo.scripter.co/</a></li><li><code>easy-hygo</code> : <a href="https://github.com/masasam/emacs-easy-hugo">https://github.com/masasam/emacs-easy-hugo</a></li></ul><h2 id="自问自答"><a href="#自问自答" class="headerlink" title="自问自答"></a>自问自答<a href="https://www.xianmin.org/post/ox-hugo/#%E8%87%AA%E9%97%AE%E8%87%AA%E7%AD%94"></a></h2><h3 id="问：-为什么写这篇文章？"><a href="#问：-为什么写这篇文章？" class="headerlink" title="问： 为什么写这篇文章？"></a>问： 为什么写这篇文章？<a href="https://www.xianmin.org/post/ox-hugo/#%E9%97%AE-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%86%99%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0"></a></h3><p>答： 中文搜索居然搜索不到一篇有关 <code>ox-hugo</code> 的内容。</p><h3 id="问：-这篇文章主要解决什么问题？"><a href="#问：-这篇文章主要解决什么问题？" class="headerlink" title="问： 这篇文章主要解决什么问题？"></a>问： 这篇文章主要解决什么问题？<a href="https://www.xianmin.org/post/ox-hugo/#%E9%97%AE-%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E4%B8%BB%E8%A6%81%E8%A7%A3%E5%86%B3%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98"></a></h3><p>答： orgmode 配合 hugo 来写作、发布、管理博文的一种便捷方案。</p><h3 id="问：-为什么用-emacs-和-orgmode-？"><a href="#问：-为什么用-emacs-和-orgmode-？" class="headerlink" title="问： 为什么用 emacs 和 orgmode ？"></a>问： 为什么用 emacs 和 orgmode ？<a href="https://www.xianmin.org/post/ox-hugo/#%E9%97%AE-%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8-emacs-%E5%92%8C-orgmode"></a></h3><p>答： 谁让我当年入了 emacs 和 orgmode 的「坑」 😂 ，这只是习惯而已。这俩工具还是需要一定的学习成本的，因此，本文对不熟悉 emacs 和 orgmode，或者使用其它编辑器的用户没多大帮助，但多少可以了解一下。</p><h3 id="问：-为什么用-hugo-？"><a href="#问：-为什么用-hugo-？" class="headerlink" title="问： 为什么用 hugo ？"></a>问： 为什么用 hugo ？<a href="https://www.xianmin.org/post/ox-hugo/#%E9%97%AE-%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8-hugo"></a></h3><p>答： 最开始只是因为 hugo 原生支持 orgmode ，事后来看，其实支持的不是很好，但是 ox-hugo 解决了用 orgmode 写博文的问题。当然还有一点，在生成静态网站的诸多工具（如 jekyll, hexo 等等）中，我发现 hugo 的安装是最便捷的，只需要下载一个二进制文件直接安装就能用了，而其它工具却总要安装一些别的依赖。网上还有种说法是 hugo 的网站生成速度是最快的，这个我没测试过，也不太确定。</p><h2 id="发布博文的一般流程"><a href="#发布博文的一般流程" class="headerlink" title="发布博文的一般流程"></a>发布博文的一般流程<a href="https://www.xianmin.org/post/ox-hugo/#%E5%8F%91%E5%B8%83%E5%8D%9A%E6%96%87%E7%9A%84%E4%B8%80%E8%88%AC%E6%B5%81%E7%A8%8B"></a></h2><ol><li>创建一个 orgmode heading 作为博文标题；</li><li>写文章（废话）；</li><li>使用 ox-hugo 生成 markdown 文件；</li><li>使用 easy-hugo 预览；</li><li>发布（废话）。</li></ol><p>如前文所说，如果你不熟悉 emacs 和 orgmode ，一定会觉得这个流程好麻烦，何必用这些工具，把写作这回事儿弄得复杂了。我下面会对这个流程进行补充说明，并阐述它们的优点。</p><h2 id="创建博文"><a href="#创建博文" class="headerlink" title="创建博文"></a>创建博文<a href="https://www.xianmin.org/post/ox-hugo/#%E5%88%9B%E5%BB%BA%E5%8D%9A%E6%96%87"></a></h2><p>正常我们使用 hugo 是怎样创建一篇新博文的呢？在命令行下，敲击命令 <code>hugo new posts/my-first-post.md</code> ，然后用自己熟悉的编辑器编辑这个文件。这个文件的头部包含我们这篇文章的一些基本信息，比如像这样：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">&quot;An Example Post&quot;</span>  <span class="hljs-comment">#标题</span><span class="hljs-attr">date:</span> <span class="hljs-number">2018-01-01T16:01:23+08:00</span> <span class="hljs-comment">#发布时间</span><span class="hljs-attr">lastmod:</span> <span class="hljs-number">2018-01-02T16:01:23+08:00</span> <span class="hljs-comment">#修改时间</span><span class="hljs-attr">published:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment">#是否是草稿？</span><span class="hljs-attr">tags:</span> [<span class="hljs-string">&quot;tag-1&quot;</span>, <span class="hljs-string">&quot;tag-2&quot;</span>, <span class="hljs-string">&quot;tag-3&quot;</span>]  <span class="hljs-comment">#标签</span><span class="hljs-attr">categories:</span> [<span class="hljs-string">&quot;index&quot;</span>]  <span class="hljs-comment">#分类</span></code></pre></div><h4 id="更多内容请访问-贤民的博客"><a href="#更多内容请访问-贤民的博客" class="headerlink" title="更多内容请访问: 贤民的博客"></a>更多内容请访问: <a href="https://www.xianmin.org/post/ox-hugo/">贤民的博客</a></h4>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hugo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给 Hugo 博客增加搜索功能</title>
    <link href="/posts/58c931ce.html"/>
    <url>/posts/58c931ce.html</url>
    
    <content type="html"><![CDATA[<p>此方法来自 <a href="https://gohugo.io/tools/search/">Hugo官方文档</a> 中的 <a href="https://gist.github.com/cmod/5410eae147e4318164258742dd053993">hugofastsearch</a></p><blockquote><p>A usability and speed update to “Github Gist for Fuse. Js integration” — global, keyboard-optimized search.</p></blockquote><p>没错，这个方案，是 <a href="https://gist.github.com/eddiewebb/735feb48f50f0ddd65ae5606a1cb41ae">Github Gist for Fuse.js integration</a> 的改进版。</p><p>其实在使用这个方案之前，老灯也尝试了 <code>hugo-lunr-zh</code> 方案。<a href="https://www.npmjs.com/package/hugo-lunr">hugo-lunr</a> <strong>Last publish 4 years ago</strong> 而 <a href="https://www.npmjs.com/package/hugo-lunr-zh">hugo-lunr-zh</a> 本身是基于 <code>hugo-lunr</code> 添加了一个 nodejieba (结巴分词 lib)分词的功能以支持中文，同样是年久失修了 <strong>Last publish 2 years ago</strong>，不过我使用这个生成索引失败了，没有任何错误输出，只能做罢。</p><h2 id="亮点"><a href="#亮点" class="headerlink" title="亮点"></a>亮点</h2><ol><li>最小&#x2F;零外部依赖（无需 jQuery）</li><li>添加到每个页面尺寸尽可能小</li><li>JSON 索引文件按需加载（进一步减少对页的速度&#x2F;用户体验的整体影响）</li><li>键盘友好，瞬时导航（有点像 Alfred &#x2F; macOS Spotlight）</li></ol><p>另外，此方案就像 <a href="https://gist.github.com/eddiewebb/735feb48f50f0ddd65ae5606a1cb41ae">Eddie Webb指出的那样</a>, 还有如下额外的好处：</p><ol><li>无需 NPM, grunt 等外部工具</li><li>无需额外的编译步骤，你只需要像往常一样执行 <code>hugo</code></li><li>可以方便地切换到任意可使用 json 索引的客户端搜索工具</li></ol><h2 id="集成步骤"><a href="#集成步骤" class="headerlink" title="集成步骤"></a>集成步骤</h2><ol><li>添加 <code>index.json</code> 文件到 <code>layouts/_default</code></li><li>修改 <code>config.toml</code> 以使 Hugo 对首页生成额外的 <code>JSON</code> 输出格式</li><li>添加 <code>fastsearch.js</code> 和 <code>fuse.min.js</code> (可从 <a href="https://fusejs.io/">https://fusejs.io</a> 下载) 到 <code>static/js</code></li><li>添加搜索框 HTML 代码到模板页面 footer</li><li>添加 CSS 样式到模板页面 header 或模板主 CSS 文件</li><li>访问 <a href="http://localhost:1313/">http://localhost:1313/</a> , 键入 <code>Alt-/</code> 执行搜索</li></ol><h2 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h2><blockquote><p>注意：跟原文章相比，老灯做了一些微调</p></blockquote><ol><li><p>允许通过点击页面空白处隐藏搜索框，而不是只能按 Esc</p></li><li><p>在右上角添加了一个搜索按钮，方便不想按快捷键的人</p></li><li><p>默认的快捷键由于 Firefox Linux 默认 <code>Super-/</code> 是 <strong>Quick Find</strong> 功能，因此我改成了 <code>Alt-/</code></p></li><li><p><code>layouts/_default/index.json</code></p></li></ol><div class="code-wrapper"><pre><code class="hljs go-html-template">&#123;&#123;- $.Scratch.Add &quot;index&quot; slice -&#125;&#125;&#123;&#123;- range .Site.RegularPages -&#125;&#125;    &#123;&#123;- $.Scratch.Add &quot;index&quot; (dict &quot;title&quot; .Title &quot;tags&quot; .Params.tags &quot;categories&quot; .Params.categories &quot;contents&quot; .Plain &quot;permalink&quot; .Permalink &quot;date&quot; .Date &quot;section&quot; .Section) -&#125;&#125;&#123;&#123;- end -&#125;&#125;&#123;&#123;- $.Scratch.Get &quot;index&quot; | jsonify -&#125;&#125;</code></pre></div><blockquote><p>这里默认取的 <code>contents</code>, 如果文章数量特别多，可能会导致生成的索引过大</p></blockquote><ol start="2"><li><code>config.toml</code> 增加配置</li></ol><div class="code-wrapper"><pre><code class="hljs toml"><span class="hljs-section">[outputs]</span>  <span class="hljs-attr">home</span> = [<span class="hljs-string">&quot;HTML&quot;</span>, <span class="hljs-string">&quot;RSS&quot;</span>, <span class="hljs-string">&quot;JSON&quot;</span>]</code></pre></div><ol start="3"><li><code>static/js/fastsearch.js</code></li></ol><p><code>fuse.min.js</code> 可从 <a href="https://github.com/krisk/Fuse/releases">https://github.com/krisk/Fuse/releases</a> 下载。</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fuse; <span class="hljs-comment">// holds our search engine</span><span class="hljs-keyword">var</span> fuseIndex;<span class="hljs-keyword">var</span> searchVisible = <span class="hljs-literal">false</span>; <span class="hljs-keyword">var</span> firstRun = <span class="hljs-literal">true</span>; <span class="hljs-comment">// allow us to delay loading json data unless search activated</span><span class="hljs-keyword">var</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;searchResults&#x27;</span>); <span class="hljs-comment">// targets the &lt;ul&gt;</span><span class="hljs-keyword">var</span> first = list.<span class="hljs-property">firstChild</span>; <span class="hljs-comment">// first child of search list</span><span class="hljs-keyword">var</span> last = list.<span class="hljs-property">lastChild</span>; <span class="hljs-comment">// last child of search list</span><span class="hljs-keyword">var</span> maininput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;searchInput&#x27;</span>); <span class="hljs-comment">// input box for search</span><span class="hljs-keyword">var</span> resultsAvailable = <span class="hljs-literal">false</span>; <span class="hljs-comment">// Did we get any search results?</span><span class="hljs-comment">// ==========================================</span><span class="hljs-comment">// The main keyboard event listener running the show</span><span class="hljs-comment">//</span><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keydown&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;  <span class="hljs-comment">// CMD-/ to show / hide Search</span>  <span class="hljs-keyword">if</span> (event.<span class="hljs-property">altKey</span> &amp;&amp; event.<span class="hljs-property">which</span> === <span class="hljs-number">191</span>) &#123;      <span class="hljs-comment">// Load json search index if first time invoking search</span>      <span class="hljs-comment">// Means we don&#x27;t load json unless searches are going to happen; keep user payload small unless needed</span>      <span class="hljs-title function_">doSearch</span>(event)  &#125;  <span class="hljs-comment">// Allow ESC (27) to close search box</span>  <span class="hljs-keyword">if</span> (event.<span class="hljs-property">keyCode</span> == <span class="hljs-number">27</span>) &#123;    <span class="hljs-keyword">if</span> (searchVisible) &#123;      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;fastSearch&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">visibility</span> = <span class="hljs-string">&quot;hidden&quot;</span>;      <span class="hljs-variable language_">document</span>.<span class="hljs-property">activeElement</span>.<span class="hljs-title function_">blur</span>();      searchVisible = <span class="hljs-literal">false</span>;    &#125;  &#125;  <span class="hljs-comment">// DOWN (40) arrow</span>  <span class="hljs-keyword">if</span> (event.<span class="hljs-property">keyCode</span> == <span class="hljs-number">40</span>) &#123;    <span class="hljs-keyword">if</span> (searchVisible &amp;&amp; resultsAvailable) &#123;      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;down&quot;</span>);      event.<span class="hljs-title function_">preventDefault</span>(); <span class="hljs-comment">// stop window from scrolling</span>      <span class="hljs-keyword">if</span> ( <span class="hljs-variable language_">document</span>. <span class="hljs-title class_">ActiveElement</span> == maininput) &#123; first.<span class="hljs-property">Focus</span> (); &#125; <span class="hljs-comment">// if the currently focused element is the main input --&gt; focus the first &lt;li&gt;</span>      <span class="hljs-title class_">Else</span> <span class="hljs-keyword">if</span> ( <span class="hljs-variable language_">document</span>. <span class="hljs-title class_">ActiveElement</span> == last ) &#123; last.<span class="hljs-property">Focus</span> (); &#125; <span class="hljs-comment">// if we&#x27;re at the bottom, stay there</span>      <span class="hljs-title class_">Else</span> &#123; <span class="hljs-variable language_">document</span>.<span class="hljs-property">ActiveElement</span>.<span class="hljs-property">ParentElement</span>.<span class="hljs-property">NextSibling</span>.<span class="hljs-property">FirstElementChild</span>.<span class="hljs-property">Focus</span> (); &#125; <span class="hljs-comment">// otherwise select the next search result</span>    &#125;  &#125;  <span class="hljs-comment">// UP (38) arrow</span>  <span class="hljs-title class_">If</span> (event. <span class="hljs-title class_">KeyCode</span> == <span class="hljs-number">38</span>) &#123;    <span class="hljs-title class_">If</span> (searchVisible &amp;&amp; resultsAvailable) &#123;      <span class="hljs-title class_">Event</span>.<span class="hljs-property">PreventDefault</span> (); <span class="hljs-comment">// stop window from scrolling</span>      <span class="hljs-title class_">If</span> ( <span class="hljs-variable language_">document</span>. <span class="hljs-title class_">ActiveElement</span> == maininput) &#123; maininput.<span class="hljs-property">Focus</span> (); &#125; <span class="hljs-comment">// If we&#x27;re in the input box, do nothing</span>      <span class="hljs-title class_">Else</span> <span class="hljs-keyword">if</span> ( <span class="hljs-variable language_">document</span>. <span class="hljs-title class_">ActiveElement</span> == first) &#123; maininput.<span class="hljs-property">Focus</span> (); &#125; <span class="hljs-comment">// If we&#x27;re at the first item, go to input box</span>      <span class="hljs-title class_">Else</span> &#123; <span class="hljs-variable language_">document</span>.<span class="hljs-property">ActiveElement</span>.<span class="hljs-property">ParentElement</span>.<span class="hljs-property">PreviousSibling</span>.<span class="hljs-property">FirstElementChild</span>.<span class="hljs-property">Focus</span> (); &#125; <span class="hljs-comment">// Otherwise, select the search result above the current active one</span>    &#125;  &#125;&#125;);<span class="hljs-comment">// ==========================================</span><span class="hljs-comment">// execute search as each character is typed</span><span class="hljs-comment">//</span><span class="hljs-title class_">Document</span>.<span class="hljs-property">GetElementById</span> (<span class="hljs-string">&quot;searchInput&quot;</span>). <span class="hljs-title class_">Onkeyup</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;   <span class="hljs-title class_">ExecuteSearch</span> (<span class="hljs-variable language_">this</span>. <span class="hljs-title class_">Value</span>);&#125;<span class="hljs-title class_">Document</span>.<span class="hljs-property">QuerySelector</span> (<span class="hljs-string">&quot;body&quot;</span>). <span class="hljs-title class_">Onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;     <span class="hljs-keyword">if</span> (e.<span class="hljs-property">target</span>. <span class="hljs-title class_">TagName</span> === <span class="hljs-string">&#x27;BODY&#x27;</span> || e.<span class="hljs-property">target</span>. <span class="hljs-title class_">TagName</span> === <span class="hljs-string">&#x27;DIV&#x27;</span>) &#123;        <span class="hljs-title class_">HideSearch</span> ()    &#125;&#125;<span class="hljs-variable language_">document</span>.<span class="hljs-property">QuerySelector</span> (<span class="hljs-string">&quot; #search -btn&quot;</span>). <span class="hljs-title class_">Onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;     <span class="hljs-title class_">DoSearch</span> (e)&#125;  <span class="hljs-title class_">Function</span> doSearch (e) &#123;    e.<span class="hljs-property">stopPropagation</span> ();    <span class="hljs-title class_">If</span> (firstRun) &#123;        <span class="hljs-title class_">LoadSearch</span> () <span class="hljs-comment">// loads our json data and builds fuse. Js search index</span>        <span class="hljs-title class_">FirstRun</span> = <span class="hljs-literal">false</span> <span class="hljs-comment">// let&#x27;s never do this again</span>    &#125;    <span class="hljs-comment">// Toggle visibility of search box</span>    <span class="hljs-title class_">If</span> (! <span class="hljs-title class_">SearchVisible</span>) &#123;        <span class="hljs-title class_">ShowSearch</span> () <span class="hljs-comment">// search visible</span>    &#125;    <span class="hljs-title class_">Else</span> &#123;        <span class="hljs-title class_">HideSearch</span> ()    &#125;&#125;<span class="hljs-title class_">Function</span> hideSearch () &#123;    <span class="hljs-title class_">Document</span>.<span class="hljs-property">GetElementById</span> (<span class="hljs-string">&quot;fastSearch&quot;</span>). <span class="hljs-title class_">Style</span>. <span class="hljs-title class_">Visibility</span> = <span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-comment">// hide search box</span>    <span class="hljs-title class_">Document</span>.<span class="hljs-property">ActiveElement</span>.<span class="hljs-property">Blur</span> () <span class="hljs-comment">// remove focus from search box </span>    <span class="hljs-title class_">SearchVisible</span> = <span class="hljs-literal">false</span>&#125;<span class="hljs-title class_">Function</span> showSearch () &#123;    <span class="hljs-title class_">Document</span>.<span class="hljs-property">GetElementById</span> (<span class="hljs-string">&quot;fastSearch&quot;</span>). <span class="hljs-title class_">Style</span>. <span class="hljs-title class_">Visibility</span> = <span class="hljs-string">&quot;visible&quot;</span> <span class="hljs-comment">// show search box</span>    <span class="hljs-title class_">Document</span>.<span class="hljs-property">GetElementById</span> (<span class="hljs-string">&quot;searchInput&quot;</span>). <span class="hljs-title class_">Focus</span> () <span class="hljs-comment">// put focus in input box so you can just start typing</span>    <span class="hljs-title class_">SearchVisible</span> = <span class="hljs-literal">true</span>&#125;<span class="hljs-comment">// ==========================================</span><span class="hljs-comment">// fetch some json without jquery</span><span class="hljs-comment">//</span><span class="hljs-title class_">Function</span> fetchJSONFile (path, callback) &#123;  <span class="hljs-title class_">Var</span> httpRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span> ();  <span class="hljs-title class_">HttpRequest</span>. <span class="hljs-title class_">Onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;    <span class="hljs-title class_">If</span> (httpRequest. <span class="hljs-title class_">ReadyState</span> === <span class="hljs-number">4</span>) &#123;      <span class="hljs-title class_">If</span> (httpRequest. <span class="hljs-title class_">Status</span> === <span class="hljs-number">200</span>) &#123;        <span class="hljs-title class_">Var</span> data = <span class="hljs-title class_">JSON</span>.<span class="hljs-property">Parse</span> (httpRequest. <span class="hljs-title class_">ResponseText</span>);          <span class="hljs-title class_">If</span> (callback) callback (data);      &#125;    &#125;  &#125;;  <span class="hljs-title class_">HttpRequest</span>.<span class="hljs-property">Open</span> (<span class="hljs-string">&#x27;GET&#x27;</span>, path);  <span class="hljs-title class_">HttpRequest</span>.<span class="hljs-property">Send</span> (); &#125;<span class="hljs-comment">// ==========================================</span><span class="hljs-comment">// load our search index, only executed once</span><span class="hljs-comment">// on first call of search box (CMD-/)</span><span class="hljs-comment">//</span><span class="hljs-title class_">Function</span> loadSearch () &#123;   <span class="hljs-title class_">Console</span>.<span class="hljs-property">Log</span> (<span class="hljs-string">&#x27;loadSearch ()&#x27;</span>)  <span class="hljs-title class_">FetchJSONFile</span> (<span class="hljs-string">&#x27;/index. Json&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>)&#123;    <span class="hljs-title class_">Var</span> options = &#123; <span class="hljs-comment">// fuse. Js options; check fuse. Js website for details</span>      <span class="hljs-title class_">ShouldSort</span>: <span class="hljs-literal">true</span>,      <span class="hljs-title class_">Location</span>: <span class="hljs-number">0</span>,      <span class="hljs-title class_">Distance</span>: <span class="hljs-number">100</span>,      <span class="hljs-title class_">Threshold</span>: <span class="hljs-number">0.4</span>,      <span class="hljs-title class_">MinMatchCharLength</span>: <span class="hljs-number">2</span>,      <span class="hljs-title class_">Keys</span>: [        <span class="hljs-string">&#x27;permalink&#x27;</span>,        <span class="hljs-string">&#x27;title&#x27;</span>,        <span class="hljs-string">&#x27;tags&#x27;</span>,        <span class="hljs-string">&#x27;contents&#x27;</span>        ]    &#125;;    <span class="hljs-comment">// Create the Fuse index</span>    <span class="hljs-title class_">FuseIndex</span> = <span class="hljs-title class_">Fuse</span>.<span class="hljs-property">CreateIndex</span> (options. <span class="hljs-title class_">Keys</span>, data)    <span class="hljs-title class_">Fuse</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fuse</span> (data, options, fuseIndex); <span class="hljs-comment">// build the index from the json file</span>  &#125;);&#125;<span class="hljs-comment">// ==========================================</span><span class="hljs-comment">// using the index we loaded on CMD-/, run </span><span class="hljs-comment">// a search query (for &quot;term&quot;) every time a letter is typed</span><span class="hljs-comment">// in the search box</span><span class="hljs-comment">//</span><span class="hljs-title class_">Function</span> executeSearch (term) &#123;  <span class="hljs-title class_">Let</span> results = fuse.<span class="hljs-property">Search</span> (term); <span class="hljs-comment">// the actual query being run using fuse. Js</span>  <span class="hljs-title class_">Let</span> searchitems = <span class="hljs-string">&#x27;&#x27;</span>; <span class="hljs-comment">// our results bucket</span>  <span class="hljs-title class_">If</span> (results. <span class="hljs-title class_">Length</span> === <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// no results based on what was typed into the input box</span>    <span class="hljs-title class_">ResultsAvailable</span> = <span class="hljs-literal">false</span>;    <span class="hljs-title class_">Searchitems</span> = <span class="hljs-string">&#x27;&#x27;</span>;  &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// build our html</span>    <span class="hljs-comment">// console.Log (results)</span>    <span class="hljs-title class_">Permalinks</span> = [];    <span class="hljs-title class_">NumLimit</span> = <span class="hljs-number">5</span>;    <span class="hljs-title class_">For</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">in</span> results) &#123; <span class="hljs-comment">// only show first 5 results</span>        <span class="hljs-title class_">If</span> (item &gt; numLimit) &#123;            <span class="hljs-title class_">Break</span>;        &#125;        <span class="hljs-title class_">If</span> (permalinks.<span class="hljs-property">Includes</span> (results[item]. <span class="hljs-title class_">Item</span>. <span class="hljs-title class_">Permalink</span>)) &#123;            <span class="hljs-title class_">Continue</span>;        &#125;    <span class="hljs-comment">//   console.Log (&#x27;item: %d, title: %s&#x27;, item, results[item]. Item. Title)</span>      searchitems = searchitems + <span class="hljs-string">&#x27;&lt;li&gt;&lt;a href=&quot;&#x27;</span> + results[item].<span class="hljs-property">item</span>.<span class="hljs-property">permalink</span> + <span class="hljs-string">&#x27;&quot; tabindex=&quot;0&quot;&gt;&#x27;</span> + <span class="hljs-string">&#x27;&lt;span class=&quot;title&quot;&gt;&#x27;</span> + results[item]. <span class="hljs-title class_">Item</span>. <span class="hljs-title class_">Title</span> + <span class="hljs-string">&#x27;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>;      <span class="hljs-title class_">Permalinks</span>.<span class="hljs-property">Push</span> (results[item]. <span class="hljs-title class_">Item</span>. <span class="hljs-title class_">Permalink</span>);    &#125;    <span class="hljs-title class_">ResultsAvailable</span> = <span class="hljs-literal">true</span>;  &#125;  <span class="hljs-title class_">Document</span>. <span class="hljs-title class_">GetElementById</span> (<span class="hljs-string">&quot;searchResults&quot;</span>). <span class="hljs-title class_">InnerHTML</span> = searchitems;  <span class="hljs-title class_">If</span> (results. <span class="hljs-title class_">Length</span> &gt; <span class="hljs-number">0</span>) &#123;    <span class="hljs-title class_">First</span> = list. <span class="hljs-title class_">FirstChild</span>. <span class="hljs-title class_">FirstElementChild</span>; <span class="hljs-comment">// first result container — used for checking against keyboard up/down location</span>    <span class="hljs-title class_">Last</span> = list. <span class="hljs-title class_">LastChild</span>. <span class="hljs-title class_">FirstElementChild</span>; <span class="hljs-comment">// last result container — used for checking against keyboard up/down location</span>  &#125;&#125;</code></pre></div><ol start="4"><li>添加搜索框 HTML 代码到模板页面 footer</li></ol><p>这个可以通过添加到 baseof 或者 footer 模板。</p><p>比如我当前在使用的 <a href="https://github.com/ttys3/hugo-theme-terminal/tree/ttys3">terminal</a> 主题，它就内置了额外的 footer 支持，可以通过添加 <code>layouts/partials/extended_footer. Html</code> 方便地对 footer 增加内容。</p><p>如果主题没有额外的支持，你可以 copy 你当前主题目录下的 baseof. Html 模板到<code>layouts/_default/baseof. Html</code>，然后在最后附加内容。</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;search-btn&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: inline-block;&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(0);&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-search&quot;</span>&gt;</span>捜<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fastSearch&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;searchInput&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;searchResults&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/fuse.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <span class="hljs-comment">&lt;!-- download and copy over fuse.min.js file from fusejs.io --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/fastsearch.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><ol start="5"><li>添加 CSS 样式到模板页面 header 或模板主 CSS 文件</li></ol><p>这个可以通过添加到 header 模板或模板的主 CSS 文件。</p><p>比如我当前在使用的 <a href="https://github.com/ttys3/hugo-theme-terminal/tree/ttys3">terminal</a> 主题，它就内置了额外的 header 支持，可以通过添加 <code>layouts/partials/extended_header. Html</code> 方便地对 header 增加内容。</p><p>如果主题没有额外的支持，你可以修改模板的主 CSS 文件，通常是<code>style. Css</code> 或 <code>main. Css</code>，这个因情况而异。</p><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#fastSearch</span> &#123;  <span class="hljs-attribute">Visibility</span>: hidden;  <span class="hljs-attribute">Position</span>: absolute;  <span class="hljs-attribute">Right</span>: <span class="hljs-number">10</span> px;  <span class="hljs-attribute">Top</span>: <span class="hljs-number">10</span> px;  <span class="hljs-attribute">Display</span>: inline-block;  <span class="hljs-attribute">Width</span>: <span class="hljs-number">320</span> px;  <span class="hljs-attribute">Margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">10</span> px <span class="hljs-number">0</span> <span class="hljs-number">0</span>;  <span class="hljs-attribute">Padding</span>: <span class="hljs-number">0</span>;&#125;<span class="hljs-selector-id">#fastSearch</span> <span class="hljs-selector-tag">input</span> &#123;  <span class="hljs-attribute">Padding</span>: <span class="hljs-number">4</span> px;  <span class="hljs-attribute">Width</span>: <span class="hljs-number">100%</span>;  <span class="hljs-attribute">Height</span>: <span class="hljs-number">31</span> px;  <span class="hljs-attribute">Font-size</span>: <span class="hljs-number">1.6</span> em;  <span class="hljs-attribute">color</span>: <span class="hljs-number">#222129</span> ;  <span class="hljs-attribute">Font-weight</span>: bold;  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffa86a</span> ;  <span class="hljs-attribute">Border-radius</span>: <span class="hljs-number">3</span> px <span class="hljs-number">3</span> px <span class="hljs-number">0</span> px <span class="hljs-number">0</span> px;  <span class="hljs-attribute">Border</span>: none;  <span class="hljs-attribute">Outline</span>: none;  <span class="hljs-attribute">Text-align</span>: left;  <span class="hljs-attribute">Display</span>: inline-block;&#125;<span class="hljs-selector-id">#searchResults</span> <span class="hljs-selector-tag">li</span> &#123;  <span class="hljs-attribute">List-style</span>: none;  <span class="hljs-attribute">Margin-left</span>: <span class="hljs-number">0</span> em;  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#333</span> ;  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1</span> px dotted <span class="hljs-number">#000</span> ;&#125;<span class="hljs-selector-id">#searchResults</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-class">.title</span> &#123;  <span class="hljs-attribute">Font-size</span>: <span class="hljs-number">1.1</span> em;  <span class="hljs-attribute">Margin</span>: <span class="hljs-number">0</span>;  <span class="hljs-attribute">Display</span>: inline-block;&#125;<span class="hljs-selector-id">#searchResults</span> &#123;  <span class="hljs-attribute">Visibility</span>: inherit;  <span class="hljs-attribute">Display</span>: inline-block;  <span class="hljs-attribute">Width</span>: <span class="hljs-number">320</span> px;  <span class="hljs-attribute">Margin</span>: <span class="hljs-number">0</span>;  <span class="hljs-attribute">Max-height</span>: calc (<span class="hljs-number">100</span> vh - <span class="hljs-number">120</span> px);  <span class="hljs-attribute">Overflow</span>: hidden;&#125;<span class="hljs-selector-id">#searchResults</span> <span class="hljs-selector-tag">a</span> &#123;  <span class="hljs-attribute">Text-decoration</span>: none <span class="hljs-meta">!Important</span>;  <span class="hljs-attribute">Padding</span>: <span class="hljs-number">10</span> px;  <span class="hljs-attribute">Display</span>: inline-block;  <span class="hljs-attribute">Width</span>: <span class="hljs-number">100%</span>;&#125;<span class="hljs-selector-id">#searchResults</span> <span class="hljs-selector-tag">a</span>: hover, #searchResults a: focus &#123;  <span class="hljs-attribute">Outline</span>: <span class="hljs-number">0</span>;  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#666</span> ;  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span> ;&#125;<span class="hljs-selector-id">#search</span> -btn &#123;  <span class="hljs-attribute">Position</span>: absolute;  <span class="hljs-attribute">Top</span>: <span class="hljs-number">10</span> px;  <span class="hljs-attribute">Right</span>: <span class="hljs-number">20</span> px;  <span class="hljs-attribute">Font-size</span>: <span class="hljs-number">24</span> px;&#125;<span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">683</span> px) &#123;  <span class="hljs-selector-id">#fastSearch</span> , <span class="hljs-selector-id">#search</span> -btn &#123;    <span class="hljs-attribute">Top</span>: <span class="hljs-number">64</span> px;  &#125;&#125;</code></pre></div><p>如果样式跟你当前的主题不是很合，你可以自行稍作调整。</p>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hugo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hugo 代码拷贝插件</title>
    <link href="/posts/b73d9339.html"/>
    <url>/posts/b73d9339.html</url>
    
    <content type="html"><![CDATA[<p>博客是建好了，但是总是想添加一个代码一键复制的功能。一开始是想去 html 标签中直接添加一个 <code>button</code> ，但是发现好像并没有那么简单。查阅了 Hugo 的内置功能也没有发现，很幸运找到了一篇博客 <a href="https://huangzhongde.cn/">黄忠德的博客</a> ，正好解决了我的需求。所以也记录一下。</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>我们知道，代码片段是使用 markdown code fences 来编写的</p><div class="code-wrapper"><pre><code class="hljs arcade"><span class="hljs-string">``</span><span class="hljs-string">` jsx</span><span class="hljs-string">import React from &#x27;react&#x27;;</span><span class="hljs-string">`</span><span class="hljs-string">``</span></code></pre></div><p>以上代码在 Hugo 编译下的 Html 将展示成如下形式</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;highlight&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">pre</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:#f0f0f0;tab-size:4&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">code</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;language-jsx&quot;</span> <span class="hljs-attr">data-lang</span>=<span class="hljs-string">&quot;jsx&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:#007020;font-weight:bold&quot;</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> React from <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:#4070a0&quot;</span>&gt;</span>&#x27;react&#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>;  <span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre></div><p>我们要解决的问题是：</p><ol><li><strong>搜索所有突出显示的代码块，特别是所有具有类 <code>highlight</code> 的元素；</strong></li><li><strong>如何创建按钮放在代码框中；</strong></li><li><strong>给按钮添加一个事件，用于将代码块中的代码复制到剪贴板。</strong></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="检查复制支持"><a href="#检查复制支持" class="headerlink" title="检查复制支持"></a>检查复制支持</h4><p>进行复制之前，我们首先需要对浏览器是否可以使用 <code>document.execCommand(&#39;copy&#39;)</code> 这个功能，因为这段代码正是我们要使用的复制调用代码，我们需要一个命令来检查一下</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">queryCommandSupported</span>(<span class="hljs-string">&#x27;copy&#x27;</span>)) &#123;  <span class="hljs-keyword">return</span>;&#125;</code></pre></div><p>但是 <code>queryCommandSupported</code> 方法似乎已经弃用，所以其实是不用添加的。</p><p><img src="https://r2.leshans.eu.org/2023/07/e43e595864cc1c0b81bc1dd47ce78668.webp" alt="jzrj-20220129-20"></p><h4 id="选择突出显示的代码块"><a href="#选择突出显示的代码块" class="headerlink" title="选择突出显示的代码块"></a>选择突出显示的代码块</h4><p>上文提到，突出显示的代码块是包含在类 <code>highlight</code> 中的，我们可以使用内置的 DOM API 来检查所有的在 <code>highlight</code> 内容</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> highlightBlocks = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;highlight&#x27;</span>);</code></pre></div><h4 id="添加按钮"><a href="#添加按钮" class="headerlink" title="添加按钮"></a>添加按钮</h4><p>由于 Hugo 的自动编译使得我们无法直接在 html 中添加按钮，这也是我一开始的疑问之处。但是可以使用 js 创建一个特定的函数来实现这个功能。然后在 <code>for</code> 循环中调用这个函数</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">addCopyButton</span>(<span class="hljs-params">containerEl</span>) &#123;  <span class="hljs-keyword">var</span> copyBtn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;button&quot;</span>);  copyBtn.<span class="hljs-property">className</span> = <span class="hljs-string">&quot;highlight-copy-btn&quot;</span>;  copyBtn.<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;Copy&quot;</span>;  containerEl.<span class="hljs-title function_">appendChild</span>(copyBtn);&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; highlightBlocks.<span class="hljs-property">length</span>; i++) &#123;  <span class="hljs-title function_">addCopyButton</span>(highlightBlocks[i]);&#125;</code></pre></div><h4 id="复制响应"><a href="#复制响应" class="headerlink" title="复制响应"></a>复制响应</h4><p>点击按钮，使用 <code>document.execCommand()</code> 方法将代码复制到剪贴板，同时还要保持代码的格式。所以创建一个函数，用来选择给定的 html 中的所有文本</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">selectText</span>(<span class="hljs-params">node</span>) &#123;  <span class="hljs-keyword">var</span> selection = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">getSelection</span>();  <span class="hljs-keyword">var</span> range = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createRange</span>();  range.<span class="hljs-title function_">selectNodeContents</span>(node);  selection.<span class="hljs-title function_">removeAllRanges</span>();  selection.<span class="hljs-title function_">addRange</span>(range);  <span class="hljs-keyword">return</span> selection;&#125;</code></pre></div><p>因为代码节点是在 <code>&lt;pre&gt;</code> 所以使用 <code>.firstElementChild</code> 来获取节点，选择文本后添加到剪贴板，然后删除所有选择</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> codeEl = containerEl.<span class="hljs-property">firstElementChild</span>;copyBtn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">var</span> selection = <span class="hljs-title function_">selectText</span>(codeEl);  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">execCommand</span>(<span class="hljs-string">&#x27;copy&#x27;</span>);  selection.<span class="hljs-title function_">removeAllRanges</span>();&#125;);</code></pre></div><h4 id="添加样式"><a href="#添加样式" class="headerlink" title="添加样式"></a>添加样式</h4><p>这部分是比较简单的，直接放代码了，之后可以自己调试代码按钮样式</p><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.highlight</span> &#123;    <span class="hljs-attribute">position</span>: relative;&#125;<span class="hljs-selector-class">.highlight</span> pre &#123;    <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">75px</span>;&#125;<span class="hljs-selector-class">.highlight-copy-btn</span> &#123;    <span class="hljs-attribute">position</span>: absolute;    <span class="hljs-attribute">top</span>: <span class="hljs-number">7px</span>;    <span class="hljs-attribute">right</span>: <span class="hljs-number">7px</span>;    <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;    <span class="hljs-attribute">padding</span>: <span class="hljs-number">1px</span>;    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.7em</span>;    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.8</span>;    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#777</span>;    <span class="hljs-attribute">min-width</span>: <span class="hljs-number">55px</span>;    <span class="hljs-attribute">text-align</span>: center;&#125;<span class="hljs-selector-class">.highlight-copy-btn</span><span class="hljs-selector-pseudo">:hover</span> &#123;    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#666</span>;&#125;</code></pre></div><p>我们可以看到在代码框的右上方添加了一个灰色的按钮。</p><h4 id="已复制响应"><a href="#已复制响应" class="headerlink" title="已复制响应"></a>已复制响应</h4><p>所有功能其实都已经完成了，为了更好的用户体验，在点击按钮后需要有一个已复制的响应返回。</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">flashCopyMessage</span>(<span class="hljs-params">el, msg</span>) &#123;  el.<span class="hljs-property">textContent</span> = msg;  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;    el.<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;Copy&quot;</span>;  &#125;, <span class="hljs-number">1000</span>);&#125;<span class="hljs-keyword">try</span> &#123;  <span class="hljs-keyword">var</span> selection = <span class="hljs-title function_">selectText</span>(codeEl);  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">execCommand</span>(<span class="hljs-string">&#x27;copy&#x27;</span>);  selection.<span class="hljs-title function_">removeAllRanges</span>();  <span class="hljs-title function_">flashCopyMessage</span>(copyBtn, <span class="hljs-string">&#x27;Copied!&#x27;</span>)&#125; <span class="hljs-keyword">catch</span>(e) &#123;  <span class="hljs-variable language_">console</span> &amp;&amp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);  <span class="hljs-title function_">flashCopyMessage</span>(copyBtn, <span class="hljs-string">&#x27;Failed :\&#x27;(&#x27;</span>)&#125;</code></pre></div><h3 id="所有代码"><a href="#所有代码" class="headerlink" title="所有代码"></a>所有代码</h3><p><code>copy-to-clipboard.css</code> :</p><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.highlight</span> &#123;    <span class="hljs-attribute">position</span>: relative;&#125;<span class="hljs-selector-class">.highlight</span> pre &#123;    <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">75px</span>;&#125;<span class="hljs-selector-class">.highlight-copy-btn</span> &#123;    <span class="hljs-attribute">position</span>: absolute;    <span class="hljs-attribute">top</span>: <span class="hljs-number">7px</span>;    <span class="hljs-attribute">right</span>: <span class="hljs-number">7px</span>;    <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;    <span class="hljs-attribute">padding</span>: <span class="hljs-number">1px</span>;    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.7em</span>;    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.8</span>;    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#777</span>;    <span class="hljs-attribute">min-width</span>: <span class="hljs-number">55px</span>;    <span class="hljs-attribute">text-align</span>: center;&#125;<span class="hljs-selector-class">.highlight-copy-btn</span><span class="hljs-selector-pseudo">:hover</span> &#123;    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#666</span>;&#125;</code></pre></div><p><code>copy-to-clipboard.js</code> :</p><div class="code-wrapper"><pre><code class="hljs js">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-string">&#x27;use strict&#x27;</span>;  <span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">queryCommandSupported</span>(<span class="hljs-string">&#x27;copy&#x27;</span>)) &#123;    <span class="hljs-keyword">return</span>;  &#125;  <span class="hljs-keyword">function</span> <span class="hljs-title function_">flashCopyMessage</span>(<span class="hljs-params">el, msg</span>) &#123;    el.<span class="hljs-property">textContent</span> = msg;    <span class="hljs-title class_">SetTimeout</span> (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;      <span class="hljs-title class_">El</span>. <span class="hljs-title class_">TextContent</span> = <span class="hljs-string">&quot;Copy&quot;</span>;    &#125;, <span class="hljs-number">1000</span>);  &#125;  <span class="hljs-title class_">Function</span> selectText (node) &#123;    <span class="hljs-title class_">Var</span> selection = <span class="hljs-variable language_">window</span>.<span class="hljs-property">GetSelection</span> ();    <span class="hljs-title class_">Var</span> range = <span class="hljs-variable language_">document</span>.<span class="hljs-property">CreateRange</span> ();    <span class="hljs-title class_">Range</span>.<span class="hljs-property">SelectNodeContents</span> (node);    <span class="hljs-title class_">Selection</span>.<span class="hljs-property">RemoveAllRanges</span> ();    <span class="hljs-title class_">Selection</span>.<span class="hljs-property">AddRange</span> (range);    <span class="hljs-title class_">Return</span> selection;  &#125;  <span class="hljs-title class_">Function</span> addCopyButton (containerEl) &#123;    <span class="hljs-title class_">Var</span> copyBtn = <span class="hljs-variable language_">document</span>.<span class="hljs-property">CreateElement</span> (<span class="hljs-string">&quot;button&quot;</span>);    <span class="hljs-title class_">CopyBtn</span>. <span class="hljs-title class_">ClassName</span> = <span class="hljs-string">&quot;highlight-copy-btn&quot;</span>;    <span class="hljs-title class_">CopyBtn</span>. <span class="hljs-title class_">TextContent</span> = <span class="hljs-string">&quot;Copy&quot;</span>;    <span class="hljs-title class_">Var</span> codeEl = containerEl. <span class="hljs-title class_">FirstElementChild</span>;    <span class="hljs-title class_">CopyBtn</span>.<span class="hljs-property">AddEventListener</span> (<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;      <span class="hljs-title class_">Try</span> &#123;        <span class="hljs-title class_">Var</span> selection = selectText (codeEl);        <span class="hljs-title class_">Document</span>.<span class="hljs-property">ExecCommand</span> (<span class="hljs-string">&#x27;copy&#x27;</span>);        <span class="hljs-title class_">Selection</span>.<span class="hljs-property">RemoveAllRanges</span> ();        <span class="hljs-title class_">FlashCopyMessage</span> (copyBtn, <span class="hljs-string">&#x27;Copied!&#x27;</span>)      &#125; <span class="hljs-keyword">catch</span> (e) &#123;        <span class="hljs-title class_">Console</span> &amp;&amp; <span class="hljs-variable language_">console</span>.<span class="hljs-property">Log</span> (e);        <span class="hljs-title class_">FlashCopyMessage</span> (copyBtn, <span class="hljs-string">&#x27;Failed :\&#x27; (&#x27;</span>)      &#125;    &#125;);    <span class="hljs-title class_">ContainerEl</span>.<span class="hljs-property">AppendChild</span> (copyBtn);  &#125;  <span class="hljs-comment">// Add copy button to code blocks</span>  <span class="hljs-title class_">Var</span> highlightBlocks = <span class="hljs-variable language_">document</span>.<span class="hljs-property">GetElementsByClassName</span> (<span class="hljs-string">&#x27;highlight&#x27;</span>);  <span class="hljs-title class_">Array</span>.<span class="hljs-property">Prototype</span>.<span class="hljs-property">ForEach</span>.<span class="hljs-property">Call</span> (highlightBlocks, addCopyButton);&#125;)();</code></pre></div><p>将这两个文件分别放在 <code>assets/css</code> 和 <code>assets/js</code> 下，然后在配置文件 <code>config. Toml</code> 中修改自定义 css 和 js，或者手动添加到 <code>head. Html</code> 头文件中。</p><div class="code-wrapper"><pre><code class="hljs toml"><span class="hljs-attr">Custom_css</span> = [<span class="hljs-string">&quot;css/copy-to-clipboard. Css&quot;</span>]<span class="hljs-attr">Custom_js</span> = [<span class="hljs-string">&quot;js/copy-to-clipboard. Js&quot;</span>]</code></pre></div><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://huangzhongde.cn/post/2020-02-21-hugo-code-copy-to-clipboard/">https://huangzhongde.cn/post/2020-02-21-hugo-code-copy-to-clipboard/</a></li><li><a href="https://www.tomspencer.dev/blog/2018/09/14/adding-click-to-copy-buttons-to-a-hugo-powered-blog/">https://www.tomspencer.dev/blog/2018/09/14/adding-click-to-copy-buttons-to-a-hugo-powered-blog/</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hugo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hugo子模块错误提示解决办法</title>
    <link href="/posts/d20c72a3.html"/>
    <url>/posts/d20c72a3.html</url>
    
    <content type="html"><![CDATA[<p>错误信息 “No url found for submodule path ‘themes&#x2F;jane’ in .gitmodules” </p><p>表明在你的 Git 项目中的 .gitmodules 文件中找不到 “themes&#x2F;jane” 子模块的 URL。</p><p>.gitmodules 文件是一个包含子模块配置信息的文件，它用于跟踪和管理项目中使用的子模块。子模块允许你在一个 Git 项目中嵌套另一个 Git 项目，并将其作为你项目的一部分来管理。</p><p>出现这个错误可能有几种原因：</p><ol><li><p>缺少 .gitmodules 文件：首先，确保你的项目根目录下有一个名为 .gitmodules 的文件。如果没有该文件，你需要创建一个新的 .gitmodules 文件并添加相应的子模块配置。</p></li><li><p>Themes&#x2F;jane 子模块不存在：如果 themes&#x2F;jane 子模块确实存在，但它没有被正确地添加为项目的子模块，则需要检查是否正确地添加了子模块。</p></li></ol><p>解决方法：</p><ol><li><p>确保 .gitmodules 文件存在：在项目根目录下，使用文本编辑器创建一个新的 .gitmodules 文件，或确保已存在的 .gitmodules 文件没有被移除或重命名。</p></li><li><p>添加子模块的 URL：在 .gitmodules 文件中添加 themes&#x2F;jane 子模块的 URL。例如：</p></li></ol><div class="code-wrapper"><pre><code class="hljs bash">[submodule <span class="hljs-string">&quot;themes/jane&quot;</span>]    path = themes/jane    url = https://github.com/xianmin/hugo-theme-jane.git</code></pre></div><p>请将上述 URL 替换为 themes&#x2F;jane 子模块的实际 Git 仓库 URL。</p><ol start="3"><li>初始化子模块：运行以下命令来初始化和更新子模块：</li></ol><div class="code-wrapper"><pre><code class="hljs bash">git submodule initgit submodule update</code></pre></div><p>这将会初始化并获取你在 .gitmodules 文件中配置的子模块。</p><ol start="4"><li>提交更改：一旦子模块配置正常并成功初始化，确保将 .gitmodules 文件和项目的其他更改提交到 Git 仓库：</li></ol><div class="code-wrapper"><pre><code class="hljs bash">git add .git commit -m <span class="hljs-string">&quot;Added themes/jane submodule&quot;</span>git push</code></pre></div><p>以上步骤应该能帮助你解决 “No url found for submodule path ‘themes&#x2F;jane’ in .gitmodules” 错误。如果你还有其他问题或需要进一步的帮助，请随时向我询问。</p>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hugo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网站远程自动备份方法分享</title>
    <link href="/posts/27635afb.html"/>
    <url>/posts/27635afb.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>将 vps 中 home&#x2F;web 目录打包并传到指定 VPS 的 home 目录</p></blockquote><h2 id="手动备份迁移"><a href="#手动备份迁移" class="headerlink" title="手动备份迁移"></a><strong>手动备份迁移</strong></h2><h3 id="按时间戳打包"><a href="#按时间戳打包" class="headerlink" title="按时间戳打包"></a><strong>按时间戳打包</strong></h3><div class="code-wrapper"><pre><code class="hljs dos"><span class="hljs-built_in">cd</span> /home/ &amp;&amp; tar czvf web_$(<span class="hljs-built_in">date</span> +&quot;<span class="hljs-variable">%Y%</span>m<span class="hljs-variable">%d%</span>H<span class="hljs-variable">%M%</span>S&quot;).tar.gz web</code></pre></div><h3 id="传输最新的tar压缩包到其他VPS"><a href="#传输最新的tar压缩包到其他VPS" class="headerlink" title="传输最新的tar压缩包到其他VPS"></a><strong>传输最新的tar压缩包到其他VPS</strong></h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/ &amp;&amp; <span class="hljs-built_in">ls</span> -t /home/*.tar.gz | <span class="hljs-built_in">head</span> -1 | xargs -I &#123;&#125; scp &#123;&#125; root@0.0.0.0:/home/</code></pre></div><h3 id="只保留3个压缩包"><a href="#只保留3个压缩包" class="headerlink" title="只保留3个压缩包"></a><strong>只保留3个压缩包</strong></h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/ &amp;&amp; <span class="hljs-built_in">ls</span> -t /home/*.tar.gz | <span class="hljs-built_in">tail</span> -n +4 | xargs -I &#123;&#125; <span class="hljs-built_in">rm</span> &#123;&#125;</code></pre></div><h2 id="远端机器解压最新tar文件"><a href="#远端机器解压最新tar文件" class="headerlink" title="远端机器解压最新tar文件"></a><strong>远端机器解压最新tar文件</strong></h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/ &amp;&amp; <span class="hljs-built_in">ls</span> -t /home/*.tar.gz | <span class="hljs-built_in">head</span> -1 | xargs -I &#123;&#125; tar -xzf &#123;&#125;</code></pre></div><h3 id="自动备份迁移"><a href="#自动备份迁移" class="headerlink" title="自动备份迁移"></a><strong>自动备份迁移</strong></h3><p><strong>下载sh脚本</strong></p><div class="code-wrapper"><pre><code class="hljs sas">apt <span class="hljs-keyword">update</span> -y <span class="hljs-variable">&amp;&amp;</span> apt install -y wget sudo sshpass</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home</code></pre></div><div class="code-wrapper"><pre><code class="hljs vim">wget beifen.<span class="hljs-keyword">sh</span> https://raw.githubusercontent.<span class="hljs-keyword">com</span>/kejilion/<span class="hljs-keyword">sh</span>/main/beifen.<span class="hljs-keyword">sh</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x beifen.sh</code></pre></div><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">nano</span> beifen.sh</code></pre></div><p><strong>运行sh脚本</strong></p><div class="code-wrapper"><pre><code class="hljs bash">./beifen.sh</code></pre></div><p><strong>定时任务</strong></p><div class="code-wrapper"><pre><code class="hljs 1c">(crontab -l ; echo <span class="hljs-string">&quot;0 2 * * 1 /home/beifen.sh&quot;</span>) <span class="hljs-string">| crontab -</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>备份</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 项目整理 （持续更新中）</title>
    <link href="/posts/a0d1ae31.html"/>
    <url>/posts/a0d1ae31.html</url>
    
    <content type="html"><![CDATA[<h2 id="Nginx-Proxy-Manager-反向代理神器"><a href="#Nginx-Proxy-Manager-反向代理神器" class="headerlink" title="Nginx Proxy Manager 反向代理神器"></a>Nginx Proxy Manager 反向代理神器</h2><p>1.<strong>更新环境</strong><br><br></p><div class="code-wrapper"><pre><code class="hljs bash">apt update -y &amp;&amp; apt install -y curl socat wget sudo</code></pre></div>  <br><p>2.<strong>安装 Docker</strong></p><div class="code-wrapper"><pre><code class="hljs bash">curl -fsSL https://get.docker.com | shcurl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/latest/download/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose<span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose</code></pre></div><br><p>3.<strong>安装 Nginx Proxy Manager</strong></p><div class="code-wrapper"><pre><code class="hljs bash">docker run -d \  --name=npm \  -p 80:80 \  -p 81:81 \  -p 443:443 \  -v /home/npm/data:/data \  -v /home/npm/letsencrypt:/etc/letsencrypt \  --restart=always \  jc21/nginx-proxy-manager:latest</code></pre></div><br><p>4.<strong>进入 NGINX 面板</strong></p><ol><li><p>服务器 IP 加 81 端口访问网页</p></li><li><p>登录:</p><p><code>admin@example.com</code></p></li><li><p>密码:<br> <code>  changeme</code></p></li></ol><hr><h2 id="Portainer-ce-中文版"><a href="#Portainer-ce-中文版" class="headerlink" title="Portainer-ce 中文版"></a>Portainer-ce 中文版</h2><div class="code-wrapper"><pre><code class="hljs bash">docker run -d --restart=always --name=<span class="hljs-string">&quot;portainer&quot;</span> -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data 6053537/portainer-ce</code></pre></div><hr><h2 id="Uptime-Kuma-在线监控平台"><a href="#Uptime-Kuma-在线监控平台" class="headerlink" title="Uptime Kuma 在线监控平台"></a>Uptime Kuma 在线监控平台</h2><p>可以将各类资源挂载到这个网页监控工具上。方便全局掌控网站或者 IP 的 VPS 心跳延迟情况。建康情况全局掌控！</p><div class="code-wrapper"><pre><code class="hljs bash">docker run -d --restart=always -p 3001:3001 -v uptime-kuma:/app/data --name uptime-kuma louislam/uptime-kuma:1</code></pre></div><p>或者:</p><div class="code-wrapper"><pre><code class="hljs shell">docker run -d \  --name=uptime-kuma \  -p 3001:3001 \  -v /home/uptime/uptime-kuma-data:/app/data \  --restart=always \  louislam/uptime-kuma:latest</code></pre></div><p><img src="https://r2.leshans.eu.org/2023/07/24abb9dc8846bfc11a4d879528a4dfc9.webp"></p><p><img src="https://r2.leshans.eu.org/2023/07/9f6b5256cba670cde842c50fe9c06a61.webp"></p>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rclone开机自动挂载</title>
    <link href="/posts/4687391.html"/>
    <url>/posts/4687391.html</url>
    
    <content type="html"><![CDATA[<br><h1 id="假设"><a href="#假设" class="headerlink" title="假设:"></a>假设:</h1><ol><li>你已经挂载好了GoogleDrive</li><li>不能使用systemctl的请先在root下安装</li><li><code>apt install systemd-sysv &amp;&amp; reboot</code></li><li>使用<code>df -h</code>命令查看是否成功</li></ol><p>假设 name: <code>gd</code> 挂载目录是 <code>/home/google</code> 运行以下命令:</p><div class="code-wrapper"><pre><code class="hljs bash">注意修改为你的挂载名字(name),以及挂载目录,使用<span class="hljs-built_in">df</span> -h命令查看</code></pre></div><p>复制以下命令：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">command</span>=<span class="hljs-string">&quot; mount gd:/ /home/google  --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000&quot;</span></code></pre></div><p>继续:</p><div class="code-wrapper"><pre><code class="hljs bash">以下是一整条命令，一起复制到SSH客户端运行</code></pre></div><div class="code-wrapper"><pre><code class="hljs shell">cat &gt; /etc/systemd/system/rclone.service &lt;&lt;EOF[Unit]Description=RcloneAfter=network-online.target[Service]Type=simpleExecStart=$(command -v rclone) $&#123;command&#125;Restart=on-abortUser=root[Install]WantedBy=default.targetEOF</code></pre></div><p>  现在就可以使用<code>systemctl</code>来挂载GoogleDrive了</p><div class="code-wrapper"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> rclone  <span class="hljs-comment">#开机自启</span></code></pre></div><p>命令:</p><div class="code-wrapper"><pre><code class="hljs bash">systemctl start rclone   <span class="hljs-comment">#启动</span>systemctl restart  rclone   <span class="hljs-comment">#重启</span>systemctl status rclone   <span class="hljs-comment">#状态</span></code></pre></div><p>完结~</p>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rclone</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Debian10升级到5.X-cloud内核，并安装BBR</title>
    <link href="/posts/e1f97416.html"/>
    <url>/posts/e1f97416.html</url>
    
    <content type="html"><![CDATA[   <br><h1 id="1-谷歌云一键重装系统-Debian-10"><a href="#1-谷歌云一键重装系统-Debian-10" class="headerlink" title="1. 谷歌云一键重装系统 Debian 10"></a>1. 谷歌云一键重装系统 Debian 10</h1><p><strong>10.146.0.5</strong> 为内网 IP （需替换）<br> <strong>0.146.0.1</strong> 为网关</p><div class="code-wrapper"><pre><code class="hljs shell">bash &lt;(wget --no-check-certificate -qO- &#x27;https://raw.githubusercontent.com/MoeClub/Note/master/InstallNET.sh&#x27;) --ip-addr 10.146.0.5 --ip-gate 10.146.0.1 --ip-mask 255.255.255.0 -d 10 -v 64 -p 123456 -port 22</code></pre></div><h2 id="更新组件"><a href="#更新组件" class="headerlink" title="更新组件"></a><strong>更新组件</strong></h2><div class="code-wrapper"><pre><code class="hljs shell">apt update -y &amp;&amp; apt install -y curl &amp;&amp; apt install -y socat &amp;&amp; apt install wget -y</code></pre></div><div class="code-wrapper"><pre><code class="hljs shell">suapt-get updateapt-get install sudo</code></pre></div><hr><h2 id="2-更换为-Cloud-内核"><a href="#2-更换为-Cloud-内核" class="headerlink" title="2. 更换为 Cloud 内核"></a>2. 更换为 Cloud 内核</h2><p><strong>听说 5. X 内核对 BBR 有神秘加成</strong>，手中正好有闲置小鸡，就来试试</p><p>Cloud 内核是什么呢？包页面对 linux-image-cloud-amd 64 的说明是：This package depends on the latest Linux kernel and modules for use on cloud platforms including Amazon EC 2, Microsoft Azure, and Google Compute Engine. 即专门为云平台而优化的，剔除了蓝牙、声音这些无用模块的同时添加了几乎只有云平台会用到的驱动程序，支持 KVM 虚拟化</p><hr><p><strong>一键安装：</strong></p><div class="code-wrapper"><pre><code class="hljs shell">echo &quot;deb http://deb.debian.org/debian buster-backports main&quot; &gt; /etc/apt/sources.list.d/buster-backports.list apt updateapt -t buster-backports install linux-image-cloud-amd64 -y</code></pre></div><hr><p><strong>删除老内核：</strong></p><div class="code-wrapper"><pre><code class="hljs shell">dpkg --get-selections | grep linuxapt autoremove --purge linux-image-4.19.0-20-amd64 linux-image-4.19.0-21-amd64 -yapt autoremoveapt autoclean</code></pre></div><hr><p><strong>更新一下 grub：</strong></p><div class="code-wrapper"><pre><code class="hljs shell">sudo update-grub</code></pre></div><hr><p><strong>重启：</strong><br><code>reboot</code></p><hr><p><strong>重启后一键开启 BBR：</strong></p><div class="code-wrapper"><pre><code class="hljs shell">echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf &amp;&amp; echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf &amp;&amp; sysctl -p</code></pre></div><hr><p><strong>检查 BBR 是否启动</strong></p><div class="code-wrapper"><pre><code class="hljs shell">lsmod | grep bbr</code></pre></div><hr><p><strong>查看系统现有内核</strong></p><div class="code-wrapper"><pre><code class="hljs shell">dpkg  -l|grep linux-image</code></pre></div><hr><p><strong>验证是否成功</strong></p><div class="code-wrapper"><pre><code class="hljs shell">uname  -r</code></pre></div><hr><p><strong>如果 Debian 9 安装 Cloud 内核的话：</strong></p><div class="code-wrapper"><pre><code class="hljs shell">echo &quot;deb http://deb.debian.org/debian stretch-backports main&quot; &gt; /etc/apt/sources.list.d/stretch-backports.list apt updateapt -t stretch-backports install linux-image-cloud-amd64 -y</code></pre></div><p>完结撒花</p>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>修改SSH端口方法</title>
    <link href="/posts/2b7425cc.html"/>
    <url>/posts/2b7425cc.html</url>
    
    <content type="html"><![CDATA[<h3 id="编辑-sshd-config"><a href="#编辑-sshd-config" class="headerlink" title="编辑 sshd_config"></a>编辑 sshd_config</h3><div class="code-wrapper"><pre><code class="hljs awk">nano <span class="hljs-regexp">/etc/</span>ssh/sshd_config</code></pre></div><p>例如：添加 33 端口，注释掉 22 端口</p><p>Port 33</p><h3 id="退出保存"><a href="#退出保存" class="headerlink" title="退出保存"></a>退出保存</h3><ul><li><code>crl+x</code> 退出</li><li><code>y</code> 确定保存</li><li>回车&#x2F; 重启 reboot</li></ul><h3 id="查看变更状态"><a href="#查看变更状态" class="headerlink" title="查看变更状态"></a>查看变更状态</h3><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl status sshd</span></code></pre></div><blockquote><p>新端口使用后，发现注释后依然可以连接！<strong>直接删掉 port 22</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谷歌云第三方SSH工具登录与一键重装系统</title>
    <link href="/posts/601800da.html"/>
    <url>/posts/601800da.html</url>
    
    <content type="html"><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="一，设置-root-密码"><a href="#一，设置-root-密码" class="headerlink" title="一，设置 root 密码"></a>一，设置 root 密码</h3><ol><li>先选择从浏览器打开 ssh 连接服务器</li><li>切换到 root 账号，输入代码：<code>sudo -i</code></li><li>设置 root 密码，输入代码：<code>passwd</code></li></ol><h3 id="二，开启-SSH-权限"><a href="#二，开启-SSH-权限" class="headerlink" title="二，开启 SSH 权限"></a>二，开启 SSH 权限</h3><ol><li>CentOS 和 Debian 通用，输入以下命令</li></ol><div class="code-wrapper"><pre><code class="hljs shell">sed -i &#x27;s/PermitRootLogin no/PermitRootLogin yes/g&#x27; /etc/ssh/sshd_config &amp;&amp; sed -i &#x27;s/PasswordAuthentication no/PasswordAuthentication yes/g&#x27; /etc/ssh/sshd_config</code></pre></div><ol start="2"><li>Ubuntu 系统，输入以下命令</li></ol><div class="code-wrapper"><pre><code class="hljs shell">sed -i &#x27;s/ #PermitRootLogin prohibit-password/PermitRootLogin yes/g&#x27; /etc/ssh/sshd_config &amp;&amp; sed -i &#x27;s/PasswordAuthentication no/PasswordAuthentication yes/g&#x27; /etc/ssh/sshd_config</code></pre></div><ol start="3"><li>重启服务器 ：<div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">reboot</span></code></pre></div></li></ol><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>切换到root角色 (和前面步骤一样)</p><div class="code-wrapper"><pre><code class="hljs css">sudo -<span class="hljs-selector-tag">i</span></code></pre></div><p>修改SSH配置文件&#x2F;etc&#x2F;ssh&#x2F;sshd_config</p><div class="code-wrapper"><pre><code class="hljs bash">vi /etc/ssh/sshd_config</code></pre></div><p>修改<code>PermitRootLogin</code>和<code>PasswordAuthentication</code>为yes</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># Authentication:</span>PermitRootLogin <span class="hljs-built_in">yes</span> //默认为no，需要开启root用户访问改为<span class="hljs-built_in">yes</span><span class="hljs-comment"># Change to no to disable tunnelled clear text passwords</span>PasswordAuthentication <span class="hljs-built_in">yes</span> //默认为no，改为<span class="hljs-built_in">yes</span>开启密码登陆</code></pre></div><p>给root用户设置密码</p><div class="code-wrapper"><pre><code class="hljs bash">passwd root</code></pre></div><p>重启SSH服务使修改生效</p><div class="code-wrapper"><pre><code class="hljs bash">/etc/init.d/ssh restart</code></pre></div><p>以上就是谷歌云设置 ROOT 用户以及允许第三方 SSH 登录教程。</p><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><h3 id="本地用xshell生成密秘钥"><a href="#本地用xshell生成密秘钥" class="headerlink" title="本地用xshell生成密秘钥"></a>本地用xshell生成密秘钥</h3><blockquote><p>这里有个坑: 第6步的时候要点击下一步</p></blockquote><p><code>图片点击放大</code></p><p><img src="https://r2.leshans.eu.org/2023/08/160804d3432b43554880dd29cffe9a31.webp" alt="Pasted image 20230825114252"></p><h3 id="将秘钥配置到谷歌云上"><a href="#将秘钥配置到谷歌云上" class="headerlink" title="将秘钥配置到谷歌云上"></a>将秘钥配置到谷歌云上</h3><p>菜单 — 计算引擎 — 元数据 — SSH秘钥 — 修改 — 添加一项</p><p><img src="https://r2.leshans.eu.org/2023/08/83b24fcf2ba71916738c52843b2d3410.webp" alt="Pasted image 20230825114415"></p><p>粘贴刚才从xshell复制的秘钥。在末尾添加 [空格][用户名] 这里就是“ google”，保存即可。</p><p><img src="https://r2.leshans.eu.org/2023/08/de577b6b607abe340d70b2711677af58.webp"></p><h3 id="用xshell连接"><a href="#用xshell连接" class="headerlink" title="用xshell连接"></a>用xshell连接</h3><p><img src="https://r2.leshans.eu.org/2023/08/40d47d727d5dfe455bc2d2b7773a09ad.webp" alt="Pasted image 20230825114454"></p><p>连上之后，输入命令 <code>sudo -i</code>切换到root用户.</p><h2 id="三，一键重装脚本"><a href="#三，一键重装脚本" class="headerlink" title="三，一键重装脚本"></a>三，一键重装脚本</h2><p><strong>系统更新</strong></p><div class="code-wrapper"><pre><code class="hljs shell">apt update -y &amp;&amp; apt install -y wget sudo</code></pre></div><p>防止报错: <code>Error! grub.cfg</code></p><div class="code-wrapper"><pre><code class="hljs shell">mkdir /boot/grub2 &amp;&amp; grub-mkconfig -o /boot/grub2/grub.cfg</code></pre></div><p><strong>一键脚本</strong> （ubuntu 20.04）时间半个小时吧，耐心等待就行</p><div class="code-wrapper"><pre><code class="hljs shell">bash &lt;(wget --no-check-certificate -qO- &#x27;https://raw.githubusercontent.com/MoeClub/Note/master/InstallNET.sh&#x27;) --ip-addr 10.146.0.3 --ip-gate 10.146.0.1 --ip-mask 255.255.255.0 -u 20.04 -v 64 -p 123456 -port 22</code></pre></div><p>debian10</p><div class="code-wrapper"><pre><code class="hljs bash">bash &lt;(wget --no-check-certificate -qO- <span class="hljs-string">&#x27;https://raw.githubusercontent.com/MoeClub/Note/master/InstallNET.sh&#x27;</span>) --ip-addr 10.148.0.5 --ip-gate 10.148.0.1--ip-mask 255.255.255.0 -d 10 -v 64 -p 123456 -port 22</code></pre></div><blockquote><p><strong>仅适用于谷歌云 (密码：123456 ) SSH 端口: 22</strong></p></blockquote><blockquote><p>参数修改</p></blockquote><ul><li><strong>10.146.0.3</strong> 谷歌云 VPS 内网 IP 谷歌云后台去找</li><li><strong>10.146.0.1</strong> 谷歌云 VPS 内网 IP 的网关前三位数和 IP 相同第四位数为 1</li></ul><blockquote><p>系统参数</p></blockquote><p><strong>-d 10</strong> 【7、8、9、10，11】Debian</p><p><strong>-u 20.04</strong> 【14.04、16.04、18.04、20.04】Ubuntu</p><h2 id="四，系统更新"><a href="#四，系统更新" class="headerlink" title="四，系统更新"></a>四，<strong>系统更新</strong></h2><div class="code-wrapper"><pre><code class="hljs bash">apt update -y &amp;&amp; apt full-upgrade -y &amp;&amp; apt install -y curl wget sudo socat</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>谷歌云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>宝塔面板7.7破解版安装教程</title>
    <link href="/posts/17e29477.html"/>
    <url>/posts/17e29477.html</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.leshans.eu.org/p/bt/">https://blog.leshans.eu.org/p/bt/</a></p><p>完结撒花🤡</p><p>fuck bt 🤡🤡🤡</p><p>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>宝塔</tag>
      
      <tag>破解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>整理一些常用的脚本（持续更新中）</title>
    <link href="/posts/a96d110f.html"/>
    <url>/posts/a96d110f.html</url>
    
    <content type="html"><![CDATA[<h2 id="测试CPU性能脚本"><a href="#测试CPU性能脚本" class="headerlink" title="测试CPU性能脚本"></a>测试CPU性能脚本</h2><div class="code-wrapper"><pre><code class="hljs bash">apt update -y &amp;&amp; apt install -y curl wget sudo</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">curl -sL yabs.sh | bash -s -- -i -5</code></pre></div><h2 id="VPS-检测-二选一"><a href="#VPS-检测-二选一" class="headerlink" title="VPS 检测 (二选一)"></a>VPS 检测 (二选一)</h2><div class="code-wrapper"><pre><code class="hljs bash">wget -q https://github.com/Aniverse/A/raw/i/a &amp;&amp; bash a</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">wget -qO- bench.sh | bash</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">wget -qO- git.io/superbench.sh | bash</code></pre></div><h2 id="磁盘真实性能读写测试"><a href="#磁盘真实性能读写测试" class="headerlink" title="磁盘真实性能读写测试"></a>磁盘真实性能读写测试</h2><p><code>一般数据在 大于20MB/s 为合格，大于40MB/s 为普通，大于80MB/s 为优秀。</code></p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span> bs=64k count=4k <span class="hljs-keyword">if</span>=/dev/zero of=<span class="hljs-built_in">test</span> oflag=dsync</code></pre></div><h2 id="三网测速脚本"><a href="#三网测速脚本" class="headerlink" title="三网测速脚本"></a>三网测速脚本</h2><div class="code-wrapper"><pre><code class="hljs shell">bash &lt;(curl -Lso- https://git.io/superspeed_uxh)</code></pre></div><h2 id="三网回程测试脚本-二选一"><a href="#三网回程测试脚本-二选一" class="headerlink" title="三网回程测试脚本(二选一)"></a>三网回程测试脚本(二选一)</h2><div class="code-wrapper"><pre><code class="hljs shell">curl https://raw.githubusercontent.com/zhucaidan/mtr_trace/main/mtr_trace.sh|bash</code></pre></div><div class="code-wrapper"><pre><code class="hljs shell">curl https://raw.githubusercontent.com/zhanghanyun/backtrace/main/install.sh -sSf | sh</code></pre></div><h2 id="三网回程延迟测试脚本"><a href="#三网回程延迟测试脚本" class="headerlink" title="三网回程延迟测试脚本"></a>三网回程延迟测试脚本</h2><div class="code-wrapper"><pre><code class="hljs bash">wget -qO- git.io/besttrace | bash</code></pre></div><h2 id="解锁状态查看"><a href="#解锁状态查看" class="headerlink" title="解锁状态查看"></a>解锁状态查看</h2><div class="code-wrapper"><pre><code class="hljs bash">bash &lt;(curl -Ls https://cdn.jsdelivr.net/gh/missuo/OpenAI-Checker/openai.sh)</code></pre></div><h2 id="流媒体解锁测试脚本"><a href="#流媒体解锁测试脚本" class="headerlink" title="流媒体解锁测试脚本"></a>流媒体解锁测试脚本</h2><div class="code-wrapper"><pre><code class="hljs bash">bash &lt;(curl -L -s check.unlock.media)</code></pre></div><h2 id="解锁tiktok状态"><a href="#解锁tiktok状态" class="headerlink" title="解锁tiktok状态"></a>解锁tiktok状态</h2><div class="code-wrapper"><pre><code class="hljs bash">wget -qO- https://github.com/yeahwu/check/raw/main/check.sh | bash</code></pre></div><hr><h2 id="一键开启-BBR-脚本"><a href="#一键开启-BBR-脚本" class="headerlink" title="一键开启 BBR 脚本"></a>一键开启 BBR 脚本</h2><p><code> (4.9 以上内核)</code></p><div class="code-wrapper"><pre><code class="hljs shell">echo &quot;net.core.default_qdisc=fq&quot;  &gt;&gt;  /etc/sysctl.confecho &quot;net.ipv4.tcp_congestion_control=bbr&quot;  &gt;&gt;  /etc/sysctl.confsysctl -plsmod | grep bbr</code></pre></div><p><strong>或者</strong></p><div class="code-wrapper"><pre><code class="hljs shell">wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</code></pre></div><h3 id="检查-BBR-是否启动"><a href="#检查-BBR-是否启动" class="headerlink" title="检查 BBR 是否启动"></a>检查 BBR 是否启动</h3><div class="code-wrapper"><pre><code class="hljs bash">lsmod | grep bbr</code></pre></div><h3 id="综合工具箱（强烈推荐，集成了很多脚本）"><a href="#综合工具箱（强烈推荐，集成了很多脚本）" class="headerlink" title="综合工具箱（强烈推荐，集成了很多脚本）"></a>综合工具箱（强烈推荐，集成了很多脚本）</h3><div class="code-wrapper"><pre><code class="hljs shell">wget -O box.sh https://raw.githubusercontent.com/BlueSkyXN/SKY-BOX/main/box.sh &amp;&amp; chmod +x box.sh &amp;&amp; clear &amp;&amp; ./box.sh</code></pre></div><h2 id="一键重装脚本-DD"><a href="#一键重装脚本-DD" class="headerlink" title="一键重装脚本(DD)"></a>一键重装脚本(DD)</h2><h3 id="脚本1-leitbogioro"><a href="#脚本1-leitbogioro" class="headerlink" title="脚本1 (leitbogioro)"></a>脚本1 (leitbogioro)</h3><div class="code-wrapper"><pre><code class="hljs bash">wget --no-check-certificate -qO InstallNET.sh <span class="hljs-string">&#x27;https://raw.githubusercontent.com/leitbogioro/Tools/master/Linux_reinstall/InstallNET.sh&#x27;</span> &amp;&amp; <span class="hljs-built_in">chmod</span> a+x InstallNET.sh</code></pre></div><h4 id="DD-成-Debian-11"><a href="#DD-成-Debian-11" class="headerlink" title="DD 成 Debian 11"></a>DD 成 Debian 11</h4><div class="code-wrapper"><pre><code class="hljs bash">bash InstallNET.sh -debian 11</code></pre></div><h4 id="DD-成-Ubuntu-20-04"><a href="#DD-成-Ubuntu-20-04" class="headerlink" title="DD 成 Ubuntu 20.04"></a>DD 成 Ubuntu 20.04</h4><div class="code-wrapper"><pre><code class="hljs bash">bash InstallNET.sh -ubuntu 20.04</code></pre></div><h4 id="DD-成-centos-7-需内存大于1-5G"><a href="#DD-成-centos-7-需内存大于1-5G" class="headerlink" title="DD 成 centos 7 (需内存大于1.5G)"></a>DD 成 centos 7 (需内存大于1.5G)</h4><div class="code-wrapper"><pre><code class="hljs bash">bash InstallNET.sh -centos 7</code></pre></div><h3 id="脚本2-萌咖"><a href="#脚本2-萌咖" class="headerlink" title="脚本2 (萌咖)"></a>脚本2 (萌咖)</h3><h4 id="DD-成-Debian-11-1"><a href="#DD-成-Debian-11-1" class="headerlink" title="DD 成 Debian 11"></a>DD 成 Debian 11</h4><div class="code-wrapper"><pre><code class="hljs shell">bash &lt;(wget --no-check-certificate -qO- &#x27;https://raw.githubusercontent.com/MoeClub/Note/master/InstallNET.sh&#x27;) -d 11 -v 64 -p 123456 -port 22</code></pre></div><h4 id="DD-成-Ubuntu-20-04-1"><a href="#DD-成-Ubuntu-20-04-1" class="headerlink" title="DD 成 Ubuntu 20.04"></a>DD 成 Ubuntu 20.04</h4><div class="code-wrapper"><pre><code class="hljs shell">bash &lt;(wget --no-check-certificate -qO- &#x27;https://raw.githubusercontent.com/MoeClub/Note/master/InstallNET.sh&#x27;) -u 20.04 -v 64 -p 123456 -port 22</code></pre></div><p> 密码: <code>123456  </code>  SSH: <code>22</code></p><h3 id="脚本3-其他"><a href="#脚本3-其他" class="headerlink" title="脚本3 (其他)"></a>脚本3 (其他)</h3><div class="code-wrapper"><pre><code class="hljs shell">wget –no-check-certificate -O AutoReinstall.sh https://git.io/AutoReinstall.sh &amp;&amp; bash AutoReinstall.sh</code></pre></div><blockquote><p> 默认的密码是 ：**<code>Pwd@CentOS</code>** 或者 <strong><code>Pwd@Linux</code></strong></p></blockquote><p>**<code>具体是哪一个密码在重装时会提示</code>**，重装完成后建议修改这个 root 密码，使用 <code>passwd</code> 命令即可修改。</p><p>这个一键重装系统的脚本 <code>自动获取IP地址</code>、<code>网关</code>、<code>子网掩码</code> 自动判断网络环境，选择国内&#x2F;外镜像，再也不用担心卡半天了超级懒人一键化，无需复杂的命令解决萌咖脚本中一些导致安装错误的问题 CentOS 7 镜像抛弃 LVM，回归 ext 4，减少不稳定因素。</p><hr><h2 id="更新组件"><a href="#更新组件" class="headerlink" title="更新组件"></a>更新组件</h2><div class="code-wrapper"><pre><code class="hljs shell">apt update -y &amp;&amp; apt install -y curl &amp;&amp; apt install -y socat &amp;&amp; apt install wget -y</code></pre></div><h3 id="升级-packages"><a href="#升级-packages" class="headerlink" title="升级 packages"></a>升级 packages</h3><div class="code-wrapper"><pre><code class="hljs shell">sudo -iapt update -yapt install wget curl sudo vim git -y</code></pre></div><h2 id="查看系统现有内核"><a href="#查看系统现有内核" class="headerlink" title="查看系统现有内核"></a>查看系统现有内核</h2><div class="code-wrapper"><pre><code class="hljs bash">dpkg  -l|grep linux-image</code></pre></div><h3 id="验证是否成功"><a href="#验证是否成功" class="headerlink" title="验证是否成功"></a>验证是否成功</h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span>  -r</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cloudflare CDN反代免费VPN高速上网，速度超快，千兆节点、解锁奈飞流媒体</title>
    <link href="/posts/c36a52b.html"/>
    <url>/posts/c36a52b.html</url>
    
    <content type="html"><![CDATA[<h1 id="Windows-系统"><a href="#Windows-系统" class="headerlink" title="Windows 系统:"></a>Windows 系统:</h1><p>v2rayN 最新版<a href="https://github.com/2dust/v2rayN/releases">下载地址&gt;&gt;</a></p><p>cloudflare<a href="https://dash.cloudflare.com/">网站链接&gt;&gt;</a></p><p>临时邮箱：<a href="https://www.linshiyouxiang.net/">https://www.linshiyouxiang.net/</a></p><p>部署代码：<a href="https://github.com/zizifn/edgetunnel/blob/main/src/worker-vless.js">https://github.com/zizifn/edgetunnel/blob/main/src/worker-vless.js</a></p><p>uuid生成：<a href="https://1024tools.com/uuid">https://1024tools.com/uuid</a></p><p>proxyIP代理IP: 103.200.112.108</p><p>免费域名注册：<a href="https://www.dynadot.com/register-your-free-link-domain">https://www.dynadot.com/register-your-free-link-domain</a></p><p>付费域名注册：<a href="http://www.namesilo.com（付费域名注册和解析[点击查看这个视频>>跳转到4分17秒处](https://www.youtube.com/watch?v=5pb4yQwu1T4)）">www.namesilo.com（付费域名注册和解析[点击查看这个视频&gt;&gt;跳转到4分17秒处](https://www.youtube.com/watch?v=5pb4yQwu1T4)）</a></p><p>workers win专用ip优选：<a href="https://jdssl.top/wp-content/uploads/2023/07/works%E4%B8%93%E7%94%A8ip%E4%BC%98%E9%80%89.zip">下载地址&gt;&gt;</a></p><p>ip查看：<a href="https://whatismyipaddress.com/">https://whatismyipaddress.com/</a></p><p>cf ip优选；<a href="https://stock.hostmonit.com/CloudFlareYes">https://stock.hostmonit.com/CloudFlareYes</a></p><p>网络测速：<a href="https://www.speedtest.net/zh-Hans">https://www.speedtest.net/zh-Hans</a></p><p>openclash转换订阅网址：<a href="https://sub-web.netlify.app/">https://sub-web.netlify.app/</a></p><h1 id="Cdn加速"><a href="#Cdn加速" class="headerlink" title="Cdn加速"></a>Cdn加速</h1><p>cdn-all.xn–b6gac.eu.org<br>cdn.xn–b6gac.eu.org<br>cdn-b100.xn–b6gac.eu.org<br>edgetunnel.anycast.eu.org<br>cdn.anycast.eu.org （亚洲地区）</p><p>1.有域名（有tls加密，443端口)，推荐！<br>Custom Domains查看——添加自定义域——填1个二级域名<br>点击自定义域，在二级域名后加&#x2F;UUID，就能看到VLESS节点URL和Clash-meta配置<br>在v2rayN导入URL，地址栏改为优选ip</p><p>2.无域名（没tls加密，80或者2052端口）<br>进去 worker.dev，加上&#x2F;uuid 就能看到 VLESS 节点 URL 和 Clash-meta 配置。v2ray,shadowrocket 等客户端要去掉 tls 加密，端口改为80或者2052，地址修为优选 i</p><h1 id="MAC-系统"><a href="#MAC-系统" class="headerlink" title="MAC 系统:"></a>MAC 系统:</h1><p>v2rayu: <a href="https://github.com/yanue/V2rayU/releases/tag/v3.8.0">下载链接&gt;&gt;</a></p><h2 id="Cloudflarest-ip优化："><a href="#Cloudflarest-ip优化：" class="headerlink" title="Cloudflarest ip优化："></a>Cloudflarest ip优化：</h2><p>mac inter :<a href="https://github.com/XIU2/CloudflareSpeedTest/releases/download/v2.2.4/CloudflareST_darwin_amd64.zip">下载地址&gt;&gt;</a></p><p>mac arm :<a href="https://github.com/XIU2/CloudflareSpeedTest/releases/download/v2.2.4/CloudflareST_darwin_arm64.zip">下载地址&gt;&gt;</a></p><p>cloudflarest ip段：<a href="https://zip.baipiao.eu.org/">下载地址&gt;&gt;</a></p><p>备注：需要自行下载上方CDN IP段否则只能延迟测速。</p><p>终端：cd &#x2F;xxxx&#x2F;xxxxx&#x2F;CloudfareST</p><p>普通ip优选  </p><p>sudo .&#x2F;CloudflareST </p><p>10 个平均延迟低于 200 ms且下载速度高于3MB&#x2F;s的IP  </p><p>sudo .&#x2F;CloudflareST -url <a href="https://jp.cloudflarest.link/">https://jp.cloudflarest.link</a> -tl 200 -sl 3 -dn 10  </p><p>sudo .&#x2F;CloudflareST -url <a href="https://hkcs.cloudflarest.link/">https://hkcs.cloudflarest.link</a> -tl 200 -sl 3 -dn 10</p><p>这是测试文本，单击 “编辑” 按钮更改此文本。</p>]]></content>
    
    
    
    <tags>
      
      <tag>vpn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chrome 书签实时备份、同步方案</title>
    <link href="/posts/1e00f5f6.html"/>
    <url>/posts/1e00f5f6.html</url>
    
    <content type="html"><![CDATA[<h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><p>BookmarkHub 是一款浏览器插件，可以在不同浏览器之间同步你的书签。</p><p>适用于各大主流浏览器，如 Chrome、Firefox、Microsoft Edge 等。</p><p>它使用 GitHub 的 Gist 记录来存储浏览器的书签，可以放心安全的使用。</p><p><img src="https://r2.leshans.eu.org/2023/07/7124130c5219b8a00b66b170854f66ed.webp"><br><img src="https://r2.leshans.eu.org/2023/07/a740371de6ac09f82f1673c838a45816.webp"><br><img src="https://r2.leshans.eu.org/2023/07/ed5ac2a8e6a314e7bf1453525b389de0.webp"></p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>不需要注册特殊账号，只需要用你的 GitHub 账号的 Token 和 Gist</li><li>一键上传下载书签</li><li>一键清空本地所有书签</li><li>支持跨电脑跨浏览器同步书签</li><li>支持显示本地和远程书签的数量</li></ul><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><blockquote><p>本插件需要把书签存储到 Gist 中，所以请确保有 GitHub 账号或可以通过网络注册 GitHub 账号。</p></blockquote><ul><li><a href="https://chrome.google.com/webstore/detail/bookmarkhub-sync-bookmark/fohimdklhhcpcnpmmichieidclgfdmol">Chrome 浏览器</a></li><li><a href="https://addons.mozilla.org/zh-CN/firefox/addon/BookmarkHub/">Firefox 浏览器</a></li><li><a href="https://microsoftedge.microsoft.com/addons/detail/BookmarkHub/fdnmfpogadcljhecfhdikdecbkggfmgk">Microsoft Edge 浏览器</a></li><li>Opera 浏览器</li><li>其他基于 Chromium 内核的浏览器</li></ul><!-- USAGE EXAMPLES --><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li><a href="https://github.com/login">登陆</a> GitHub，如果没有账号请点此<a href="https://github.com/join">注册</a>。</li><li><a href="https://github.com/settings/tokens/new">创建一个可以管理 gist 的 token</a>。</li><li><a href="https://gist.github.com/">创建一个私有的 gist</a>。<strong>注意：如果是公开的 gist，你的书签是可以被他人搜索到的。</strong></li><li>在浏览器的应用商店下载 BookmarkHub，点击插件的设置按钮，在弹出的设置窗口填入 token 和 gist ID，然后你就可以上传下载书签了。</li></ol><!-- ROADMAP --><h2 id="待实现的功能"><a href="#待实现的功能" class="headerlink" title="待实现的功能"></a>待实现的功能</h2><ul><li><input disabled="" type="checkbox"> 自动同步书签</li><li><input disabled="" type="checkbox"> 支持 webdav 协议</li><li><input disabled="" type="checkbox"> 移动端</li><li><input disabled="" type="checkbox"> 导入导出</li><li><input disabled="" type="checkbox"> 分享书签</li></ul><!-- LICENSE --><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>See <code>LICENSE</code> for more information.</p><!-- CONTACT --><h2 id="Contact"><a href="#Contact" class="headerlink" title="Contact"></a>Contact</h2><p>Dudor</p><p>Project Link: <a href="https://github.com/dudor/BookmarkHub">https://github.com/dudor/BookmarkHub</a></p>]]></content>
    
    
    <categories>
      
      <category>插件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>书签</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何在 VM 虚拟机上安装 macOS 14 索诺玛 最新系统?</title>
    <link href="/posts/542ce268.html"/>
    <url>/posts/542ce268.html</url>
    
    <content type="html"><![CDATA[<h1 id="如果你想在-Windows-电脑上体验苹果最新的-macOS-14-Sonoma-系统！"><a href="#如果你想在-Windows-电脑上体验苹果最新的-macOS-14-Sonoma-系统！" class="headerlink" title="如果你想在 Windows 电脑上体验苹果最新的 macOS 14 Sonoma 系统！"></a>如果你想在 Windows 电脑上体验苹果最新的 macOS 14 Sonoma 系统！</h1><h1 id="那么跟着我步骤来进行安装吧"><a href="#那么跟着我步骤来进行安装吧" class="headerlink" title="那么跟着我步骤来进行安装吧~"></a>那么跟着我步骤来进行安装吧~</h1><p><img src="https://r2.leshans.eu.org/2023/07/32ada962f6d5bcfa802f9917c1f1a24c.webp"></p><h1 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h1><p>1、首先下载并安装 VMWare 虚拟机软件<strong>【<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">官网下载</a>】</strong></p><ol start="2"><li>下载<strong>【<a href="https://github.com/paolo-projects/unlocker">VMWare Unlocker】</a><strong>，</strong>以管理员身份运行 win-install</strong></li></ol><p>3.下载 macOS 14 索诺玛 （Sonoma）的 ISO 系统文件【**<a href="https://www.mediafire.com/file/lzlounvkwazy948/macOS+Sonoma+ISO.iso/file">点击下载</a>**】</p><p>4.创建虚拟机，转到<strong>我的文档 -&gt; 虚拟机 -&gt; macOS 14 虚拟机文件，</strong></p><p>然后在 <strong>右键单击</strong>​​ 2 KB 的<strong>macOS 14 (.VMX) 文件，然后选择****使用记事本打开，并在底部输入以下内容：</strong></p><div class="code-wrapper"><pre><code class="hljs none">smc.version = &quot;0&quot;</code></pre></div><p>全选代码</p><p>复制</p><p>5.正式开始安装</p><p>启用以太网：</p><p>搜索 ethernet0.virtualDev &#x3D; “e1000e” 并将 <strong>e1000e</strong>替换 为 <strong>vmxnet3</strong> 并保存文件。</p>]]></content>
    
    
    <categories>
      
      <category>系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>虚拟机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker 一键安装脚本</title>
    <link href="/posts/9d5b5206.html"/>
    <url>/posts/9d5b5206.html</url>
    
    <content type="html"><![CDATA[<h2 id="官方脚本-（推荐）"><a href="#官方脚本-（推荐）" class="headerlink" title="官方脚本 （推荐）"></a>官方脚本 （推荐）</h2><div class="code-wrapper"><pre><code class="hljs bash">curl -fsSL https://get.docker.com | shcurl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/latest/download/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose<span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose</code></pre></div><h3 id="查看-Docker-版本-（含-Docker-compose）"><a href="#查看-Docker-版本-（含-Docker-compose）" class="headerlink" title="查看 Docker 版本 （含 Docker compose）"></a>查看 Docker 版本 （含 Docker compose）</h3><div class="code-wrapper"><pre><code class="hljs bash">docker --version&amp;&amp;docker-compose --version</code></pre></div><h2 id="脚本01"><a href="#脚本01" class="headerlink" title="脚本01"></a>脚本01</h2><h3 id="Docker-一键安装脚本"><a href="#Docker-一键安装脚本" class="headerlink" title="Docker 一键安装脚本"></a>Docker 一键安装脚本</h3><div class="code-wrapper"><pre><code class="hljs bash">bash &lt;(curl -sSL https://linuxmirrors.cn/docker.sh)</code></pre></div><p><strong>其他</strong></p><div class="code-wrapper"><pre><code class="hljs bash">bash &lt;(curl -sSL https://gitee.com/SuperManito/LinuxMirrors/raw/main/DockerInstallation.sh)</code></pre></div><p><strong>或者</strong></p><div class="code-wrapper"><pre><code class="hljs bash">bash &lt;(curl -sSL https://raw.githubusercontent.com/SuperManito/LinuxMirrors/main/DockerInstallation.sh)</code></pre></div><h3 id="脚本说明："><a href="#脚本说明：" class="headerlink" title="脚本说明："></a>脚本说明：</h3><p>脚本集成安装 <a href="https://docs.docker.com/engine"><code>Docker Engine</code></a>，可选择安装版本、下载软件源、镜像加速器，支持海内外服务器环境和 <code>arm</code> 架构处理器环境使用</p><p><code>Docker CE</code> 软件仓库，全称 Docker Community Edition (Docker 社区版)，用于下载并安装 Docker 相关软件包<br><code>Docker Registry</code> 镜像仓库，用于控制下载镜像的来源存储仓库，又称镜像加速器，默认为官方提供 Docker Hub 仓库</p><h2 id="脚本02"><a href="#脚本02" class="headerlink" title="脚本02"></a>脚本02</h2><h3 id="Docker-一键安装脚本-1"><a href="#Docker-一键安装脚本-1" class="headerlink" title="Docker 一键安装脚本"></a>Docker 一键安装脚本</h3><div class="code-wrapper"><pre><code class="hljs bash">bash &lt;(curl -sSL https://cdn.jsdelivr.net/gh/SuperManito/LinuxMirrors@main/DockerInstallation.sh)</code></pre></div><h3 id="脚本说明：-1"><a href="#脚本说明：-1" class="headerlink" title="脚本说明："></a>脚本说明：</h3><p>脚本集成安装 <a href="https://docs.docker.com/engine"><code>Docker Engine</code></a>，可选择安装版本、下载软件源、镜像加速器，支持海内外服务器环境和 <code>arm</code> 架构处理器环境使用</p><p><code>Docker CE</code> 软件仓库，全称 Docker Community Edition (Docker 社区版)，用于下载并安装 Docker 相关软件包<br><code>Docker Registry</code> 镜像仓库，用于控制下载镜像的来源存储仓库，又称镜像加速器，默认为官方提供 Docker Hub 仓库</p><h2 id="卸载docker"><a href="#卸载docker" class="headerlink" title="卸载docker"></a>卸载docker</h2><h3 id="CentOS-卸载-Docker"><a href="#CentOS-卸载-Docker" class="headerlink" title="CentOS 卸载 Docker"></a>CentOS 卸载 Docker</h3><div class="code-wrapper"><pre><code class="hljs shell">sudo yum remove docker \docker-client \docker-client-latest \docker-common \docker-latest \docker-latest-logrotate \docker-logrotate \docker-selinux \docker-engine-selinux \docker-engine</code></pre></div><h3 id="Debian-Ubuntu-卸载-Docker"><a href="#Debian-Ubuntu-卸载-Docker" class="headerlink" title="Debian &#x2F; Ubuntu 卸载 Docker"></a>Debian &#x2F; Ubuntu 卸载 Docker</h3><div class="code-wrapper"><pre><code class="hljs shell">sudo apt-get remove docker docker-engine docker.io containerd runc</code></pre></div><h3 id="其他方式卸载-Docker"><a href="#其他方式卸载-Docker" class="headerlink" title="其他方式卸载 Docker"></a>其他方式卸载 Docker</h3><div class="code-wrapper"><pre><code class="hljs shell">sudo apt-get purge docker-ce docker-ce-cli containerd.io</code></pre></div><p>继续</p><div class="code-wrapper"><pre><code class="hljs bash">sudo <span class="hljs-built_in">rm</span> -rf /var/lib/docker  sudo <span class="hljs-built_in">rm</span> -rf /var/lib/containerd</code></pre></div><p>接着</p><div class="code-wrapper"><pre><code class="hljs bash">apt-get remove -y docker* containerd.io podman* runc &amp;&amp; apt-get autoremove</code></pre></div><h3 id="关于-docker-报错无法启动"><a href="#关于-docker-报错无法启动" class="headerlink" title="关于 docker 报错无法启动"></a>关于 docker 报错无法启动</h3><p>非新装环境可能会在运行脚本后遇到 <code>Docker</code> 服务无法启动的情况，建议重新安装来解决.</p><p>卸载完成后重新执行脚本安装即可, 卸载不会删除镜像和容器数据.</p><p>卸载命令如下 :</p><div class="code-wrapper"><pre><code class="hljs bash">apt-get remove -y docker* containerd.io podman* runc &amp;&amp; apt-get autoremove</code></pre></div><h3 id="重新安装出现的问题"><a href="#重新安装出现的问题" class="headerlink" title="重新安装出现的问题"></a>重新安装出现的问题</h3><p>重启 docker</p><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart docker</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
